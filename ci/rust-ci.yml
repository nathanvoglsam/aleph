# defaults for any parameters that aren't specified
parameters:
  - name: rust
    type: string
    default: stable
  - name: components
    type: object
    default: []
  - name: targets
    type: object
    default: []
  - name: setupSteps
    type: stepList
    default: []

steps:
  ## First we need to configure how the project is pulled down

  - checkout: self
    lfs: true
    submodules: recursive

  ## Then we install the rust toolchain through w/e platform specific means are required

  # Linux and macOS.
  - script: |
      set -e
      curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    env:
      RUSTUP_TOOLCHAIN: ${{parameters.rust}}
    displayName: "Install rust (*nix)"
    condition: not(eq(variables['Agent.OS'], 'Windows_NT'))

  # Windows.
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --profile minimal --default-toolchain %RUSTUP_TOOLCHAIN% --default-host x86_64-pc-windows-msvc
      set PATH=%PATH%;%USERPROFILE%\.cargo\bin
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    env:
      RUSTUP_TOOLCHAIN: ${{parameters.rust}}
    displayName: "Install rust (windows)"
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  ## Tell rust to use the toolchain we want it to

  # Set correct toolchain
  - bash: |
      rustup default $RUSTUP_TOOLCHAIN
      rustup update $RUSTUP_TOOLCHAIN
    env:
      RUSTUP_TOOLCHAIN: ${{parameters.rust}}
    displayName: "Set correct Rust version"

  ## Section for installing some extra stuff through rustup

  # Install additional targets:
  - ${{ each target in parameters.targets }}:
      - script: rustup target add ${{ target }}
        displayName: "Adding target '${{ target }}'"

  # Install additional components:
  - ${{ each component in parameters.components }}:
      - script: rustup component add ${{ component }}
        displayName: "Adding component '${{ component }}'"

  ## Dump the version info so we can debug what compiler version we're on

  # See what we got
  - powershell: |
      rustc --version
      cargo --version
      rustup --version
    displayName: Check installed rust version

  ## Now we get to the user inserted part

  # Mark the next phase as the setup phase
  - script: |
      echo "Setup"
    displayName: Setup

  # Run w/e setup steps the user of the template wants
  - ${{ each step in parameters.setupSteps }}:
      - ${{ each pair in step }}:
          ${{ pair.key }}: ${{ pair.value }}

  # The actual build
  - powershell: |
      refreshenv
      cargo build --release
    displayName: Build

  - powershell: |
      refreshenv
      cargo test --release
    displayName: Test
