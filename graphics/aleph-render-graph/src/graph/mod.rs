//
//
// This file is a part of Aleph
//
// <ALEPH_REPO_REPLACE>
//
// <ALEPH_LICENSE_REPLACE>
//

mod closure_pass;

use crate::RenderGraphBuilder;
use crate::ResourceAccess;
pub use closure_pass::ClosurePass;

pub(crate) const PASS_INDEX_EXTERNAL: usize = usize::max_value();

///
/// The trait that specifies the required interface for a render graph node
///
pub trait RenderGraphPass {
    ///
    /// Function called while building the graph for registering resource accesses by this pass.
    ///
    fn register_access(&mut self, accesses: &mut ResourceAccess);

    ///
    /// This will be called during render graph construction, after concrete resources have been
    /// created to allow for the pass to compile any objects that need to refer to resources
    /// generated by the graph, such as for compiling pipeline state objects, render passes, frame
    /// buffers, etc.
    ///
    fn compile(&mut self);

    ///
    /// Record the commands for this pass onto a command buffer. Appropriate barriers will be
    /// already be recorded into the command buffer.
    ///
    fn record(&mut self);
}

///
/// Internal struct for
///
pub(crate) struct GraphLink {
    pub depends_on: Vec<usize>,
    pub waited_on_by: Vec<usize>,
}

///
/// A built render graph
///
pub struct RenderGraph<'a> {
    ///
    /// Storage for the actual pass objects
    ///
    pub(crate) passes: Vec<Box<dyn RenderGraphPass + 'a>>,

    ///
    /// Holds the dependency links between a pass and what it depends on and what passes wait on it.
    ///
    pub(crate) links: Vec<GraphLink>,

    ///
    /// The set of resources read to and written by each pass,
    ///
    pub(crate) accesses: Vec<ResourceAccess>,
}

impl<'a> RenderGraph<'a> {
    ///
    /// Returns a new builder instance
    ///
    pub fn builder() -> RenderGraphBuilder<'a> {
        RenderGraphBuilder::new()
    }
}
