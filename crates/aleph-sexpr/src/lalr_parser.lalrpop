//
//
// This file is a part of Aleph
//
// https://github.com/nathanvoglsam/aleph
//
// MIT License
//
// Copyright (c) 2020 Aleph Engine
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

grammar<'input>;

extern {
    type Location = usize;
    type Error = crate::lexer::Error;

    enum crate::lexer::Tok<'input> {
        "word" => crate::lexer::Tok::Word(<&'input str>),
        "string" => crate::lexer::Tok::StringLiteral(<&'input str>),
        "(" => crate::lexer::Tok::ParenOpen,
        ")" => crate::lexer::Tok::ParenClose,
    }
}

pub File: crate::ast::List = {
    <ItemList*>
}

// ============================================================================================== //
// ============================================================================================== //
// ============================================================================================== //

/// A singular item
pub Item = {
    <ItemList>,
    <ItemAtom>,
}

/// A list wrapped as an ast::Item
ItemList: crate::ast::Item = {
    <l:List> => crate::ast::Item { position: 0, item: l.into() },
}

/// An atom wrapped as an ast::Item
ItemAtom: crate::ast::Item = {
    <a:Atom> => crate::ast::Item { position: 0, item: a.into() },
}

// ============================================================================================== //
// ============================================================================================== //
// ============================================================================================== //

pub List: crate::ast::List = {
    "(" <Item*> ")",
}

// ============================================================================================== //
// ============================================================================================== //
// ============================================================================================== //

/// An atom, which is either a word or string literal
pub Atom: crate::ast::Atom = {
    <s: "string"> => crate::ast::Atom::string(s),
    <w: "word"> => crate::ast::Atom::word(w),
}
