//
//
// This file is a part of Aleph
//
// https://github.com/nathanvoglsam/aleph
//
// MIT License
//
// Copyright (c) 2020 Aleph Engine
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

use crate::code::OpCodeType;

#[derive(Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Hash, Debug)]
pub enum OpCodeNumber {
    OpMov = 0,
    OpInt = 1,
    OpFloat = 2,
    OpBool = 3,
    OpBytes = 4,
    OpString = 5,
    OpNull = 6,
    OpAdd = 7,
    OpSub = 8,
    OpMul = 9,
    OpSDiv = 10,
    OpUDiv = 11,
    OpSMod = 12,
    OpUMod = 13,
    OpShl = 14,
    OpSShr = 15,
    OpUShr = 16,
    OpAnd = 17,
    OpOr = 18,
    OpXor = 19,
    OpNeg = 20,
    OpNot = 21,
    OpIncr = 22,
    OpDecr = 23,
    OpCall0 = 24,
    OpCall1 = 25,
    OpCall2 = 26,
    OpCall3 = 27,
    OpCall4 = 28,
    OpCallN = 29,
    OpCallMethod = 30,
    OpCallThis = 31,
    OpCallClosure = 32,
    OpStaticClosure = 33,
    OpInstanceClosure = 34,
    OpVirtualClosure = 35,
    OpGetGlobal = 36,
    OpSetGlobal = 37,
    OpField = 38,
    OpSetField = 39,
    OpGetThis = 40,
    OpSetThis = 41,
    OpDynGet = 42,
    OpDynSet = 43,
    OpJTrue = 44,
    OpJFalse = 45,
    OpJNull = 46,
    OpJNotNull = 47,
    OpJSLt = 48,
    OpJSGte = 49,
    OpJSGt = 50,
    OpJSLte = 51,
    OpJULt = 52,
    OpJUGte = 53,
    OpJNotLt = 54,
    OpJNotGte = 55,
    OpJEq = 56,
    OpJNotEq = 57,
    OpJAlways = 58,
    OpToDyn = 59,
    OpToSFloat = 60,
    OpToUFloat = 61,
    OpToInt = 62,
    OpSafeCast = 63,
    OpUnsafeCast = 64,
    OpToVirtual = 65,
    OpLabel = 66,
    OpRet = 67,
    OpThrow = 68,
    OpRethrow = 69,
    OpSwitch = 70,
    OpNullCheck = 71,
    OpTrap = 72,
    OpEndTrap = 73,
    OpGetI8 = 74,
    OpGetI16 = 75,
    OpGetMem = 76,
    OpGetArray = 77,
    OpSetI8 = 78,
    OpSetI16 = 79,
    OpSetMem = 80,
    OpSetArray = 81,
    OpNew = 82,
    OpArraySize = 83,
    OpType = 84,
    OpGetType = 85,
    OpGetTID = 86,
    OpRef = 87,
    OpUnref = 88,
    OpSetref = 89,
    OpMakeEnum = 90,
    OpEnumAlloc = 91,
    OpEnumIndex = 92,
    OpEnumField = 93,
    OpSetEnumField = 94,
    OpAssert = 95,
    OpRefData = 96,
    OpRefOffset = 97,
    OpNop = 98,
}

impl OpCodeNumber {
    pub fn opcode_type(&self) -> OpCodeType {
        match self {
            OpCodeNumber::OpLabel => OpCodeType::OpNoParam,
            OpCodeNumber::OpAssert => OpCodeType::OpNoParam,
            OpCodeNumber::OpNop => OpCodeType::OpNoParam,
            OpCodeNumber::OpNull => OpCodeType::OpOneParam,
            OpCodeNumber::OpIncr => OpCodeType::OpOneParam,
            OpCodeNumber::OpDecr => OpCodeType::OpOneParam,
            OpCodeNumber::OpJAlways => OpCodeType::OpOneParam,
            OpCodeNumber::OpRet => OpCodeType::OpOneParam,
            OpCodeNumber::OpThrow => OpCodeType::OpOneParam,
            OpCodeNumber::OpRethrow => OpCodeType::OpOneParam,
            OpCodeNumber::OpNullCheck => OpCodeType::OpOneParam,
            OpCodeNumber::OpEndTrap => OpCodeType::OpOneParam,
            OpCodeNumber::OpNew => OpCodeType::OpOneParam,
            OpCodeNumber::OpMov => OpCodeType::OpTwoParam,
            OpCodeNumber::OpInt => OpCodeType::OpTwoParam,
            OpCodeNumber::OpFloat => OpCodeType::OpTwoParam,
            OpCodeNumber::OpBool => OpCodeType::OpTwoParam,
            OpCodeNumber::OpBytes => OpCodeType::OpTwoParam,
            OpCodeNumber::OpString => OpCodeType::OpTwoParam,
            OpCodeNumber::OpNeg => OpCodeType::OpTwoParam,
            OpCodeNumber::OpNot => OpCodeType::OpTwoParam,
            OpCodeNumber::OpCall0 => OpCodeType::OpTwoParam,
            OpCodeNumber::OpStaticClosure => OpCodeType::OpTwoParam,
            OpCodeNumber::OpGetGlobal => OpCodeType::OpTwoParam,
            OpCodeNumber::OpSetGlobal => OpCodeType::OpTwoParam,
            OpCodeNumber::OpGetThis => OpCodeType::OpTwoParam,
            OpCodeNumber::OpSetThis => OpCodeType::OpTwoParam,
            OpCodeNumber::OpJTrue => OpCodeType::OpTwoParam,
            OpCodeNumber::OpJFalse => OpCodeType::OpTwoParam,
            OpCodeNumber::OpJNull => OpCodeType::OpTwoParam,
            OpCodeNumber::OpJNotNull => OpCodeType::OpTwoParam,
            OpCodeNumber::OpToDyn => OpCodeType::OpTwoParam,
            OpCodeNumber::OpToSFloat => OpCodeType::OpTwoParam,
            OpCodeNumber::OpToUFloat => OpCodeType::OpTwoParam,
            OpCodeNumber::OpToInt => OpCodeType::OpTwoParam,
            OpCodeNumber::OpSafeCast => OpCodeType::OpTwoParam,
            OpCodeNumber::OpUnsafeCast => OpCodeType::OpTwoParam,
            OpCodeNumber::OpToVirtual => OpCodeType::OpTwoParam,
            OpCodeNumber::OpTrap => OpCodeType::OpTwoParam,
            OpCodeNumber::OpArraySize => OpCodeType::OpTwoParam,
            OpCodeNumber::OpType => OpCodeType::OpTwoParam,
            OpCodeNumber::OpGetType => OpCodeType::OpTwoParam,
            OpCodeNumber::OpGetTID => OpCodeType::OpTwoParam,
            OpCodeNumber::OpRef => OpCodeType::OpTwoParam,
            OpCodeNumber::OpUnref => OpCodeType::OpTwoParam,
            OpCodeNumber::OpSetref => OpCodeType::OpTwoParam,
            OpCodeNumber::OpEnumAlloc => OpCodeType::OpTwoParam,
            OpCodeNumber::OpEnumIndex => OpCodeType::OpTwoParam,
            OpCodeNumber::OpRefData => OpCodeType::OpTwoParam,
            OpCodeNumber::OpAdd => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSub => OpCodeType::OpThreeParam,
            OpCodeNumber::OpMul => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSDiv => OpCodeType::OpThreeParam,
            OpCodeNumber::OpUDiv => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSMod => OpCodeType::OpThreeParam,
            OpCodeNumber::OpUMod => OpCodeType::OpThreeParam,
            OpCodeNumber::OpShl => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSShr => OpCodeType::OpThreeParam,
            OpCodeNumber::OpUShr => OpCodeType::OpThreeParam,
            OpCodeNumber::OpAnd => OpCodeType::OpThreeParam,
            OpCodeNumber::OpOr => OpCodeType::OpThreeParam,
            OpCodeNumber::OpXor => OpCodeType::OpThreeParam,
            OpCodeNumber::OpCall1 => OpCodeType::OpThreeParam,
            OpCodeNumber::OpInstanceClosure => OpCodeType::OpThreeParam,
            OpCodeNumber::OpVirtualClosure => OpCodeType::OpThreeParam,
            OpCodeNumber::OpField => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSetField => OpCodeType::OpThreeParam,
            OpCodeNumber::OpDynGet => OpCodeType::OpThreeParam,
            OpCodeNumber::OpDynSet => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJSLt => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJSGte => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJSGt => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJSLte => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJULt => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJUGte => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJNotLt => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJNotGte => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJEq => OpCodeType::OpThreeParam,
            OpCodeNumber::OpJNotEq => OpCodeType::OpThreeParam,
            OpCodeNumber::OpGetI8 => OpCodeType::OpThreeParam,
            OpCodeNumber::OpGetI16 => OpCodeType::OpThreeParam,
            OpCodeNumber::OpGetMem => OpCodeType::OpThreeParam,
            OpCodeNumber::OpGetArray => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSetI8 => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSetI16 => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSetMem => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSetArray => OpCodeType::OpThreeParam,
            OpCodeNumber::OpSetEnumField => OpCodeType::OpThreeParam,
            OpCodeNumber::OpRefOffset => OpCodeType::OpThreeParam,
            OpCodeNumber::OpEnumField => OpCodeType::OpFourParam,
            OpCodeNumber::OpCall2 => OpCodeType::OpFourParam,
            OpCodeNumber::OpCall3 => OpCodeType::OpFiveParam,
            OpCodeNumber::OpCall4 => OpCodeType::OpSixParam,
            OpCodeNumber::OpCallN => OpCodeType::OpCallNParam,
            OpCodeNumber::OpCallMethod => OpCodeType::OpCallNParam,
            OpCodeNumber::OpCallThis => OpCodeType::OpCallNParam,
            OpCodeNumber::OpCallClosure => OpCodeType::OpCallNParam,
            OpCodeNumber::OpMakeEnum => OpCodeType::OpCallNParam,
            OpCodeNumber::OpSwitch => OpCodeType::OpSwitchParam,
        }
    }
    pub fn from_raw(raw: u8) -> Option<OpCodeNumber> {
        match raw {
            0 => Some(OpCodeNumber::OpMov),
            1 => Some(OpCodeNumber::OpInt),
            2 => Some(OpCodeNumber::OpFloat),
            3 => Some(OpCodeNumber::OpBool),
            4 => Some(OpCodeNumber::OpBytes),
            5 => Some(OpCodeNumber::OpString),
            6 => Some(OpCodeNumber::OpNull),
            7 => Some(OpCodeNumber::OpAdd),
            8 => Some(OpCodeNumber::OpSub),
            9 => Some(OpCodeNumber::OpMul),
            10 => Some(OpCodeNumber::OpSDiv),
            11 => Some(OpCodeNumber::OpUDiv),
            12 => Some(OpCodeNumber::OpSMod),
            13 => Some(OpCodeNumber::OpUMod),
            14 => Some(OpCodeNumber::OpShl),
            15 => Some(OpCodeNumber::OpSShr),
            16 => Some(OpCodeNumber::OpUShr),
            17 => Some(OpCodeNumber::OpAnd),
            18 => Some(OpCodeNumber::OpOr),
            19 => Some(OpCodeNumber::OpXor),
            20 => Some(OpCodeNumber::OpNeg),
            21 => Some(OpCodeNumber::OpNot),
            22 => Some(OpCodeNumber::OpIncr),
            23 => Some(OpCodeNumber::OpDecr),
            24 => Some(OpCodeNumber::OpCall0),
            25 => Some(OpCodeNumber::OpCall1),
            26 => Some(OpCodeNumber::OpCall2),
            27 => Some(OpCodeNumber::OpCall3),
            28 => Some(OpCodeNumber::OpCall4),
            29 => Some(OpCodeNumber::OpCallN),
            30 => Some(OpCodeNumber::OpCallMethod),
            31 => Some(OpCodeNumber::OpCallThis),
            32 => Some(OpCodeNumber::OpCallClosure),
            33 => Some(OpCodeNumber::OpStaticClosure),
            34 => Some(OpCodeNumber::OpInstanceClosure),
            35 => Some(OpCodeNumber::OpVirtualClosure),
            36 => Some(OpCodeNumber::OpGetGlobal),
            37 => Some(OpCodeNumber::OpSetGlobal),
            38 => Some(OpCodeNumber::OpField),
            39 => Some(OpCodeNumber::OpSetField),
            40 => Some(OpCodeNumber::OpGetThis),
            41 => Some(OpCodeNumber::OpSetThis),
            42 => Some(OpCodeNumber::OpDynGet),
            43 => Some(OpCodeNumber::OpDynSet),
            44 => Some(OpCodeNumber::OpJTrue),
            45 => Some(OpCodeNumber::OpJFalse),
            46 => Some(OpCodeNumber::OpJNull),
            47 => Some(OpCodeNumber::OpJNotNull),
            48 => Some(OpCodeNumber::OpJSLt),
            49 => Some(OpCodeNumber::OpJSGte),
            50 => Some(OpCodeNumber::OpJSGt),
            51 => Some(OpCodeNumber::OpJSLte),
            52 => Some(OpCodeNumber::OpJULt),
            53 => Some(OpCodeNumber::OpJUGte),
            54 => Some(OpCodeNumber::OpJNotLt),
            55 => Some(OpCodeNumber::OpJNotGte),
            56 => Some(OpCodeNumber::OpJEq),
            57 => Some(OpCodeNumber::OpJNotEq),
            58 => Some(OpCodeNumber::OpJAlways),
            59 => Some(OpCodeNumber::OpToDyn),
            60 => Some(OpCodeNumber::OpToSFloat),
            61 => Some(OpCodeNumber::OpToUFloat),
            62 => Some(OpCodeNumber::OpToInt),
            63 => Some(OpCodeNumber::OpSafeCast),
            64 => Some(OpCodeNumber::OpUnsafeCast),
            65 => Some(OpCodeNumber::OpToVirtual),
            66 => Some(OpCodeNumber::OpLabel),
            67 => Some(OpCodeNumber::OpRet),
            68 => Some(OpCodeNumber::OpThrow),
            69 => Some(OpCodeNumber::OpRethrow),
            70 => Some(OpCodeNumber::OpSwitch),
            71 => Some(OpCodeNumber::OpNullCheck),
            72 => Some(OpCodeNumber::OpTrap),
            73 => Some(OpCodeNumber::OpEndTrap),
            74 => Some(OpCodeNumber::OpGetI8),
            75 => Some(OpCodeNumber::OpGetI16),
            76 => Some(OpCodeNumber::OpGetMem),
            77 => Some(OpCodeNumber::OpGetArray),
            78 => Some(OpCodeNumber::OpSetI8),
            79 => Some(OpCodeNumber::OpSetI16),
            80 => Some(OpCodeNumber::OpSetMem),
            81 => Some(OpCodeNumber::OpSetArray),
            82 => Some(OpCodeNumber::OpNew),
            83 => Some(OpCodeNumber::OpArraySize),
            84 => Some(OpCodeNumber::OpType),
            85 => Some(OpCodeNumber::OpGetType),
            86 => Some(OpCodeNumber::OpGetTID),
            87 => Some(OpCodeNumber::OpRef),
            88 => Some(OpCodeNumber::OpUnref),
            89 => Some(OpCodeNumber::OpSetref),
            90 => Some(OpCodeNumber::OpMakeEnum),
            91 => Some(OpCodeNumber::OpEnumAlloc),
            92 => Some(OpCodeNumber::OpEnumIndex),
            93 => Some(OpCodeNumber::OpEnumField),
            94 => Some(OpCodeNumber::OpSetEnumField),
            95 => Some(OpCodeNumber::OpAssert),
            96 => Some(OpCodeNumber::OpRefData),
            97 => Some(OpCodeNumber::OpRefOffset),
            98 => Some(OpCodeNumber::OpNop),
            _ => None,
        }
    }
}
