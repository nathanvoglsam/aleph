[Int Table]
    #0  0
    #1  10
    #2  1
    #3  6
    #4  65536
    #5  55296
    #6  57343
    #7  21
    #8  4
    #9  2
    #10 1114112
    #11 1023
    #12 56320
    #13 -1
    #14 8
    #15 3
    #16 9
    #17 5
    #18 26
    #19 12
    #20 15
    #21 91
    #22 44
    #23 93
    #24 20
    #25 -16280745
    #26 360
    #27 420
    #28 7
    #29 17

[Float Table]
    #0  0
    #1  1
    #2  2
    #3  3
    #4  21.4
    #5  56.2
    #6  420.3
    #7  21
    #8  21.1
    #9  56.1
    #10 2.1

[String Table]
    #0   String
    #1   bytes
    #2   length
    #3   toUpperCase
    #4   toLowerCase
    #5   charAt
    #6   charCodeAt
    #7   findChar
    #8   indexOf
    #9   lastIndexOf
    #10  split
    #11  substr
    #12  substring
    #13  toString
    #14  toUtf8
    #15  __string
    #16  __compare
    #17  $String
    #18  hl.Class
    #19  hl.BaseType
    #20  __type__
    #21  __meta__
    #22  __implementedBy__
    #23  check
    #24  hl.$BaseType
    #25  __name__
    #26  __constructor__
    #27  fromCharCode
    #28  __alloc__
    #29  call_toString
    #30  fromUCS2
    #31  fromUTF8
    #32  __add__
    #33  
    #34  date_new
    #35  std
    #36  date_to_string
    #37  Date
    #38  t
    #39  $Date
    #40  year
    #41  month
    #42  day
    #43  hour
    #44  min
    #45  sec
    #46  outLen
    #47  hl_random
    #48  rnd_init_system
    #49  v
    #50  s
    #51  len
    #52  a
    #53  b
    #54  ta
    #55  tb
    #56  Can't add 
    #57  (
    #58  ) and 
    #59  )
    #60  code
    #61  Invalid unicode char 
    #62  itos
    #63  b2
    #64  null
    #65  asize
    #66  bsize
    #67  tot
    #68  string
    #69  index
    #70  start
    #71  src
    #72  srcLen
    #73  p
    #74  str
    #75  startIndex
    #76  startByte
    #77  max
    #78  pos
    #79  slen
    #80  hl.types.ArrayObj
    #81  hl.types.ArrayBase
    #82  hl.types.ArrayAccess
    #83  getDyn
    #84  setDyn
    #85  blit
    #86  hl.types.$ArrayAccess
    #87  pushDyn
    #88  popDyn
    #89  shiftDyn
    #90  unshiftDyn
    #91  insertDyn
    #92  containsDyn
    #93  removeDyn
    #94  sortDyn
    #95  slice
    #96  splice
    #97  join
    #98  reverse
    #99  resize
    #100 __cast
    #101 isArrayObj
    #102 hl.types.$ArrayBase
    #103 allocI32
    #104 allocUI16
    #105 allocF32
    #106 allocF64
    #107 array
    #108 concat
    #109 pop
    #110 push
    #111 shift
    #112 sort
    #113 unshift
    #114 insert
    #115 contains
    #116 remove
    #117 copy
    #118 iterator
    #119 keyValueIterator
    #120 map
    #121 filter
    #122 __expand
    #123 hl.types.ArrayBytes_Float
    #124 size
    #125 hl.types.ArrayBytes_hl_F32
    #126 hl.types.$ArrayBytes_hl_F32
    #127 hl.types.ArrayBytes_hl_UI16
    #128 hl.types.ArrayBytes_Int
    #129 delimiter
    #130 alloc_array
    #131 out
    #132 dlen
    #133 sl
    #134 endIndex
    #135 end
    #136 tmp
    #137 StringBuf
    #138 add
    #139 addChar
    #140 $StringBuf
    #141 x
    #142 sbytes
    #143 c
    #144 SysError
    #145 msg
    #146 $SysError
    #147 SysError(
    #148 bytes_blit
    #149 alloc_bytes
    #150 bytes_compare
    #151 bytes_compare16
    #152 bytes_find
    #153 bytes_fill
    #154 bsort_i32
    #155 bsort_f64
    #156 this1
    #157 ucs2length
    #158 utf8_to_utf16
    #159 utf16_to_utf8
    #160 ucs2_upper
    #161 ucs2_lower
    #162 value_to_string
    #163 

    #164 sys_utf8_path
    #165 sys_print
    #166 hl_bytes_map
    #167 ct
    #168 name
    #169 hl.Enum
    #170 __ename__
    #171 __emap__
    #172 __constructs__
    #173 __evalues__
    #174 hl.$Enum
    #175 et
    #176 e
    #177 cl
    #178 i
    #179 haxe.Exception
    #180 __exceptionMessage
    #181 __nativeStack
    #182 __skipStack
    #183 __nativeException
    #184 __previousException
    #185 unwrap
    #186 get_message
    #187 get_native
    #188 haxe.$Exception
    #189 caught
    #190 thrown
    #191 value
    #192 haxe.ValueException
    #193 haxe.$ValueException
    #194 message
    #195 previous
    #196 native
    #197 exception
    #198 exception_stack
    #199 stack
    #200 skip
    #201 NativeStackTrace.callStack
    #202 hl.types.ArrayDyn
    #203 allowReinterpret
    #204 get_length
    #205 __get_field
    #206 cmp
    #207 from
    #208 to
    #209 middle
    #210 j
    #211 pivot
    #212 len1
    #213 len2
    #214 len11
    #215 first_cut
    #216 second_cut
    #217 len22
    #218 new_mid
    #219 mid
    #220 n
    #221 val
    #222 p1
    #223 p2
    #224 m
    #225 half
    #226 haxe.iterators.ArrayIterator
    #227 current
    #228 hasNext
    #229 next
    #230 haxe.iterators.$ArrayIterator
    #231 haxe.iterators.ArrayKeyValueIterator
    #232 haxe.iterators.$ArrayKeyValueIterator
    #233 obj_get_field
    #234 obj_set_field
    #235 obj_has_field
    #236 obj_delete_field
    #237 call_method
    #238 get_closure_value
    #239 make_closure
    #240 no_closure
    #241 value_cast
    #242 make_var_args
    #243 get_virtual_value
    #244 set_error_handler
    #245 breakpoint
    #246 sys_is64
    #247 ptr_compare
    #248 v2
    #249 array_type
    #250 array_blit
    #251 type_name
    #252 type_safe_cast
    #253 type_set_global
    #254 type_enum_fields
    #255 type_enum_values
    #256 alloc_obj
    #257 Not implemented
    #258 srcpos
    #259 f
    #260 sep
    #261 ac
    #262 offset
    #263 k
    #264 haxe.io.Error
    #265 Blocked
    #266 Overflow
    #267 OutsideBounds
    #268 Custom
    #269 haxe.io.$Error
    #270 pend
    #271 ret
    #272 idx
    #273 fromIndex
    #274 hl.types.BytesIterator_Float
    #275 hl.types.$BytesIterator_Float
    #276 hl.types.BytesKeyValueIterator_Float
    #277 hl.types.$BytesKeyValueIterator_Float
    #278 Invalid array index 
    #279 newlen
    #280 bytes2
    #281 hl.types.BytesIterator_Int
    #282 hl.types.$BytesIterator_Int
    #283 hl.types.BytesKeyValueIterator_Int
    #284 hl.types.$BytesKeyValueIterator_Int
    #285 hl.types.BytesIterator_hl_F32
    #286 hl.types.$BytesIterator_hl_F32
    #287 hl.types.BytesKeyValueIterator_hl_F32
    #288 hl.types.$BytesKeyValueIterator_hl_F32
    #289 hl.types.BytesIterator_hl_UI16
    #290 hl.types.$BytesIterator_hl_UI16
    #291 hl.types.BytesKeyValueIterator_hl_UI16
    #292 hl.types.$BytesKeyValueIterator_hl_UI16
    #293 hl.types.ArrayDynIterator
    #294 hl.types.$ArrayDynIterator
    #295 hl.types.ArrayDynKeyValueIterator
    #296 hl.types.$ArrayDynKeyValueIterator
    #297 arr
    #298 a1
    #299 a2
    #300 alen
    #301 anew
    #302 fid
    #303 hl.types.ArrayObjIterator
    #304 hl.types.$ArrayObjIterator
    #305 hl.types.ArrayObjKeyValueIterator
    #306 hl.types.$ArrayObjKeyValueIterator
    #307 $Std
    #308 rnd
    #309 toStringDepth
    #310 isOfType
    #311 ...
    #312 arr2
    #313 key
    #314 hballoc
    #315 hbset
    #316 other.Vector3
    #317 y
    #318 z
    #319 add_looped
    #320 switch_test
    #321 switch_test2
    #322 switch_test3
    #323 exception_test1
    #324 exception_test2
    #325 other.$Vector3
    #326 compare_test
    #327 compare_test2
    #328 compare_test3
    #329 compare_test4
    #330 compare_test5
    #331 compare_test6
    #332 compare_test7
    #333 compare_test8
    #334 compare_test9
    #335 number
    #336 other.EnumValueTypeThing
    #337 X
    #338 D
    #339 LMAO
    #340 other.$EnumValueTypeThing
    #341 enumthing
    #342 test
    #343 rhs
    #344 num
    #345 result
    #346 thing
    #347 $EntryPoint
    #348 main
    #349 EntryPoint
    #350 Std
    #351 hl.CoreType
    #352 Float
    #353 Int
    #354 hl.CoreEnum
    #355 Bool
    #356 Dynamic
    #357 hl._Bytes.$Bytes_Impl_
    #358 sub
    #359 hl._Bytes.Bytes_Impl_
    #360 $Sys
    #361 utf8Path
    #362 println
    #363 Sys
    #364 $Type
    #365 init
    #366 initClass
    #367 initEnum
    #368 register
    #369 Type
    #370 haxe.$NativeStackTrace
    #371 saveStack
    #372 callStack
    #373 haxe.NativeStackTrace
    #374 haxe.ds.$ArraySort
    #375 rec
    #376 doMerge
    #377 rotate
    #378 gcd
    #379 upper
    #380 lower
    #381 swap
    #382 haxe.ds.ArraySort
    #383 Class
    #384 hl._NativeArray.$NativeArray_Impl_
    #385 hl._NativeArray.NativeArray_Impl_
    #386 hl._Type.$Type_Impl_
    #387 hl._Type.Type_Impl_
    #388 Array
    #389 hl.types.$ArrayDyn
    #390 alloc
    #391 hl.types._BytesMap.$BytesMap_Impl_
    #392 hl.types._BytesMap.BytesMap_Impl_
    #393 other.$OtherEntryPoint
    #394 test2
    #395 value_test1
    #396 value_test2
    #397 value_test3
    #398 value_test4
    #399 value_test5
    #400 value_test6
    #401 array_test1
    #402 array_test2
    #403 other.OtherEntryPoint

[Debug Files]
    #0  C:\HaxeToolkit\haxe\std/hl/_std/Date.hx
    #1  EntryPoint.hx
    #2  C:\HaxeToolkit\haxe\std/hl/_std/Std.hx
    #3  C:\HaxeToolkit\haxe\std/hl/_std/String.hx
    #4  C:\HaxeToolkit\haxe\std/hl/_std/StringBuf.hx
    #5  C:\HaxeToolkit\haxe\std/hl/_std/Sys.hx
    #6  C:\HaxeToolkit\haxe\std/hl/Bytes.hx
    #7  C:\HaxeToolkit\haxe\std/hl/_std/Type.hx
    #8  C:\HaxeToolkit\haxe\std/hl/_std/haxe/Exception.hx
    #9  C:\HaxeToolkit\haxe\std/hl/_std/haxe/NativeStackTrace.hx
    #10 C:\HaxeToolkit\haxe\std/haxe/ValueException.hx
    #11 C:\HaxeToolkit\haxe\std/haxe/ds/ArraySort.hx
    #12 ?
    #13 C:\HaxeToolkit\haxe\std/haxe/iterators/ArrayIterator.hx
    #14 C:\HaxeToolkit\haxe\std/haxe/iterators/ArrayKeyValueIterator.hx
    #15 C:\HaxeToolkit\haxe\std/hl/BaseType.hx
    #16 C:\HaxeToolkit\haxe\std/hl/types/ArrayBase.hx
    #17 C:\HaxeToolkit\haxe\std/hl/types/ArrayBytes.hx
    #18 C:\HaxeToolkit\haxe\std/hl/types/ArrayDyn.hx
    #19 C:\HaxeToolkit\haxe\std/hl/types/ArrayObj.hx
    #20 other/OtherEntryPoint.hx

[Types]
    #0   void
    #1   u8
    #2   u16
    #3   i32
    #4   i64
    #5   f32
    #6   f64
    #7   bool
    #8   type
    #9   dyn
    #10  obj<hl.BaseType>
    #11  array<void>
    #12  obj<hl.Class>
    #13  obj<String>
    #14  bytes
    #15  obj<hl.$BaseType>
    #16  obj<$String>
    #17  fn(i32, ) -> obj<String>
    #18  fn(bytes, i32, ) -> obj<String>
    #19  fn(dyn, ) -> bytes
    #20  fn(bytes, ) -> obj<String>
    #21  fn(obj<String>, obj<String>, ) -> obj<String>
    #22  obj<$Date>
    #23  obj<hl.types.$ArrayAccess>
    #24  obj<hl.types.$ArrayBase>
    #25  fn(bytes, i32, ) -> obj<hl.types.ArrayBytes_Int>
    #26  obj<hl.types.ArrayAccess>
    #27  obj<hl.types.ArrayBase>
    #28  obj<hl.types.ArrayBytes_Int>
    #29  fn(bytes, i32, ) -> obj<hl.types.ArrayBytes_hl_UI16>
    #30  obj<hl.types.ArrayBytes_hl_UI16>
    #31  fn(bytes, i32, ) -> obj<hl.types.ArrayBytes_hl_F32>
    #32  obj<hl.types.ArrayBytes_hl_F32>
    #33  fn(bytes, i32, ) -> obj<hl.types.ArrayBytes_Float>
    #34  obj<hl.types.ArrayBytes_Float>
    #35  obj<hl.types.$ArrayBytes_hl_F32>
    #36  obj<$StringBuf>
    #37  obj<$SysError>
    #38  abstract<hl_bytes_map>
    #39  obj<hl.$Enum>
    #40  obj<haxe.$Exception>
    #41  fn(dyn, ) -> obj<haxe.Exception>
    #42  obj<haxe.Exception>
    #43  fn(dyn, ) -> dyn
    #44  obj<haxe.$ValueException>
    #45  obj<haxe.iterators.$ArrayIterator>
    #46  obj<haxe.iterators.$ArrayKeyValueIterator>
    #47  obj<hl.Enum>
    #48  obj<hl.types.ArrayObj>
    #49  obj<haxe.io.$Error>
    #50  enum<haxe.io.Error>
    #51  obj<hl.types.$BytesIterator_Float>
    #52  obj<hl.types.$BytesKeyValueIterator_Float>
    #53  obj<hl.types.$BytesIterator_Int>
    #54  obj<hl.types.$BytesKeyValueIterator_Int>
    #55  obj<hl.types.$BytesIterator_hl_F32>
    #56  obj<hl.types.$BytesKeyValueIterator_hl_F32>
    #57  obj<hl.types.$BytesIterator_hl_UI16>
    #58  obj<hl.types.$BytesKeyValueIterator_hl_UI16>
    #59  obj<hl.types.$ArrayDynIterator>
    #60  obj<hl.types.$ArrayDynKeyValueIterator>
    #61  obj<hl.types.$ArrayObjIterator>
    #62  obj<hl.types.$ArrayObjKeyValueIterator>
    #63  obj<$Std>
    #64  abstract<hl_random>
    #65  fn(dyn, dyn, ) -> bool
    #66  fn(dyn, ) -> obj<String>
    #67  fn(dyn, dyn, ) -> dyn
    #68  obj<other.$Vector3>
    #69  fn(i32, i32, ) -> bool
    #70  fn(f32, f32, ) -> bool
    #71  fn(f64, f64, ) -> bool
    #72  obj<other.$EnumValueTypeThing>
    #73  enum<other.EnumValueTypeThing>
    #74  obj<$EntryPoint>
    #75  fn() -> void
    #76  obj<hl.CoreType>
    #77  obj<hl.CoreEnum>
    #78  obj<hl._Bytes.$Bytes_Impl_>
    #79  fn(bytes, i32, i32, ) -> bytes
    #80  obj<$Sys>
    #81  fn(dyn, ) -> void
    #82  obj<$Type>
    #83  fn(type, type, bytes, ) -> obj<hl.Class>
    #84  fn(type, type, ) -> obj<hl.Enum>
    #85  fn(bytes, obj<hl.BaseType>, ) -> void
    #86  obj<haxe.$NativeStackTrace>
    #87  fn() -> array<void>
    #88  obj<haxe.ds.$ArraySort>
    #89  fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, ) -> void
    #90  obj<hl.types.ArrayDyn>
    #91  fn(dyn, dyn, ) -> i32
    #92  fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, i32, i32, ) -> void
    #93  fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, i32, i32, i32, i32, i32, ) -> void
    #94  fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, i32, i32, i32, ) -> void
    #95  fn(i32, i32, ) -> i32
    #96  fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, i32, i32, i32, ) -> i32
    #97  fn(obj<hl.types.ArrayDyn>, i32, i32, ) -> void
    #98  obj<hl._NativeArray.$NativeArray_Impl_>
    #99  obj<hl._Type.$Type_Impl_>
    #100 obj<hl.types.$ArrayDyn>
    #101 fn(obj<hl.types.ArrayBase>, ref<bool>, ) -> obj<hl.types.ArrayDyn>
    #102 ref<bool>
    #103 obj<hl.types._BytesMap.$BytesMap_Impl_>
    #104 obj<other.$OtherEntryPoint>
    #105 fn(i32, ) -> void
    #106 fn(null<i32>, ) -> void
    #107 null<i32>
    #108 fn(ref<i32>, ) -> void
    #109 ref<i32>
    #110 fn(enum<other.EnumValueTypeThing>, ) -> void
    #111 fn(array<void>, ) -> void
    #112 fn() -> abstract<hl_random>
    #113 fn(i32, ref<i32>, ) -> bytes
    #114 fn(bytes, i32, bytes, i32, i32, ) -> void
    #115 fn(i32, ) -> bytes
    #116 fn(bytes, i32, bytes, i32, i32, ) -> i32
    #117 fn(bytes, bytes, i32, ) -> i32
    #118 fn(bytes, i32, i32, bytes, i32, i32, ) -> i32
    #119 fn(bytes, i32, i32, i32, ) -> void
    #120 fn(bytes, i32, i32, fn(i32, i32, ) -> i32, ) -> void
    #121 fn(bytes, i32, i32, fn(f64, f64, ) -> i32, ) -> void
    #122 fn(f64, f64, ) -> i32
    #123 fn(bytes, i32, ref<i32>, ) -> bytes
    #124 fn(dyn, ref<i32>, ) -> bytes
    #125 fn() -> bool
    #126 fn(bytes, ) -> void
    #127 fn(dyn, i32, ) -> dyn
    #128 fn(dyn, i32, dyn, ) -> void
    #129 fn(dyn, i32, ) -> bool
    #130 fn(dyn, array<void>, ) -> dyn
    #131 fn(dyn, type, ) -> dyn
    #132 fn(fn(array<void>, ) -> dyn, ) -> dyn
    #133 fn(array<void>, ) -> dyn
    #134 fn(fn(dyn, ) -> void, ) -> void
    #135 fn(array<void>, ) -> type
    #136 fn(array<void>, i32, array<void>, i32, i32, ) -> void
    #137 fn(type, ) -> bytes
    #138 fn(type, dyn, ) -> bool
    #139 fn(type, ) -> array<void>
    #140 fn(type, ) -> dyn
    #141 fn() -> abstract<hl_bytes_map>
    #142 fn(abstract<hl_bytes_map>, bytes, dyn, ) -> void
    #143 fn(type, type, ) -> bool
    #144 fn(bytes, i32, ) -> i32
    #145 fn(type, i32, ) -> array<void>
    #146 fn(i32, i32, i32, i32, i32, i32, ) -> i32
    #147 fn(obj<Date>, i32, i32, i32, i32, i32, i32, ) -> void
    #148 obj<Date>
    #149 fn(obj<Date>, ) -> obj<String>
    #150 fn(obj<Date>, ) -> bytes
    #151 fn(obj<String>, obj<String>, ) -> void
    #152 fn(obj<String>, ) -> obj<String>
    #153 fn(obj<String>, i32, ) -> obj<String>
    #154 fn(obj<String>, i32, ) -> null<i32>
    #155 fn(obj<String>, i32, i32, bytes, i32, ) -> i32
    #156 fn(obj<String>, obj<String>, null<i32>, ) -> i32
    #157 fn(obj<String>, obj<String>, ) -> obj<hl.types.ArrayObj>
    #158 fn(obj<String>, i32, null<i32>, ) -> obj<String>
    #159 fn(obj<String>, ) -> bytes
    #160 fn(obj<String>, dyn, ) -> i32
    #161 fn(obj<StringBuf>, ) -> void
    #162 obj<StringBuf>
    #163 fn(obj<StringBuf>, dyn, ) -> void
    #164 fn(obj<StringBuf>, i32, ) -> void
    #165 fn(obj<StringBuf>, ) -> obj<String>
    #166 fn(obj<StringBuf>, ) -> bytes
    #167 fn(obj<SysError>, obj<String>, ) -> void
    #168 obj<SysError>
    #169 fn(obj<SysError>, ) -> obj<String>
    #170 fn(obj<SysError>, ) -> bytes
    #171 obj<haxe.ValueException>
    #172 fn(obj<haxe.Exception>, obj<String>, obj<haxe.Exception>, dyn, ) -> void
    #173 fn(obj<haxe.Exception>, ) -> dyn
    #174 fn(obj<haxe.Exception>, ) -> obj<String>
    #175 fn(obj<haxe.Exception>, ) -> bytes
    #176 fn(obj<haxe.ValueException>, dyn, obj<haxe.Exception>, dyn, ) -> void
    #177 fn(obj<haxe.ValueException>, ) -> dyn
    #178 fn(obj<haxe.iterators.ArrayIterator>, obj<hl.types.ArrayDyn>, ) -> void
    #179 obj<haxe.iterators.ArrayIterator>
    #180 fn(obj<haxe.iterators.ArrayIterator>, ) -> bool
    #181 fn(obj<haxe.iterators.ArrayIterator>, ) -> dyn
    #182 fn(obj<haxe.iterators.ArrayKeyValueIterator>, obj<hl.types.ArrayDyn>, ) -> void
    #183 obj<haxe.iterators.ArrayKeyValueIterator>
    #184 fn(obj<hl.BaseType>, dyn, ) -> bool
    #185 fn(obj<hl.types.ArrayAccess>, i32, ) -> dyn
    #186 fn(obj<hl.types.ArrayAccess>, i32, dyn, ) -> void
    #187 fn(obj<hl.types.ArrayAccess>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    #188 fn(obj<hl.types.ArrayBase>, dyn, ) -> i32
    #189 fn(obj<hl.types.ArrayBase>, ) -> dyn
    #190 fn(obj<hl.types.ArrayBase>, dyn, ) -> void
    #191 fn(obj<hl.types.ArrayBase>, i32, dyn, ) -> void
    #192 fn(obj<hl.types.ArrayBase>, dyn, ) -> bool
    #193 fn(obj<hl.types.ArrayBase>, fn(dyn, dyn, ) -> i32, ) -> void
    #194 fn(obj<hl.types.ArrayBase>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    #195 fn(obj<hl.types.ArrayBase>, i32, i32, ) -> obj<hl.types.ArrayBase>
    #196 fn(obj<hl.types.ArrayBase>, obj<String>, ) -> obj<String>
    #197 fn(obj<hl.types.ArrayBase>, ) -> void
    #198 fn(obj<hl.types.ArrayBase>, i32, ) -> void
    #199 fn(obj<hl.types.ArrayBase>, ) -> obj<String>
    #200 fn(obj<hl.types.ArrayBase>, ) -> bytes
    #201 fn(obj<hl.types.ArrayBase>, type, ) -> dyn
    #202 fn(obj<hl.types.ArrayBase>, ) -> bool
    #203 fn(obj<hl.types.ArrayBytes_Float>, ) -> void
    #204 fn(obj<hl.types.ArrayBytes_Float>, obj<hl.types.ArrayBytes_Float>, ) -> obj<hl.types.ArrayBytes_Float>
    #205 fn(obj<hl.types.ArrayBytes_Float>, obj<String>, ) -> obj<String>
    #206 null<f64>
    #207 fn(obj<hl.types.ArrayBytes_Float>, ) -> null<f64>
    #208 fn(obj<hl.types.ArrayBytes_Float>, f64, ) -> i32
    #209 fn(obj<hl.types.ArrayBytes_Float>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    #210 fn(obj<hl.types.ArrayBytes_Float>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    #211 fn(fn(f64, f64, ) -> i32, i32, i32, ) -> i32
    #212 fn(obj<hl.types.ArrayBytes_Float>, fn(f64, f64, ) -> i32, ) -> void
    #213 fn(obj<hl.types.ArrayBytes_Float>, i32, i32, ) -> obj<hl.types.ArrayBase>
    #214 fn(obj<hl.types.ArrayBytes_Float>, ) -> obj<String>
    #215 fn(obj<hl.types.ArrayBytes_Float>, f64, ) -> void
    #216 fn(obj<hl.types.ArrayBytes_Float>, i32, f64, ) -> void
    #217 fn(obj<hl.types.ArrayBytes_Float>, f64, ) -> bool
    #218 fn(obj<hl.types.ArrayBytes_Float>, f64, null<i32>, ) -> i32
    #219 fn(obj<hl.types.ArrayBytes_Float>, ) -> obj<hl.types.ArrayBytes_Float>
    #220 fn(obj<hl.types.ArrayBytes_Float>, ) -> obj<haxe.iterators.ArrayIterator>
    #221 obj<hl.types.BytesIterator_Float>
    #222 fn(obj<hl.types.ArrayBytes_Float>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    #223 obj<hl.types.BytesKeyValueIterator_Float>
    #224 fn(obj<hl.types.ArrayBytes_Float>, fn(f64, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    #225 fn(f64, ) -> dyn
    #226 fn(obj<hl.types.ArrayBytes_Float>, fn(f64, ) -> bool, ) -> obj<hl.types.ArrayBytes_Float>
    #227 fn(f64, ) -> bool
    #228 fn(obj<hl.types.ArrayBytes_Float>, i32, ) -> void
    #229 fn(obj<hl.types.ArrayBytes_Float>, i32, ) -> dyn
    #230 fn(obj<hl.types.ArrayBytes_Float>, i32, dyn, ) -> void
    #231 fn(obj<hl.types.ArrayBytes_Float>, dyn, ) -> i32
    #232 fn(obj<hl.types.ArrayBytes_Float>, ) -> dyn
    #233 fn(obj<hl.types.ArrayBytes_Float>, dyn, ) -> void
    #234 fn(obj<hl.types.ArrayBytes_Float>, dyn, ) -> bool
    #235 fn(fn(dyn, dyn, ) -> i32, f64, f64, ) -> i32
    #236 fn(obj<hl.types.ArrayBytes_Float>, fn(dyn, dyn, ) -> i32, ) -> void
    #237 fn(obj<hl.types.ArrayBytes_Int>, ) -> void
    #238 fn(obj<hl.types.ArrayBytes_Int>, obj<hl.types.ArrayBytes_Int>, ) -> obj<hl.types.ArrayBytes_Int>
    #239 fn(obj<hl.types.ArrayBytes_Int>, obj<String>, ) -> obj<String>
    #240 fn(obj<hl.types.ArrayBytes_Int>, ) -> null<i32>
    #241 fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> i32
    #242 fn(obj<hl.types.ArrayBytes_Int>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    #243 fn(obj<hl.types.ArrayBytes_Int>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    #244 fn(fn(i32, i32, ) -> i32, f64, f64, ) -> i32
    #245 fn(obj<hl.types.ArrayBytes_Int>, fn(i32, i32, ) -> i32, ) -> void
    #246 fn(obj<hl.types.ArrayBytes_Int>, i32, i32, ) -> obj<hl.types.ArrayBase>
    #247 fn(obj<hl.types.ArrayBytes_Int>, ) -> obj<String>
    #248 fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> void
    #249 fn(obj<hl.types.ArrayBytes_Int>, i32, i32, ) -> void
    #250 fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> bool
    #251 fn(obj<hl.types.ArrayBytes_Int>, i32, null<i32>, ) -> i32
    #252 fn(obj<hl.types.ArrayBytes_Int>, ) -> obj<hl.types.ArrayBytes_Int>
    #253 fn(obj<hl.types.ArrayBytes_Int>, ) -> obj<haxe.iterators.ArrayIterator>
    #254 obj<hl.types.BytesIterator_Int>
    #255 fn(obj<hl.types.ArrayBytes_Int>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    #256 obj<hl.types.BytesKeyValueIterator_Int>
    #257 fn(obj<hl.types.ArrayBytes_Int>, fn(i32, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    #258 fn(i32, ) -> dyn
    #259 fn(obj<hl.types.ArrayBytes_Int>, fn(i32, ) -> bool, ) -> obj<hl.types.ArrayBytes_Int>
    #260 fn(i32, ) -> bool
    #261 fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> dyn
    #262 fn(obj<hl.types.ArrayBytes_Int>, i32, dyn, ) -> void
    #263 fn(obj<hl.types.ArrayBytes_Int>, dyn, ) -> i32
    #264 fn(obj<hl.types.ArrayBytes_Int>, ) -> dyn
    #265 fn(obj<hl.types.ArrayBytes_Int>, dyn, ) -> void
    #266 fn(obj<hl.types.ArrayBytes_Int>, dyn, ) -> bool
    #267 fn(fn(dyn, dyn, ) -> i32, i32, i32, ) -> i32
    #268 fn(obj<hl.types.ArrayBytes_Int>, fn(dyn, dyn, ) -> i32, ) -> void
    #269 fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> void
    #270 fn(obj<hl.types.ArrayBytes_hl_F32>, obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<hl.types.ArrayBytes_hl_F32>
    #271 fn(obj<hl.types.ArrayBytes_hl_F32>, obj<String>, ) -> obj<String>
    #272 null<f32>
    #273 fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> null<f32>
    #274 fn(obj<hl.types.ArrayBytes_hl_F32>, f32, ) -> i32
    #275 fn(obj<hl.types.ArrayBytes_hl_F32>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    #276 fn(obj<hl.types.ArrayBytes_hl_F32>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    #277 fn(fn(f32, f32, ) -> i32, i32, i32, ) -> i32
    #278 fn(f32, f32, ) -> i32
    #279 fn(fn(f32, f32, ) -> i32, f64, f64, ) -> i32
    #280 fn(obj<hl.types.ArrayBytes_hl_F32>, fn(f32, f32, ) -> i32, ) -> void
    #281 fn(obj<hl.types.ArrayBytes_hl_F32>, i32, i32, ) -> obj<hl.types.ArrayBase>
    #282 fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<String>
    #283 fn(obj<hl.types.ArrayBytes_hl_F32>, f32, ) -> void
    #284 fn(obj<hl.types.ArrayBytes_hl_F32>, i32, f32, ) -> void
    #285 fn(obj<hl.types.ArrayBytes_hl_F32>, f32, ) -> bool
    #286 fn(obj<hl.types.ArrayBytes_hl_F32>, f32, null<i32>, ) -> i32
    #287 fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<hl.types.ArrayBytes_hl_F32>
    #288 fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<haxe.iterators.ArrayIterator>
    #289 obj<hl.types.BytesIterator_hl_F32>
    #290 fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    #291 obj<hl.types.BytesKeyValueIterator_hl_F32>
    #292 fn(obj<hl.types.ArrayBytes_hl_F32>, fn(f32, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    #293 fn(f32, ) -> dyn
    #294 fn(obj<hl.types.ArrayBytes_hl_F32>, fn(f32, ) -> bool, ) -> obj<hl.types.ArrayBytes_hl_F32>
    #295 fn(f32, ) -> bool
    #296 fn(obj<hl.types.ArrayBytes_hl_F32>, i32, ) -> void
    #297 fn(obj<hl.types.ArrayBytes_hl_F32>, i32, ) -> dyn
    #298 fn(obj<hl.types.ArrayBytes_hl_F32>, i32, dyn, ) -> void
    #299 fn(obj<hl.types.ArrayBytes_hl_F32>, dyn, ) -> i32
    #300 fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> dyn
    #301 fn(obj<hl.types.ArrayBytes_hl_F32>, dyn, ) -> void
    #302 fn(obj<hl.types.ArrayBytes_hl_F32>, dyn, ) -> bool
    #303 fn(fn(dyn, dyn, ) -> i32, f32, f32, ) -> i32
    #304 fn(obj<hl.types.ArrayBytes_hl_F32>, fn(dyn, dyn, ) -> i32, ) -> void
    #305 fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> void
    #306 fn(obj<hl.types.ArrayBytes_hl_UI16>, obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<hl.types.ArrayBytes_hl_UI16>
    #307 fn(obj<hl.types.ArrayBytes_hl_UI16>, obj<String>, ) -> obj<String>
    #308 null<u16>
    #309 fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> null<u16>
    #310 fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, ) -> i32
    #311 fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    #312 fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    #313 fn(fn(u16, u16, ) -> i32, i32, i32, ) -> i32
    #314 fn(u16, u16, ) -> i32
    #315 fn(fn(u16, u16, ) -> i32, f64, f64, ) -> i32
    #316 fn(obj<hl.types.ArrayBytes_hl_UI16>, fn(u16, u16, ) -> i32, ) -> void
    #317 fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, i32, ) -> obj<hl.types.ArrayBase>
    #318 fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<String>
    #319 fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, ) -> void
    #320 fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, u16, ) -> void
    #321 fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, ) -> bool
    #322 fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, null<i32>, ) -> i32
    #323 fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<hl.types.ArrayBytes_hl_UI16>
    #324 fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<haxe.iterators.ArrayIterator>
    #325 obj<hl.types.BytesIterator_hl_UI16>
    #326 fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    #327 obj<hl.types.BytesKeyValueIterator_hl_UI16>
    #328 fn(obj<hl.types.ArrayBytes_hl_UI16>, fn(u16, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    #329 fn(u16, ) -> dyn
    #330 fn(obj<hl.types.ArrayBytes_hl_UI16>, fn(u16, ) -> bool, ) -> obj<hl.types.ArrayBytes_hl_UI16>
    #331 fn(u16, ) -> bool
    #332 fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, ) -> void
    #333 fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, ) -> dyn
    #334 fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, dyn, ) -> void
    #335 fn(obj<hl.types.ArrayBytes_hl_UI16>, dyn, ) -> i32
    #336 fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> dyn
    #337 fn(obj<hl.types.ArrayBytes_hl_UI16>, dyn, ) -> void
    #338 fn(obj<hl.types.ArrayBytes_hl_UI16>, dyn, ) -> bool
    #339 fn(fn(dyn, dyn, ) -> i32, u16, u16, ) -> i32
    #340 fn(obj<hl.types.ArrayBytes_hl_UI16>, fn(dyn, dyn, ) -> i32, ) -> void
    #341 fn(obj<hl.types.ArrayDynIterator>, obj<hl.types.ArrayBase>, ) -> void
    #342 obj<hl.types.ArrayDynIterator>
    #343 fn(obj<hl.types.ArrayDynIterator>, ) -> bool
    #344 fn(obj<hl.types.ArrayDynIterator>, ) -> dyn
    #345 fn(obj<hl.types.ArrayDynKeyValueIterator>, obj<hl.types.ArrayBase>, ) -> void
    #346 obj<hl.types.ArrayDynKeyValueIterator>
    #347 fn(obj<hl.types.ArrayDyn>, ) -> void
    #348 fn(obj<hl.types.ArrayDyn>, ) -> i32
    #349 fn(obj<hl.types.ArrayDyn>, i32, ) -> dyn
    #350 fn(obj<hl.types.ArrayDyn>, i32, dyn, ) -> void
    #351 fn(obj<hl.types.ArrayDyn>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    #352 fn(obj<hl.types.ArrayDyn>, obj<hl.types.ArrayDyn>, ) -> obj<hl.types.ArrayDyn>
    #353 fn(obj<hl.types.ArrayDyn>, obj<String>, ) -> obj<String>
    #354 fn(obj<hl.types.ArrayDyn>, ) -> dyn
    #355 fn(obj<hl.types.ArrayDyn>, dyn, ) -> i32
    #356 fn(obj<hl.types.ArrayDyn>, i32, ) -> void
    #357 fn(obj<hl.types.ArrayDyn>, i32, null<i32>, ) -> obj<hl.types.ArrayDyn>
    #358 fn(obj<hl.types.ArrayDyn>, i32, i32, ) -> obj<hl.types.ArrayDyn>
    #359 fn(obj<hl.types.ArrayDyn>, ) -> obj<String>
    #360 fn(obj<hl.types.ArrayDyn>, ) -> bytes
    #361 fn(obj<hl.types.ArrayDyn>, dyn, ) -> void
    #362 fn(obj<hl.types.ArrayDyn>, dyn, ) -> bool
    #363 fn(obj<hl.types.ArrayDyn>, dyn, null<i32>, ) -> i32
    #364 fn(obj<hl.types.ArrayDyn>, ) -> obj<hl.types.ArrayDyn>
    #365 fn(obj<hl.types.ArrayDyn>, ) -> obj<haxe.iterators.ArrayIterator>
    #366 fn(obj<hl.types.ArrayDyn>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    #367 fn(obj<hl.types.ArrayDyn>, fn(dyn, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    #368 fn(obj<hl.types.ArrayDyn>, fn(dyn, ) -> bool, ) -> obj<hl.types.ArrayDyn>
    #369 fn(dyn, ) -> bool
    #370 fn(obj<hl.types.ArrayDyn>, type, ) -> dyn
    #371 fn(obj<hl.types.ArrayObjIterator>, obj<hl.types.ArrayObj>, ) -> void
    #372 obj<hl.types.ArrayObjIterator>
    #373 fn(obj<hl.types.ArrayObjIterator>, ) -> bool
    #374 fn(obj<hl.types.ArrayObjIterator>, ) -> dyn
    #375 fn(obj<hl.types.ArrayObjKeyValueIterator>, obj<hl.types.ArrayObj>, ) -> void
    #376 obj<hl.types.ArrayObjKeyValueIterator>
    #377 fn(array<void>, ) -> obj<hl.types.ArrayObj>
    #378 fn(obj<hl.types.ArrayObj>, ) -> void
    #379 fn(obj<hl.types.ArrayObj>, obj<hl.types.ArrayObj>, ) -> obj<hl.types.ArrayObj>
    #380 fn(obj<hl.types.ArrayObj>, obj<String>, ) -> obj<String>
    #381 fn(obj<hl.types.ArrayObj>, ) -> bool
    #382 fn(obj<hl.types.ArrayObj>, ) -> dyn
    #383 fn(obj<hl.types.ArrayObj>, dyn, ) -> i32
    #384 fn(obj<hl.types.ArrayObj>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    #385 fn(obj<hl.types.ArrayObj>, fn(dyn, dyn, ) -> i32, ) -> void
    #386 fn(obj<hl.types.ArrayObj>, i32, i32, ) -> obj<hl.types.ArrayBase>
    #387 fn(obj<hl.types.ArrayObj>, ) -> obj<String>
    #388 fn(obj<hl.types.ArrayObj>, dyn, ) -> void
    #389 fn(obj<hl.types.ArrayObj>, i32, dyn, ) -> void
    #390 fn(obj<hl.types.ArrayObj>, dyn, ) -> bool
    #391 fn(obj<hl.types.ArrayObj>, dyn, null<i32>, ) -> i32
    #392 fn(obj<hl.types.ArrayObj>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    #393 fn(obj<hl.types.ArrayObj>, ) -> obj<hl.types.ArrayObj>
    #394 fn(obj<hl.types.ArrayObj>, ) -> obj<haxe.iterators.ArrayIterator>
    #395 fn(obj<hl.types.ArrayObj>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    #396 fn(obj<hl.types.ArrayObj>, fn(dyn, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    #397 fn(obj<hl.types.ArrayObj>, fn(dyn, ) -> bool, ) -> obj<hl.types.ArrayObj>
    #398 fn(obj<hl.types.ArrayObj>, i32, ) -> void
    #399 fn(obj<hl.types.ArrayObj>, i32, ) -> dyn
    #400 fn(obj<hl.types.BytesIterator_Float>, obj<hl.types.ArrayBytes_Float>, ) -> void
    #401 fn(obj<hl.types.BytesIterator_Float>, ) -> bool
    #402 fn(obj<hl.types.BytesIterator_Float>, ) -> dyn
    #403 fn(obj<hl.types.BytesIterator_Int>, obj<hl.types.ArrayBytes_Int>, ) -> void
    #404 fn(obj<hl.types.BytesIterator_Int>, ) -> bool
    #405 fn(obj<hl.types.BytesIterator_Int>, ) -> dyn
    #406 fn(obj<hl.types.BytesIterator_hl_F32>, obj<hl.types.ArrayBytes_hl_F32>, ) -> void
    #407 fn(obj<hl.types.BytesIterator_hl_F32>, ) -> bool
    #408 fn(obj<hl.types.BytesIterator_hl_F32>, ) -> dyn
    #409 fn(obj<hl.types.BytesIterator_hl_UI16>, obj<hl.types.ArrayBytes_hl_UI16>, ) -> void
    #410 fn(obj<hl.types.BytesIterator_hl_UI16>, ) -> bool
    #411 fn(obj<hl.types.BytesIterator_hl_UI16>, ) -> dyn
    #412 fn(obj<hl.types.BytesKeyValueIterator_Float>, obj<hl.types.ArrayBytes_Float>, ) -> void
    #413 fn(obj<hl.types.BytesKeyValueIterator_Float>, ) -> bool
    #414 fn(obj<hl.types.BytesKeyValueIterator_Float>, ) -> virtual(key: i32, value: f64, )
    #415 virtual(key: i32, value: f64, )
    #416 fn(obj<hl.types.BytesKeyValueIterator_Int>, obj<hl.types.ArrayBytes_Int>, ) -> void
    #417 fn(obj<hl.types.BytesKeyValueIterator_Int>, ) -> bool
    #418 fn(obj<hl.types.BytesKeyValueIterator_Int>, ) -> virtual(key: i32, value: i32, )
    #419 virtual(key: i32, value: i32, )
    #420 fn(obj<hl.types.BytesKeyValueIterator_hl_F32>, obj<hl.types.ArrayBytes_hl_F32>, ) -> void
    #421 fn(obj<hl.types.BytesKeyValueIterator_hl_F32>, ) -> bool
    #422 fn(obj<hl.types.BytesKeyValueIterator_hl_F32>, ) -> virtual(key: i32, value: f32, )
    #423 virtual(key: i32, value: f32, )
    #424 fn(obj<hl.types.BytesKeyValueIterator_hl_UI16>, obj<hl.types.ArrayBytes_hl_UI16>, ) -> void
    #425 fn(obj<hl.types.BytesKeyValueIterator_hl_UI16>, ) -> bool
    #426 fn(obj<hl.types.BytesKeyValueIterator_hl_UI16>, ) -> virtual(key: i32, value: u16, )
    #427 virtual(key: i32, value: u16, )
    #428 obj<other.Vector3>
    #429 fn(obj<other.Vector3>, f64, f64, f64, ) -> void
    #430 fn(obj<other.Vector3>, obj<other.Vector3>, ) -> void
    #431 fn(obj<other.Vector3>, obj<other.Vector3>, i32, ) -> void
    #432 fn(obj<other.Vector3>, ) -> f64
    #433 fn(obj<other.Vector3>, obj<hl.types.ArrayBytes_Float>, ) -> f64
    #434 obj<EntryPoint>
    #435 obj<Std>
    #436 obj<hl._Bytes.Bytes_Impl_>
    #437 obj<Sys>
    #438 obj<Type>
    #439 obj<haxe.NativeStackTrace>
    #440 obj<haxe.ds.ArraySort>
    #441 obj<hl._NativeArray.NativeArray_Impl_>
    #442 obj<hl._Type.Type_Impl_>
    #443 obj<hl.types._BytesMap.BytesMap_Impl_>
    #444 obj<other.OtherEntryPoint>

[Natives]
    #0  std::rnd_init_system = (112) 29
    #1  std::itos = (113) 35
    #2  std::bytes_blit = (114) 39
    #3  std::alloc_bytes = (115) 36
    #4  std::bytes_compare = (116) 43
    #5  std::bytes_compare16 = (117) 244
    #6  std::bytes_find = (118) 42
    #7  std::bytes_fill = (119) 253
    #8  std::bsort_i32 = (120) 254
    #9  std::bsort_f64 = (121) 255
    #10 std::utf8_to_utf16 = (123) 38
    #11 std::utf16_to_utf8 = (123) 242
    #12 std::ucs2_upper = (79) 40
    #13 std::ucs2_lower = (79) 41
    #14 std::value_to_string = (124) 32
    #15 std::sys_utf8_path = (125) 259
    #16 std::sys_print = (126) 258
    #17 std::exception_stack = (87) 281
    #18 std::obj_get_field = (127) 327
    #19 std::obj_set_field = (128) 328
    #20 std::obj_has_field = (129) 329
    #21 std::obj_delete_field = (129) 330
    #22 std::call_method = (130) 331
    #23 std::get_closure_value = (43) 332
    #24 std::make_closure = (67) 333
    #25 std::no_closure = (43) 334
    #26 std::value_cast = (131) 335
    #27 std::make_var_args = (132) 336
    #28 std::get_virtual_value = (43) 337
    #29 std::set_error_handler = (134) 338
    #30 std::breakpoint = (75) 339
    #31 std::sys_is64 = (125) 340
    #32 std::ptr_compare = (91) 243
    #33 std::array_type = (135) 342
    #34 std::array_blit = (136) 284
    #35 std::type_name = (137) 268
    #36 std::type_set_global = (138) 264
    #37 std::type_enum_fields = (139) 270
    #38 std::type_enum_values = (139) 267
    #39 std::alloc_obj = (140) 263
    #40 std::hballoc = (141) 261
    #41 std::hbset = (142) 271
    #42 std::type_safe_cast = (143) 341
    #43 std::ucs2length = (144) 37
    #44 std::alloc_array = (145) 240
    #45 std::date_to_string = (113) 23
    #46 std::date_new = (146) 22

[Globals]
    #0  obj<hl.$BaseType>
    #1  obj<hl.Class>
    #2  obj<$String>
    #3  obj<$Date>
    #4  obj<String>
    #5  obj<String>
    #6  obj<String>
    #7  obj<String>
    #8  obj<String>
    #9  obj<String>
    #10 obj<String>
    #11 obj<hl.types.$ArrayAccess>
    #12 obj<hl.types.$ArrayBase>
    #13 obj<hl.types.$ArrayBytes_hl_F32>
    #14 obj<$StringBuf>
    #15 obj<$SysError>
    #16 obj<String>
    #17 obj<String>
    #18 abstract<hl_bytes_map>
    #19 obj<hl.$Enum>
    #20 obj<haxe.$Exception>
    #21 obj<haxe.$ValueException>
    #22 obj<String>
    #23 obj<String>
    #24 obj<haxe.iterators.$ArrayIterator>
    #25 obj<haxe.iterators.$ArrayKeyValueIterator>
    #26 obj<String>
    #27 obj<haxe.io.$Error>
    #28 enum<haxe.io.Error>
    #29 obj<hl.types.$BytesIterator_Float>
    #30 obj<hl.types.$BytesKeyValueIterator_Float>
    #31 obj<String>
    #32 obj<hl.types.$BytesIterator_Int>
    #33 obj<hl.types.$BytesKeyValueIterator_Int>
    #34 obj<hl.types.$BytesIterator_hl_F32>
    #35 obj<hl.types.$BytesKeyValueIterator_hl_F32>
    #36 obj<hl.types.$BytesIterator_hl_UI16>
    #37 obj<hl.types.$BytesKeyValueIterator_hl_UI16>
    #38 obj<hl.types.$ArrayDynIterator>
    #39 obj<hl.types.$ArrayDynKeyValueIterator>
    #40 obj<hl.types.$ArrayObjIterator>
    #41 obj<hl.types.$ArrayObjKeyValueIterator>
    #42 obj<$Std>
    #43 obj<String>
    #44 obj<other.$Vector3>
    #45 obj<other.$EnumValueTypeThing>
    #46 enum<other.EnumValueTypeThing>
    #47 obj<String>
    #48 obj<$EntryPoint>
    #49 obj<hl.CoreType>
    #50 obj<String>
    #51 obj<hl.CoreType>
    #52 obj<String>
    #53 obj<hl.CoreEnum>
    #54 obj<String>
    #55 obj<hl.CoreType>
    #56 obj<String>
    #57 obj<hl._Bytes.$Bytes_Impl_>
    #58 obj<$Sys>
    #59 obj<$Type>
    #60 obj<haxe.$NativeStackTrace>
    #61 obj<haxe.ds.$ArraySort>
    #62 enum<haxe.io.Error>
    #63 enum<haxe.io.Error>
    #64 obj<hl._NativeArray.$NativeArray_Impl_>
    #65 obj<hl._Type.$Type_Impl_>
    #66 obj<String>
    #67 obj<hl.types.$ArrayDyn>
    #68 obj<String>
    #69 obj<hl.types._BytesMap.$BytesMap_Impl_>
    #70 enum<other.EnumValueTypeThing>
    #71 obj<other.$OtherEntryPoint>

[Functions]
#0   = fn[24] fn(obj<Date>, i32, i32, i32, i32, i32, i32, ) -> void
    [Values]
        %0 obj<Date>
        %1 i32
        %2 i32
        %3 i32
        %4 i32
        %5 i32
        %6 i32
        %7 i32
    [Code]
        :$0
            j_always $1
        :$1
            call %7 fn[22](%1, %2, %3, %4, %5, %6, )
            set_field %0.0 %7
            ret_void
        :$2
            unreachable
#1   = fn[25] fn(obj<Date>, ) -> obj<String>
    [Values]
        %0 obj<Date>
        %1 i32
        %2 i32
        %3 ref<i32>
        %4 bytes
        %5 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            int %1 0
            get_field %2 %0.0
            ref %3 %1
            call %4 fn[23](%2, %3, )
            new %5
            set_field %5.0 %4
            set_field %5.1 %1
            ret %5
        :$2
            unreachable
#2   = fn[26] fn(obj<Date>, ) -> bytes
    [Values]
        %0 obj<Date>
        %1 obj<String>
        %2 void
        %3 bytes
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[25](%0, )
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            ret %3
        :$2
            unreachable
#3   = fn[27] fn() -> void
    [Values]
        %0 void
    [Code]
        :$0
            j_always $1
        :$1
            call %0 fn[28]()
            ret_void
        :$2
            unreachable
#4   = fn[30] fn(dyn, dyn, ) -> bool
    [Values]
        %0  dyn
        %1  dyn
        %2  obj<hl.BaseType>
        %3  bool
        %4  void
        %5  type
        %6  i32
        %7  dyn
        %8  type
        %9  obj<hl.BaseType>
        %10 dyn
        %11 i32
        %12 bool
        %13 dyn
        %14 bool
        %15 bool
        %16 bool
        %17 type
        %18 i32
        %19 bool
        %20 type
        %21 i32
        %22 f64
        %23 i32
        %24 f64
        %25 bool
        %26 bool
        %27 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            call_intrinsic %2 @eon.safe_cast(%1, )
            j_not_null %2 $3 $2
        :$2 
            bool %3 false
            ret %3
        :$3 
            call_intrinsic %4 @eon.null_check(%2, )
            get_field %5 %2.0
            get_tid %6 %5
            switch %6 [$4, $4, $4, $14, $4, $4, $10, $4, $4, $6, ] $4
        :$4 
            j_always $5
        :$5 
            phi %7 [%1 $16], [%1 $12], [%1 $4], 
            phi %8 [%5 $16], [%5 $12], [%5 $4], 
            phi %9 [%2 $16], [%2 $12], [%2 $4], 
            phi %10 [%0 $16], [%0 $12], [%0 $4], 
            phi %11 [%21 $16], [%18 $12], [%6 $4], 
            call %12 fn[14](%9, %10, )
            ret %12
        :$6 
            null %13
            cmp ne %14 %0 %13
            j_true %14 $9 $7
        :$7 
            bool %15 false
            j_always $8
        :$8 
            ret %15
        :$9 
            bool %16 true
            ret %16
        :$10
            get_type %17 %0
            get_tid %18 %17
            switch %18 [$11, $13, $13, $13, ] $11
        :$11
            j_always $12
        :$12
            j_always $5
        :$13
            bool %19 true
            ret %19
        :$14
            get_type %20 %0
            get_tid %21 %20
            switch %21 [$15, $15, $15, $15, $15, $17, $17, ] $15
        :$15
            j_always $16
        :$16
            j_always $5
        :$17
            call_intrinsic %22 @eon.safe_cast(%0, )
            to_int %23 %22
            to_sfloat %24 %23
            cmp eq %25 %24 %22
            j_true %25 $20 $18
        :$18
            bool %26 false
            j_always $19
        :$19
            ret %26
        :$20
            bool %27 true
            ret %27
        :$21
            unreachable
#5   = fn[31] fn(dyn, ) -> obj<String>
    [Values]
        %0 dyn
        %1 i32
        %2 ref<i32>
        %3 bytes
        %4 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            int %1 0
            ref %2 %1
            call %3 fn[32](%0, %2, )
            new %4
            set_field %4.0 %3
            set_field %4.1 %1
            ret %4
        :$2
            unreachable
#6   = fn[33] fn(dyn, dyn, ) -> dyn
    [Values]
        %0  dyn
        %1  dyn
        %2  type
        %3  type
        %4  type
        %5  bool
        %6  obj<String>
        %7  obj<String>
        %8  obj<String>
        %9  type
        %10 bool
        %11 obj<String>
        %12 obj<String>
        %13 obj<String>
        %14 i32
        %15 dyn
        %16 type
        %17 type
        %18 i32
        %19 type
        %20 dyn
        %21 obj<String>
        %22 obj<String>
        %23 obj<String>
        %24 obj<String>
        %25 obj<String>
        %26 dyn
        %27 obj<String>
        %28 obj<String>
        %29 obj<String>
        %30 obj<String>
        %31 obj<String>
        %32 obj<String>
        %33 obj<String>
        %34 obj<String>
        %35 dyn
        %36 obj<String>
        %37 obj<String>
        %38 obj<String>
        %39 obj<String>
        %40 dyn
        %41 void
        %42 f64
        %43 i32
        %44 f64
        %45 f64
        %46 dyn
        %47 i32
        %48 f64
        %49 f64
        %50 dyn
        %51 dyn
        %52 i32
        %53 i32
        %54 f64
        %55 f64
        %56 f64
        %57 dyn
        %58 i32
        %59 i32
        %60 dyn
        %61 dyn
        %62 i32
        %63 f64
        %64 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_type %2 %0
            get_type %3 %1
            type %4 type[13]
            cmp ne %5 %2 %5
            j_true %5 $3 $2
        :$2 
            call_intrinsic %6 @eon.safe_cast(%0, )
            call %7 fn[31](%1, )
            call %8 fn[20](%6, %7, )
            ret %8
        :$3 
            type %9 type[13]
            cmp ne %10 %3 %5
            j_true %10 $5 $4
        :$4 
            call %11 fn[31](%0, )
            call_intrinsic %12 @eon.safe_cast(%1, )
            call %13 fn[20](%11, %12, )
            ret %13
        :$5 
            get_tid %14 %2
            switch %14 [$19, $13, $13, $13, $6, $8, $8, ] $6
        :$6 
            j_always $7
        :$7 
            phi %15 [%1 $15], [%1 $6], [%1 $9], [%1 $21], 
            phi %16 [%9 $15], [%9 $6], [%9 $9], [%9 $21], 
            phi %17 [%2 $15], [%2 $6], [%2 $9], [%2 $21], 
            phi %18 [%52 $15], [%14 $6], [%43 $9], [%62 $21], 
            phi %19 [%3 $15], [%3 $6], [%3 $9], [%3 $21], 
            phi %20 [%0 $15], [%0 $6], [%0 $9], [%0 $21], 
            get_global %21 global[4]
            call %22 fn[31](%20, )
            call %23 fn[20](%21, %22, )
            get_global %24 global[5]
            call %25 fn[20](%23, %24, )
            to_dyn %26 %17
            call %27 fn[31](%26, )
            call %28 fn[20](%25, %27, )
            get_global %29 global[6]
            call %30 fn[20](%28, %29, )
            call %31 fn[31](%15, )
            call %32 fn[20](%30, %31, )
            get_global %33 global[5]
            call %34 fn[20](%32, %33, )
            to_dyn %35 %19
            call %36 fn[31](%35, )
            call %37 fn[20](%34, %36, )
            get_global %38 global[7]
            call %39 fn[20](%37, %38, )
            call %40 fn[34](%39, )
            invoke_intrinsic %41 @eon.throw(%40, ) cont $24 unwind $24
        :$8 
            call_intrinsic %42 @eon.safe_cast(%0, )
            get_tid %43 %3
            switch %43 [$12, $11, $11, $11, $9, $10, $10, ] $9
        :$9 
            j_always $7
        :$10
            call_intrinsic %44 @eon.safe_cast(%1, )
            add %45 %42 %44
            to_dyn %46 %45
            ret %46
        :$11
            call_intrinsic %47 @eon.safe_cast(%1, )
            to_sfloat %48 %47
            add %49 %42 %48
            to_dyn %50 %49
            ret %50
        :$12
            to_dyn %51 %42
            ret %51
        :$13
            call_intrinsic %52 @eon.safe_cast(%0, )
            get_tid %53 %3
            switch %10 [$18, $17, $17, $17, $14, $16, $16, ] $14
        :$14
            j_always $15
        :$15
            j_always $7
        :$16
            to_sfloat %54 %52
            call_intrinsic %55 @eon.safe_cast(%1, )
            add %56 %54 %55
            to_dyn %57 %56
            ret %57
        :$17
            call_intrinsic %58 @eon.safe_cast(%1, )
            add %59 %52 %58
            to_dyn %60 %10
            ret %60
        :$18
            to_dyn %61 %52
            ret %61
        :$19
            get_tid %62 %3
            switch %62 [$23, $22, $22, $22, $20, $22, $22, ] $20
        :$20
            j_always $21
        :$21
            j_always $7
        :$22
            ret %1
        :$23
            float %63 0
            to_dyn %64 %63
            ret %64
        :$24
            unreachable
#7   = fn[15] fn(i32, ) -> obj<String>
    [Values]
        %0  i32
        %1  i32
        %2  bool
        %3  i32
        %4  bool
        %5  i32
        %6  bool
        %7  i32
        %8  bool
        %9  obj<String>
        %10 i32
        %11 ref<i32>
        %12 bytes
        %13 obj<String>
        %14 obj<String>
        %15 dyn
        %16 void
        %17 i32
        %18 i32
        %19 i32
        %20 bytes
        %21 i32
        %22 i32
        %23 i32
        %24 obj<String>
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 bool
        %30 i32
        %31 bytes
        %32 i32
        %33 i32
        %34 i32
        %35 i32
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 i32
        %41 i32
        %42 i32
        %43 i32
        %44 i32
        %45 i32
        %46 i32
        %47 obj<String>
        %48 i32
        %49 obj<String>
        %50 i32
        %51 ref<i32>
        %52 bytes
        %53 obj<String>
        %54 obj<String>
        %55 dyn
        %56 void
    [Code]
        :$0 
            j_always $1
        :$1 
            int %1 0
            cmp slt %2 %0 %2
            j_true %2 $7 $2
        :$2 
            int %3 65536
            cmp sge %4 %0 %2
            j_true %4 $7 $3
        :$3 
            int %5 55296
            cmp slt %6 %0 %2
            j_true %6 $6 $4
        :$4 
            int %7 57343
            cmp slt %8 %2 %0
            j_true %8 $6 $5
        :$5 
            get_global %9 global[8]
            mov %10 %0
            ref %11 %10
            call %12 fn[35](%10, %11, )
            call %13 fn[16](%6, %10, )
            call %14 fn[20](%4, %13, )
            call %15 fn[34](%4, )
            invoke_intrinsic %16 @eon.throw(%15, ) cont $10 unwind $10
        :$6 
            phi %17 [%7 $4], [%5 $3], 
            phi %18 [%0 $4], [%0 $3], 
            int %19 4
            call %20 fn[36](%19, )
            int %21 0
            set_i16 %6[%21] %18
            int %22 2
            int %23 0
            set_i16 %6[%22] %2
            new %24
            set_field %4.0 %6
            int %25 1
            set_field %4.1 %25
            ret %4
        :$7 
            phi %26 [%1 $1], [%3 $2], 
            phi %27 [%0 $1], [%0 $2], 
            int %28 1114112
            cmp sge %29 %27 %2
            j_true %29 $9 $8
        :$8 
            int %30 6
            call %31 fn[36](%30, )
            int %32 65536
            sub %33 %27 %2
            mov %34 %33
            int %35 0
            int %36 10
            sshr %37 %34 %8
            int %38 55296
            add %39 %2 %8
            set_i16 %6[%35] %2
            int %40 2
            int %41 1023
            and %42 %34 %8
            int %43 56320
            add %44 %2 %8
            set_i16 %6[%40] %2
            int %45 4
            int %46 0
            set_i16 %6[%45] %2
            new %47
            set_field %4.0 %6
            int %48 2
            set_field %4.1 %48
            ret %4
        :$9 
            get_global %49 global[8]
            mov %50 %27
            ref %51 %50
            call %52 fn[35](%50, %51, )
            call %53 fn[16](%6, %50, )
            call %54 fn[20](%4, %53, )
            call %55 fn[34](%4, )
            invoke_intrinsic %56 @eon.throw(%55, ) cont $10 unwind $10
        :$10
            unreachable
#8   = fn[16] fn(bytes, i32, ) -> obj<String>
    [Values]
        %0 bytes
        %1 i32
        %2 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            new %2
            set_field %2.0 %0
            set_field %2.1 %1
            ret %2
        :$2
            unreachable
#9   = fn[17] fn(dyn, ) -> bytes
    [Values]
        %0 dyn
        %1 void
        %2 dyn
        %3 void
        %4 dyn
        %5 obj<String>
        %6 void
        %7 bytes
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %1 @eon.null_check(%0, )
            dyn_get %2 %0.13
            call_intrinsic %3 @eon.null_check(%2, )
            call_closure %4 %2()
            call_intrinsic %5 @eon.safe_cast(%4, )
            call_intrinsic %6 @eon.null_check(%5, )
            get_field %7 %5.0
            ret %7
        :$2
            unreachable
#10  = fn[18] fn(bytes, ) -> obj<String>
    [Values]
        %0 bytes
        %1 obj<String>
        %2 i32
        %3 i32
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            set_field %1.0 %0
            int %2 0
            call %3 fn[37](%0, %2, )
            set_field %1.1 %3
            ret %1
        :$2
            unreachable
#11  = fn[19] fn(bytes, ) -> obj<String>
    [Values]
        %0 bytes
        %1 i32
        %2 i32
        %3 ref<i32>
        %4 bytes
        %5 obj<String>
        %6 i32
        %7 i32
    [Code]
        :$0
            j_always $1
        :$1
            int %1 0
            int %2 0
            ref %3 %1
            call %4 fn[38](%0, %2, %3, )
            new %5
            set_field %5.0 %4
            int %6 1
            sshr %7 %1 %6
            set_field %5.1 %7
            ret %5
        :$2
            unreachable
#12  = fn[20] fn(obj<String>, obj<String>, ) -> obj<String>
    [Values]
        %0  obj<String>
        %1  obj<String>
        %2  obj<String>
        %3  obj<String>
        %4  obj<String>
        %5  obj<String>
        %6  obj<String>
        %7  obj<String>
        %8  void
        %9  i32
        %10 i32
        %11 i32
        %12 void
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 bytes
        %20 i32
        %21 bytes
        %22 i32
        %23 void
        %24 bytes
        %25 i32
        %26 void
        %27 i32
        %28 obj<String>
        %29 i32
        %30 i32
        %31 obj<String>
        %32 obj<String>
        %33 void
        %34 i32
        %35 i32
        %36 i32
        %37 void
        %38 i32
        %39 i32
        %40 i32
        %41 i32
        %42 i32
        %43 i32
        %44 bytes
        %45 i32
        %46 bytes
        %47 i32
        %48 void
        %49 bytes
        %50 i32
        %51 void
        %52 i32
        %53 obj<String>
        %54 i32
        %55 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            j_not_null %0 $5 $2
        :$2 
            get_global %2 global[9]
            mov %3 %2
            j_not_null %1 $4 $3
        :$3 
            phi %4 [%1 $2], [%1 $5], 
            phi %5 [%3 $2], [%0 $5], 
            get_global %6 global[9]
            mov %7 %6
            call_intrinsic %8 @eon.null_check(%5, )
            get_field %9 %5.1
            int %10 1
            shl %11 %9 %10
            call_intrinsic %12 @eon.null_check(%7, )
            get_field %13 %7.1
            int %14 1
            shl %15 %13 %14
            add %16 %11 %15
            int %17 2
            add %18 %16 %17
            call %19 fn[36](%18, )
            int %20 0
            get_field %21 %5.0
            int %22 0
            call %23 fn[39](%19, %20, %21, %22, %11, )
            get_field %24 %7.0
            int %25 0
            call %26 fn[39](%19, %11, %24, %25, %15, )
            int %27 0
            set_i16 %19[%16] %27
            new %28
            set_field %28.0 %19
            int %29 1
            sshr %30 %16 %29
            set_field %28.1 %30
            ret %28
        :$4 
            phi %31 [%0 $5], [%3 $2], 
            phi %32 [%1 $5], [%1 $2], 
            call_intrinsic %33 @eon.null_check(%31, )
            get_field %34 %31.1
            int %35 1
            shl %36 %34 %35
            call_intrinsic %37 @eon.null_check(%32, )
            get_field %38 %32.1
            int %39 1
            shl %40 %38 %39
            add %41 %36 %40
            int %42 2
            add %43 %41 %42
            call %44 fn[36](%43, )
            int %45 0
            get_field %46 %31.0
            int %47 0
            call %48 fn[39](%44, %45, %46, %47, %36, )
            get_field %49 %32.0
            int %50 0
            call %51 fn[39](%44, %36, %49, %50, %40, )
            int %52 0
            set_i16 %44[%41] %52
            new %53
            set_field %53.0 %44
            int %54 1
            sshr %55 %41 %54
            set_field %53.1 %55
            ret %53
        :$5 
            j_not_null %1 $4 $3
        :$6 
            unreachable
#13  = fn[21] fn(obj<String>, obj<String>, ) -> void
    [Values]
        %0 obj<String>
        %1 obj<String>
        %2 void
        %3 bytes
        %4 i32
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            set_field %0.0 %3
            get_field %4 %1.1
            set_field %0.1 %4
            ret_void
        :$2
            unreachable
#14  = fn[0] fn(obj<String>, ) -> obj<String>
    [Values]
        %0 obj<String>
        %1 bytes
        %2 i32
        %3 i32
        %4 bytes
        %5 i32
        %6 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            int %2 0
            get_field %3 %0.1
            call %4 fn[40](%1, %2, %3, )
            get_field %5 %0.1
            new %6
            set_field %6.0 %4
            set_field %6.1 %5
            ret %6
        :$2
            unreachable
#15  = fn[1] fn(obj<String>, ) -> obj<String>
    [Values]
        %0 obj<String>
        %1 bytes
        %2 i32
        %3 i32
        %4 bytes
        %5 i32
        %6 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            int %2 0
            get_field %3 %0.1
            call %4 fn[41](%1, %2, %3, )
            get_field %5 %0.1
            new %6
            set_field %6.0 %4
            set_field %6.1 %5
            ret %6
        :$2
            unreachable
#16  = fn[2] fn(obj<String>, i32, ) -> obj<String>
    [Values]
        %0  obj<String>
        %1  i32
        %2  i32
        %3  bool
        %4  obj<String>
        %5  i32
        %6  bytes
        %7  bytes
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 obj<String>
        %15 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.1
            cmp ult %3 %1 %3
            j_true %3 $3 $2
        :$2 
            get_global %4 global[10]
            ret %4
        :$3 
            int %5 4
            call %6 fn[36](%5, )
            get_field %7 %0.0
            int %8 1
            shl %9 %1 %3
            get_i16 %10 %7[%9]
            int %11 0
            set_i16 %6[%3] %10
            int %12 2
            int %13 0
            set_i16 %6[%12] %3
            new %14
            set_field %14.0 %6
            int %15 1
            set_field %14.1 %15
            ret %14
        :$4 
            unreachable
#17  = fn[3] fn(obj<String>, i32, ) -> null<i32>
    [Values]
        %0  obj<String>
        %1  i32
        %2  i32
        %3  bool
        %4  null<i32>
        %5  bytes
        %6  i32
        %7  i32
        %8  i32
        %9  null<i32>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.1
            cmp ult %3 %1 %3
            j_true %3 $3 $2
        :$2 
            null %4
            ret %4
        :$3 
            get_field %5 %0.0
            int %6 1
            shl %7 %1 %3
            get_i16 %8 %5[%7]
            to_dyn %9 %8
            ret %9
        :$4 
            unreachable
#18  = fn[4] fn(obj<String>, i32, i32, bytes, i32, ) -> i32
    [Values]
        %0  obj<String>
        %1  i32
        %2  i32
        %3  bytes
        %4  i32
        %5  i32
        %6  bool
        %7  bool
        %8  i32
        %9  i32
        %10 i32
        %11 bytes
        %12 i32
        %13 obj<String>
        %14 bytes
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 bool
        %21 i32
        %22 i32
        %23 i32
        %24 bool
        %25 bytes
        %26 i32
        %27 i32
        %28 obj<String>
        %29 i32
        %30 i32
        %31 i32
        %32 i32
        %33 bool
        %34 bytes
        %35 i32
        %36 i32
        %37 obj<String>
        %38 i32
        %39 bytes
        %40 i32
        %41 bool
        %42 i32
        %43 i32
        %44 i32
        %45 i32
        %46 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %5 0
            nop
            bool %6 true
            j_false %6 $5 $2
        :$2 
            phi %7 [%6 $1], [%46 $7], 
            phi %8 [%2 $1], [%8 $7], 
            phi %9 [%4 $1], [%9 $7], 
            phi %10 [%5 $1], [%18 $7], 
            phi %11 [%3 $1], [%11 $7], 
            phi %12 [%1 $1], [%45 $7], 
            phi %13 [%0 $1], [%13 $7], 
            get_field %14 %13.0
            sub %15 %8 %12
            int %16 0
            call %17 fn[42](%14, %12, %15, %11, %16, %9, )
            mov %18 %17
            int %19 0
            cmp slt %20 %17 %19
            j_true %20 $4 $3
        :$3 
            int %21 1
            and %22 %17 %21
            int %23 0
            cmp ne %24 %22 %23
            j_true %24 $6 $4
        :$4 
            phi %25 [%14 $3], [%14 $2], 
            phi %26 [%9 $3], [%9 $2], 
            phi %27 [%23 $3], [%19 $2], 
            phi %28 [%13 $3], [%13 $2], 
            phi %29 [%12 $3], [%12 $2], 
            phi %30 [%18 $3], [%18 $2], 
            phi %31 [%22 $3], [%17 $2], 
            phi %32 [%8 $3], [%8 $2], 
            phi %33 [%7 $3], [%7 $2], 
            phi %34 [%11 $3], [%11 $2], 
            phi %35 [%16 $3], [%16 $2], 
            j_always $5
        :$5 
            phi %36 [%29 $4], [%45 $7], [%1 $1], 
            phi %37 [%28 $4], [%13 $7], [%0 $1], 
            phi %38 [%30 $4], [%18 $7], [%5 $1], 
            phi %39 [%34 $4], [%11 $7], [%3 $1], 
            phi %40 [%32 $4], [%8 $7], [%2 $1], 
            phi %41 [%33 $4], [%46 $7], [%6 $1], 
            phi %42 [%26 $4], [%9 $7], [%4 $1], 
            ret %38
        :$6 
            int %43 1
            add %44 %18 %43
            mov %45 %44
            j_always $7
        :$7 
            nop
            bool %46 true
            j_false %46 $5 $2
        :$8 
            unreachable
#19  = fn[5] fn(obj<String>, obj<String>, null<i32>, ) -> i32
    [Values]
        %0  obj<String>
        %1  obj<String>
        %2  null<i32>
        %3  i32
        %4  i32
        %5  i32
        %6  bool
        %7  i32
        %8  i32
        %9  bool
        %10 obj<String>
        %11 bool
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 i32
        %22 void
        %23 bytes
        %24 i32
        %25 i32
        %26 i32
        %27 i32
        %28 bool
        %29 i32
        %30 bytes
        %31 null<i32>
        %32 bool
        %33 obj<String>
        %34 obj<String>
        %35 i32
        %36 i32
        %37 i32
        %38 i32
        %39 bytes
        %40 i32
        %41 i32
        %42 i32
        %43 i32
        %44 i32
        %45 bool
        %46 i32
        %47 i32
        %48 i32
        %49 bool
        %50 i32
        %51 i32
        %52 bytes
        %53 i32
        %54 null<i32>
        %55 bytes
        %56 i32
        %57 bool
        %58 i32
        %59 i32
        %60 obj<String>
        %61 i32
        %62 i32
        %63 obj<String>
        %64 bytes
        %65 null<i32>
        %66 obj<String>
        %67 i32
        %68 i32
        %69 bool
        %70 obj<String>
        %71 i32
        %72 i32
        %73 i32
        %74 i32
        %75 i32
        %76 bool
        %77 i32
        %78 i32
        %79 i32
        %80 i32
        %81 i32
        %82 i32
        %83 bool
        %84 null<i32>
        %85 i32
        %86 obj<String>
        %87 obj<String>
        %88 i32
        %89 i32
        %90 i32
        %91 i32
        %92 void
        %93 bytes
        %94 i32
        %95 i32
        %96 i32
        %97 i32
        %98 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            j_null %2 $16 $2
        :$2 
            call_intrinsic %4 @eon.safe_cast(%2, )
            int %5 0
            cmp sge %6 %5 %4
            j_true %6 $16 $3
        :$3 
            call_intrinsic %7 @eon.safe_cast(%2, )
            get_field %8 %0.1
            cmp slt %9 %7 %8
            j_true %9 $7 $4
        :$4 
            get_global %10 global[10]
            cmp ne %11 %1 %6
            j_true %11 $6 $5
        :$5 
            get_field %12 %0.1
            ret %12
        :$6 
            int %13 -1
            ret %13
        :$7 
            call_intrinsic %14 @eon.safe_cast(%2, )
            int %15 1
            shl %16 %14 %15
            mov %17 %16
            mov %18 %17
            get_field %19 %0.1
            int %20 1
            shl %21 %19 %20
            call_intrinsic %22 @eon.null_check(%1, )
            get_field %23 %1.0
            get_field %24 %1.1
            int %25 1
            shl %26 %24 %9
            int %27 0
            nop
            bool %28 true
            j_false %28 $11 $8
        :$8 
            phi %29 [%18 $7], [%88 $16], [%82 $15], 
            phi %30 [%23 $7], [%93 $16], [%30 $15], 
            phi %31 [%2 $7], [%84 $16], [%31 $15], 
            phi %32 [%28 $7], [%98 $16], [%83 $15], 
            phi %33 [%0 $7], [%86 $16], [%33 $15], 
            phi %34 [%1 $7], [%87 $16], [%34 $15], 
            phi %35 [%27 $7], [%97 $16], [%43 $15], 
            phi %36 [%21 $7], [%91 $16], [%36 $15], 
            phi %37 [%17 $7], [%85 $16], [%37 $15], 
            phi %38 [%26 $7], [%96 $16], [%38 $15], 
            get_field %39 %33.0
            sub %40 %36 %29
            int %41 0
            call %42 fn[42](%39, %29, %40, %30, %41, %38, )
            mov %43 %11
            int %44 0
            cmp slt %45 %11 %44
            j_true %45 $10 $9
        :$9 
            int %46 1
            and %47 %11 %46
            int %48 0
            cmp ne %49 %11 %48
            j_true %49 $14 $10
        :$10
            phi %50 [%43 $8], [%43 $9], 
            phi %51 [%36 $8], [%36 $9], 
            phi %52 [%30 $8], [%30 $9], 
            phi %53 [%29 $8], [%29 $9], 
            phi %54 [%31 $8], [%31 $9], 
            phi %55 [%39 $8], [%39 $9], 
            phi %56 [%37 $8], [%37 $9], 
            phi %57 [%32 $8], [%32 $9], 
            phi %58 [%44 $8], [%48 $9], 
            phi %59 [%38 $8], [%38 $9], 
            phi %60 [%33 $8], [%33 $9], 
            phi %61 [%42 $8], [%47 $9], 
            phi %62 [%41 $8], [%41 $9], 
            phi %63 [%34 $8], [%34 $9], 
            j_always $11
        :$11
            phi %64 [%23 $7], [%93 $16], [%52 $10], [%30 $15], 
            phi %65 [%2 $7], [%84 $16], [%54 $10], [%31 $15], 
            phi %66 [%1 $7], [%87 $16], [%63 $10], [%34 $15], 
            phi %67 [%18 $7], [%88 $16], [%53 $10], [%82 $15], 
            phi %68 [%21 $7], [%91 $16], [%51 $10], [%36 $15], 
            phi %69 [%28 $7], [%98 $16], [%57 $10], [%83 $15], 
            phi %70 [%0 $7], [%86 $16], [%60 $10], [%33 $15], 
            phi %71 [%27 $7], [%97 $16], [%50 $10], [%43 $15], 
            phi %72 [%17 $7], [%85 $16], [%56 $10], [%37 $15], 
            phi %73 [%26 $7], [%96 $16], [%59 $10], [%38 $15], 
            mov %74 %9
            int %75 0
            cmp sge %76 %75 %9
            j_true %76 $13 $12
        :$12
            int %77 1
            sshr %78 %9 %77
            mov %79 %78
            ret %11
        :$13
            ret %11
        :$14
            int %80 1
            add %81 %9 %80
            mov %82 %11
            j_always $15
        :$15
            nop
            bool %83 true
            j_false %83 $11 $8
        :$16
            phi %84 [%2 $2], [%2 $1], 
            phi %85 [%3 $2], [%3 $1], 
            phi %86 [%0 $2], [%0 $1], 
            phi %87 [%1 $2], [%1 $1], 
            mov %88 %85
            get_field %89 %86.1
            int %90 1
            shl %91 %89 %90
            call_intrinsic %92 @eon.null_check(%87, )
            get_field %93 %87.0
            get_field %94 %87.1
            int %95 1
            shl %96 %94 %9
            int %97 0
            nop
            bool %98 true
            j_false %98 $11 $8
        :$17
            unreachable
#20  = fn[6] fn(obj<String>, obj<String>, null<i32>, ) -> i32
    [Values]
        %0  obj<String>
        %1  obj<String>
        %2  null<i32>
        %3  i32
        %4  i32
        %5  void
        %6  i32
        %7  i32
        %8  i32
        %9  i32
        %10 bool
        %11 i32
        %12 i32
        %13 i32
        %14 bool
        %15 i32
        %16 i32
        %17 obj<String>
        %18 i32
        %19 null<i32>
        %20 obj<String>
        %21 i32
        %22 i32
        %23 void
        %24 i32
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 i32
        %30 bool
        %31 i32
        %32 obj<String>
        %33 i32
        %34 obj<String>
        %35 i32
        %36 null<i32>
        %37 i32
        %38 i32
        %39 bytes
        %40 i32
        %41 i32
        %42 void
        %43 bytes
        %44 i32
        %45 i32
        %46 i32
        %47 bool
        %48 i32
        %49 i32
        %50 bool
        %51 i32
        %52 null<i32>
        %53 obj<String>
        %54 obj<String>
        %55 i32
        %56 i32
        %57 i32
        %58 i32
        %59 i32
        %60 i32
        %61 obj<String>
        %62 obj<String>
        %63 null<i32>
        %64 void
        %65 i32
        %66 i32
        %67 i32
        %68 i32
        %69 i32
        %70 i32
        %71 bool
        %72 i32
        %73 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.1
            j_null %2 $10 $2
        :$2 
            call_intrinsic %4 @eon.safe_cast(%2, )
            call_intrinsic %5 @eon.null_check(%1, )
            get_field %6 %1.1
            add %7 %4 %6
            mov %8 %7
            int %9 0
            cmp sge %10 %7 %9
            j_true %10 $11 $3
        :$3 
            int %11 0
            mov %12 %11
            get_field %13 %0.1
            cmp sge %14 %13 %11
            j_true %14 $10 $4
        :$4 
            phi %15 [%13 $3], [%72 $11], 
            phi %16 [%12 $3], [%8 $11], 
            phi %17 [%1 $3], [%1 $11], 
            phi %18 [%11 $3], [%7 $11], 
            phi %19 [%2 $3], [%2 $11], 
            phi %20 [%0 $3], [%0 $11], 
            get_field %21 %20.1
            mov %22 %21
            call_intrinsic %23 @eon.null_check(%17, )
            get_field %24 %17.1
            sub %25 %22 %24
            get_field %26 %17.1
            int %27 1
            shl %28 %26 %27
            nop
            int %29 0
            cmp slt %30 %25 %29
            j_true %30 $9 $5
        :$5 
            phi %31 [%27 $4], [%45 $8], [%68 $10], 
            phi %32 [%20 $4], [%32 $8], [%62 $10], 
            phi %33 [%25 $4], [%48 $8], [%66 $10], 
            phi %34 [%17 $4], [%34 $8], [%61 $10], 
            phi %35 [%28 $4], [%35 $8], [%69 $10], 
            phi %36 [%19 $4], [%36 $8], [%63 $10], 
            phi %37 [%22 $4], [%37 $8], [%60 $10], 
            phi %38 [%29 $4], [%49 $8], [%70 $10], 
            get_field %39 %32.0
            int %40 1
            shl %41 %33 %40
            call_intrinsic %42 @eon.null_check(%34, )
            get_field %43 %34.0
            int %44 0
            call %45 fn[43](%39, %41, %43, %44, %35, )
            int %46 0
            cmp ne %47 %45 %46
            j_true %47 $7 $6
        :$6 
            ret %33
        :$7 
            decr %48 %33
            j_always $8
        :$8 
            nop
            int %49 0
            cmp slt %50 %48 %49
            j_true %50 $9 $5
        :$9 
            phi %51 [%29 $4], [%49 $8], [%70 $10], 
            phi %52 [%19 $4], [%36 $8], [%63 $10], 
            phi %53 [%17 $4], [%34 $8], [%61 $10], 
            phi %54 [%20 $4], [%32 $8], [%62 $10], 
            phi %55 [%28 $4], [%35 $8], [%69 $10], 
            phi %56 [%25 $4], [%48 $8], [%66 $10], 
            phi %57 [%27 $4], [%45 $8], [%68 $10], 
            phi %58 [%22 $4], [%37 $8], [%60 $10], 
            int %59 -1
            ret %59
        :$10
            phi %60 [%12 $3], [%8 $11], [%3 $1], 
            phi %61 [%1 $3], [%1 $11], [%1 $1], 
            phi %62 [%0 $3], [%0 $11], [%0 $1], 
            phi %63 [%2 $3], [%2 $11], [%2 $1], 
            call_intrinsic %64 @eon.null_check(%61, )
            get_field %65 %61.1
            sub %66 %60 %65
            get_field %67 %61.1
            int %68 1
            shl %69 %67 %68
            nop
            int %70 0
            cmp slt %71 %66 %70
            j_true %71 $9 $5
        :$11
            get_field %72 %0.1
            cmp sge %73 %72 %7
            j_true %73 $10 $4
        :$12
            unreachable
#21  = fn[7] fn(obj<String>, obj<String>, ) -> obj<hl.types.ArrayObj>
    [Values]
        %0   obj<String>
        %1   obj<String>
        %2   type
        %3   i32
        %4   array<void>
        %5   obj<hl.types.ArrayObj>
        %6   i32
        %7   i32
        %8   bool
        %9   void
        %10  obj<String>
        %11  i32
        %12  void
        %13  i32
        %14  i32
        %15  bool
        %16  i32
        %17  i32
        %18  bool
        %19  i32
        %20  i32
        %21  type
        %22  obj<String>
        %23  array<void>
        %24  obj<String>
        %25  obj<hl.types.ArrayObj>
        %26  void
        %27  i32
        %28  i32
        %29  i32
        %30  null<i32>
        %31  obj<String>
        %32  i32
        %33  bool
        %34  type
        %35  i32
        %36  array<void>
        %37  obj<String>
        %38  i32
        %39  obj<String>
        %40  obj<hl.types.ArrayObj>
        %41  i32
        %42  i32
        %43  bool
        %44  obj<String>
        %45  i32
        %46  array<void>
        %47  obj<String>
        %48  type
        %49  bool
        %50  obj<hl.types.ArrayObj>
        %51  i32
        %52  i32
        %53  i32
        %54  i32
        %55  i32
        %56  i32
        %57  void
        %58  bytes
        %59  i32
        %60  i32
        %61  i32
        %62  bool
        %63  i32
        %64  obj<String>
        %65  type
        %66  i32
        %67  i32
        %68  i32
        %69  obj<hl.types.ArrayObj>
        %70  bool
        %71  array<void>
        %72  bytes
        %73  i32
        %74  obj<String>
        %75  i32
        %76  bytes
        %77  i32
        %78  i32
        %79  i32
        %80  i32
        %81  i32
        %82  bool
        %83  i32
        %84  i32
        %85  i32
        %86  bool
        %87  obj<hl.types.ArrayObj>
        %88  i32
        %89  i32
        %90  i32
        %91  obj<String>
        %92  i32
        %93  i32
        %94  i32
        %95  type
        %96  bool
        %97  i32
        %98  obj<String>
        %99  array<void>
        %100 i32
        %101 bytes
        %102 i32
        %103 bytes
        %104 i32
        %105 obj<hl.types.ArrayObj>
        %106 bytes
        %107 array<void>
        %108 i32
        %109 obj<String>
        %110 i32
        %111 i32
        %112 bool
        %113 i32
        %114 i32
        %115 type
        %116 obj<String>
        %117 i32
        %118 bool
        %119 void
        %120 i32
        %121 i32
        %122 null<i32>
        %123 obj<String>
        %124 i32
        %125 i32
        %126 obj<String>
        %127 type
        %128 obj<String>
        %129 obj<hl.types.ArrayObj>
        %130 array<void>
        %131 bool
        %132 i32
        %133 i32
        %134 i32
        %135 i32
        %136 void
        %137 i32
        %138 null<i32>
        %139 obj<String>
        %140 i32
        %141 i32
        %142 i32
        %143 bool
        %144 i32
        %145 i32
        %146 i32
        %147 bool
    [Code]
        :$0  
            j_always $1
        :$1  
            type %2 type[13]
            int %3 0
            call %4 fn[240](%2, %3, )
            call %5 fn[241](%4, )
            get_field %6 %0.1
            int %7 0
            cmp ne %8 %6 %7
            j_true %8 $3 $2
        :$2  
            call_intrinsic %9 @eon.null_check(%5, )
            get_global %10 global[10]
            call %11 fn[72](%5, %10, )
            ret %5
        :$3  
            call_intrinsic %12 @eon.null_check(%1, )
            get_field %13 %1.1
            int %14 0
            cmp ne %15 %13 %14
            j_true %15 $8 $4
        :$4  
            int %16 0
            get_field %17 %0.1
            nop
            cmp sge %18 %16 %17
            j_true %18 $7 $5
        :$5  
            phi %19 [%16 $4], [%28 $6], 
            phi %20 [%17 $4], [%20 $6], 
            phi %21 [%2 $4], [%21 $6], 
            phi %22 [%0 $4], [%22 $6], 
            phi %23 [%4 $4], [%23 $6], 
            phi %24 [%1 $4], [%24 $6], 
            phi %25 [%5 $4], [%25 $6], 
            call_intrinsic %26 @eon.null_check(%25, )
            mov %27 %19
            incr %28 %19
            int %29 1
            to_dyn %30 %29
            call %31 fn[8](%22, %8, %30, )
            call %32 fn[72](%25, %31, )
            j_always $6
        :$6  
            nop
            cmp sge %33 %28 %20
            j_true %33 $7 $5
        :$7  
            phi %34 [%2 $4], [%21 $6], 
            phi %35 [%17 $4], [%20 $6], 
            phi %36 [%4 $4], [%23 $6], 
            phi %37 [%0 $4], [%22 $6], 
            phi %38 [%16 $4], [%28 $6], 
            phi %39 [%1 $4], [%24 $6], 
            phi %40 [%5 $4], [%25 $6], 
            ret %40
        :$8  
            int %41 0
            get_field %42 %1.1
            nop
            bool %43 true
            j_false %43 $15 $9
        :$9  
            phi %44 [%1 $8], [%116 $17], 
            phi %45 [%42 $8], [%110 $17], 
            phi %46 [%4 $8], [%107 $17], 
            phi %47 [%0 $8], [%109 $17], 
            phi %48 [%2 $8], [%115 $17], 
            phi %49 [%43 $8], [%143 $17], 
            phi %50 [%5 $8], [%105 $17], 
            phi %51 [%41 $8], [%142 $17], 
            int %52 1
            shl %53 %51 %52
            get_field %54 %47.1
            int %55 1
            shl %56 %54 %55
            call_intrinsic %57 @eon.null_check(%44, )
            get_field %58 %44.0
            int %59 1
            shl %60 %45 %59
            int %61 0
            nop
            bool %62 true
            j_false %62 $13 $10
        :$10 
            phi %63 [%80 $19], [%61 $9], 
            phi %64 [%64 $19], [%44 $9], 
            phi %65 [%65 $19], [%48 $9], 
            phi %66 [%146 $19], [%53 $9], 
            phi %67 [%67 $19], [%45 $9], 
            phi %68 [%68 $19], [%60 $9], 
            phi %69 [%69 $19], [%50 $9], 
            phi %70 [%147 $19], [%62 $9], 
            phi %71 [%71 $19], [%46 $9], 
            phi %72 [%72 $19], [%58 $9], 
            phi %73 [%73 $19], [%51 $9], 
            phi %74 [%74 $19], [%47 $9], 
            phi %75 [%75 $19], [%56 $9], 
            get_field %76 %74.0
            sub %77 %75 %8
            int %78 0
            call %79 fn[42](%76, %8, %77, %72, %18, %68, )
            mov %80 %15
            int %81 0
            cmp slt %82 %15 %81
            j_true %82 $12 $11
        :$11 
            int %83 1
            and %84 %15 %83
            int %85 0
            cmp ne %86 %15 %85
            j_true %86 $18 $12
        :$12 
            phi %87 [%69 $11], [%69 $10], 
            phi %88 [%73 $11], [%73 $10], 
            phi %89 [%84 $11], [%79 $10], 
            phi %90 [%67 $11], [%67 $10], 
            phi %91 [%64 $11], [%64 $10], 
            phi %92 [%80 $11], [%80 $10], 
            phi %93 [%85 $11], [%81 $10], 
            phi %94 [%66 $11], [%66 $10], 
            phi %95 [%65 $11], [%65 $10], 
            phi %96 [%70 $11], [%70 $10], 
            phi %97 [%68 $11], [%68 $10], 
            phi %98 [%74 $11], [%74 $10], 
            phi %99 [%71 $11], [%71 $10], 
            phi %100 [%75 $11], [%75 $10], 
            phi %101 [%76 $11], [%76 $10], 
            phi %102 [%78 $11], [%78 $10], 
            phi %103 [%72 $11], [%72 $10], 
            j_always $13
        :$13 
            phi %104 [%51 $9], [%88 $12], [%73 $19], 
            phi %105 [%50 $9], [%87 $12], [%69 $19], 
            phi %106 [%58 $9], [%103 $12], [%72 $19], 
            phi %107 [%46 $9], [%99 $12], [%71 $19], 
            phi %108 [%53 $9], [%94 $12], [%146 $19], 
            phi %109 [%47 $9], [%98 $12], [%74 $19], 
            phi %110 [%45 $9], [%90 $12], [%67 $19], 
            phi %111 [%61 $9], [%92 $12], [%80 $19], 
            phi %112 [%62 $9], [%96 $12], [%147 $19], 
            phi %113 [%56 $9], [%100 $12], [%75 $19], 
            phi %114 [%60 $9], [%97 $12], [%68 $19], 
            phi %115 [%48 $9], [%95 $12], [%65 $19], 
            phi %116 [%44 $9], [%91 $12], [%64 $19], 
            int %117 0
            cmp sge %118 %111 %18
            j_true %118 $16 $14
        :$14 
            call_intrinsic %119 @eon.null_check(%105, )
            get_field %120 %109.1
            sub %121 %18 %104
            to_dyn %122 %18
            call %123 fn[8](%109, %104, %122, )
            call %124 fn[72](%105, %123, )
            j_always $15
        :$15 
            phi %125 [%42 $8], [%110 $17], [%110 $14], 
            phi %126 [%0 $8], [%109 $17], [%109 $14], 
            phi %127 [%2 $8], [%115 $17], [%115 $14], 
            phi %128 [%1 $8], [%116 $17], [%116 $14], 
            phi %129 [%5 $8], [%105 $17], [%105 $14], 
            phi %130 [%4 $8], [%107 $17], [%107 $14], 
            phi %131 [%43 $8], [%143 $17], [%112 $14], 
            phi %132 [%41 $8], [%142 $17], [%104 $14], 
            ret %129
        :$16 
            int %133 1
            sshr %134 %111 %18
            mov %135 %134
            call_intrinsic %136 @eon.null_check(%105, )
            sub %137 %15 %104
            to_dyn %138 %18
            call %139 fn[8](%109, %104, %138, )
            call %140 fn[72](%105, %139, )
            add %141 %15 %110
            mov %142 %141
            j_always $17
        :$17 
            nop
            bool %143 true
            j_false %143 $15 $9
        :$18 
            int %144 1
            add %145 %80 %144
            mov %146 %15
            j_always $19
        :$19 
            nop
            bool %147 true
            j_false %147 $13 $10
        :$20 
            unreachable
#22  = fn[8] fn(obj<String>, i32, null<i32>, ) -> obj<String>
    [Values]
        %0  obj<String>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  i32
        %5  i32
        %6  bool
        %7  i32
        %8  i32
        %9  i32
        %10 obj<String>
        %11 null<i32>
        %12 i32
        %13 obj<String>
        %14 i32
        %15 i32
        %16 obj<String>
        %17 i32
        %18 i32
        %19 null<i32>
        %20 i32
        %21 bool
        %22 i32
        %23 bool
        %24 obj<String>
        %25 i32
        %26 null<i32>
        %27 obj<String>
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bool
        %33 i32
        %34 i32
        %35 i32
        %36 bool
        %37 i32
        %38 i32
        %39 i32
        %40 i32
        %41 i32
        %42 null<i32>
        %43 i32
        %44 obj<String>
        %45 i32
        %46 bool
        %47 i32
        %48 i32
        %49 i32
        %50 bool
        %51 i32
        %52 obj<String>
        %53 i32
        %54 i32
        %55 i32
        %56 null<i32>
        %57 i32
        %58 i32
        %59 bool
        %60 i32
        %61 i32
        %62 obj<String>
        %63 i32
        %64 i32
        %65 i32
        %66 null<i32>
        %67 obj<String>
        %68 i32
        %69 i32
        %70 i32
        %71 i32
        %72 bytes
        %73 i32
        %74 bytes
        %75 i32
        %76 i32
        %77 i32
        %78 i32
        %79 void
        %80 i32
        %81 i32
        %82 i32
        %83 obj<String>
        %84 i32
        %85 bool
        %86 i32
        %87 bool
        %88 i32
        %89 i32
        %90 i32
        %91 i32
        %92 bool
        %93 obj<String>
        %94 i32
        %95 i32
        %96 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.1
            j_not_null %2 $21 $2
        :$2 
            mov %4 %3
            j_always $3
        :$3 
            int %5 0
            cmp ne %6 %4 %5
            j_true %6 $5 $4
        :$4 
            phi %7 [%95 $21], [%5 $3], 
            phi %8 [%94 $21], [%4 $3], 
            phi %9 [%3 $21], [%3 $3], 
            phi %10 [%0 $21], [%0 $3], 
            phi %11 [%2 $21], [%2 $3], 
            phi %12 [%1 $21], [%1 $3], 
            get_global %13 global[10]
            ret %13
        :$5 
            phi %14 [%1 $21], [%1 $3], 
            phi %15 [%95 $21], [%5 $3], 
            phi %16 [%0 $21], [%0 $3], 
            phi %17 [%3 $21], [%3 $3], 
            phi %18 [%94 $21], [%4 $3], 
            phi %19 [%2 $21], [%2 $3], 
            int %20 0
            cmp eq %21 %14 %20
            j_true %21 $8 $6
        :$6 
            int %22 0
            cmp sge %23 %18 %22
            j_true %23 $8 $7
        :$7 
            get_global %24 global[10]
            ret %24
        :$8 
            phi %25 [%14 $5], [%14 $6], 
            phi %26 [%19 $5], [%19 $6], 
            phi %27 [%16 $5], [%16 $6], 
            phi %28 [%17 $5], [%17 $6], 
            phi %29 [%18 $5], [%18 $6], 
            phi %30 [%20 $5], [%22 $6], 
            int %31 0
            cmp sge %32 %25 %31
            j_true %32 $18 $9
        :$9 
            add %33 %28 %25
            mov %34 %6
            int %35 0
            cmp sge %36 %6 %35
            j_true %36 $17 $10
        :$10
            int %37 0
            mov %38 %6
            j_always $11
        :$11
            phi %39 [%29 $10], [%90 $19], [%29 $18], [%29 $17], 
            phi %40 [%35 $10], [%91 $19], [%86 $18], [%35 $17], 
            phi %41 [%28 $10], [%28 $19], [%28 $18], [%28 $17], 
            phi %42 [%26 $10], [%26 $19], [%26 $18], [%26 $17], 
            phi %43 [%38 $10], [%25 $19], [%25 $18], [%34 $17], 
            phi %44 [%27 $10], [%27 $19], [%27 $18], [%27 $17], 
            add %45 %43 %39
            cmp uge %46 %41 %6
            j_true %46 $16 $12
        :$12
            sub %47 %41 %43
            mov %48 %6
            int %49 0
            cmp slt %50 %43 %49
            j_true %50 $14 $13
        :$13
            phi %51 [%45 $16], [%47 $12], 
            phi %52 [%44 $16], [%44 $12], 
            phi %53 [%39 $16], [%48 $12], 
            phi %54 [%41 $16], [%41 $12], 
            phi %55 [%43 $16], [%43 $12], 
            phi %56 [%42 $16], [%42 $12], 
            phi %57 [%84 $16], [%49 $12], 
            int %58 0
            cmp slt %59 %58 %53
            j_true %59 $15 $14
        :$14
            phi %60 [%47 $12], [%45 $16], [%51 $13], 
            phi %61 [%43 $12], [%43 $16], [%55 $13], 
            phi %62 [%44 $12], [%44 $16], [%52 $13], 
            phi %63 [%48 $12], [%39 $16], [%53 $13], 
            phi %64 [%49 $12], [%84 $16], [%58 $13], 
            phi %65 [%41 $12], [%41 $16], [%54 $13], 
            phi %66 [%42 $12], [%42 $16], [%56 $13], 
            get_global %67 global[10]
            ret %67
        :$15
            int %68 1
            add %69 %53 %68
            int %70 1
            shl %71 %6 %70
            call %72 fn[36](%6, )
            int %73 0
            get_field %74 %52.0
            int %75 1
            shl %76 %55 %75
            int %77 1
            shl %78 %53 %77
            call %79 fn[39](%72, %6, %74, %76, %78, )
            int %80 1
            shl %81 %53 %80
            int %82 0
            set_i16 %72[%6] %82
            new %83
            set_field %83.0 %72
            set_field %83.1 %53
            ret %83
        :$16
            int %84 0
            cmp slt %85 %43 %84
            j_true %85 $14 $13
        :$17
            j_always $11
        :$18
            int %86 0
            cmp sge %87 %29 %86
            j_true %87 $11 $19
        :$19
            add %88 %28 %29
            sub %89 %6 %25
            mov %90 %6
            int %91 0
            cmp sge %92 %6 %91
            j_true %92 $11 $20
        :$20
            get_global %93 global[10]
            ret %93
        :$21
            call_intrinsic %94 @eon.safe_cast(%2, )
            int %95 0
            cmp ne %96 %94 %95
            j_true %96 $5 $4
        :$22
            unreachable
#23  = fn[9] fn(obj<String>, i32, null<i32>, ) -> obj<String>
    [Values]
        %0  obj<String>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  i32
        %5  i32
        %6  obj<String>
        %7  i32
        %8  null<i32>
        %9  i32
        %10 i32
        %11 bool
        %12 i32
        %13 null<i32>
        %14 i32
        %15 i32
        %16 i32
        %17 obj<String>
        %18 i32
        %19 i32
        %20 i32
        %21 i32
        %22 i32
        %23 null<i32>
        %24 obj<String>
        %25 i32
        %26 bool
        %27 i32
        %28 i32
        %29 i32
        %30 i32
        %31 null<i32>
        %32 obj<String>
        %33 i32
        %34 i32
        %35 i32
        %36 i32
        %37 null<i32>
        %38 obj<String>
        %39 i32
        %40 i32
        %41 i32
        %42 obj<String>
        %43 null<i32>
        %44 i32
        %45 i32
        %46 null<i32>
        %47 obj<String>
        %48 i32
        %49 i32
        %50 i32
        %51 obj<String>
        %52 i32
        %53 null<i32>
        %54 i32
        %55 bool
        %56 i32
        %57 i32
        %58 bool
        %59 i32
        %60 i32
        %61 i32
        %62 bool
        %63 i32
        %64 i32
        %65 i32
        %66 bool
        %67 i32
        %68 i32
        %69 i32
        %70 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            j_not_null %2 $10 $2
        :$2 
            get_field %3 %0.1
            mov %4 %3
            j_always $3
        :$3 
            phi %5 [%3 $2], [%63 $11], [%59 $12], 
            phi %6 [%0 $2], [%0 $11], [%0 $12], 
            phi %7 [%1 $2], [%1 $11], [%1 $12], 
            phi %8 [%2 $2], [%2 $11], [%2 $12], 
            phi %9 [%4 $2], [%64 $11], [%60 $12], 
            int %10 0
            cmp sge %11 %7 %10
            j_true %11 $8 $4
        :$4 
            phi %12 [%1 $13], [%7 $3], 
            phi %13 [%2 $13], [%8 $3], 
            phi %14 [%69 $13], [%10 $3], 
            phi %15 [%67 $13], [%5 $3], 
            phi %16 [%68 $13], [%9 $3], 
            phi %17 [%0 $13], [%6 $3], 
            int %18 0
            mov %19 %18
            j_always $5
        :$5 
            phi %20 [%54 $8], [%14 $4], 
            phi %21 [%50 $8], [%18 $4], 
            phi %22 [%49 $8], [%19 $4], 
            phi %23 [%53 $8], [%13 $4], 
            phi %24 [%51 $8], [%17 $4], 
            phi %25 [%48 $8], [%16 $4], 
            cmp sge %26 %25 %22
            j_true %26 $7 $6
        :$6 
            phi %27 [%20 $5], [%54 $9], 
            phi %28 [%25 $5], [%48 $9], 
            phi %29 [%21 $5], [%56 $9], 
            phi %30 [%22 $5], [%57 $9], 
            phi %31 [%23 $5], [%53 $9], 
            phi %32 [%24 $5], [%51 $9], 
            mov %33 %30
            mov %34 %28
            mov %35 %33
            sub %36 %35 %34
            to_dyn %37 %36
            call %38 fn[8](%32, %34, %37, )
            ret %38
        :$7 
            phi %39 [%54 $9], [%20 $5], 
            phi %40 [%48 $9], [%25 $5], 
            phi %41 [%56 $9], [%21 $5], 
            phi %42 [%51 $9], [%24 $5], 
            phi %43 [%53 $9], [%23 $5], 
            phi %44 [%57 $9], [%22 $5], 
            sub %45 %40 %44
            to_dyn %46 %45
            call %47 fn[8](%42, %44, %46, )
            ret %47
        :$8 
            phi %48 [%9 $3], [%68 $13], 
            phi %49 [%7 $3], [%1 $13], 
            phi %50 [%5 $3], [%67 $13], 
            phi %51 [%6 $3], [%0 $13], 
            phi %52 [%10 $3], [%69 $13], 
            phi %53 [%8 $3], [%2 $13], 
            get_field %54 %51.1
            cmp sge %55 %54 %49
            j_true %55 $5 $9
        :$9 
            get_field %56 %51.1
            mov %57 %56
            cmp sge %58 %48 %57
            j_true %58 $7 $6
        :$10
            call_intrinsic %59 @eon.safe_cast(%2, )
            mov %60 %59
            int %61 0
            cmp sge %62 %59 %61
            j_true %62 $12 $11
        :$11
            int %63 0
            mov %64 %63
            j_always $3
        :$12
            get_field %65 %0.1
            cmp sge %66 %65 %59
            j_true %66 $3 $13
        :$13
            get_field %67 %0.1
            mov %68 %67
            int %69 0
            cmp sge %70 %1 %69
            j_true %70 $8 $4
        :$14
            unreachable
#24  = fn[10] fn(obj<String>, ) -> obj<String>
    [Values]
        %0 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            ret %0
        :$2
            unreachable
#25  = fn[11] fn(obj<String>, ) -> bytes
    [Values]
        %0 obj<String>
        %1 bytes
        %2 i32
        %3 ref<i32>
        %4 bytes
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            int %2 0
            null %3
            call %4 fn[242](%1, %2, %3, )
            ret %4
        :$2
            unreachable
#26  = fn[12] fn(obj<String>, ) -> bytes
    [Values]
        %0 obj<String>
        %1 bytes
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            ret %1
        :$2
            unreachable
#27  = fn[13] fn(obj<String>, dyn, ) -> i32
    [Values]
        %0  obj<String>
        %1  dyn
        %2  obj<$String>
        %3  bool
        %4  obj<String>
        %5  obj<$String>
        %6  obj<String>
        %7  bool
        %8  obj<String>
        %9  dyn
        %10 i32
        %11 obj<String>
        %12 obj<$String>
        %13 obj<String>
        %14 bool
        %15 dyn
        %16 bytes
        %17 void
        %18 bytes
        %19 i32
        %20 i32
        %21 bool
        %22 i32
        %23 i32
        %24 i32
        %25 bool
        %26 dyn
        %27 i32
        %28 bool
        %29 obj<$String>
        %30 obj<String>
        %31 i32
        %32 i32
        %33 bytes
        %34 obj<String>
        %35 bytes
        %36 i32
        %37 i32
        %38 i32
        %39 obj<String>
        %40 bool
        %41 bytes
        %42 i32
        %43 obj<String>
        %44 i32
        %45 dyn
        %46 i32
        %47 obj<$String>
        %48 bytes
        %49 i32
        %50 i32
        %51 i32
        %52 bool
        %53 obj<String>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_global %2 global[2]
            call %3 fn[14](%2, %1, )
            j_false %3 $11 $2
        :$2 
            call_intrinsic %4 @eon.unsafe_cast(%1, )
            j_always $3
        :$3 
            j_not_null %4 $5 $4
        :$4 
            phi %5 [%2 $11], [%2 $3], 
            phi %6 [%0 $11], [%0 $3], 
            phi %7 [%3 $11], [%3 $3], 
            phi %8 [%53 $11], [%4 $3], 
            phi %9 [%1 $11], [%1 $3], 
            call %10 fn[243](%6, %9, )
            ret %10
        :$5 
            phi %11 [%53 $11], [%4 $3], 
            phi %12 [%2 $11], [%2 $3], 
            phi %13 [%0 $11], [%0 $3], 
            phi %14 [%3 $11], [%3 $3], 
            phi %15 [%1 $11], [%1 $3], 
            get_field %16 %13.0
            call_intrinsic %17 @eon.null_check(%11, )
            get_field %18 %11.0
            get_field %19 %13.1
            get_field %20 %11.1
            cmp sge %21 %19 %20
            j_true %21 $10 $6
        :$6 
            get_field %22 %13.1
            j_always $7
        :$7 
            call %23 fn[244](%16, %18, %22, )
            int %24 0
            cmp ne %25 %23 %24
            j_true %25 $9 $8
        :$8 
            phi %26 [%15 $7], [%15 $10], 
            phi %27 [%20 $7], [%20 $10], 
            phi %28 [%14 $7], [%14 $10], 
            phi %29 [%12 $7], [%12 $10], 
            phi %30 [%13 $7], [%13 $10], 
            phi %31 [%24 $7], [%51 $10], 
            phi %32 [%23 $7], [%50 $10], 
            phi %33 [%16 $7], [%16 $10], 
            phi %34 [%11 $7], [%11 $10], 
            phi %35 [%18 $7], [%18 $10], 
            get_field %36 %30.1
            get_field %37 %34.1
            sub %38 %36 %37
            ret %38
        :$9 
            phi %39 [%13 $10], [%13 $7], 
            phi %40 [%14 $10], [%14 $7], 
            phi %41 [%18 $10], [%18 $7], 
            phi %42 [%20 $10], [%20 $7], 
            phi %43 [%11 $10], [%11 $7], 
            phi %44 [%51 $10], [%24 $7], 
            phi %45 [%15 $10], [%15 $7], 
            phi %46 [%50 $10], [%23 $7], 
            phi %47 [%12 $10], [%12 $7], 
            phi %48 [%16 $10], [%16 $7], 
            ret %46
        :$10
            get_field %49 %11.1
            call %50 fn[244](%16, %18, %49, )
            int %51 0
            cmp ne %52 %50 %51
            j_true %52 $9 $8
        :$11
            null %53
            j_not_null %53 $5 $4
        :$12
            unreachable
#28  = fn[245] fn(obj<StringBuf>, ) -> void
    [Values]
        %0 obj<StringBuf>
        %1 i32
        %2 i32
        %3 i32
        %4 bytes
    [Code]
        :$0
            j_always $1
        :$1
            int %1 0
            set_field %0.2 %1
            int %2 8
            set_field %0.1 %2
            get_field %3 %0.1
            call %4 fn[36](%3, )
            set_field %0.0 %4
            ret_void
        :$2
            unreachable
#29  = fn[246] fn(obj<StringBuf>, dyn, ) -> void
    [Values]
        %0   obj<StringBuf>
        %1   dyn
        %2   i32
        %3   obj<$String>
        %4   bool
        %5   obj<String>
        %6   obj<String>
        %7   obj<StringBuf>
        %8   dyn
        %9   i32
        %10  obj<$String>
        %11  bool
        %12  void
        %13  bytes
        %14  i32
        %15  i32
        %16  i32
        %17  i32
        %18  i32
        %19  i32
        %20  bool
        %21  i32
        %22  i32
        %23  i32
        %24  i32
        %25  i32
        %26  i32
        %27  i32
        %28  bool
        %29  i32
        %30  bytes
        %31  i32
        %32  bytes
        %33  i32
        %34  i32
        %35  void
        %36  bytes
        %37  i32
        %38  i32
        %39  void
        %40  i32
        %41  i32
        %42  bytes
        %43  i32
        %44  bytes
        %45  i32
        %46  i32
        %47  void
        %48  bytes
        %49  i32
        %50  i32
        %51  void
        %52  i32
        %53  i32
        %54  bytes
        %55  i32
        %56  i32
        %57  void
        %58  i32
        %59  i32
        %60  bool
        %61  dyn
        %62  obj<$String>
        %63  obj<String>
        %64  obj<StringBuf>
        %65  i32
        %66  ref<i32>
        %67  bytes
        %68  i32
        %69  i32
        %70  i32
        %71  i32
        %72  i32
        %73  bool
        %74  i32
        %75  i32
        %76  i32
        %77  i32
        %78  i32
        %79  i32
        %80  i32
        %81  bool
        %82  i32
        %83  bytes
        %84  i32
        %85  bytes
        %86  i32
        %87  i32
        %88  void
        %89  bytes
        %90  i32
        %91  i32
        %92  void
        %93  i32
        %94  i32
        %95  bytes
        %96  i32
        %97  bytes
        %98  i32
        %99  i32
        %100 void
        %101 bytes
        %102 i32
        %103 i32
        %104 void
        %105 i32
        %106 i32
        %107 bytes
        %108 i32
        %109 i32
        %110 void
        %111 i32
        %112 i32
        %113 obj<String>
    [Code]
        :$0  
            j_always $1
        :$1  
            int %2 0
            get_global %3 global[2]
            call %4 fn[14](%3, %1, )
            j_false %4 $14 $2
        :$2  
            call_intrinsic %5 @eon.unsafe_cast(%1, )
            j_always $3
        :$3  
            j_null %5 $9 $4
        :$4  
            phi %6 [%113 $14], [%5 $3], 
            phi %7 [%0 $14], [%0 $3], 
            phi %8 [%1 $14], [%1 $3], 
            phi %9 [%2 $14], [%2 $3], 
            phi %10 [%3 $14], [%3 $3], 
            phi %11 [%4 $14], [%4 $3], 
            call_intrinsic %12 @eon.null_check(%6, )
            get_field %13 %6.0
            get_field %14 %6.1
            int %15 1
            shl %16 %14 %15
            get_field %17 %7.2
            add %18 %17 %16
            get_field %19 %7.1
            cmp sge %20 %19 %18
            j_true %20 $8 $5
        :$5  
            get_field %21 %7.2
            add %22 %21 %16
            get_field %23 %7.1
            int %24 3
            mul %25 %23 %24
            int %26 1
            sshr %27 %25 %26
            cmp sge %28 %27 %22
            j_true %28 $7 $6
        :$6  
            mov %29 %22
            call %30 fn[36](%29, )
            int %31 0
            get_field %32 %7.0
            int %33 0
            get_field %34 %7.2
            call %35 fn[39](%30, %31, %32, %33, %34, )
            set_field %7.0 %30
            set_field %7.1 %29
            get_field %36 %7.0
            get_field %37 %7.2
            int %38 0
            call %39 fn[39](%36, %37, %13, %38, %16, )
            get_field %40 %7.2
            add %41 %40 %16
            set_field %7.2 %41
            ret_void
        :$7  
            call %42 fn[36](%27, )
            int %43 0
            get_field %44 %7.0
            int %45 0
            get_field %46 %7.2
            call %47 fn[39](%42, %43, %44, %45, %46, )
            set_field %7.0 %42
            set_field %7.1 %27
            get_field %48 %7.0
            get_field %49 %7.2
            int %50 0
            call %51 fn[39](%48, %49, %13, %50, %16, )
            get_field %52 %7.2
            add %53 %52 %16
            set_field %7.2 %53
            ret_void
        :$8  
            get_field %54 %7.0
            get_field %55 %7.2
            int %56 0
            call %57 fn[39](%54, %55, %13, %56, %16, )
            get_field %58 %7.2
            add %59 %58 %16
            set_field %7.2 %59
            ret_void
        :$9  
            phi %60 [%4 $3], [%4 $14], 
            phi %61 [%1 $3], [%1 $14], 
            phi %62 [%3 $3], [%3 $14], 
            phi %63 [%5 $3], [%113 $14], 
            phi %64 [%0 $3], [%0 $14], 
            phi %65 [%2 $3], [%2 $14], 
            ref %66 %65
            call %67 fn[32](%61, %66, )
            int %68 1
            shl %69 %65 %68
            get_field %70 %64.2
            add %71 %70 %69
            get_field %72 %64.1
            cmp sge %73 %72 %71
            j_true %73 $13 $10
        :$10 
            get_field %74 %64.2
            add %75 %74 %69
            get_field %76 %64.1
            int %77 3
            mul %78 %76 %77
            int %79 1
            sshr %80 %78 %79
            cmp sge %81 %80 %75
            j_true %81 $12 $11
        :$11 
            mov %82 %75
            call %83 fn[36](%82, )
            int %84 0
            get_field %85 %64.0
            int %86 0
            get_field %87 %64.2
            call %88 fn[39](%83, %84, %85, %86, %87, )
            set_field %64.0 %83
            set_field %64.1 %82
            get_field %89 %64.0
            get_field %90 %64.2
            int %91 0
            call %92 fn[39](%89, %90, %67, %91, %69, )
            get_field %93 %64.2
            add %94 %93 %69
            set_field %64.2 %94
            ret_void
        :$12 
            call %95 fn[36](%80, )
            int %96 0
            get_field %97 %64.0
            int %98 0
            get_field %99 %64.2
            call %100 fn[39](%95, %96, %97, %98, %99, )
            set_field %64.0 %95
            set_field %64.1 %80
            get_field %101 %64.0
            get_field %102 %64.2
            int %103 0
            call %104 fn[39](%101, %102, %67, %103, %69, )
            get_field %105 %64.2
            add %106 %105 %69
            set_field %64.2 %106
            ret_void
        :$13 
            get_field %107 %64.0
            get_field %108 %64.2
            int %109 0
            call %110 fn[39](%107, %108, %67, %109, %69, )
            get_field %111 %64.2
            add %112 %111 %69
            set_field %64.2 %112
            ret_void
        :$14 
            null %113
            j_null %113 $9 $4
        :$15 
            unreachable
#30  = fn[247] fn(obj<StringBuf>, i32, ) -> void
    [Values]
        %0   obj<StringBuf>
        %1   i32
        %2   i32
        %3   bool
        %4   i32
        %5   bool
        %6   i32
        %7   bool
        %8   i32
        %9   bool
        %10  obj<String>
        %11  i32
        %12  ref<i32>
        %13  bytes
        %14  obj<String>
        %15  obj<String>
        %16  dyn
        %17  void
        %18  i32
        %19  obj<StringBuf>
        %20  i32
        %21  i32
        %22  i32
        %23  i32
        %24  i32
        %25  bool
        %26  i32
        %27  i32
        %28  i32
        %29  i32
        %30  i32
        %31  i32
        %32  bool
        %33  i32
        %34  i32
        %35  bytes
        %36  i32
        %37  bytes
        %38  i32
        %39  i32
        %40  void
        %41  bytes
        %42  i32
        %43  i32
        %44  i32
        %45  i32
        %46  i32
        %47  i32
        %48  bytes
        %49  i32
        %50  obj<StringBuf>
        %51  bytes
        %52  i32
        %53  bytes
        %54  i32
        %55  i32
        %56  void
        %57  bytes
        %58  i32
        %59  i32
        %60  i32
        %61  i32
        %62  bytes
        %63  i32
        %64  i32
        %65  i32
        %66  i32
        %67  obj<StringBuf>
        %68  i32
        %69  i32
        %70  i32
        %71  bool
        %72  i32
        %73  i32
        %74  i32
        %75  i32
        %76  bool
        %77  i32
        %78  i32
        %79  i32
        %80  i32
        %81  i32
        %82  i32
        %83  bool
        %84  i32
        %85  i32
        %86  bytes
        %87  i32
        %88  bytes
        %89  i32
        %90  i32
        %91  void
        %92  i32
        %93  i32
        %94  i32
        %95  bytes
        %96  i32
        %97  i32
        %98  i32
        %99  i32
        %100 i32
        %101 bytes
        %102 i32
        %103 i32
        %104 i32
        %105 i32
        %106 i32
        %107 i32
        %108 i32
        %109 i32
        %110 i32
        %111 i32
        %112 bytes
        %113 i32
        %114 bytes
        %115 i32
        %116 i32
        %117 void
        %118 i32
        %119 i32
        %120 i32
        %121 bytes
        %122 i32
        %123 i32
        %124 i32
        %125 i32
        %126 i32
        %127 bytes
        %128 i32
        %129 i32
        %130 i32
        %131 i32
        %132 i32
        %133 i32
        %134 i32
        %135 i32
        %136 i32
        %137 i32
        %138 i32
        %139 i32
        %140 i32
        %141 bytes
        %142 i32
        %143 i32
        %144 i32
        %145 i32
        %146 i32
        %147 bytes
        %148 i32
        %149 i32
        %150 i32
        %151 i32
        %152 i32
        %153 i32
        %154 i32
        %155 i32
        %156 i32
        %157 i32
        %158 obj<String>
        %159 i32
        %160 ref<i32>
        %161 bytes
        %162 obj<String>
        %163 obj<String>
        %164 dyn
        %165 void
    [Code]
        :$0  
            j_always $1
        :$1  
            int %2 0
            cmp slt %3 %1 %2
            j_true %3 $12 $2
        :$2  
            int %4 65536
            cmp sge %5 %1 %4
            j_true %5 $12 $3
        :$3  
            int %6 55296
            cmp slt %7 %1 %6
            j_true %7 $6 $4
        :$4  
            int %8 57343
            cmp slt %9 %8 %1
            j_true %9 $6 $5
        :$5  
            get_global %10 global[8]
            mov %11 %1
            ref %12 %3
            call %13 fn[35](%3, %7, )
            call %14 fn[16](%13, %3, )
            call %15 fn[20](%10, %9, )
            call %16 fn[34](%15, )
            invoke_intrinsic %17 @eon.throw(%5, ) cont $19 unwind $19
        :$6  
            phi %18 [%8 $4], [%6 $3], 
            phi %19 [%0 $4], [%0 $3], 
            phi %20 [%1 $4], [%1 $3], 
            get_field %21 %19.2
            int %22 2
            add %23 %3 %22
            get_field %24 %19.1
            cmp sge %25 %24 %3
            j_true %25 $11 $7
        :$7  
            get_field %26 %19.1
            int %27 3
            mul %28 %3 %27
            int %29 1
            sshr %30 %3 %29
            int %31 0
            cmp sge %32 %3 %31
            j_true %32 $10 $8
        :$8  
            int %33 0
            mov %34 %33
            call %35 fn[36](%3, )
            int %36 0
            get_field %37 %19.0
            int %38 0
            get_field %39 %19.2
            call %40 fn[39](%35, %36, %37, %38, %39, )
            set_field %19.0 %35
            set_field %19.1 %3
            get_field %41 %19.0
            get_field %42 %19.2
            set_i16 %41[%3] %20
            get_field %43 %19.2
            int %44 2
            add %45 %3 %44
            set_field %19.2 %3
            j_always $9
        :$9  
            phi %46 [%110 $15], [%156 $17], [%60 $10], [%44 $8], [%136 $16], [%65 $11], 
            phi %47 [%94 $15], [%140 $17], [%20 $10], [%20 $8], [%120 $16], [%20 $11], 
            phi %48 [%101 $15], [%147 $17], [%57 $10], [%41 $8], [%127 $16], [%62 $11], 
            phi %49 [%111 $15], [%157 $17], [%61 $10], [%45 $8], [%137 $16], [%66 $11], 
            phi %50 [%67 $15], [%67 $17], [%19 $10], [%19 $8], [%67 $16], [%19 $11], 
            ret_void
        :$10 
            call %51 fn[36](%3, )
            int %52 0
            get_field %53 %19.0
            int %54 0
            get_field %55 %19.2
            call %56 fn[39](%51, %52, %53, %54, %55, )
            set_field %19.0 %51
            set_field %19.1 %3
            get_field %57 %19.0
            get_field %58 %19.2
            set_i16 %57[%3] %20
            get_field %59 %19.2
            int %60 2
            add %61 %3 %60
            set_field %19.2 %3
            j_always $9
        :$11 
            get_field %62 %19.0
            get_field %63 %19.2
            set_i16 %62[%3] %20
            get_field %64 %19.2
            int %65 2
            add %66 %3 %65
            set_field %19.2 %3
            j_always $9
        :$12 
            phi %67 [%0 $2], [%0 $1], 
            phi %68 [%1 $2], [%1 $1], 
            phi %69 [%4 $2], [%2 $1], 
            int %70 1114112
            cmp sge %71 %68 %70
            j_true %71 $18 $13
        :$13 
            get_field %72 %67.2
            int %73 4
            add %74 %3 %73
            get_field %75 %67.1
            cmp sge %76 %75 %3
            j_true %76 $17 $14
        :$14 
            get_field %77 %67.1
            int %78 3
            mul %79 %3 %78
            int %80 1
            sshr %81 %3 %80
            int %82 0
            cmp sge %83 %3 %82
            j_true %83 $16 $15
        :$15 
            int %84 0
            mov %85 %84
            call %86 fn[36](%3, )
            int %87 0
            get_field %88 %67.0
            int %89 0
            get_field %90 %67.2
            call %91 fn[39](%86, %87, %88, %89, %90, )
            set_field %67.0 %86
            set_field %67.1 %3
            int %92 65536
            sub %93 %68 %92
            mov %94 %3
            get_field %95 %67.0
            get_field %96 %67.2
            int %97 10
            sshr %98 %94 %97
            int %99 55296
            add %100 %98 %99
            set_i16 %95[%3] %100
            get_field %101 %67.0
            get_field %102 %67.2
            int %103 2
            add %104 %3 %103
            int %105 1023
            and %106 %94 %105
            int %107 56320
            add %108 %106 %107
            set_i16 %101[%3] %108
            get_field %109 %67.2
            int %110 4
            add %111 %3 %110
            set_field %67.2 %3
            j_always $9
        :$16 
            call %112 fn[36](%3, )
            int %113 0
            get_field %114 %67.0
            int %115 0
            get_field %116 %67.2
            call %117 fn[39](%112, %113, %114, %115, %116, )
            set_field %67.0 %112
            set_field %67.1 %3
            int %118 65536
            sub %119 %68 %118
            mov %120 %3
            get_field %121 %67.0
            get_field %122 %67.2
            int %123 10
            sshr %124 %120 %123
            int %125 55296
            add %126 %124 %125
            set_i16 %121[%3] %126
            get_field %127 %67.0
            get_field %128 %67.2
            int %129 2
            add %130 %3 %129
            int %131 1023
            and %132 %120 %131
            int %133 56320
            add %134 %132 %133
            set_i16 %127[%3] %134
            get_field %135 %67.2
            int %136 4
            add %137 %3 %136
            set_field %67.2 %3
            j_always $9
        :$17 
            int %138 65536
            sub %139 %68 %138
            mov %140 %3
            get_field %141 %67.0
            get_field %142 %67.2
            int %143 10
            sshr %144 %140 %143
            int %145 55296
            add %146 %144 %145
            set_i16 %141[%3] %146
            get_field %147 %67.0
            get_field %148 %67.2
            int %149 2
            add %150 %3 %149
            int %151 1023
            and %152 %140 %151
            int %153 56320
            add %154 %152 %153
            set_i16 %147[%3] %154
            get_field %155 %67.2
            int %156 4
            add %157 %3 %156
            set_field %67.2 %3
            j_always $9
        :$18 
            get_global %158 global[8]
            mov %159 %68
            ref %160 %3
            call %161 fn[35](%3, %7, )
            call %162 fn[16](%161, %3, )
            call %163 fn[20](%158, %9, )
            call %164 fn[34](%163, )
            invoke_intrinsic %165 @eon.throw(%5, ) cont $19 unwind $19
        :$19 
            unreachable
#31  = fn[248] fn(obj<StringBuf>, ) -> obj<String>
    [Values]
        %0  obj<StringBuf>
        %1  i32
        %2  i32
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  i32
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 bool
        %13 i32
        %14 i32
        %15 bytes
        %16 i32
        %17 bytes
        %18 i32
        %19 i32
        %20 void
        %21 bytes
        %22 i32
        %23 i32
        %24 bytes
        %25 i32
        %26 i32
        %27 i32
        %28 obj<String>
        %29 bytes
        %30 i32
        %31 bytes
        %32 i32
        %33 i32
        %34 void
        %35 bytes
        %36 i32
        %37 i32
        %38 bytes
        %39 i32
        %40 i32
        %41 i32
        %42 obj<String>
        %43 bytes
        %44 i32
        %45 i32
        %46 bytes
        %47 i32
        %48 i32
        %49 i32
        %50 obj<String>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.2
            int %2 2
            add %3 %1 %2
            get_field %4 %0.1
            cmp sge %5 %4 %3
            j_true %5 $5 $2
        :$2 
            get_field %6 %0.1
            int %7 3
            mul %8 %6 %7
            int %9 1
            sshr %10 %8 %9
            int %11 0
            cmp sge %12 %10 %11
            j_true %12 $4 $3
        :$3 
            int %13 0
            mov %14 %13
            call %15 fn[36](%14, )
            int %16 0
            get_field %17 %0.0
            int %18 0
            get_field %19 %0.2
            call %20 fn[39](%5, %16, %17, %18, %19, )
            set_field %0.0 %5
            set_field %0.1 %14
            get_field %21 %0.0
            get_field %22 %0.2
            int %23 0
            set_i16 %5[%22] %23
            get_field %24 %0.0
            get_field %25 %0.2
            int %26 1
            sshr %27 %25 %26
            new %28
            set_field %28.0 %5
            set_field %28.1 %27
            ret %28
        :$4 
            call %29 fn[36](%10, )
            int %30 0
            get_field %31 %0.0
            int %32 0
            get_field %33 %0.2
            call %34 fn[39](%5, %30, %31, %32, %33, )
            set_field %0.0 %5
            set_field %0.1 %10
            get_field %35 %0.0
            get_field %36 %0.2
            int %37 0
            set_i16 %5[%36] %37
            get_field %38 %0.0
            get_field %39 %0.2
            int %40 1
            sshr %41 %39 %40
            new %42
            set_field %42.0 %5
            set_field %42.1 %41
            ret %42
        :$5 
            get_field %43 %0.0
            get_field %44 %0.2
            int %45 0
            set_i16 %5[%44] %45
            get_field %46 %0.0
            get_field %47 %0.2
            int %48 1
            sshr %49 %47 %48
            new %50
            set_field %50.0 %5
            set_field %50.1 %49
            ret %50
        :$6 
            unreachable
#32  = fn[249] fn(obj<StringBuf>, ) -> bytes
    [Values]
        %0 obj<StringBuf>
        %1 obj<String>
        %2 void
        %3 bytes
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[248](%0, )
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            ret %3
        :$2
            unreachable
#33  = fn[250] fn(obj<SysError>, obj<String>, ) -> void
    [Values]
        %0 obj<SysError>
        %1 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            set_field %0.0 %1
            ret_void
        :$2
            unreachable
#34  = fn[251] fn(obj<SysError>, ) -> obj<String>
    [Values]
        %0 obj<SysError>
        %1 obj<String>
        %2 obj<String>
        %3 obj<String>
        %4 obj<String>
        %5 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            get_global %1 global[16]
            get_field %2 %0.0
            call %3 fn[20](%1, %2, )
            get_global %4 global[7]
            call %5 fn[20](%3, %4, )
            ret %5
        :$2
            unreachable
#35  = fn[252] fn(obj<SysError>, ) -> bytes
    [Values]
        %0 obj<SysError>
        %1 obj<String>
        %2 void
        %3 bytes
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[251](%0, )
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            ret %3
        :$2
            unreachable
#36  = fn[256] fn(bytes, i32, i32, ) -> bytes
    [Values]
        %0 bytes
        %1 i32
        %2 i32
        %3 bytes
        %4 i32
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            call %3 fn[36](%2, )
            int %4 0
            call %5 fn[39](%3, %4, %0, %1, %2, )
            ret %3
        :$2
            unreachable
#37  = fn[257] fn(dyn, ) -> void
    [Values]
        %0 dyn
        %1 obj<String>
        %2 void
        %3 bytes
        %4 void
        %5 obj<String>
        %6 void
        %7 bytes
        %8 void
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[31](%0, )
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            call %4 fn[258](%3, )
            get_global %5 global[17]
            call_intrinsic %6 @eon.null_check(%5, )
            get_field %7 %5.0
            call %8 fn[258](%7, )
            ret_void
        :$2
            unreachable
#38  = fn[260] fn() -> void
    [Values]
        %0 abstract<hl_bytes_map>
    [Code]
        :$0
            j_always $1
        :$1
            call %0 fn[261]()
            set_global global[18] %0
            ret_void
        :$2
            unreachable
#39  = fn[262] fn(type, type, bytes, ) -> obj<hl.Class>
    [Values]
        %0  type
        %1  type
        %2  bytes
        %3  dyn
        %4  obj<hl.Class>
        %5  bool
        %6  void
        %7  obj<String>
        %8  i32
        %9  i32
        %10 void
    [Code]
        :$0 
            j_always $1
        :$1 
            call %3 fn[263](%0, )
            call_intrinsic %4 @eon.safe_cast(%3, )
            call %5 fn[264](%1, %4, )
            call_intrinsic %6 @eon.null_check(%4, )
            set_field %4.0 %1
            new %7
            set_field %7.0 %2
            int %8 0
            call %9 fn[37](%2, %8, )
            set_field %7.1 %9
            set_field %4.3 %7
            call %10 fn[265](%2, %4, )
            ret %4
        :$2 
            unreachable
#40  = fn[266] fn(type, type, ) -> obj<hl.Enum>
    [Values]
        %0  type
        %1  type
        %2  dyn
        %3  obj<hl.Enum>
        %4  void
        %5  array<void>
        %6  bytes
        %7  obj<String>
        %8  abstract<hl_bytes_map>
        %9  obj<hl.types.ArrayObj>
        %10 void
        %11 array<void>
        %12 i32
        %13 i32
        %14 bool
        %15 type
        %16 void
        %17 obj<hl.types.ArrayObj>
        %18 array<void>
        %19 dyn
        %20 abstract<hl_bytes_map>
        %21 obj<String>
        %22 i32
        %23 type
        %24 bytes
        %25 obj<hl.Enum>
        %26 i32
        %27 i32
        %28 i32
        %29 bytes
        %30 void
        %31 abstract<hl_bytes_map>
        %32 dyn
        %33 void
        %34 obj<hl.types.ArrayObj>
        %35 obj<String>
        %36 i32
        %37 i32
        %38 void
        %39 i32
        %40 bool
        %41 obj<hl.types.ArrayObj>
        %42 type
        %43 obj<String>
        %44 abstract<hl_bytes_map>
        %45 void
        %46 i32
        %47 bytes
        %48 obj<hl.Enum>
        %49 array<void>
        %50 dyn
        %51 i32
        %52 type
        %53 void
        %54 obj<String>
        %55 void
        %56 bytes
        %57 void
        %58 bool
        %59 obj<String>
        %60 i32
        %61 i32
        %62 abstract<hl_bytes_map>
        %63 obj<hl.types.ArrayObj>
        %64 void
        %65 array<void>
        %66 i32
        %67 i32
        %68 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            call %2 fn[263](%0, )
            call_intrinsic %3 @eon.safe_cast(%2, )
            call_intrinsic %4 @eon.null_check(%3, )
            set_field %3.0 %1
            call %5 fn[267](%1, )
            set_field %3.6 %5
            call %6 fn[268](%1, )
            j_not_null %6 $7 $2
        :$2 
            null %7
            j_always $3
        :$3 
            set_field %3.3 %7
            call %8 fn[261]()
            set_field %3.4 %8
            new %9
            call %10 fn[269](%9, )
            set_field %3.5 %9
            call %11 fn[270](%1, )
            int %12 0
            array_size %13 %11
            nop
            cmp sge %14 %12 %13
            j_true %14 $6 $4
        :$4 
            phi %15 [%15 $5], [%1 $3], [%1 $7], 
            phi %16 [%33 $5], [%10 $3], [%64 $7], 
            phi %17 [%34 $5], [%9 $3], [%63 $7], 
            phi %18 [%18 $5], [%11 $3], [%65 $7], 
            phi %19 [%32 $5], [%2 $3], [%2 $7], 
            phi %20 [%31 $5], [%8 $3], [%62 $7], 
            phi %21 [%35 $5], [%7 $3], [%59 $7], 
            phi %22 [%22 $5], [%13 $3], [%67 $7], 
            phi %23 [%23 $5], [%0 $3], [%0 $7], 
            phi %24 [%24 $5], [%6 $3], [%6 $7], 
            phi %25 [%25 $5], [%3 $3], [%3 $7], 
            phi %26 [%28 $5], [%12 $3], [%66 $7], 
            mov %27 %26
            incr %28 %26
            get_array %29 %18[%27]
            call_intrinsic %30 @eon.null_check(%25, )
            get_field %31 %25.4
            to_dyn %32 %27
            call %33 fn[271](%31, %29, %32, )
            get_field %34 %25.5
            new %35
            set_field %35.0 %29
            int %36 0
            call %37 fn[37](%29, %14, )
            set_field %35.1 %14
            call_intrinsic %38 @eon.null_check(%34, )
            call %39 fn[72](%34, %35, )
            j_always $5
        :$5 
            nop
            cmp sge %40 %28 %22
            j_true %40 $6 $4
        :$6 
            phi %41 [%34 $5], [%63 $7], [%9 $3], 
            phi %42 [%15 $5], [%1 $7], [%1 $3], 
            phi %43 [%35 $5], [%59 $7], [%7 $3], 
            phi %44 [%31 $5], [%62 $7], [%8 $3], 
            phi %45 [%33 $5], [%64 $7], [%10 $3], 
            phi %46 [%28 $5], [%66 $7], [%12 $3], 
            phi %47 [%24 $5], [%6 $7], [%6 $3], 
            phi %48 [%25 $5], [%3 $7], [%3 $3], 
            phi %49 [%18 $5], [%65 $7], [%11 $3], 
            phi %50 [%32 $5], [%2 $7], [%2 $3], 
            phi %51 [%22 $5], [%67 $7], [%13 $3], 
            phi %52 [%23 $5], [%0 $7], [%0 $3], 
            call_intrinsic %53 @eon.null_check(%48, )
            get_field %54 %48.3
            call_intrinsic %55 @eon.null_check(%54, )
            get_field %56 %54.0
            call %57 fn[265](%56, %48, )
            call %58 fn[264](%42, %48, )
            ret %48
        :$7 
            new %59
            set_field %59.0 %6
            int %60 0
            call %61 fn[37](%6, %60, )
            set_field %59.1 %61
            set_field %3.3 %59
            call %62 fn[261]()
            set_field %3.4 %62
            new %63
            call %64 fn[269](%63, )
            set_field %3.5 %63
            call %65 fn[270](%1, )
            int %66 0
            array_size %67 %65
            nop
            cmp sge %68 %66 %67
            j_true %68 $6 $4
        :$8 
            unreachable
#41  = fn[265] fn(bytes, obj<hl.BaseType>, ) -> void
    [Values]
        %0 bytes
        %1 obj<hl.BaseType>
        %2 abstract<hl_bytes_map>
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[18]
            call %3 fn[271](%2, %0, %1, )
            ret_void
        :$2
            unreachable
#42  = fn[272] fn(dyn, ) -> obj<haxe.Exception>
    [Values]
        %0 dyn
        %1 obj<haxe.$Exception>
        %2 bool
        %3 obj<haxe.Exception>
        %4 obj<haxe.ValueException>
        %5 obj<haxe.Exception>
        %6 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %1 global[20]
            call %2 fn[30](%0, %1, )
            j_false %2 $3 $2
        :$2
            call_intrinsic %3 @eon.safe_cast(%0, )
            ret %3
        :$3
            new %4
            null %5
            call %6 fn[280](%4, %0, %5, %0, )
            ret %4
        :$4
            unreachable
#43  = fn[34] fn(dyn, ) -> dyn
    [Values]
        %0  dyn
        %1  obj<haxe.$Exception>
        %2  bool
        %3  obj<haxe.Exception>
        %4  void
        %5  dyn
        %6  obj<haxe.ValueException>
        %7  obj<haxe.Exception>
        %8  dyn
        %9  void
        %10 i32
        %11 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_global %1 global[20]
            call %2 fn[30](%0, %1, )
            j_false %2 $3 $2
        :$2 
            call_intrinsic %3 @eon.safe_cast(%0, )
            call_intrinsic %4 @eon.null_check(%3, )
            call %5 fn[276](%3, )
            ret %5
        :$3 
            new %6
            null %7
            null %8
            call %9 fn[280](%6, %0, %7, %8, )
            get_field %10 %6.2
            incr %11 %10
            set_field %6.2 %11
            ret %6
        :$4 
            unreachable
#44  = fn[278] fn(obj<haxe.Exception>, obj<String>, obj<haxe.Exception>, dyn, ) -> void
    [Values]
        %0 obj<haxe.Exception>
        %1 obj<String>
        %2 obj<haxe.Exception>
        %3 dyn
        %4 i32
        %5 array<void>
        %6 array<void>
    [Code]
        :$0
            j_always $1
        :$1
            int %4 0
            set_field %0.2 %4
            set_field %0.0 %1
            set_field %0.4 %2
            j_null %3 $4 $2
        :$2
            call %5 fn[281]()
            set_field %0.1 %5
            set_field %0.3 %3
            j_always $3
        :$3
            ret_void
        :$4
            call %6 fn[282]()
            set_field %0.1 %6
            set_field %0.3 %0
            ret_void
        :$5
            unreachable
#45  = fn[273] fn(obj<haxe.Exception>, ) -> dyn
    [Values]
        %0 obj<haxe.Exception>
        %1 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.3
            ret %1
        :$2
            unreachable
#46  = fn[274] fn(obj<haxe.Exception>, ) -> obj<String>
    [Values]
        %0 obj<haxe.Exception>
        %1 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[275](%0, )
            ret %1
        :$2
            unreachable
#47  = fn[277] fn(obj<haxe.Exception>, ) -> bytes
    [Values]
        %0 obj<haxe.Exception>
        %1 obj<String>
        %2 void
        %3 bytes
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[274](%0, )
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            ret %3
        :$2
            unreachable
#48  = fn[275] fn(obj<haxe.Exception>, ) -> obj<String>
    [Values]
        %0 obj<haxe.Exception>
        %1 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            ret %1
        :$2
            unreachable
#49  = fn[276] fn(obj<haxe.Exception>, ) -> dyn
    [Values]
        %0 obj<haxe.Exception>
        %1 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.3
            ret %1
        :$2
            unreachable
#50  = fn[283] fn(dyn, ) -> void
    [Values]
        %0 dyn
    [Code]
        :$0
            j_always $1
        :$1
            ret_void
        :$2
            unreachable
#51  = fn[282] fn() -> array<void>
    [Values]
        %0  void
        %1  obj<haxe.Exception>
        %2  obj<String>
        %3  obj<haxe.Exception>
        %4  obj<String>
        %5  void
        %6  void
        %7  obj<String>
        %8  void
        %9  obj<haxe.Exception>
        %10 obj<haxe.Exception>
        %11 obj<String>
        %12 dyn
        %13 array<void>
        %14 array<void>
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 bool
        %21 i32
        %22 i32
        %23 array<void>
        %24 array<void>
        %25 dyn
        %26 i32
        %27 obj<String>
        %28 obj<haxe.Exception>
        %29 void
        %30 obj<haxe.Exception>
        %31 obj<String>
        %32 i32
        %33 i32
        %34 i32
        %35 bytes
        %36 obj<String>
        %37 i32
        %38 i32
        %39 obj<String>
        %40 null<i32>
        %41 i32
        %42 i32
        %43 bool
        %44 array<void>
        %45 i32
        %46 obj<String>
        %47 obj<String>
        %48 dyn
        %49 i32
        %50 array<void>
        %51 i32
        %52 obj<haxe.Exception>
        %53 i32
        %54 obj<haxe.Exception>
        %55 void
        %56 i32
        %57 bool
        %58 i32
        %59 i32
        %60 type
        %61 array<void>
        %62 i32
        %63 void
        %64 i32
        %65 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            invoke_intrinsic %0 @eon.begin_trap() cont $2 unwind $4
        :$2 
            new %1
            get_global %2 global[10]
            null %3
            get_global %4 global[22]
            invoke %5 fn[278](%1, %2, %3, %4, ) cont $3 unwind $4
        :$3 
            invoke_intrinsic %6 @eon.throw(%1, ) cont $12 unwind $4
        :$4 
            phi %7 [%4 $2], [%4 $3], 
            phi %8 [%5 $2], [%5 $3], 
            phi %9 [%1 $2], [%1 $3], 
            phi %10 [%3 $2], [%3 $3], 
            phi %11 [%2 $2], [%2 $3], 
            call_intrinsic %12 @eon.receive_exception()
            call %13 fn[281]()
            mov %14 %13
            int %15 1
            int %16 0
            array_size %17 %13
            int %18 1
            sub %19 %17 %18
            nop
            cmp sge %20 %16 %19
            j_true %20 $7 $5
        :$5 
            phi %21 [%18 $4], [%33 $11], 
            phi %22 [%16 $4], [%34 $11], 
            phi %23 [%14 $4], [%23 $11], 
            phi %24 [%13 $4], [%24 $11], 
            phi %25 [%12 $4], [%25 $11], 
            phi %26 [%19 $4], [%26 $11], 
            phi %27 [%7 $4], [%27 $11], 
            phi %28 [%10 $4], [%28 $11], 
            phi %29 [%8 $4], [%29 $11], 
            phi %30 [%9 $4], [%30 $11], 
            phi %31 [%11 $4], [%36 $11], 
            phi %32 [%15 $4], [%64 $11], 
            mov %33 %22
            incr %34 %22
            get_array %35 %23[%33]
            new %36
            set_field %36.0 %35
            int %37 0
            call %38 fn[37](%35, %37, )
            set_field %36.1 %38
            get_global %39 global[23]
            null %40
            call %41 fn[5](%36, %39, %40, )
            int %42 0
            cmp sge %43 %41 %42
            j_true %43 $10 $6
        :$6 
            j_always $7
        :$7 
            phi %44 [%14 $4], [%23 $6], [%23 $11], 
            phi %45 [%16 $4], [%34 $6], [%34 $11], 
            phi %46 [%11 $4], [%36 $6], [%36 $11], 
            phi %47 [%7 $4], [%27 $6], [%27 $11], 
            phi %48 [%12 $4], [%25 $6], [%25 $11], 
            phi %49 [%18 $4], [%33 $6], [%33 $11], 
            phi %50 [%13 $4], [%24 $6], [%24 $11], 
            phi %51 [%15 $4], [%32 $6], [%64 $11], 
            phi %52 [%10 $4], [%28 $6], [%28 $11], 
            phi %53 [%19 $4], [%26 $6], [%26 $11], 
            phi %54 [%9 $4], [%30 $6], [%30 $11], 
            phi %55 [%8 $4], [%29 $6], [%29 $11], 
            array_size %56 %44
            cmp sge %57 %51 %56
            j_true %57 $9 $8
        :$8 
            array_size %58 %44
            sub %59 %58 %51
            type %60 type[14]
            call %61 fn[240](%60, %59, )
            int %62 0
            call %63 fn[284](%61, %62, %44, %51, %59, )
            ret %61
        :$9 
            ret %44
        :$10
            incr %64 %32
            j_always $11
        :$11
            nop
            cmp sge %65 %34 %26
            j_true %65 $7 $5
        :$12
            unreachable
#52  = fn[280] fn(obj<haxe.ValueException>, dyn, obj<haxe.Exception>, dyn, ) -> void
    [Values]
        %0 obj<haxe.ValueException>
        %1 dyn
        %2 obj<haxe.Exception>
        %3 dyn
        %4 obj<String>
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            call %4 fn[31](%1, )
            call %5 fn[278](%0, %4, %2, %3, )
            set_field %0.5 %1
            ret_void
        :$2
            unreachable
#53  = fn[279] fn(obj<haxe.ValueException>, ) -> dyn
    [Values]
        %0 obj<haxe.ValueException>
        %1 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.5
            ret %1
        :$2
            unreachable
#54  = fn[285] fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 fn(dyn, dyn, ) -> i32
        %2 i32
        %3 void
        %4 i32
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            int %2 0
            call_intrinsic %3 @eon.null_check(%0, )
            call %4 fn[286](%0, )
            call %5 fn[316](%0, %1, %2, %4, )
            ret_void
        :$2
            unreachable
#55  = fn[316] fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, i32, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  fn(dyn, dyn, ) -> i32
        %2  i32
        %3  i32
        %4  i32
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 bool
        %11 i32
        %12 i32
        %13 bool
        %14 i32
        %15 i32
        %16 fn(dyn, dyn, ) -> i32
        %17 i32
        %18 i32
        %19 i32
        %20 obj<hl.types.ArrayDyn>
        %21 i32
        %22 i32
        %23 bool
        %24 i32
        %25 i32
        %26 i32
        %27 i32
        %28 obj<hl.types.ArrayDyn>
        %29 i32
        %30 fn(dyn, dyn, ) -> i32
        %31 void
        %32 void
        %33 dyn
        %34 i32
        %35 i32
        %36 dyn
        %37 i32
        %38 i32
        %39 bool
        %40 i32
        %41 i32
        %42 void
        %43 i32
        %44 bool
        %45 i32
        %46 i32
        %47 i32
        %48 obj<hl.types.ArrayDyn>
        %49 i32
        %50 i32
        %51 fn(dyn, dyn, ) -> i32
        %52 bool
        %53 i32
        %54 fn(dyn, dyn, ) -> i32
        %55 i32
        %56 i32
        %57 obj<hl.types.ArrayDyn>
        %58 i32
        %59 i32
        %60 void
        %61 void
        %62 i32
        %63 i32
        %64 void
    [Code]
        :$0 
            j_always $1
        :$1 
            add %4 %2 %3
            int %5 1
            sshr %6 %4 %5
            sub %7 %3 %2
            int %8 12
            cmp sge %9 %7 %8
            j_true %9 $14 $2
        :$2 
            cmp slt %10 %2 %3
            j_true %10 $4 $3
        :$3 
            ret_void
        :$4 
            int %11 1
            add %12 %2 %11
            nop
            cmp sge %13 %12 %3
            j_true %13 $12 $5
        :$5 
            phi %14 [%46 $11], [%2 $4], 
            phi %15 [%45 $11], [%12 $4], 
            phi %16 [%51 $11], [%1 $4], 
            phi %17 [%47 $11], [%11 $4], 
            phi %18 [%49 $11], [%6 $4], 
            phi %19 [%50 $11], [%3 $4], 
            phi %20 [%48 $11], [%0 $4], 
            mov %21 %15
            incr %22 %15
            nop
            cmp sge %23 %14 %21
            j_true %23 $10 $6
        :$6 
            phi %24 [%21 $5], [%43 $9], 
            phi %25 [%19 $5], [%25 $9], 
            phi %26 [%22 $5], [%26 $9], 
            phi %27 [%18 $5], [%27 $9], 
            phi %28 [%20 $5], [%28 $9], 
            phi %29 [%14 $5], [%29 $9], 
            phi %30 [%16 $5], [%30 $9], 
            call_intrinsic %31 @eon.null_check(%30, )
            call_intrinsic %32 @eon.null_check(%28, )
            call_method %33 %28 fn[0](%24, )
            int %34 1
            sub %35 %24 %10
            call_method %36 %28 fn[0](%9, )
            call_closure %37 %30(%33, %36, )
            int %38 0
            cmp sge %39 %9 %10
            j_true %39 $13 $7
        :$7 
            int %40 1
            sub %41 %24 %10
            call %42 fn[317](%28, %9, %24, )
            j_always $8
        :$8 
            decr %43 %24
            j_always $9
        :$9 
            nop
            cmp sge %44 %29 %43
            j_true %44 $10 $6
        :$10
            phi %45 [%26 $13], [%22 $5], [%26 $9], 
            phi %46 [%29 $13], [%14 $5], [%29 $9], 
            phi %47 [%24 $13], [%21 $5], [%43 $9], 
            phi %48 [%28 $13], [%20 $5], [%28 $9], 
            phi %49 [%27 $13], [%18 $5], [%27 $9], 
            phi %50 [%25 $13], [%19 $5], [%25 $9], 
            phi %51 [%30 $13], [%16 $5], [%30 $9], 
            j_always $11
        :$11
            nop
            cmp sge %52 %45 %50
            j_true %52 $12 $5
        :$12
            phi %53 [%47 $11], [%11 $4], 
            phi %54 [%51 $11], [%1 $4], 
            phi %55 [%45 $11], [%12 $4], 
            phi %56 [%50 $11], [%3 $4], 
            phi %57 [%48 $11], [%0 $4], 
            phi %58 [%46 $11], [%2 $4], 
            phi %59 [%49 $11], [%6 $4], 
            ret_void
        :$13
            j_always $10
        :$14
            call %60 fn[316](%0, %1, %2, %6, )
            call %61 fn[316](%0, %1, %6, %3, )
            sub %62 %6 %2
            sub %63 %3 %6
            call %64 fn[318](%0, %1, %2, %6, %3, %10, %63, )
            ret_void
        :$15
            unreachable
#56  = fn[318] fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, i32, i32, i32, i32, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  fn(dyn, dyn, ) -> i32
        %2  i32
        %3  i32
        %4  i32
        %5  i32
        %6  i32
        %7  fn(dyn, dyn, ) -> i32
        %8  obj<hl.types.ArrayDyn>
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 bool
        %15 i32
        %16 bool
        %17 i32
        %18 bool
        %19 i32
        %20 i32
        %21 i32
        %22 fn(dyn, dyn, ) -> i32
        %23 i32
        %24 obj<hl.types.ArrayDyn>
        %25 i32
        %26 i32
        %27 bool
        %28 i32
        %29 i32
        %30 bool
        %31 void
        %32 void
        %33 dyn
        %34 dyn
        %35 i32
        %36 i32
        %37 bool
        %38 void
        %39 bool
        %40 i32
        %41 i32
        %42 i32
        %43 i32
        %44 i32
        %45 i32
        %46 i32
        %47 i32
        %48 i32
        %49 void
        %50 i32
        %51 void
        %52 i32
        %53 i32
        %54 i32
        %55 i32
        %56 i32
        %57 i32
        %58 i32
        %59 i32
        %60 i32
        %61 i32
        %62 i32
        %63 i32
        %64 i32
        %65 i32
        %66 i32
        %67 void
        %68 i32
        %69 void
        %70 i32
        %71 i32
        %72 i32
        %73 i32
        %74 i32
        %75 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            phi %7 [%7 $12], [%7 $11], [%1 $0], 
            phi %8 [%8 $12], [%8 $11], [%0 $0], 
            phi %9 [%9 $12], [%9 $11], [%4 $0], 
            phi %10 [%70 $12], [%52 $11], [%2 $0], 
            phi %11 [%73 $12], [%55 $11], [%5 $0], 
            phi %12 [%71 $12], [%53 $11], [%3 $0], 
            phi %13 [%75 $12], [%57 $11], [%6 $0], 
            nop
            bool %14 true
            j_false %14 $13 $2
        :$2 
            int %15 0
            cmp eq %16 %11 %15
            j_true %16 $4 $3
        :$3 
            int %17 0
            cmp ne %18 %13 %17
            j_true %18 $5 $4
        :$4 
            phi %19 [%12 $3], [%12 $2], 
            phi %20 [%10 $3], [%10 $2], 
            phi %21 [%9 $3], [%9 $2], 
            phi %22 [%7 $3], [%7 $2], 
            phi %23 [%17 $3], [%15 $2], 
            phi %24 [%8 $3], [%8 $2], 
            phi %25 [%13 $3], [%13 $2], 
            phi %26 [%11 $3], [%11 $2], 
            phi %27 [%14 $3], [%14 $2], 
            ret_void
        :$5 
            add %28 %11 %13
            int %29 2
            cmp ne %30 %28 %29
            j_true %30 $9 $6
        :$6 
            call_intrinsic %31 @eon.null_check(%7, )
            call_intrinsic %32 @eon.null_check(%8, )
            call_method %33 %8 fn[0](%12, )
            call_method %34 %8 fn[0](%10, )
            call_closure %35 %7(%33, %34, )
            int %36 0
            cmp sge %37 %35 %36
            j_true %37 $8 $7
        :$7 
            call %38 fn[317](%8, %12, %10, )
            ret_void
        :$8 
            ret_void
        :$9 
            cmp sge %39 %13 %11
            j_true %39 $12 $10
        :$10
            int %40 1
            sshr %41 %11 %40
            mov %42 %41
            add %43 %10 %41
            mov %44 %43
            call %45 fn[319](%8, %7, %12, %9, %43, )
            mov %46 %45
            sub %47 %45 %12
            mov %48 %47
            j_always $11
        :$11
            call %49 fn[321](%8, %7, %44, %12, %46, )
            add %50 %44 %48
            call %51 fn[318](%8, %7, %10, %44, %50, %42, %48, )
            mov %52 %50
            mov %53 %46
            sub %54 %11 %42
            mov %55 %16
            sub %56 %13 %48
            mov %57 %16
            j_always $1
        :$12
            int %58 1
            sshr %59 %13 %16
            mov %60 %59
            add %61 %12 %60
            mov %62 %61
            call %63 fn[320](%8, %7, %10, %12, %62, )
            mov %64 %63
            sub %65 %63 %10
            mov %66 %65
            call %67 fn[321](%8, %7, %64, %12, %62, )
            add %68 %64 %60
            call %69 fn[318](%8, %7, %10, %64, %68, %66, %60, )
            mov %70 %68
            mov %71 %62
            sub %72 %11 %66
            mov %73 %16
            sub %74 %13 %60
            mov %75 %16
            j_always $1
        :$13
            ret_void
        :$14
            unreachable
#57  = fn[321] fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, i32, i32, i32, ) -> void
    [Values]
        %0   obj<hl.types.ArrayDyn>
        %1   fn(dyn, dyn, ) -> i32
        %2   i32
        %3   i32
        %4   i32
        %5   bool
        %6   bool
        %7   fn(dyn, dyn, ) -> i32
        %8   i32
        %9   i32
        %10  obj<hl.types.ArrayDyn>
        %11  i32
        %12  i32
        %13  i32
        %14  i32
        %15  i32
        %16  i32
        %17  i32
        %18  bool
        %19  i32
        %20  fn(dyn, dyn, ) -> i32
        %21  i32
        %22  obj<hl.types.ArrayDyn>
        %23  i32
        %24  i32
        %25  i32
        %26  i32
        %27  void
        %28  i32
        %29  dyn
        %30  i32
        %31  i32
        %32  i32
        %33  i32
        %34  i32
        %35  bool
        %36  i32
        %37  i32
        %38  i32
        %39  i32
        %40  i32
        %41  i32
        %42  i32
        %43  obj<hl.types.ArrayDyn>
        %44  dyn
        %45  fn(dyn, dyn, ) -> i32
        %46  i32
        %47  void
        %48  dyn
        %49  void
        %50  i32
        %51  i32
        %52  bool
        %53  i32
        %54  i32
        %55  i32
        %56  void
        %57  i32
        %58  dyn
        %59  i32
        %60  i32
        %61  dyn
        %62  i32
        %63  i32
        %64  obj<hl.types.ArrayDyn>
        %65  i32
        %66  fn(dyn, dyn, ) -> i32
        %67  i32
        %68  i32
        %69  i32
        %70  bool
        %71  i32
        %72  i32
        %73  i32
        %74  i32
        %75  dyn
        %76  i32
        %77  i32
        %78  fn(dyn, dyn, ) -> i32
        %79  obj<hl.types.ArrayDyn>
        %80  i32
        %81  i32
        %82  void
        %83  void
        %84  i32
        %85  i32
        %86  i32
        %87  bool
        %88  obj<hl.types.ArrayDyn>
        %89  fn(dyn, dyn, ) -> i32
        %90  i32
        %91  i32
        %92  i32
        %93  i32
        %94  i32
        %95  i32
        %96  i32
        %97  i32
        %98  i32
        %99  i32
    [Code]
        :$0  
            j_always $1
        :$1  
            cmp eq %5 %2 %3
            j_true %5 $3 $2
        :$2  
            cmp ne %6 %3 %4
            j_true %6 $4 $3
        :$3  
            phi %7 [%1 $2], [%1 $1], 
            phi %8 [%2 $2], [%2 $1], 
            phi %9 [%4 $2], [%4 $1], 
            phi %10 [%0 $2], [%0 $1], 
            phi %11 [%3 $2], [%3 $1], 
            ret_void
        :$4  
            sub %12 %4 %2
            sub %13 %3 %2
            call %14 fn[322](%6, %13, )
            nop
            mov %15 %6
            decr %16 %6
            int %17 0
            cmp eq %18 %15 %17
            j_true %18 $12 $5
        :$5  
            phi %19 [%4 $4], [%71 $11], 
            phi %20 [%1 $4], [%78 $11], 
            phi %21 [%2 $4], [%80 $11], 
            phi %22 [%0 $4], [%79 $11], 
            phi %23 [%15 $4], [%84 $11], 
            phi %24 [%17 $4], [%86 $11], 
            phi %25 [%16 $4], [%85 $11], 
            phi %26 [%3 $4], [%81 $11], 
            call_intrinsic %27 @eon.null_check(%22, )
            add %28 %21 %6
            call_method %29 %22 fn[0](%28, )
            sub %30 %26 %21
            add %31 %21 %6
            add %32 %21 %6
            add %33 %32 %30
            nop
            add %34 %21 %6
            cmp eq %35 %33 %34
            j_true %35 $10 $6
        :$6  
            phi %36 [%31 $5], [%62 $9], 
            phi %37 [%34 $5], [%69 $9], 
            phi %38 [%26 $5], [%57 $9], 
            phi %39 [%33 $5], [%65 $9], 
            phi %40 [%21 $5], [%59 $9], 
            phi %41 [%30 $5], [%55 $9], 
            phi %42 [%19 $5], [%67 $9], 
            phi %43 [%22 $5], [%64 $9], 
            phi %44 [%29 $5], [%61 $9], 
            phi %45 [%20 $5], [%66 $9], 
            phi %46 [%25 $5], [%63 $9], 
            call_intrinsic %47 @eon.null_check(%43, )
            call_method %48 %43 fn[0](%39, )
            call_method %49 %43 fn[1](%36, %48, )
            mov %50 %39
            sub %51 %42 %39
            cmp sge %52 %41 %51
            j_true %52 $13 $7
        :$7  
            add %53 %39 %41
            mov %54 %53
            j_always $8
        :$8  
            j_always $9
        :$9  
            phi %55 [%41 $8], [%41 $13], 
            phi %56 [%49 $8], [%49 $13], 
            phi %57 [%38 $8], [%38 $13], 
            phi %58 [%48 $8], [%48 $13], 
            phi %59 [%40 $8], [%40 $13], 
            phi %60 [%37 $8], [%97 $13], 
            phi %61 [%44 $8], [%44 $13], 
            phi %62 [%50 $8], [%50 $13], 
            phi %63 [%46 $8], [%46 $13], 
            phi %64 [%43 $8], [%43 $13], 
            phi %65 [%54 $8], [%99 $13], 
            phi %66 [%45 $8], [%45 $13], 
            phi %67 [%42 $8], [%42 $13], 
            phi %68 [%53 $8], [%98 $13], 
            nop
            add %69 %59 %6
            cmp eq %70 %65 %69
            j_true %70 $10 $6
        :$10 
            phi %71 [%67 $9], [%19 $5], 
            phi %72 [%69 $9], [%34 $5], 
            phi %73 [%62 $9], [%31 $5], 
            phi %74 [%63 $9], [%25 $5], 
            phi %75 [%61 $9], [%29 $5], 
            phi %76 [%55 $9], [%30 $5], 
            phi %77 [%65 $9], [%33 $5], 
            phi %78 [%66 $9], [%20 $5], 
            phi %79 [%64 $9], [%22 $5], 
            phi %80 [%59 $9], [%21 $5], 
            phi %81 [%57 $9], [%26 $5], 
            call_intrinsic %82 @eon.null_check(%79, )
            call_method %83 %79 fn[1](%73, %75, )
            j_always $11
        :$11 
            nop
            mov %84 %6
            decr %85 %6
            int %86 0
            cmp eq %87 %84 %86
            j_true %87 $12 $5
        :$12 
            phi %88 [%79 $11], [%0 $4], 
            phi %89 [%78 $11], [%1 $4], 
            phi %90 [%84 $11], [%15 $4], 
            phi %91 [%81 $11], [%3 $4], 
            phi %92 [%85 $11], [%16 $4], 
            phi %93 [%86 $11], [%17 $4], 
            phi %94 [%71 $11], [%4 $4], 
            phi %95 [%80 $11], [%2 $4], 
            ret_void
        :$13 
            sub %96 %42 %39
            sub %97 %41 %96
            add %98 %40 %97
            mov %99 %98
            j_always $9
        :$14 
            unreachable
#58  = fn[322] fn(i32, i32, ) -> i32
    [Values]
        %0 i32
        %1 i32
        %2 i32
        %3 i32
        %4 i32
        %5 bool
        %6 i32
        %7 i32
        %8 i32
    [Code]
        :$0
            j_always $1
        :$1
            phi %2 [%0 $0], [%7 $2], 
            phi %3 [%1 $0], [%8 $2], 
            nop
            int %4 0
            cmp eq %5 %3 %4
            j_true %5 $3 $2
        :$2
            smod %6 %2 %3
            mov %7 %3
            mov %8 %6
            j_always $1
        :$3
            ret %2
        :$4
            unreachable
#59  = fn[320] fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, i32, i32, i32, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  fn(dyn, dyn, ) -> i32
        %2  i32
        %3  i32
        %4  i32
        %5  i32
        %6  i32
        %7  bool
        %8  i32
        %9  fn(dyn, dyn, ) -> i32
        %10 i32
        %11 obj<hl.types.ArrayDyn>
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 void
        %21 void
        %22 dyn
        %23 dyn
        %24 i32
        %25 i32
        %26 bool
        %27 i32
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 dyn
        %33 i32
        %34 obj<hl.types.ArrayDyn>
        %35 i32
        %36 dyn
        %37 fn(dyn, dyn, ) -> i32
        %38 i32
        %39 i32
        %40 i32
        %41 bool
        %42 i32
        %43 i32
        %44 fn(dyn, dyn, ) -> i32
        %45 i32
        %46 i32
        %47 i32
        %48 obj<hl.types.ArrayDyn>
        %49 i32
        %50 i32
        %51 i32
        %52 i32
        %53 i32
        %54 i32
        %55 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            sub %5 %3 %2
            nop
            int %6 0
            cmp sge %7 %7 %5
            j_true %7 $6 $2
        :$2 
            phi %8 [%3 $1], [%28 $5], 
            phi %9 [%1 $1], [%37 $5], 
            phi %10 [%6 $1], [%40 $5], 
            phi %11 [%0 $1], [%34 $5], 
            phi %12 [%4 $1], [%29 $5], 
            phi %13 [%5 $1], [%30 $5], 
            phi %14 [%2 $1], [%35 $5], 
            int %15 1
            sshr %16 %13 %15
            mov %17 %7
            add %18 %14 %7
            mov %19 %18
            call_intrinsic %20 @eon.null_check(%9, )
            call_intrinsic %21 @eon.null_check(%11, )
            call_method %22 %11 fn[0](%12, )
            call_method %23 %11 fn[0](%7, )
            call_closure %24 %9(%22, %23, )
            int %25 0
            cmp sge %26 %24 %25
            j_true %26 $7 $3
        :$3 
            mov %27 %17
            j_always $4
        :$4 
            j_always $5
        :$5 
            phi %28 [%8 $4], [%8 $7], 
            phi %29 [%12 $4], [%12 $7], 
            phi %30 [%27 $4], [%55 $7], 
            phi %31 [%19 $4], [%19 $7], 
            phi %32 [%23 $4], [%23 $7], 
            phi %33 [%25 $4], [%53 $7], 
            phi %34 [%11 $4], [%11 $7], 
            phi %35 [%14 $4], [%51 $7], 
            phi %36 [%22 $4], [%22 $7], 
            phi %37 [%9 $4], [%9 $7], 
            phi %38 [%24 $4], [%54 $7], 
            phi %39 [%17 $4], [%17 $7], 
            nop
            int %40 0
            cmp sge %41 %7 %30
            j_true %41 $6 $2
        :$6 
            phi %42 [%40 $5], [%6 $1], 
            phi %43 [%28 $5], [%3 $1], 
            phi %44 [%37 $5], [%1 $1], 
            phi %45 [%30 $5], [%5 $1], 
            phi %46 [%29 $5], [%4 $1], 
            phi %47 [%35 $5], [%2 $1], 
            phi %48 [%34 $5], [%0 $1], 
            ret %47
        :$7 
            int %49 1
            add %50 %7 %49
            mov %51 %50
            sub %52 %13 %17
            int %53 1
            sub %54 %52 %53
            mov %55 %54
            j_always $5
        :$8 
            unreachable
#60  = fn[319] fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, i32, i32, i32, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  fn(dyn, dyn, ) -> i32
        %2  i32
        %3  i32
        %4  i32
        %5  i32
        %6  i32
        %7  bool
        %8  fn(dyn, dyn, ) -> i32
        %9  i32
        %10 obj<hl.types.ArrayDyn>
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 void
        %21 void
        %22 dyn
        %23 dyn
        %24 i32
        %25 i32
        %26 bool
        %27 i32
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 i32
        %33 i32
        %34 i32
        %35 i32
        %36 i32
        %37 i32
        %38 i32
        %39 dyn
        %40 obj<hl.types.ArrayDyn>
        %41 i32
        %42 dyn
        %43 i32
        %44 i32
        %45 fn(dyn, dyn, ) -> i32
        %46 i32
        %47 bool
        %48 fn(dyn, dyn, ) -> i32
        %49 i32
        %50 i32
        %51 i32
        %52 i32
        %53 i32
        %54 obj<hl.types.ArrayDyn>
        %55 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            sub %5 %3 %2
            nop
            int %6 0
            cmp sge %7 %7 %5
            j_true %7 $6 $2
        :$2 
            phi %8 [%1 $1], [%45 $5], 
            phi %9 [%6 $1], [%46 $5], 
            phi %10 [%0 $1], [%40 $5], 
            phi %11 [%5 $1], [%44 $5], 
            phi %12 [%2 $1], [%35 $5], 
            phi %13 [%3 $1], [%34 $5], 
            phi %14 [%4 $1], [%36 $5], 
            int %15 1
            sshr %16 %11 %15
            mov %17 %7
            add %18 %12 %7
            mov %19 %18
            call_intrinsic %20 @eon.null_check(%8, )
            call_intrinsic %21 @eon.null_check(%10, )
            call_method %22 %10 fn[0](%18, )
            call_method %23 %10 fn[0](%14, )
            call_closure %24 %8(%22, %23, )
            int %25 0
            cmp sge %26 %24 %25
            j_true %26 $7 $3
        :$3 
            int %27 1
            add %28 %7 %27
            mov %29 %28
            sub %30 %11 %17
            int %31 1
            sub %32 %30 %31
            mov %33 %32
            j_always $4
        :$4 
            j_always $5
        :$5 
            phi %34 [%13 $4], [%13 $7], 
            phi %35 [%29 $4], [%12 $7], 
            phi %36 [%14 $4], [%14 $7], 
            phi %37 [%17 $4], [%17 $7], 
            phi %38 [%31 $4], [%25 $7], 
            phi %39 [%22 $4], [%22 $7], 
            phi %40 [%10 $4], [%10 $7], 
            phi %41 [%19 $4], [%19 $7], 
            phi %42 [%23 $4], [%23 $7], 
            phi %43 [%32 $4], [%24 $7], 
            phi %44 [%33 $4], [%55 $7], 
            phi %45 [%8 $4], [%8 $7], 
            nop
            int %46 0
            cmp sge %47 %7 %44
            j_true %47 $6 $2
        :$6 
            phi %48 [%1 $1], [%45 $5], 
            phi %49 [%4 $1], [%36 $5], 
            phi %50 [%2 $1], [%35 $5], 
            phi %51 [%3 $1], [%34 $5], 
            phi %52 [%5 $1], [%44 $5], 
            phi %53 [%6 $1], [%46 $5], 
            phi %54 [%0 $1], [%40 $5], 
            ret %50
        :$7 
            mov %55 %17
            j_always $5
        :$8 
            unreachable
#61  = fn[317] fn(obj<hl.types.ArrayDyn>, i32, i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 i32
        %2 i32
        %3 void
        %4 dyn
        %5 dyn
        %6 void
        %7 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %3 @eon.null_check(%0, )
            call_method %4 %0 fn[0](%1, )
            call_method %5 %0 fn[0](%2, )
            call_method %6 %0 fn[1](%1, %5, )
            call_method %7 %0 fn[1](%2, %4, )
            ret_void
        :$2
            unreachable
#62  = fn[323] fn(obj<haxe.iterators.ArrayIterator>, obj<hl.types.ArrayDyn>, ) -> void
    [Values]
        %0 obj<haxe.iterators.ArrayIterator>
        %1 obj<hl.types.ArrayDyn>
        %2 i32
    [Code]
        :$0
            j_always $1
        :$1
            int %2 0
            set_field %0.1 %2
            set_field %0.0 %1
            ret_void
        :$2
            unreachable
#63  = fn[324] fn(obj<haxe.iterators.ArrayIterator>, ) -> bool
    [Values]
        %0 obj<haxe.iterators.ArrayIterator>
        %1 i32
        %2 obj<hl.types.ArrayDyn>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.1
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            call %4 fn[286](%2, )
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#64  = fn[325] fn(obj<haxe.iterators.ArrayIterator>, ) -> dyn
    [Values]
        %0 obj<haxe.iterators.ArrayIterator>
        %1 obj<hl.types.ArrayDyn>
        %2 void
        %3 i32
        %4 i32
        %5 i32
        %6 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %0.1
            mov %4 %3
            incr %5 %3
            set_field %0.1 %5
            call_method %6 %1 fn[0](%4, )
            ret %6
        :$2
            unreachable
#65  = fn[326] fn(obj<haxe.iterators.ArrayKeyValueIterator>, obj<hl.types.ArrayDyn>, ) -> void
    [Values]
        %0 obj<haxe.iterators.ArrayKeyValueIterator>
        %1 obj<hl.types.ArrayDyn>
        %2 i32
    [Code]
        :$0
            j_always $1
        :$1
            int %2 0
            set_field %0.0 %2
            set_field %0.1 %1
            ret_void
        :$2
            unreachable
#66  = fn[14] fn(obj<hl.BaseType>, dyn, ) -> bool
    [Values]
        %0  obj<hl.BaseType>
        %1  dyn
        %2  type
        %3  i32
        %4  i32
        %5  bool
        %6  dyn
        %7  type
        %8  type
        %9  array<void>
        %10 obj<hl.BaseType>
        %11 dyn
        %12 i32
        %13 array<void>
        %14 type
        %15 i32
        %16 type
        %17 bool
        %18 bool
        %19 bool
        %20 i32
        %21 array<void>
        %22 obj<hl.BaseType>
        %23 dyn
        %24 i32
        %25 type
        %26 i32
        %27 array<void>
        %28 i32
        %29 bool
        %30 type
        %31 i32
        %32 array<void>
        %33 i32
        %34 dyn
        %35 obj<hl.BaseType>
        %36 i32
        %37 i32
        %38 i32
        %39 type
        %40 bool
        %41 bool
        %42 i32
        %43 bool
        %44 i32
        %45 array<void>
        %46 i32
        %47 dyn
        %48 obj<hl.BaseType>
        %49 i32
        %50 type
        %51 bool
        %52 i32
        %53 type
        %54 dyn
        %55 i32
        %56 obj<hl.BaseType>
        %57 array<void>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_type %2 %1
            get_tid %3 %2
            int %4 15
            cmp ne %5 %3 %4
            j_true %5 $13 $2
        :$2 
            call %6 fn[337](%1, )
            j_null %6 $13 $3
        :$3 
            get_type %7 %6
            mov %8 %5
            get_field %9 %0.2
            j_not_null %9 $7 $4
        :$4 
            phi %10 [%0 $3], [%56 $13], 
            phi %11 [%1 $3], [%54 $13], 
            phi %12 [%3 $3], [%52 $13], 
            phi %13 [%9 $3], [%57 $13], 
            phi %14 [%8 $3], [%53 $13], 
            phi %15 [%4 $3], [%55 $13], 
            get_field %16 %10.0
            call %17 fn[341](%14, %16, )
            j_false %17 $6 $5
        :$5 
            bool %18 true
            ret %18
        :$6 
            bool %19 false
            ret %19
        :$7 
            phi %20 [%4 $3], [%55 $13], 
            phi %21 [%9 $3], [%57 $13], 
            phi %22 [%0 $3], [%56 $13], 
            phi %23 [%1 $3], [%54 $13], 
            phi %24 [%3 $3], [%52 $13], 
            phi %25 [%8 $3], [%53 $13], 
            int %26 0
            get_field %27 %22.2
            nop
            array_size %28 %27
            cmp sge %29 %26 %28
            j_true %29 $12 $8
        :$8 
            phi %30 [%30 $11], [%25 $7], 
            phi %31 [%37 $11], [%20 $7], 
            phi %32 [%32 $11], [%27 $7], 
            phi %33 [%42 $11], [%28 $7], 
            phi %34 [%34 $11], [%23 $7], 
            phi %35 [%35 $11], [%22 $7], 
            phi %36 [%38 $11], [%26 $7], 
            mov %37 %36
            incr %38 %36
            get_array %39 %32[%37]
            call %40 fn[341](%30, %39, )
            j_false %40 $10 $9
        :$9 
            bool %41 true
            ret %41
        :$10
            j_always $11
        :$11
            nop
            array_size %42 %32
            cmp sge %43 %38 %42
            j_true %43 $12 $8
        :$12
            phi %44 [%37 $11], [%20 $7], 
            phi %45 [%32 $11], [%27 $7], 
            phi %46 [%38 $11], [%26 $7], 
            phi %47 [%34 $11], [%23 $7], 
            phi %48 [%35 $11], [%22 $7], 
            phi %49 [%42 $11], [%28 $7], 
            phi %50 [%30 $11], [%25 $7], 
            bool %51 false
            ret %51
        :$13
            phi %52 [%3 $2], [%3 $1], 
            phi %53 [%2 $2], [%2 $1], 
            phi %54 [%1 $2], [%1 $1], 
            phi %55 [%4 $2], [%4 $1], 
            phi %56 [%0 $2], [%0 $1], 
            get_field %57 %56.2
            j_not_null %57 $7 $4
        :$14
            unreachable
#67  = fn[44] fn(obj<hl.types.ArrayAccess>, i32, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayAccess>
        %1 i32
        %2 obj<String>
        %3 dyn
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[26]
            call %3 fn[34](%2, )
            invoke_intrinsic %4 @eon.throw(%3, ) cont $2 unwind $2
        :$2
            unreachable
#68  = fn[45] fn(obj<hl.types.ArrayAccess>, i32, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayAccess>
        %1 i32
        %2 dyn
        %3 obj<String>
        %4 dyn
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %3 global[26]
            call %4 fn[34](%3, )
            invoke_intrinsic %5 @eon.throw(%4, ) cont $2 unwind $2
        :$2
            unreachable
#69  = fn[46] fn(obj<hl.types.ArrayAccess>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayAccess>
        %1 i32
        %2 obj<hl.types.ArrayAccess>
        %3 i32
        %4 i32
        %5 obj<String>
        %6 dyn
        %7 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %5 global[26]
            call %6 fn[34](%5, )
            invoke_intrinsic %7 @eon.throw(%6, ) cont $2 unwind $2
        :$2
            unreachable
#70  = fn[64] fn(bytes, i32, ) -> obj<hl.types.ArrayBytes_Int>
    [Values]
        %0 bytes
        %1 i32
        %2 obj<hl.types.ArrayBytes_Int>
    [Code]
        :$0
            j_always $1
        :$1
            new %2
            set_field %2.0 %1
            set_field %2.1 %0
            set_field %2.2 %1
            ret %2
        :$2
            unreachable
#71  = fn[65] fn(bytes, i32, ) -> obj<hl.types.ArrayBytes_hl_UI16>
    [Values]
        %0 bytes
        %1 i32
        %2 obj<hl.types.ArrayBytes_hl_UI16>
    [Code]
        :$0
            j_always $1
        :$1
            new %2
            set_field %2.0 %1
            set_field %2.1 %0
            set_field %2.2 %1
            ret %2
        :$2
            unreachable
#72  = fn[66] fn(bytes, i32, ) -> obj<hl.types.ArrayBytes_hl_F32>
    [Values]
        %0 bytes
        %1 i32
        %2 obj<hl.types.ArrayBytes_hl_F32>
    [Code]
        :$0
            j_always $1
        :$1
            new %2
            set_field %2.0 %1
            set_field %2.1 %0
            set_field %2.2 %1
            ret %2
        :$2
            unreachable
#73  = fn[67] fn(bytes, i32, ) -> obj<hl.types.ArrayBytes_Float>
    [Values]
        %0 bytes
        %1 i32
        %2 obj<hl.types.ArrayBytes_Float>
    [Code]
        :$0
            j_always $1
        :$1
            new %2
            set_field %2.0 %1
            set_field %2.1 %0
            set_field %2.2 %1
            ret %2
        :$2
            unreachable
#74  = fn[47] fn(obj<hl.types.ArrayBase>, dyn, ) -> i32
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 dyn
        %2 obj<String>
        %3 dyn
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[26]
            call %3 fn[34](%2, )
            invoke_intrinsic %4 @eon.throw(%3, ) cont $2 unwind $2
        :$2
            unreachable
#75  = fn[48] fn(obj<hl.types.ArrayBase>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 obj<String>
        %2 dyn
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %1 global[26]
            call %2 fn[34](%1, )
            invoke_intrinsic %3 @eon.throw(%2, ) cont $2 unwind $2
        :$2
            unreachable
#76  = fn[49] fn(obj<hl.types.ArrayBase>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 obj<String>
        %2 dyn
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %1 global[26]
            call %2 fn[34](%1, )
            invoke_intrinsic %3 @eon.throw(%2, ) cont $2 unwind $2
        :$2
            unreachable
#77  = fn[50] fn(obj<hl.types.ArrayBase>, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 dyn
        %2 obj<String>
        %3 dyn
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[26]
            call %3 fn[34](%2, )
            invoke_intrinsic %4 @eon.throw(%3, ) cont $2 unwind $2
        :$2
            unreachable
#78  = fn[51] fn(obj<hl.types.ArrayBase>, i32, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 i32
        %2 dyn
        %3 obj<String>
        %4 dyn
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %3 global[26]
            call %4 fn[34](%3, )
            invoke_intrinsic %5 @eon.throw(%4, ) cont $2 unwind $2
        :$2
            unreachable
#79  = fn[52] fn(obj<hl.types.ArrayBase>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 dyn
        %2 obj<String>
        %3 dyn
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[26]
            call %3 fn[34](%2, )
            invoke_intrinsic %4 @eon.throw(%3, ) cont $2 unwind $2
        :$2
            unreachable
#80  = fn[53] fn(obj<hl.types.ArrayBase>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 dyn
        %2 obj<String>
        %3 dyn
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[26]
            call %3 fn[34](%2, )
            invoke_intrinsic %4 @eon.throw(%3, ) cont $2 unwind $2
        :$2
            unreachable
#81  = fn[54] fn(obj<hl.types.ArrayBase>, fn(dyn, dyn, ) -> i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 fn(dyn, dyn, ) -> i32
        %2 obj<String>
        %3 dyn
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[26]
            call %3 fn[34](%2, )
            invoke_intrinsic %4 @eon.throw(%3, ) cont $2 unwind $2
        :$2
            unreachable
#82  = fn[55] fn(obj<hl.types.ArrayBase>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 i32
        %2 null<i32>
        %3 obj<String>
        %4 dyn
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %3 global[26]
            call %4 fn[34](%3, )
            invoke_intrinsic %5 @eon.throw(%4, ) cont $2 unwind $2
        :$2
            unreachable
#83  = fn[56] fn(obj<hl.types.ArrayBase>, i32, i32, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 i32
        %2 i32
        %3 obj<String>
        %4 dyn
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %3 global[26]
            call %4 fn[34](%3, )
            invoke_intrinsic %5 @eon.throw(%4, ) cont $2 unwind $2
        :$2
            unreachable
#84  = fn[57] fn(obj<hl.types.ArrayBase>, obj<String>, ) -> obj<String>
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 obj<String>
        %2 obj<String>
        %3 dyn
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[26]
            call %3 fn[34](%2, )
            invoke_intrinsic %4 @eon.throw(%3, ) cont $2 unwind $2
        :$2
            unreachable
#85  = fn[58] fn(obj<hl.types.ArrayBase>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 obj<String>
        %2 dyn
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %1 global[26]
            call %2 fn[34](%1, )
            invoke_intrinsic %3 @eon.throw(%2, ) cont $2 unwind $2
        :$2
            unreachable
#86  = fn[59] fn(obj<hl.types.ArrayBase>, i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 i32
        %2 obj<String>
        %3 dyn
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[26]
            call %3 fn[34](%2, )
            invoke_intrinsic %4 @eon.throw(%3, ) cont $2 unwind $2
        :$2
            unreachable
#87  = fn[60] fn(obj<hl.types.ArrayBase>, ) -> obj<String>
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 obj<String>
        %2 dyn
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            get_global %1 global[26]
            call %2 fn[34](%1, )
            invoke_intrinsic %3 @eon.throw(%2, ) cont $2 unwind $2
        :$2
            unreachable
#88  = fn[63] fn(obj<hl.types.ArrayBase>, ) -> bytes
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 obj<String>
        %2 void
        %3 bytes
    [Code]
        :$0
            j_always $1
        :$1
            call_method %1 %0 fn[16]()
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            ret %3
        :$2
            unreachable
#89  = fn[61] fn(obj<hl.types.ArrayBase>, type, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 type
        %2 obj<hl.types.ArrayDyn>
        %3 type
        %4 bool
        %5 bool
        %6 ref<bool>
        %7 obj<hl.types.ArrayDyn>
        %8 dyn
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            type %3 type[90]
            cmp ne %4 %1 %3
            j_true %4 $3 $2
        :$2
            bool %5 false
            ref %6 %5
            call %7 fn[343](%0, %6, )
            ret %4
        :$3
            null %8
            ret %8
        :$4
            unreachable
#90  = fn[62] fn(obj<hl.types.ArrayBase>, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 bool
    [Code]
        :$0
            j_always $1
        :$1
            bool %1 false
            ret %1
        :$2
            unreachable
#91  = fn[344] fn(obj<hl.types.ArrayBytes_Float>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 i32
        %2 bytes
    [Code]
        :$0
            j_always $1
        :$1
            int %1 0
            set_field %0.0 %1
            set_field %0.2 %1
            null %2
            set_field %0.1 %2
            ret_void
        :$2
            unreachable
#92  = fn[103] fn(obj<hl.types.ArrayBytes_Float>, obj<hl.types.ArrayBytes_Float>, ) -> obj<hl.types.ArrayBytes_Float>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  obj<hl.types.ArrayBytes_Float>
        %2  obj<hl.types.ArrayBytes_Float>
        %3  void
        %4  i32
        %5  void
        %6  i32
        %7  i32
        %8  bytes
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 i32
        %17 bytes
        %18 i32
        %19 bytes
        %20 i32
        %21 void
        %22 bytes
        %23 bytes
        %24 bytes
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[344](%2, )
            get_field %4 %0.0
            call_intrinsic %5 @eon.null_check(%1, )
            get_field %6 %1.0
            add %7 %4 %6
            set_field %2.2 %7
            set_field %2.0 %7
            get_field %8 %0.1
            get_field %9 %2.0
            int %10 3
            shl %11 %9 %10
            call %12 fn[36](%11, )
            set_field %2.1 %12
            get_field %13 %0.1
            get_field %14 %0.0
            int %15 3
            shl %16 %14 %15
            get_field %17 %2.1
            int %18 0
            get_field %19 %0.1
            int %20 0
            call %21 fn[39](%17, %18, %19, %20, %16, )
            get_field %22 %0.1
            get_field %23 %2.1
            get_field %24 %1.1
            int %25 0
            get_field %26 %1.0
            int %27 3
            shl %28 %26 %27
            call %29 fn[39](%23, %16, %24, %25, %28, )
            ret %2
        :$2 
            unreachable
#93  = fn[104] fn(obj<hl.types.ArrayBytes_Float>, obj<String>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  obj<String>
        %2  obj<StringBuf>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  obj<StringBuf>
        %8  obj<hl.types.ArrayBytes_Float>
        %9  obj<String>
        %10 i32
        %11 i32
        %12 void
        %13 i32
        %14 i32
        %15 i32
        %16 bool
        %17 void
        %18 void
        %19 bytes
        %20 void
        %21 i32
        %22 i32
        %23 f64
        %24 null<f64>
        %25 void
        %26 obj<hl.types.ArrayBytes_Float>
        %27 bytes
        %28 i32
        %29 void
        %30 obj<String>
        %31 f64
        %32 i32
        %33 i32
        %34 null<f64>
        %35 i32
        %36 obj<StringBuf>
        %37 bool
        %38 i32
        %39 obj<String>
        %40 void
        %41 obj<StringBuf>
        %42 i32
        %43 obj<hl.types.ArrayBytes_Float>
        %44 void
        %45 obj<String>
        %46 bytes
        %47 void
        %48 i32
        %49 i32
        %50 f64
        %51 null<f64>
        %52 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[245](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%36 $4], [%2 $1], 
            phi %8 [%26 $4], [%0 $1], 
            phi %9 [%30 $4], [%1 $1], 
            phi %10 [%28 $4], [%5 $1], 
            phi %11 [%35 $4], [%4 $1], 
            phi %12 [%29 $4], [%3 $1], 
            mov %13 %11
            incr %14 %11
            int %15 0
            cmp sge %16 %15 %6
            j_true %16 $6 $3
        :$3 
            call_intrinsic %17 @eon.null_check(%7, )
            call %18 fn[246](%7, %9, )
            get_field %19 %8.1
            call_intrinsic %20 @eon.null_check(%7, )
            int %21 3
            shl %22 %6 %21
            get_mem %23 %19[%22]
            to_dyn %24 %23
            call %25 fn[246](%7, %24, )
            j_always $4
        :$4 
            phi %26 [%8 $3], [%8 $6], 
            phi %27 [%19 $3], [%46 $6], 
            phi %28 [%10 $3], [%10 $6], 
            phi %29 [%25 $3], [%52 $6], 
            phi %30 [%9 $3], [%9 $6], 
            phi %31 [%23 $3], [%50 $6], 
            phi %32 [%22 $3], [%49 $6], 
            phi %33 [%13 $3], [%13 $6], 
            phi %34 [%24 $3], [%51 $6], 
            phi %35 [%14 $3], [%14 $6], 
            phi %36 [%7 $3], [%7 $6], 
            nop
            cmp sge %37 %35 %28
            j_true %37 $5 $2
        :$5 
            phi %38 [%28 $4], [%5 $1], 
            phi %39 [%30 $4], [%1 $1], 
            phi %40 [%29 $4], [%3 $1], 
            phi %41 [%36 $4], [%2 $1], 
            phi %42 [%35 $4], [%4 $1], 
            phi %43 [%26 $4], [%0 $1], 
            call_intrinsic %44 @eon.null_check(%41, )
            call %45 fn[248](%41, )
            ret %45
        :$6 
            get_field %46 %8.1
            call_intrinsic %47 @eon.null_check(%7, )
            int %48 3
            shl %49 %6 %48
            get_mem %50 %46[%49]
            to_dyn %51 %50
            call %52 fn[246](%7, %51, )
            j_always $4
        :$7 
            unreachable
#94  = fn[105] fn(obj<hl.types.ArrayBytes_Float>, ) -> null<f64>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  i32
        %3  bool
        %4  null<f64>
        %5  i32
        %6  i32
        %7  bytes
        %8  i32
        %9  i32
        %10 i32
        %11 f64
        %12 null<f64>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %2
            j_true %3 $3 $2
        :$2 
            null %4
            ret %3
        :$3 
            get_field %5 %0.0
            decr %6 %5
            set_field %0.0 %6
            get_field %7 %0.1
            get_field %8 %0.0
            int %9 3
            shl %10 %8 %9
            get_mem %11 %7[%10]
            to_dyn %12 %11
            ret %3
        :$4 
            unreachable
#95  = fn[106] fn(obj<hl.types.ArrayBytes_Float>, f64, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  f64
        %2  i32
        %3  i32
        %4  bool
        %5  void
        %6  bytes
        %7  i32
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 i32
        %14 i32
        %15 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            get_field %3 %0.2
            cmp ne %4 %4 %2
            j_true %4 $4 $2
        :$2 
            call %5 fn[136](%0, %2, )
            j_always $3
        :$3 
            get_field %6 %0.1
            int %7 3
            shl %8 %2 %7
            set_mem %6[%8] %1
            get_field %9 %0.0
            ret %4
        :$4 
            get_field %10 %0.0
            incr %11 %4
            set_field %0.0 %4
            get_field %12 %0.1
            int %13 3
            shl %14 %2 %13
            set_mem %12[%14] %1
            get_field %15 %0.0
            ret %4
        :$5 
            unreachable
#96  = fn[107] fn(obj<hl.types.ArrayBytes_Float>, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  i32
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  i32
        %8  i32
        %9  obj<hl.types.ArrayBytes_Float>
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 bytes
        %17 i32
        %18 i32
        %19 f64
        %20 bytes
        %21 bytes
        %22 i32
        %23 i32
        %24 f64
        %25 i32
        %26 i32
        %27 bytes
        %28 i32
        %29 i32
        %30 bool
        %31 obj<hl.types.ArrayBytes_Float>
        %32 i32
        %33 i32
        %34 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            int %1 0
            get_field %2 %0.0
            int %3 1
            sshr %4 %2 %3
            nop
            cmp sge %5 %1 %4
            j_true %5 $4 $2
        :$2 
            phi %6 [%1 $1], [%11 $3], 
            phi %7 [%3 $1], [%10 $3], 
            phi %8 [%4 $1], [%8 $3], 
            phi %9 [%0 $1], [%9 $3], 
            mov %10 %6
            incr %11 %6
            get_field %12 %9.0
            int %13 1
            sub %14 %5 %13
            sub %15 %5 %10
            get_field %16 %9.1
            int %17 3
            shl %18 %10 %17
            get_mem %19 %16[%18]
            get_field %20 %9.1
            get_field %21 %9.1
            int %22 3
            shl %23 %5 %22
            get_mem %24 %21[%23]
            int %25 3
            shl %26 %10 %25
            set_mem %20[%26] %24
            get_field %27 %9.1
            int %28 3
            shl %29 %5 %28
            set_mem %27[%29] %19
            j_always $3
        :$3 
            nop
            cmp sge %30 %11 %8
            j_true %30 $4 $2
        :$4 
            phi %31 [%0 $1], [%9 $3], 
            phi %32 [%4 $1], [%8 $3], 
            phi %33 [%1 $1], [%11 $3], 
            phi %34 [%3 $1], [%10 $3], 
            ret_void
        :$5 
            unreachable
#97  = fn[108] fn(obj<hl.types.ArrayBytes_Float>, ) -> null<f64>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  i32
        %3  bool
        %4  null<f64>
        %5  bytes
        %6  i32
        %7  i32
        %8  i32
        %9  f64
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 bytes
        %15 i32
        %16 i32
        %17 i32
        %18 bytes
        %19 i32
        %20 i32
        %21 i32
        %22 i32
        %23 void
        %24 null<f64>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %3
            j_true %3 $3 $2
        :$2 
            null %4
            ret %4
        :$3 
            get_field %5 %0.1
            int %6 0
            int %7 3
            shl %8 %6 %3
            get_mem %9 %5[%3]
            get_field %10 %0.0
            decr %11 %10
            set_field %0.0 %11
            get_field %12 %0.1
            get_field %13 %0.1
            get_field %14 %0.1
            int %15 1
            int %16 3
            shl %17 %15 %3
            get_field %18 %0.1
            int %19 0
            get_field %20 %0.0
            int %21 3
            shl %22 %20 %21
            call %23 fn[39](%12, %3, %13, %17, %22, )
            to_dyn %24 %9
            ret %24
        :$4 
            unreachable
#98  = fn[109] fn(obj<hl.types.ArrayBytes_Float>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  obj<hl.types.ArrayAccess>
        %3  i32
        %4  i32
        %5  obj<hl.types.ArrayBytes_Float>
        %6  i32
        %7  bool
        %8  i32
        %9  bool
        %10 i32
        %11 bool
        %12 i32
        %13 i32
        %14 bool
        %15 i32
        %16 void
        %17 i32
        %18 bool
        %19 i32
        %20 obj<hl.types.ArrayBytes_Float>
        %21 i32
        %22 i32
        %23 obj<hl.types.ArrayAccess>
        %24 i32
        %25 obj<hl.types.ArrayBytes_Float>
        %26 enum<haxe.io.Error>
        %27 dyn
        %28 void
        %29 bytes
        %30 bytes
        %31 i32
        %32 i32
        %33 bytes
        %34 bytes
        %35 i32
        %36 i32
        %37 bytes
        %38 i32
        %39 i32
        %40 void
    [Code]
        :$0 
            j_always $1
        :$1 
            call_intrinsic %5 @eon.safe_cast(%2, )
            int %6 0
            cmp slt %7 %1 %6
            j_true %7 $6 $2
        :$2 
            int %8 0
            cmp slt %9 %3 %8
            j_true %9 $6 $3
        :$3 
            int %10 0
            cmp slt %11 %4 %10
            j_true %11 $6 $4
        :$4 
            add %12 %1 %4
            get_field %13 %0.0
            cmp slt %14 %13 %7
            j_true %14 $6 $5
        :$5 
            add %15 %3 %4
            call_intrinsic %16 @eon.null_check(%5, )
            get_field %17 %5.0
            cmp sge %18 %17 %7
            j_true %18 $7 $6
        :$6 
            phi %19 [%1 $2], [%1 $4], [%1 $1], [%1 $3], [%1 $5], 
            phi %20 [%0 $2], [%0 $4], [%0 $1], [%0 $3], [%0 $5], 
            phi %21 [%8 $2], [%13 $4], [%6 $1], [%10 $3], [%17 $5], 
            phi %22 [%4 $2], [%4 $4], [%4 $1], [%4 $3], [%4 $5], 
            phi %23 [%2 $2], [%2 $4], [%2 $1], [%2 $3], [%2 $5], 
            phi %24 [%3 $2], [%3 $4], [%3 $1], [%3 $3], [%3 $5], 
            phi %25 [%5 $2], [%5 $4], [%5 $1], [%5 $3], [%5 $5], 
            get_global %26 global[28]
            call %27 fn[34](%26, )
            invoke_intrinsic %28 @eon.throw(%9, ) cont $8 unwind $8
        :$7 
            get_field %29 %0.1
            get_field %30 %0.1
            int %31 3
            shl %32 %1 %31
            get_field %33 %5.1
            get_field %34 %0.1
            int %35 3
            shl %36 %3 %35
            get_field %37 %0.1
            int %38 3
            shl %39 %4 %18
            call %40 fn[39](%11, %7, %33, %36, %39, )
            ret_void
        :$8 
            unreachable
#99  = fn[110] fn(obj<hl.types.ArrayBytes_Float>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 null<i32>
        %15 obj<hl.types.ArrayBytes_Float>
        %16 i32
        %17 obj<hl.types.ArrayBytes_Float>
        %18 i32
        %19 i32
        %20 null<i32>
        %21 i32
        %22 i32
        %23 bool
        %24 i32
        %25 i32
        %26 i32
        %27 null<i32>
        %28 obj<hl.types.ArrayBytes_Float>
        %29 obj<hl.types.ArrayBytes_Float>
        %30 void
        %31 i32
        %32 null<i32>
        %33 i32
        %34 i32
        %35 obj<hl.types.ArrayBytes_Float>
        %36 obj<hl.types.ArrayBytes_Float>
        %37 void
        %38 bytes
        %39 bytes
        %40 i32
        %41 i32
        %42 bytes
        %43 i32
        %44 i32
        %45 bytes
        %46 obj<hl.types.ArrayBytes_Float>
        %47 i32
        %48 null<i32>
        %49 i32
        %50 i32
        %51 i32
        %52 bool
        %53 i32
        %54 i32
        %55 i32
        %56 bool
        %57 null<i32>
        %58 i32
        %59 i32
        %60 i32
        %61 obj<hl.types.ArrayBytes_Float>
        %62 i32
        %63 i32
        %64 i32
        %65 bool
        %66 i32
        %67 bool
        %68 i32
        %69 obj<hl.types.ArrayBytes_Float>
        %70 i32
        %71 null<i32>
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $12 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $12 $3
        :$3 
            int %10 0
            mov %11 %4
            j_not_null %2 $8 $4
        :$4 
            phi %12 [%8 $3], [%68 $12], 
            phi %13 [%11 $3], [%70 $12], 
            phi %14 [%2 $3], [%71 $12], 
            phi %15 [%0 $3], [%69 $12], 
            get_field %16 %15.0
            j_always $5
        :$5 
            phi %17 [%15 $4], [%46 $11], [%46 $9], 
            phi %18 [%16 $4], [%50 $11], [%54 $9], 
            phi %19 [%13 $4], [%47 $11], [%47 $9], 
            phi %20 [%14 $4], [%48 $11], [%48 $9], 
            sub %21 %18 %19
            int %22 0
            cmp sge %23 %21 %22
            j_true %23 $7 $6
        :$6 
            phi %24 [%60 $10], [%19 $5], 
            phi %25 [%64 $10], [%22 $5], 
            phi %26 [%63 $10], [%21 $5], 
            phi %27 [%57 $10], [%20 $5], 
            phi %28 [%61 $10], [%17 $5], 
            new %29
            call %30 fn[344](%29, )
            ret %29
        :$7 
            phi %31 [%22 $5], [%64 $10], 
            phi %32 [%20 $5], [%57 $10], 
            phi %33 [%21 $5], [%63 $10], 
            phi %34 [%19 $5], [%60 $10], 
            phi %35 [%17 $5], [%61 $10], 
            new %36
            call %37 fn[344](%36, )
            set_field %36.2 %33
            set_field %36.0 %33
            get_field %38 %35.1
            get_field %39 %35.1
            int %40 3
            shl %41 %34 %40
            get_field %42 %35.1
            int %43 3
            shl %44 %33 %43
            call %45 fn[256](%9, %41, %44, )
            set_field %36.1 %45
            ret %36
        :$8 
            phi %46 [%69 $12], [%0 $3], 
            phi %47 [%70 $12], [%11 $3], 
            phi %48 [%71 $12], [%2 $3], 
            phi %49 [%68 $12], [%8 $3], 
            call_intrinsic %50 @eon.safe_cast(%48, )
            int %51 0
            cmp sge %52 %50 %51
            j_true %52 $11 $9
        :$9 
            get_field %53 %46.0
            add %54 %50 %53
            get_field %55 %46.0
            cmp sge %56 %55 %54
            j_true %56 $5 $10
        :$10
            phi %57 [%48 $11], [%48 $9], 
            phi %58 [%50 $11], [%54 $9], 
            phi %59 [%66 $11], [%55 $9], 
            phi %60 [%47 $11], [%47 $9], 
            phi %61 [%46 $11], [%46 $9], 
            get_field %62 %61.0
            sub %63 %62 %60
            int %64 0
            cmp sge %65 %63 %64
            j_true %65 $7 $6
        :$11
            get_field %66 %46.0
            cmp sge %67 %66 %50
            j_true %67 $5 $10
        :$12
            phi %68 [%3 $1], [%8 $2], 
            phi %69 [%0 $1], [%0 $2], 
            phi %70 [%1 $1], [%7 $2], 
            phi %71 [%2 $1], [%2 $2], 
            j_not_null %71 $8 $4
        :$13
            unreachable
#100 = fn[345] fn(fn(f64, f64, ) -> i32, i32, i32, ) -> i32
    [Values]
        %0 fn(f64, f64, ) -> i32
        %1 i32
        %2 i32
        %3 f64
        %4 f64
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_sfloat %3 %1
            to_sfloat %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#101 = fn[111] fn(obj<hl.types.ArrayBytes_Float>, fn(f64, f64, ) -> i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  fn(f64, f64, ) -> i32
        %2  type
        %3  type
        %4  bool
        %5  bytes
        %6  i32
        %7  i32
        %8  fn(i32, i32, ) -> i32
        %9  void
        %10 obj<hl.types.ArrayBytes_Float>
        %11 void
        %12 i32
        %13 fn(i32, i32, ) -> i32
        %14 type
        %15 fn(f64, f64, ) -> i32
        %16 i32
        %17 bytes
        %18 type
        %19 fn(i32, i32, ) -> i32
        %20 void
        %21 bytes
        %22 i32
        %23 i32
        %24 void
    [Code]
        :$0 
            j_always $1
        :$1 
            type %2 type[6]
            type %3 type[3]
            cmp ne %4 %2 %4
            j_true %4 $7 $2
        :$2 
            get_field %5 %0.1
            int %6 0
            get_field %7 %0.0
            j_not_null %1 $6 $3
        :$3 
            null %8
            j_always $4
        :$4 
            call %9 fn[254](%5, %6, %7, %8, )
            j_always $5
        :$5 
            phi %10 [%0 $6], [%0 $4], 
            phi %11 [%20 $6], [%9 $4], 
            phi %12 [%6 $6], [%6 $4], 
            phi %13 [%19 $6], [%8 $4], 
            phi %14 [%2 $6], [%2 $4], 
            phi %15 [%1 $6], [%1 $4], 
            phi %16 [%7 $6], [%7 $4], 
            phi %17 [%5 $6], [%5 $4], 
            phi %18 [%3 $6], [%3 $4], 
            ret_void
        :$6 
            instance_closure %19 fn[345] %1
            call %20 fn[254](%5, %6, %7, %19, )
            j_always $5
        :$7 
            get_field %21 %0.1
            int %22 0
            get_field %23 %0.0
            call %24 fn[255](%21, %22, %23, %1, )
            ret_void
        :$8 
            unreachable
#102 = fn[112] fn(obj<hl.types.ArrayBytes_Float>, i32, i32, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  i32
        %3  i32
        %4  bool
        %5  obj<hl.types.ArrayBytes_Float>
        %6  void
        %7  i32
        %8  bool
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 bool
        %14 i32
        %15 i32
        %16 i32
        %17 bool
        %18 i32
        %19 i32
        %20 obj<hl.types.ArrayBytes_Float>
        %21 i32
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 obj<hl.types.ArrayBytes_Float>
        %27 i32
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bool
        %33 i32
        %34 i32
        %35 i32
        %36 i32
        %37 obj<hl.types.ArrayBytes_Float>
        %38 obj<hl.types.ArrayBytes_Float>
        %39 void
        %40 i32
        %41 i32
        %42 obj<hl.types.ArrayBytes_Float>
        %43 i32
        %44 i32
        %45 obj<hl.types.ArrayBytes_Float>
        %46 void
        %47 bytes
        %48 bytes
        %49 i32
        %50 i32
        %51 bytes
        %52 i32
        %53 i32
        %54 bytes
        %55 i32
        %56 bytes
        %57 bytes
        %58 i32
        %59 i32
        %60 bytes
        %61 bytes
        %62 i32
        %63 i32
        %64 bytes
        %65 i32
        %66 i32
        %67 i32
        %68 i32
        %69 void
        %70 i32
        %71 i32
        %72 i32
        %73 obj<hl.types.ArrayBytes_Float>
        %74 i32
        %75 i32
        %76 i32
        %77 i32
        %78 bool
        %79 i32
        %80 i32
        %81 i32
        %82 i32
        %83 bool
        %84 i32
        %85 i32
        %86 i32
        %87 bool
        %88 i32
        %89 obj<hl.types.ArrayBytes_Float>
        %90 i32
        %91 i32
        %92 i32
        %93 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %2 %3
            j_true %4 $3 $2
        :$2 
            new %5
            call %6 fn[344](%5, )
            ret %5
        :$3 
            int %7 0
            cmp sge %8 %1 %7
            j_true %8 $13 $4
        :$4 
            get_field %9 %0.0
            add %10 %4 %1
            mov %11 %4
            int %12 0
            cmp sge %13 %4 %12
            j_true %13 $13 $5
        :$5 
            int %14 0
            mov %15 %4
            get_field %16 %0.0
            cmp sge %17 %16 %15
            j_true %17 $10 $6
        :$6 
            phi %18 [%92 $13], [%16 $5], 
            phi %19 [%88 $13], [%15 $5], 
            phi %20 [%89 $13], [%0 $5], 
            phi %21 [%91 $13], [%2 $5], 
            int %22 0
            mov %23 %4
            int %24 0
            mov %25 %4
            j_always $7
        :$7 
            phi %26 [%20 $6], [%73 $11], [%73 $10], 
            phi %27 [%23 $6], [%72 $11], [%72 $10], 
            phi %28 [%24 $6], [%80 $11], [%76 $10], 
            phi %29 [%25 $6], [%81 $11], [%75 $10], 
            phi %30 [%18 $6], [%82 $11], [%77 $10], 
            int %31 0
            cmp ne %32 %29 %31
            j_true %32 $9 $8
        :$8 
            phi %33 [%31 $7], [%86 $12], 
            phi %34 [%29 $7], [%85 $12], 
            phi %35 [%27 $7], [%72 $12], 
            phi %36 [%28 $7], [%84 $12], 
            phi %37 [%26 $7], [%73 $12], 
            new %38
            call %39 fn[344](%38, )
            ret %38
        :$9 
            phi %40 [%29 $7], [%85 $12], 
            phi %41 [%27 $7], [%72 $12], 
            phi %42 [%26 $7], [%73 $12], 
            phi %43 [%28 $7], [%84 $12], 
            phi %44 [%31 $7], [%86 $12], 
            new %45
            call %46 fn[344](%45, )
            get_field %47 %42.1
            get_field %48 %42.1
            int %49 3
            shl %50 %41 %49
            get_field %51 %42.1
            int %52 3
            shl %53 %40 %52
            call %54 fn[256](%47, %4, %53, )
            set_field %45.1 %54
            set_field %45.0 %40
            set_field %45.2 %40
            add %55 %41 %40
            get_field %56 %42.1
            get_field %57 %42.1
            int %58 3
            shl %59 %41 %58
            get_field %60 %42.1
            get_field %61 %42.1
            int %62 3
            shl %63 %55 %62
            get_field %64 %42.1
            get_field %65 %42.0
            sub %66 %65 %55
            int %67 3
            shl %68 %66 %67
            call %69 fn[39](%56, %59, %60, %63, %68, )
            get_field %70 %42.0
            sub %71 %70 %40
            set_field %42.0 %71
            ret %45
        :$10
            phi %72 [%88 $13], [%15 $5], 
            phi %73 [%89 $13], [%0 $5], 
            phi %74 [%92 $13], [%16 $5], 
            phi %75 [%91 $13], [%2 $5], 
            add %76 %72 %75
            get_field %77 %73.0
            cmp sge %78 %77 %4
            j_true %78 $7 $11
        :$11
            get_field %79 %73.0
            sub %80 %4 %72
            mov %81 %4
            int %82 0
            cmp sge %83 %4 %82
            j_true %83 $7 $12
        :$12
            int %84 0
            mov %85 %4
            int %86 0
            cmp ne %87 %85 %86
            j_true %87 $9 $8
        :$13
            phi %88 [%11 $4], [%1 $3], 
            phi %89 [%0 $4], [%0 $3], 
            phi %90 [%12 $4], [%7 $3], 
            phi %91 [%2 $4], [%2 $3], 
            get_field %92 %89.0
            cmp sge %93 %92 %88
            j_true %93 $10 $6
        :$14
            unreachable
#103 = fn[113] fn(obj<hl.types.ArrayBytes_Float>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  obj<StringBuf>
        %2  void
        %3  i32
        %4  void
        %5  i32
        %6  i32
        %7  bool
        %8  void
        %9  i32
        %10 i32
        %11 obj<hl.types.ArrayBytes_Float>
        %12 obj<StringBuf>
        %13 i32
        %14 i32
        %15 i32
        %16 bool
        %17 void
        %18 i32
        %19 void
        %20 bytes
        %21 void
        %22 i32
        %23 i32
        %24 f64
        %25 null<f64>
        %26 void
        %27 i32
        %28 bytes
        %29 obj<hl.types.ArrayBytes_Float>
        %30 i32
        %31 obj<StringBuf>
        %32 i32
        %33 i32
        %34 f64
        %35 null<f64>
        %36 void
        %37 bool
        %38 obj<StringBuf>
        %39 i32
        %40 void
        %41 obj<hl.types.ArrayBytes_Float>
        %42 i32
        %43 void
        %44 i32
        %45 void
        %46 obj<String>
        %47 bytes
        %48 void
        %49 i32
        %50 i32
        %51 f64
        %52 null<f64>
        %53 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %1
            call %2 fn[245](%1, )
            int %3 91
            call %4 fn[247](%1, %3, )
            int %5 0
            get_field %6 %0.0
            nop
            cmp sge %7 %5 %6
            j_true %7 $5 $2
        :$2 
            phi %8 [%4 $1], [%36 $4], 
            phi %9 [%6 $1], [%33 $4], 
            phi %10 [%5 $1], [%27 $4], 
            phi %11 [%0 $1], [%29 $4], 
            phi %12 [%1 $1], [%31 $4], 
            mov %13 %10
            incr %14 %10
            int %15 0
            cmp sge %16 %7 %13
            j_true %16 $6 $3
        :$3 
            call_intrinsic %17 @eon.null_check(%12, )
            int %18 44
            call %19 fn[247](%12, %18, )
            get_field %20 %11.1
            call_intrinsic %21 @eon.null_check(%12, )
            int %22 3
            shl %23 %13 %7
            get_mem %24 %20[%7]
            to_dyn %25 %24
            call %26 fn[246](%12, %25, )
            j_always $4
        :$4 
            phi %27 [%14 $6], [%14 $3], 
            phi %28 [%47 $6], [%20 $3], 
            phi %29 [%11 $6], [%11 $3], 
            phi %30 [%13 $6], [%13 $3], 
            phi %31 [%12 $6], [%12 $3], 
            phi %32 [%50 $6], [%23 $3], 
            phi %33 [%9 $6], [%9 $3], 
            phi %34 [%51 $6], [%24 $3], 
            phi %35 [%52 $6], [%25 $3], 
            phi %36 [%53 $6], [%26 $3], 
            nop
            cmp sge %37 %27 %33
            j_true %37 $5 $2
        :$5 
            phi %38 [%31 $4], [%1 $1], 
            phi %39 [%27 $4], [%5 $1], 
            phi %40 [%36 $4], [%4 $1], 
            phi %41 [%29 $4], [%0 $1], 
            phi %42 [%33 $4], [%6 $1], 
            call_intrinsic %43 @eon.null_check(%38, )
            int %44 93
            call %45 fn[247](%38, %44, )
            call %46 fn[248](%38, )
            ret %46
        :$6 
            get_field %47 %11.1
            call_intrinsic %48 @eon.null_check(%12, )
            int %49 3
            shl %50 %13 %7
            get_mem %51 %47[%7]
            to_dyn %52 %51
            call %53 fn[246](%12, %52, )
            j_always $4
        :$7 
            unreachable
#104 = fn[114] fn(obj<hl.types.ArrayBytes_Float>, f64, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  f64
        %2  i32
        %3  i32
        %4  bool
        %5  i32
        %6  void
        %7  bytes
        %8  bytes
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 void
        %21 bytes
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 i32
        %27 bytes
        %28 bytes
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 bytes
        %34 i32
        %35 i32
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 void
        %41 bytes
        %42 i32
        %43 i32
        %44 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            get_field %3 %0.2
            cmp ne %4 %2 %4
            j_true %4 $4 $2
        :$2 
            get_field %5 %0.0
            call %6 fn[136](%0, %5, )
            j_always $3
        :$3 
            get_field %7 %0.1
            get_field %8 %0.1
            int %9 1
            int %10 3
            shl %11 %9 %4
            get_field %12 %0.1
            get_field %13 %0.1
            int %14 0
            get_field %15 %0.0
            int %16 1
            sub %17 %15 %16
            int %18 3
            shl %19 %17 %18
            call %20 fn[39](%7, %11, %13, %14, %19, )
            get_field %21 %0.1
            int %22 0
            int %23 3
            shl %24 %4 %23
            set_mem %21[%24] %1
            ret_void
        :$4 
            get_field %25 %0.0
            incr %26 %25
            set_field %0.0 %26
            get_field %27 %0.1
            get_field %28 %0.1
            int %29 1
            int %30 3
            shl %31 %29 %4
            get_field %32 %0.1
            get_field %33 %0.1
            int %34 0
            get_field %35 %0.0
            int %36 1
            sub %37 %35 %36
            int %38 3
            shl %39 %37 %38
            call %40 fn[39](%27, %31, %33, %34, %39, )
            get_field %41 %0.1
            int %42 0
            int %43 3
            shl %44 %4 %43
            set_mem %41[%44] %1
            ret_void
        :$5 
            unreachable
#105 = fn[115] fn(obj<hl.types.ArrayBytes_Float>, i32, f64, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  f64
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 i32
        %13 f64
        %14 obj<hl.types.ArrayBytes_Float>
        %15 i32
        %16 i32
        %17 i32
        %18 bool
        %19 i32
        %20 f64
        %21 i32
        %22 i32
        %23 obj<hl.types.ArrayBytes_Float>
        %24 i32
        %25 void
        %26 bytes
        %27 bytes
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 bytes
        %34 i32
        %35 i32
        %36 bytes
        %37 i32
        %38 i32
        %39 i32
        %40 i32
        %41 i32
        %42 i32
        %43 void
        %44 bytes
        %45 i32
        %46 i32
        %47 f64
        %48 i32
        %49 obj<hl.types.ArrayBytes_Float>
        %50 i32
        %51 i32
        %52 i32
        %53 i32
        %54 bytes
        %55 bytes
        %56 i32
        %57 i32
        %58 i32
        %59 i32
        %60 bytes
        %61 bytes
        %62 i32
        %63 i32
        %64 bytes
        %65 i32
        %66 i32
        %67 i32
        %68 i32
        %69 i32
        %70 i32
        %71 void
        %72 bytes
        %73 i32
        %74 i32
        %75 i32
        %76 bool
        %77 i32
        %78 i32
        %79 i32
        %80 i32
        %81 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $9 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $8 $3
        :$3 
            int %10 0
            mov %11 %4
            j_always $4
        :$4 
            phi %12 [%75 $9], [%8 $3], [%8 $8], 
            phi %13 [%2 $9], [%2 $3], [%2 $8], 
            phi %14 [%0 $9], [%0 $3], [%0 $8], 
            phi %15 [%1 $9], [%11 $3], [%7 $8], 
            get_field %16 %14.0
            get_field %17 %14.2
            cmp ne %18 %4 %17
            j_true %18 $7 $5
        :$5 
            phi %19 [%17 $4], [%80 $10], 
            phi %20 [%13 $4], [%2 $10], 
            phi %21 [%15 $4], [%78 $10], 
            phi %22 [%16 $4], [%79 $10], 
            phi %23 [%14 $4], [%0 $10], 
            get_field %24 %23.0
            call %25 fn[136](%23, %4, )
            j_always $6
        :$6 
            get_field %26 %23.1
            get_field %27 %23.1
            int %28 1
            add %29 %21 %28
            int %30 3
            shl %31 %4 %30
            get_field %32 %23.1
            get_field %33 %23.1
            int %34 3
            shl %35 %21 %34
            get_field %36 %23.1
            get_field %37 %23.0
            sub %38 %37 %21
            int %39 1
            sub %40 %38 %39
            int %41 3
            shl %42 %40 %41
            call %43 fn[39](%26, %4, %32, %35, %42, )
            get_field %44 %23.1
            int %45 3
            shl %46 %21 %45
            set_mem %44[%46] %20
            ret_void
        :$7 
            phi %47 [%13 $4], [%2 $10], 
            phi %48 [%16 $4], [%79 $10], 
            phi %49 [%14 $4], [%0 $10], 
            phi %50 [%17 $4], [%80 $10], 
            phi %51 [%15 $4], [%78 $10], 
            get_field %52 %49.0
            incr %53 %4
            set_field %49.0 %4
            get_field %54 %49.1
            get_field %55 %49.1
            int %56 1
            add %57 %51 %56
            int %58 3
            shl %59 %4 %58
            get_field %60 %49.1
            get_field %61 %49.1
            int %62 3
            shl %63 %51 %62
            get_field %64 %49.1
            get_field %65 %49.0
            sub %66 %65 %51
            int %67 1
            sub %68 %66 %67
            int %69 3
            shl %70 %68 %69
            call %71 fn[39](%54, %4, %60, %63, %70, )
            get_field %72 %49.1
            int %73 3
            shl %74 %51 %73
            set_mem %72[%74] %47
            ret_void
        :$8 
            j_always $4
        :$9 
            get_field %75 %0.0
            cmp sge %76 %75 %1
            j_true %76 $4 $10
        :$10
            get_field %77 %0.0
            mov %78 %4
            get_field %79 %0.0
            get_field %80 %0.2
            cmp ne %81 %4 %80
            j_true %81 $7 $5
        :$11
            unreachable
#106 = fn[116] fn(obj<hl.types.ArrayBytes_Float>, f64, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 f64
        %2 null<i32>
        %3 i32
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call %3 fn[118](%0, %1, %2, )
            int %4 -1
            cmp ne %5 %3 %5
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#107 = fn[117] fn(obj<hl.types.ArrayBytes_Float>, f64, ) -> bool
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  f64
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  bool
        %7  i32
        %8  i32
        %9  bytes
        %10 bytes
        %11 i32
        %12 i32
        %13 bytes
        %14 bytes
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 bytes
        %20 i32
        %21 i32
        %22 i32
        %23 i32
        %24 void
        %25 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            null %2
            call %3 fn[118](%0, %1, %2, )
            int %4 0
            cmp sge %5 %3 %4
            j_true %5 $3 $2
        :$2 
            bool %6 false
            ret %6
        :$3 
            get_field %7 %0.0
            decr %8 %5
            set_field %0.0 %5
            get_field %9 %0.1
            get_field %10 %0.1
            int %11 3
            shl %12 %3 %11
            get_field %13 %0.1
            get_field %14 %0.1
            int %15 1
            add %16 %3 %15
            int %17 3
            shl %18 %16 %17
            get_field %19 %0.1
            get_field %20 %0.0
            sub %21 %20 %3
            int %22 3
            shl %23 %21 %22
            call %24 fn[39](%9, %5, %13, %18, %23, )
            bool %25 true
            ret %25
        :$4 
            unreachable
#108 = fn[118] fn(obj<hl.types.ArrayBytes_Float>, f64, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  f64
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  obj<hl.types.ArrayBytes_Float>
        %8  f64
        %9  null<i32>
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 bool
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 bool
        %21 i32
        %22 null<i32>
        %23 obj<hl.types.ArrayBytes_Float>
        %24 f64
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 bytes
        %30 i32
        %31 i32
        %32 f64
        %33 bool
        %34 bool
        %35 i32
        %36 f64
        %37 i32
        %38 obj<hl.types.ArrayBytes_Float>
        %39 i32
        %40 null<i32>
        %41 i32
        %42 null<i32>
        %43 f64
        %44 i32
        %45 i32
        %46 obj<hl.types.ArrayBytes_Float>
        %47 i32
        %48 i32
        %49 bool
        %50 i32
        %51 i32
        %52 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            j_not_null %2 $12 $2
        :$2 
            int %3 0
            j_always $3
        :$3 
            int %4 0
            cmp sge %5 %3 %5
            j_true %5 $11 $4
        :$4 
            phi %6 [%51 $12], [%4 $3], 
            phi %7 [%0 $12], [%0 $3], 
            phi %8 [%1 $12], [%1 $3], 
            phi %9 [%2 $12], [%2 $3], 
            phi %10 [%50 $12], [%3 $3], 
            get_field %11 %7.0
            add %12 %10 %5
            mov %13 %12
            int %14 0
            cmp sge %15 %12 %5
            j_true %15 $11 $5
        :$5 
            int %16 0
            mov %17 %16
            mov %18 %17
            get_field %19 %7.0
            nop
            cmp sge %20 %18 %5
            j_true %20 $10 $6
        :$6 
            phi %21 [%18 $5], [%28 $9], [%47 $11], 
            phi %22 [%9 $5], [%22 $9], [%42 $11], 
            phi %23 [%7 $5], [%23 $9], [%46 $11], 
            phi %24 [%8 $5], [%24 $9], [%43 $11], 
            phi %25 [%19 $5], [%25 $9], [%48 $11], 
            phi %26 [%17 $5], [%26 $9], [%44 $11], 
            mov %27 %21
            incr %28 %21
            get_field %29 %23.1
            int %30 3
            shl %31 %27 %30
            get_mem %32 %29[%31]
            cmp ne %33 %32 %24
            j_true %33 $8 $7
        :$7 
            ret %27
        :$8 
            j_always $9
        :$9 
            nop
            cmp sge %34 %28 %5
            j_true %34 $10 $6
        :$10
            phi %35 [%47 $11], [%28 $9], [%18 $5], 
            phi %36 [%43 $11], [%24 $9], [%8 $5], 
            phi %37 [%44 $11], [%26 $9], [%17 $5], 
            phi %38 [%46 $11], [%23 $9], [%7 $5], 
            phi %39 [%48 $11], [%25 $9], [%19 $5], 
            phi %40 [%42 $11], [%22 $9], [%9 $5], 
            int %41 -1
            ret %41
        :$11
            phi %42 [%2 $12], [%2 $3], [%9 $4], 
            phi %43 [%1 $12], [%1 $3], [%8 $4], 
            phi %44 [%50 $12], [%3 $3], [%13 $4], 
            phi %45 [%51 $12], [%4 $3], [%14 $4], 
            phi %46 [%0 $12], [%0 $3], [%7 $4], 
            mov %47 %44
            get_field %48 %46.0
            nop
            cmp sge %49 %47 %5
            j_true %49 $10 $6
        :$12
            call_intrinsic %50 @eon.safe_cast(%2, )
            int %51 0
            cmp sge %52 %50 %5
            j_true %52 $11 $4
        :$13
            unreachable
#109 = fn[119] fn(obj<hl.types.ArrayBytes_Float>, f64, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  f64
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  null<i32>
        %7  i32
        %8  i32
        %9  obj<hl.types.ArrayBytes_Float>
        %10 f64
        %11 i32
        %12 i32
        %13 i32
        %14 obj<hl.types.ArrayBytes_Float>
        %15 i32
        %16 f64
        %17 null<i32>
        %18 i32
        %19 i32
        %20 i32
        %21 bool
        %22 f64
        %23 obj<hl.types.ArrayBytes_Float>
        %24 null<i32>
        %25 i32
        %26 i32
        %27 i32
        %28 bytes
        %29 i32
        %30 i32
        %31 f64
        %32 bool
        %33 i32
        %34 i32
        %35 f64
        %36 obj<hl.types.ArrayBytes_Float>
        %37 null<i32>
        %38 i32
        %39 i32
        %40 i32
        %41 null<i32>
        %42 obj<hl.types.ArrayBytes_Float>
        %43 i32
        %44 f64
        %45 i32
        %46 i32
        %47 bool
        %48 i32
        %49 i32
        %50 i32
        %51 bool
        %52 i32
        %53 i32
        %54 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            j_null %2 $12 $2
        :$2 
            call_intrinsic %4 @eon.safe_cast(%2, )
            j_always $3
        :$3 
            cmp slt %5 %4 %3
            j_true %5 $10 $4
        :$4 
            phi %6 [%2 $12], [%2 $3], 
            phi %7 [%53 $12], [%4 $3], 
            phi %8 [%3 $12], [%3 $3], 
            phi %9 [%0 $12], [%0 $3], 
            phi %10 [%1 $12], [%1 $3], 
            int %11 1
            sub %12 %8 %11
            mov %13 %5
            j_always $5
        :$5 
            phi %14 [%9 $4], [%23 $8], [%42 $10], 
            phi %15 [%11 $4], [%30 $8], [%46 $10], 
            phi %16 [%10 $4], [%22 $8], [%44 $10], 
            phi %17 [%6 $4], [%24 $8], [%41 $10], 
            phi %18 [%8 $4], [%25 $8], [%45 $10], 
            phi %19 [%13 $4], [%33 $8], [%43 $10], 
            nop
            int %20 0
            cmp slt %21 %19 %20
            j_true %21 $9 $6
        :$6 
            phi %22 [%44 $11], [%16 $5], 
            phi %23 [%42 $11], [%14 $5], 
            phi %24 [%41 $11], [%17 $5], 
            phi %25 [%45 $11], [%18 $5], 
            phi %26 [%50 $11], [%20 $5], 
            phi %27 [%49 $11], [%19 $5], 
            get_field %28 %23.1
            int %29 3
            shl %30 %27 %29
            get_mem %31 %28[%30]
            cmp ne %32 %31 %22
            j_true %32 $8 $7
        :$7 
            ret %27
        :$8 
            decr %33 %27
            j_always $5
        :$9 
            phi %34 [%19 $5], [%49 $11], 
            phi %35 [%16 $5], [%44 $11], 
            phi %36 [%14 $5], [%42 $11], 
            phi %37 [%17 $5], [%41 $11], 
            phi %38 [%18 $5], [%45 $11], 
            phi %39 [%20 $5], [%50 $11], 
            int %40 -1
            ret %5
        :$10
            phi %41 [%2 $12], [%2 $3], 
            phi %42 [%0 $12], [%0 $3], 
            phi %43 [%53 $12], [%4 $3], 
            phi %44 [%1 $12], [%1 $3], 
            phi %45 [%3 $12], [%3 $3], 
            int %46 0
            cmp sge %47 %43 %46
            j_true %47 $5 $11
        :$11
            add %48 %43 %45
            mov %49 %5
            nop
            int %50 0
            cmp slt %51 %49 %50
            j_true %51 $9 $6
        :$12
            int %52 1
            sub %53 %3 %5
            cmp slt %54 %53 %3
            j_true %54 $10 $4
        :$13
            unreachable
#110 = fn[120] fn(obj<hl.types.ArrayBytes_Float>, ) -> obj<hl.types.ArrayBytes_Float>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  obj<hl.types.ArrayBytes_Float>
        %2  void
        %3  i32
        %4  bytes
        %5  i32
        %6  i32
        %7  i32
        %8  bytes
        %9  bytes
        %10 bytes
        %11 i32
        %12 bytes
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %1
            call %2 fn[344](%1, )
            get_field %3 %0.0
            set_field %1.2 %3
            set_field %1.0 %3
            get_field %4 %0.1
            get_field %5 %0.0
            int %6 3
            shl %7 %5 %6
            call %8 fn[36](%7, )
            set_field %1.1 %8
            get_field %9 %0.1
            get_field %10 %1.1
            int %11 0
            get_field %12 %0.1
            int %13 0
            get_field %14 %0.0
            int %15 3
            shl %16 %14 %15
            call %17 fn[39](%10, %11, %12, %13, %16, )
            ret %1
        :$2 
            unreachable
#111 = fn[121] fn(obj<hl.types.ArrayBytes_Float>, ) -> obj<haxe.iterators.ArrayIterator>
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 obj<hl.types.BytesIterator_Float>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[348](%1, %0, )
            ret %1
        :$2
            unreachable
#112 = fn[122] fn(obj<hl.types.ArrayBytes_Float>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 obj<hl.types.BytesKeyValueIterator_Float>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[351](%1, %0, )
            ret %1
        :$2
            unreachable
#113 = fn[123] fn(obj<hl.types.ArrayBytes_Float>, fn(f64, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  fn(f64, ) -> dyn
        %2  obj<hl.types.ArrayObj>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  i32
        %8  i32
        %9  i32
        %10 void
        %11 i32
        %12 i32
        %13 bool
        %14 i32
        %15 obj<hl.types.ArrayObj>
        %16 obj<hl.types.ArrayBytes_Float>
        %17 fn(f64, ) -> dyn
        %18 i32
        %19 void
        %20 i32
        %21 i32
        %22 void
        %23 array<void>
        %24 bytes
        %25 void
        %26 i32
        %27 i32
        %28 f64
        %29 dyn
        %30 bool
        %31 void
        %32 obj<hl.types.ArrayBytes_Float>
        %33 fn(f64, ) -> dyn
        %34 obj<hl.types.ArrayObj>
        %35 i32
        %36 i32
        %37 bool
        %38 ref<bool>
        %39 obj<hl.types.ArrayDyn>
        %40 i32
        %41 i32
        %42 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[269](%2, )
            get_field %4 %0.0
            int %5 0
            cmp sge %6 %5 %4
            j_true %6 $6 $2
        :$2 
            get_field %7 %0.0
            int %8 1
            sub %9 %7 %8
            call %10 fn[92](%2, %9, )
            int %11 0
            get_field %12 %0.0
            nop
            cmp sge %13 %11 %12
            j_true %13 $5 $3
        :$3 
            phi %14 [%11 $2], [%21 $4], [%40 $6], 
            phi %15 [%2 $2], [%15 $4], [%2 $6], 
            phi %16 [%0 $2], [%16 $4], [%0 $6], 
            phi %17 [%1 $2], [%17 $4], [%1 $6], 
            phi %18 [%12 $2], [%18 $4], [%41 $6], 
            phi %19 [%10 $2], [%19 $4], [%3 $6], 
            mov %20 %14
            incr %21 %14
            call_intrinsic %22 @eon.null_check(%15, )
            get_field %23 %15.1
            get_field %24 %16.1
            call_intrinsic %25 @eon.null_check(%17, )
            int %26 3
            shl %27 %6 %26
            get_mem %28 %24[%27]
            call_closure %29 %17(%28, )
            set_array %23[%6] %29
            j_always $4
        :$4 
            nop
            cmp sge %30 %21 %18
            j_true %30 $5 $3
        :$5 
            phi %31 [%3 $6], [%10 $2], [%19 $4], 
            phi %32 [%0 $6], [%0 $2], [%16 $4], 
            phi %33 [%1 $6], [%1 $2], [%17 $4], 
            phi %34 [%2 $6], [%2 $2], [%15 $4], 
            phi %35 [%41 $6], [%12 $2], [%18 $4], 
            phi %36 [%40 $6], [%11 $2], [%21 $4], 
            bool %37 true
            ref %38 %13
            call %39 fn[343](%34, %38, )
            ret %39
        :$6 
            int %40 0
            get_field %41 %0.0
            nop
            cmp sge %42 %40 %41
            j_true %42 $5 $3
        :$7 
            unreachable
#114 = fn[124] fn(obj<hl.types.ArrayBytes_Float>, fn(f64, ) -> bool, ) -> obj<hl.types.ArrayBytes_Float>
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  fn(f64, ) -> bool
        %2  obj<hl.types.ArrayBytes_Float>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  obj<hl.types.ArrayBytes_Float>
        %8  i32
        %9  void
        %10 obj<hl.types.ArrayBytes_Float>
        %11 i32
        %12 fn(f64, ) -> bool
        %13 i32
        %14 i32
        %15 bytes
        %16 i32
        %17 i32
        %18 f64
        %19 void
        %20 bool
        %21 void
        %22 i32
        %23 obj<hl.types.ArrayBytes_Float>
        %24 i32
        %25 i32
        %26 obj<hl.types.ArrayBytes_Float>
        %27 i32
        %28 bytes
        %29 void
        %30 f64
        %31 i32
        %32 fn(f64, ) -> bool
        %33 bool
        %34 bool
        %35 i32
        %36 obj<hl.types.ArrayBytes_Float>
        %37 void
        %38 fn(f64, ) -> bool
        %39 i32
        %40 obj<hl.types.ArrayBytes_Float>
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[344](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%2 $1], [%26 $4], 
            phi %8 [%4 $1], [%31 $4], 
            phi %9 [%3 $1], [%29 $4], 
            phi %10 [%0 $1], [%23 $4], 
            phi %11 [%5 $1], [%27 $4], 
            phi %12 [%1 $1], [%32 $4], 
            mov %13 %8
            incr %14 %8
            get_field %15 %10.1
            int %16 3
            shl %17 %6 %16
            get_mem %18 %15[%17]
            call_intrinsic %19 @eon.null_check(%12, )
            call_closure %20 %12(%18, )
            j_false %20 $6 $3
        :$3 
            call_intrinsic %21 @eon.null_check(%7, )
            call %22 fn[106](%7, %18, )
            j_always $4
        :$4 
            phi %23 [%10 $3], [%10 $6], 
            phi %24 [%17 $3], [%17 $6], 
            phi %25 [%13 $3], [%13 $6], 
            phi %26 [%7 $3], [%7 $6], 
            phi %27 [%11 $3], [%11 $6], 
            phi %28 [%15 $3], [%15 $6], 
            phi %29 [%9 $3], [%9 $6], 
            phi %30 [%18 $3], [%18 $6], 
            phi %31 [%14 $3], [%14 $6], 
            phi %32 [%12 $3], [%12 $6], 
            phi %33 [%20 $3], [%20 $6], 
            nop
            cmp sge %34 %31 %27
            j_true %34 $5 $2
        :$5 
            phi %35 [%4 $1], [%31 $4], 
            phi %36 [%0 $1], [%23 $4], 
            phi %37 [%3 $1], [%29 $4], 
            phi %38 [%1 $1], [%32 $4], 
            phi %39 [%5 $1], [%27 $4], 
            phi %40 [%2 $1], [%26 $4], 
            ret %40
        :$6 
            j_always $4
        :$7 
            unreachable
#115 = fn[125] fn(obj<hl.types.ArrayBytes_Float>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  i32
        %3  bool
        %4  i32
        %5  i32
        %6  void
        %7  obj<hl.types.ArrayBytes_Float>
        %8  i32
        %9  i32
        %10 i32
        %11 bool
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 bytes
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 i32
        %22 void
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            cmp sge %3 %3 %1
            j_true %3 $4 $2
        :$2 
            int %4 1
            sub %5 %1 %4
            call %6 fn[136](%0, %3, )
            j_always $3
        :$3 
            phi %7 [%0 $2], [%0 $4], 
            phi %8 [%5 $2], [%10 $4], 
            phi %9 [%1 $2], [%1 $4], 
            ret_void
        :$4 
            get_field %10 %0.0
            cmp sge %11 %1 %3
            j_true %11 $3 $5
        :$5 
            get_field %12 %0.1
            get_field %13 %0.1
            int %14 3
            shl %15 %1 %14
            get_field %16 %0.1
            get_field %17 %0.0
            sub %18 %17 %1
            int %19 3
            shl %20 %18 %19
            int %21 0
            call %22 fn[253](%12, %3, %20, %21, )
            set_field %0.0 %1
            ret_void
        :$6 
            unreachable
#116 = fn[126] fn(obj<hl.types.ArrayBytes_Float>, i32, ) -> dyn
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  i32
        %3  bool
        %4  bytes
        %5  f64
        %6  dyn
        %7  bytes
        %8  i32
        %9  i32
        %10 f64
        %11 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            cmp slt %3 %1 %2
            j_true %3 $3 $2
        :$2 
            get_field %4 %0.1
            float %5 0
            to_dyn %6 %5
            ret %6
        :$3 
            get_field %7 %0.1
            int %8 3
            shl %9 %1 %8
            get_mem %10 %3[%9]
            to_dyn %11 %10
            ret %11
        :$4 
            unreachable
#117 = fn[127] fn(obj<hl.types.ArrayBytes_Float>, i32, dyn, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  dyn
        %3  i32
        %4  bool
        %5  void
        %6  bytes
        %7  f64
        %8  i32
        %9  i32
        %10 bytes
        %11 f64
        %12 i32
        %13 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            cmp slt %4 %1 %4
            j_true %4 $3 $2
        :$2 
            call %5 fn[136](%0, %1, )
            get_field %6 %0.1
            call_intrinsic %7 @eon.safe_cast(%2, )
            int %8 3
            shl %9 %1 %4
            set_mem %6[%4] %7
            ret_void
        :$3 
            get_field %10 %0.1
            call_intrinsic %11 @eon.safe_cast(%2, )
            int %12 3
            shl %13 %1 %4
            set_mem %10[%4] %11
            ret_void
        :$4 
            unreachable
#118 = fn[128] fn(obj<hl.types.ArrayBytes_Float>, dyn, ) -> i32
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 dyn
        %2 f64
        %3 i32
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[106](%0, %2, )
            ret %3
        :$2
            unreachable
#119 = fn[129] fn(obj<hl.types.ArrayBytes_Float>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 null<f64>
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[105](%0, )
            ret %1
        :$2
            unreachable
#120 = fn[130] fn(obj<hl.types.ArrayBytes_Float>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 null<f64>
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[108](%0, )
            ret %1
        :$2
            unreachable
#121 = fn[131] fn(obj<hl.types.ArrayBytes_Float>, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 dyn
        %2 f64
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[114](%0, %2, )
            ret_void
        :$2
            unreachable
#122 = fn[132] fn(obj<hl.types.ArrayBytes_Float>, i32, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 i32
        %2 dyn
        %3 f64
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[115](%0, %1, %3, )
            ret_void
        :$2
            unreachable
#123 = fn[133] fn(obj<hl.types.ArrayBytes_Float>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 dyn
        %2 f64
        %3 bool
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[116](%0, %2, )
            ret %3
        :$2
            unreachable
#124 = fn[134] fn(obj<hl.types.ArrayBytes_Float>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 dyn
        %2 f64
        %3 bool
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[117](%0, %2, )
            ret %3
        :$2
            unreachable
#125 = fn[352] fn(fn(dyn, dyn, ) -> i32, f64, f64, ) -> i32
    [Values]
        %0 fn(dyn, dyn, ) -> i32
        %1 f64
        %2 f64
        %3 dyn
        %4 dyn
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_dyn %3 %1
            to_dyn %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#126 = fn[135] fn(obj<hl.types.ArrayBytes_Float>, fn(dyn, dyn, ) -> i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_Float>
        %1 fn(dyn, dyn, ) -> i32
        %2 fn(f64, f64, ) -> i32
        %3 void
        %4 fn(f64, f64, ) -> i32
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            j_not_null %1 $4 $2
        :$2
            null %2
            j_always $3
        :$3
            call %3 fn[111](%0, %2, )
            ret_void
        :$4
            instance_closure %4 fn[352] %1
            call %5 fn[111](%0, %4, )
            ret_void
        :$5
            unreachable
#127 = fn[136] fn(obj<hl.types.ArrayBytes_Float>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Float>
        %1  i32
        %2  i32
        %3  bool
        %4  obj<String>
        %5  i32
        %6  ref<i32>
        %7  bytes
        %8  obj<String>
        %9  obj<String>
        %10 dyn
        %11 void
        %12 i32
        %13 i32
        %14 i32
        %15 bool
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 bool
        %22 i32
        %23 bytes
        %24 i32
        %25 i32
        %26 bytes
        %27 bytes
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 i32
        %34 void
        %35 bytes
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 void
        %41 bytes
        %42 i32
        %43 i32
        %44 bytes
        %45 bytes
        %46 i32
        %47 i32
        %48 i32
        %49 i32
        %50 bytes
        %51 i32
        %52 void
        %53 bytes
        %54 i32
        %55 i32
        %56 i32
        %57 i32
        %58 void
    [Code]
        :$0 
            j_always $1
        :$1 
            int %2 0
            cmp sge %3 %1 %2
            j_true %3 $3 $2
        :$2 
            get_global %4 global[31]
            mov %5 %1
            ref %6 %3
            call %7 fn[35](%3, %6, )
            call %8 fn[16](%7, %3, )
            call %9 fn[20](%4, %8, )
            call %10 fn[34](%9, )
            invoke_intrinsic %11 @eon.throw(%10, ) cont $8 unwind $8
        :$3 
            int %12 1
            add %13 %1 %12
            get_field %14 %0.2
            cmp sge %15 %14 %3
            j_true %15 $7 $4
        :$4 
            get_field %16 %0.2
            int %17 3
            mul %18 %16 %17
            int %19 1
            sshr %20 %18 %19
            cmp sge %21 %20 %3
            j_true %21 $6 $5
        :$5 
            mov %22 %3
            get_field %23 %0.1
            int %24 3
            shl %25 %22 %24
            call %26 fn[36](%25, )
            get_field %27 %0.1
            get_field %28 %0.0
            int %29 3
            shl %30 %28 %29
            int %31 0
            get_field %32 %0.1
            int %33 0
            call %34 fn[39](%26, %31, %15, %33, %30, )
            get_field %35 %0.1
            int %36 3
            shl %37 %22 %36
            sub %38 %37 %30
            int %39 0
            call %40 fn[253](%26, %30, %38, %39, )
            set_field %0.1 %26
            set_field %0.2 %22
            set_field %0.0 %3
            ret_void
        :$6 
            get_field %41 %0.1
            int %42 3
            shl %43 %20 %42
            call %44 fn[36](%43, )
            get_field %45 %0.1
            get_field %46 %0.0
            int %47 3
            shl %48 %46 %47
            int %49 0
            get_field %50 %0.1
            int %51 0
            call %52 fn[39](%44, %49, %15, %51, %48, )
            get_field %53 %0.1
            int %54 3
            shl %55 %20 %54
            sub %56 %55 %48
            int %57 0
            call %58 fn[253](%44, %48, %56, %57, )
            set_field %0.1 %44
            set_field %0.2 %20
            set_field %0.0 %3
            ret_void
        :$7 
            set_field %0.0 %3
            ret_void
        :$8 
            unreachable
#128 = fn[353] fn(obj<hl.types.ArrayBytes_Int>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 i32
        %2 bytes
    [Code]
        :$0
            j_always $1
        :$1
            int %1 0
            set_field %0.0 %1
            set_field %0.2 %1
            null %2
            set_field %0.1 %2
            ret_void
        :$2
            unreachable
#129 = fn[206] fn(obj<hl.types.ArrayBytes_Int>, obj<hl.types.ArrayBytes_Int>, ) -> obj<hl.types.ArrayBytes_Int>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  obj<hl.types.ArrayBytes_Int>
        %2  obj<hl.types.ArrayBytes_Int>
        %3  void
        %4  i32
        %5  void
        %6  i32
        %7  i32
        %8  bytes
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 i32
        %17 bytes
        %18 i32
        %19 bytes
        %20 i32
        %21 void
        %22 bytes
        %23 bytes
        %24 bytes
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[353](%2, )
            get_field %4 %0.0
            call_intrinsic %5 @eon.null_check(%1, )
            get_field %6 %1.0
            add %7 %4 %6
            set_field %2.2 %7
            set_field %2.0 %7
            get_field %8 %0.1
            get_field %9 %2.0
            int %10 2
            shl %11 %9 %10
            call %12 fn[36](%11, )
            set_field %2.1 %12
            get_field %13 %0.1
            get_field %14 %0.0
            int %15 2
            shl %16 %14 %15
            get_field %17 %2.1
            int %18 0
            get_field %19 %0.1
            int %20 0
            call %21 fn[39](%17, %18, %19, %20, %16, )
            get_field %22 %0.1
            get_field %23 %2.1
            get_field %24 %1.1
            int %25 0
            get_field %26 %1.0
            int %27 2
            shl %28 %26 %27
            call %29 fn[39](%23, %16, %24, %25, %28, )
            ret %2
        :$2 
            unreachable
#130 = fn[207] fn(obj<hl.types.ArrayBytes_Int>, obj<String>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  obj<String>
        %2  obj<StringBuf>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  obj<String>
        %8  i32
        %9  obj<StringBuf>
        %10 obj<hl.types.ArrayBytes_Int>
        %11 i32
        %12 void
        %13 i32
        %14 i32
        %15 i32
        %16 bool
        %17 void
        %18 void
        %19 bytes
        %20 void
        %21 i32
        %22 i32
        %23 i32
        %24 null<i32>
        %25 void
        %26 obj<StringBuf>
        %27 bytes
        %28 void
        %29 obj<hl.types.ArrayBytes_Int>
        %30 null<i32>
        %31 obj<String>
        %32 i32
        %33 i32
        %34 i32
        %35 i32
        %36 i32
        %37 bool
        %38 obj<StringBuf>
        %39 obj<String>
        %40 obj<hl.types.ArrayBytes_Int>
        %41 void
        %42 i32
        %43 i32
        %44 void
        %45 obj<String>
        %46 bytes
        %47 void
        %48 i32
        %49 i32
        %50 i32
        %51 null<i32>
        %52 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[245](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%1 $1], [%31 $4], 
            phi %8 [%4 $1], [%35 $4], 
            phi %9 [%2 $1], [%26 $4], 
            phi %10 [%0 $1], [%29 $4], 
            phi %11 [%5 $1], [%32 $4], 
            phi %12 [%3 $1], [%28 $4], 
            mov %13 %8
            incr %14 %8
            int %15 0
            cmp sge %16 %15 %6
            j_true %16 $6 $3
        :$3 
            call_intrinsic %17 @eon.null_check(%9, )
            call %18 fn[246](%9, %7, )
            get_field %19 %10.1
            call_intrinsic %20 @eon.null_check(%9, )
            int %21 2
            shl %22 %6 %21
            get_mem %23 %19[%22]
            to_dyn %24 %23
            call %25 fn[246](%9, %24, )
            j_always $4
        :$4 
            phi %26 [%9 $3], [%9 $6], 
            phi %27 [%19 $3], [%46 $6], 
            phi %28 [%25 $3], [%52 $6], 
            phi %29 [%10 $3], [%10 $6], 
            phi %30 [%24 $3], [%51 $6], 
            phi %31 [%7 $3], [%7 $6], 
            phi %32 [%11 $3], [%11 $6], 
            phi %33 [%13 $3], [%13 $6], 
            phi %34 [%22 $3], [%49 $6], 
            phi %35 [%14 $3], [%14 $6], 
            phi %36 [%23 $3], [%50 $6], 
            nop
            cmp sge %37 %35 %32
            j_true %37 $5 $2
        :$5 
            phi %38 [%2 $1], [%26 $4], 
            phi %39 [%1 $1], [%31 $4], 
            phi %40 [%0 $1], [%29 $4], 
            phi %41 [%3 $1], [%28 $4], 
            phi %42 [%5 $1], [%32 $4], 
            phi %43 [%4 $1], [%35 $4], 
            call_intrinsic %44 @eon.null_check(%38, )
            call %45 fn[248](%38, )
            ret %45
        :$6 
            get_field %46 %10.1
            call_intrinsic %47 @eon.null_check(%9, )
            int %48 2
            shl %49 %6 %48
            get_mem %50 %46[%49]
            to_dyn %51 %50
            call %52 fn[246](%9, %51, )
            j_always $4
        :$7 
            unreachable
#131 = fn[208] fn(obj<hl.types.ArrayBytes_Int>, ) -> null<i32>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  bool
        %4  null<i32>
        %5  i32
        %6  i32
        %7  bytes
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 null<i32>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %2
            j_true %3 $3 $2
        :$2 
            null %4
            ret %3
        :$3 
            get_field %5 %0.0
            decr %6 %5
            set_field %0.0 %6
            get_field %7 %0.1
            get_field %8 %0.0
            int %9 2
            shl %10 %8 %9
            get_mem %11 %7[%10]
            to_dyn %12 %11
            ret %3
        :$4 
            unreachable
#132 = fn[209] fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  i32
        %4  bool
        %5  void
        %6  bytes
        %7  i32
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 i32
        %14 i32
        %15 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            get_field %3 %0.2
            cmp ne %4 %4 %2
            j_true %4 $4 $2
        :$2 
            call %5 fn[239](%0, %2, )
            j_always $3
        :$3 
            get_field %6 %0.1
            int %7 2
            shl %8 %2 %7
            set_mem %6[%8] %1
            get_field %9 %0.0
            ret %4
        :$4 
            get_field %10 %0.0
            incr %11 %4
            set_field %0.0 %4
            get_field %12 %0.1
            int %13 2
            shl %14 %2 %13
            set_mem %12[%14] %1
            get_field %15 %0.0
            ret %4
        :$5 
            unreachable
#133 = fn[210] fn(obj<hl.types.ArrayBytes_Int>, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  i32
        %4  i32
        %5  bool
        %6  obj<hl.types.ArrayBytes_Int>
        %7  i32
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 bytes
        %17 i32
        %18 i32
        %19 i32
        %20 bytes
        %21 bytes
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 i32
        %27 bytes
        %28 i32
        %29 i32
        %30 bool
        %31 obj<hl.types.ArrayBytes_Int>
        %32 i32
        %33 i32
        %34 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            int %1 0
            get_field %2 %0.0
            int %3 1
            sshr %4 %2 %3
            nop
            cmp sge %5 %1 %4
            j_true %5 $4 $2
        :$2 
            phi %6 [%0 $1], [%6 $3], 
            phi %7 [%3 $1], [%10 $3], 
            phi %8 [%1 $1], [%11 $3], 
            phi %9 [%4 $1], [%9 $3], 
            mov %10 %8
            incr %11 %8
            get_field %12 %6.0
            int %13 1
            sub %14 %5 %13
            sub %15 %5 %10
            get_field %16 %6.1
            int %17 2
            shl %18 %10 %17
            get_mem %19 %16[%18]
            get_field %20 %6.1
            get_field %21 %6.1
            int %22 2
            shl %23 %5 %22
            get_mem %24 %21[%23]
            int %25 2
            shl %26 %10 %25
            set_mem %20[%26] %24
            get_field %27 %6.1
            int %28 2
            shl %29 %5 %28
            set_mem %27[%29] %19
            j_always $3
        :$3 
            nop
            cmp sge %30 %11 %9
            j_true %30 $4 $2
        :$4 
            phi %31 [%0 $1], [%6 $3], 
            phi %32 [%4 $1], [%9 $3], 
            phi %33 [%3 $1], [%10 $3], 
            phi %34 [%1 $1], [%11 $3], 
            ret_void
        :$5 
            unreachable
#134 = fn[211] fn(obj<hl.types.ArrayBytes_Int>, ) -> null<i32>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  bool
        %4  null<i32>
        %5  bytes
        %6  i32
        %7  i32
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 bytes
        %15 i32
        %16 i32
        %17 i32
        %18 bytes
        %19 i32
        %20 i32
        %21 i32
        %22 i32
        %23 void
        %24 null<i32>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %3
            j_true %3 $3 $2
        :$2 
            null %4
            ret %4
        :$3 
            get_field %5 %0.1
            int %6 0
            int %7 2
            shl %8 %6 %3
            get_mem %9 %5[%3]
            get_field %10 %0.0
            decr %11 %3
            set_field %0.0 %3
            get_field %12 %0.1
            get_field %13 %0.1
            get_field %14 %0.1
            int %15 1
            int %16 2
            shl %17 %3 %16
            get_field %18 %0.1
            int %19 0
            get_field %20 %0.0
            int %21 2
            shl %22 %20 %21
            call %23 fn[39](%12, %19, %13, %3, %22, )
            to_dyn %24 %9
            ret %24
        :$4 
            unreachable
#135 = fn[212] fn(obj<hl.types.ArrayBytes_Int>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  obj<hl.types.ArrayAccess>
        %3  i32
        %4  i32
        %5  obj<hl.types.ArrayBytes_Int>
        %6  i32
        %7  bool
        %8  i32
        %9  bool
        %10 i32
        %11 bool
        %12 i32
        %13 i32
        %14 bool
        %15 i32
        %16 void
        %17 i32
        %18 bool
        %19 i32
        %20 obj<hl.types.ArrayBytes_Int>
        %21 obj<hl.types.ArrayAccess>
        %22 i32
        %23 obj<hl.types.ArrayBytes_Int>
        %24 i32
        %25 i32
        %26 enum<haxe.io.Error>
        %27 dyn
        %28 void
        %29 bytes
        %30 bytes
        %31 i32
        %32 i32
        %33 bytes
        %34 bytes
        %35 i32
        %36 i32
        %37 bytes
        %38 i32
        %39 i32
        %40 void
    [Code]
        :$0 
            j_always $1
        :$1 
            call_intrinsic %5 @eon.safe_cast(%2, )
            int %6 0
            cmp slt %7 %1 %6
            j_true %7 $6 $2
        :$2 
            int %8 0
            cmp slt %9 %3 %8
            j_true %9 $6 $3
        :$3 
            int %10 0
            cmp slt %11 %4 %10
            j_true %11 $6 $4
        :$4 
            add %12 %1 %4
            get_field %13 %0.0
            cmp slt %14 %13 %7
            j_true %14 $6 $5
        :$5 
            add %15 %3 %4
            call_intrinsic %16 @eon.null_check(%5, )
            get_field %17 %5.0
            cmp sge %18 %17 %7
            j_true %18 $7 $6
        :$6 
            phi %19 [%1 $1], [%1 $5], [%1 $2], [%1 $3], [%1 $4], 
            phi %20 [%5 $1], [%5 $5], [%5 $2], [%5 $3], [%5 $4], 
            phi %21 [%2 $1], [%2 $5], [%2 $2], [%2 $3], [%2 $4], 
            phi %22 [%4 $1], [%4 $5], [%4 $2], [%4 $3], [%4 $4], 
            phi %23 [%0 $1], [%0 $5], [%0 $2], [%0 $3], [%0 $4], 
            phi %24 [%6 $1], [%17 $5], [%8 $2], [%10 $3], [%13 $4], 
            phi %25 [%3 $1], [%3 $5], [%3 $2], [%3 $3], [%3 $4], 
            get_global %26 global[28]
            call %27 fn[34](%26, )
            invoke_intrinsic %28 @eon.throw(%9, ) cont $8 unwind $8
        :$7 
            get_field %29 %0.1
            get_field %30 %0.1
            int %31 2
            shl %32 %1 %31
            get_field %33 %5.1
            get_field %34 %0.1
            int %35 2
            shl %36 %3 %35
            get_field %37 %0.1
            int %38 2
            shl %39 %4 %18
            call %40 fn[39](%11, %7, %33, %36, %39, )
            ret_void
        :$8 
            unreachable
#136 = fn[213] fn(obj<hl.types.ArrayBytes_Int>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 i32
        %13 null<i32>
        %14 i32
        %15 obj<hl.types.ArrayBytes_Int>
        %16 i32
        %17 null<i32>
        %18 i32
        %19 i32
        %20 obj<hl.types.ArrayBytes_Int>
        %21 i32
        %22 i32
        %23 bool
        %24 i32
        %25 null<i32>
        %26 obj<hl.types.ArrayBytes_Int>
        %27 i32
        %28 i32
        %29 obj<hl.types.ArrayBytes_Int>
        %30 void
        %31 i32
        %32 obj<hl.types.ArrayBytes_Int>
        %33 null<i32>
        %34 i32
        %35 i32
        %36 obj<hl.types.ArrayBytes_Int>
        %37 void
        %38 bytes
        %39 bytes
        %40 i32
        %41 i32
        %42 bytes
        %43 i32
        %44 i32
        %45 bytes
        %46 i32
        %47 null<i32>
        %48 i32
        %49 obj<hl.types.ArrayBytes_Int>
        %50 i32
        %51 i32
        %52 bool
        %53 i32
        %54 i32
        %55 i32
        %56 bool
        %57 obj<hl.types.ArrayBytes_Int>
        %58 i32
        %59 null<i32>
        %60 i32
        %61 i32
        %62 i32
        %63 i32
        %64 i32
        %65 bool
        %66 i32
        %67 bool
        %68 obj<hl.types.ArrayBytes_Int>
        %69 i32
        %70 null<i32>
        %71 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $12 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $12 $3
        :$3 
            int %10 0
            mov %11 %4
            j_not_null %2 $8 $4
        :$4 
            phi %12 [%8 $3], [%71 $12], 
            phi %13 [%2 $3], [%70 $12], 
            phi %14 [%11 $3], [%69 $12], 
            phi %15 [%0 $3], [%68 $12], 
            get_field %16 %15.0
            j_always $5
        :$5 
            phi %17 [%13 $4], [%47 $9], [%47 $11], 
            phi %18 [%14 $4], [%46 $9], [%46 $11], 
            phi %19 [%16 $4], [%54 $9], [%50 $11], 
            phi %20 [%15 $4], [%49 $9], [%49 $11], 
            sub %21 %19 %18
            int %22 0
            cmp sge %23 %21 %22
            j_true %23 $7 $6
        :$6 
            phi %24 [%64 $10], [%22 $5], 
            phi %25 [%59 $10], [%17 $5], 
            phi %26 [%57 $10], [%20 $5], 
            phi %27 [%58 $10], [%18 $5], 
            phi %28 [%63 $10], [%21 $5], 
            new %29
            call %30 fn[353](%29, )
            ret %29
        :$7 
            phi %31 [%18 $5], [%58 $10], 
            phi %32 [%20 $5], [%57 $10], 
            phi %33 [%17 $5], [%59 $10], 
            phi %34 [%21 $5], [%63 $10], 
            phi %35 [%22 $5], [%64 $10], 
            new %36
            call %37 fn[353](%36, )
            set_field %36.2 %34
            set_field %36.0 %34
            get_field %38 %32.1
            get_field %39 %32.1
            int %40 2
            shl %41 %31 %40
            get_field %42 %32.1
            int %43 2
            shl %44 %34 %43
            call %45 fn[256](%9, %41, %44, )
            set_field %36.1 %45
            ret %36
        :$8 
            phi %46 [%69 $12], [%11 $3], 
            phi %47 [%70 $12], [%2 $3], 
            phi %48 [%71 $12], [%8 $3], 
            phi %49 [%68 $12], [%0 $3], 
            call_intrinsic %50 @eon.safe_cast(%47, )
            int %51 0
            cmp sge %52 %50 %51
            j_true %52 $11 $9
        :$9 
            get_field %53 %49.0
            add %54 %50 %53
            get_field %55 %49.0
            cmp sge %56 %55 %54
            j_true %56 $5 $10
        :$10
            phi %57 [%49 $11], [%49 $9], 
            phi %58 [%46 $11], [%46 $9], 
            phi %59 [%47 $11], [%47 $9], 
            phi %60 [%50 $11], [%54 $9], 
            phi %61 [%66 $11], [%55 $9], 
            get_field %62 %57.0
            sub %63 %62 %58
            int %64 0
            cmp sge %65 %63 %64
            j_true %65 $7 $6
        :$11
            get_field %66 %49.0
            cmp sge %67 %66 %50
            j_true %67 $5 $10
        :$12
            phi %68 [%0 $2], [%0 $1], 
            phi %69 [%7 $2], [%1 $1], 
            phi %70 [%2 $2], [%2 $1], 
            phi %71 [%8 $2], [%3 $1], 
            j_not_null %70 $8 $4
        :$13
            unreachable
#137 = fn[354] fn(fn(i32, i32, ) -> i32, f64, f64, ) -> i32
    [Values]
        %0 fn(i32, i32, ) -> i32
        %1 f64
        %2 f64
        %3 i32
        %4 i32
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_int %3 %1
            to_int %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#138 = fn[214] fn(obj<hl.types.ArrayBytes_Int>, fn(i32, i32, ) -> i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  fn(i32, i32, ) -> i32
        %2  type
        %3  type
        %4  bool
        %5  bytes
        %6  i32
        %7  i32
        %8  void
        %9  bytes
        %10 i32
        %11 i32
        %12 fn(f64, f64, ) -> i32
        %13 void
        %14 fn(f64, f64, ) -> i32
        %15 void
    [Code]
        :$0 
            j_always $1
        :$1 
            type %2 type[3]
            type %3 type[3]
            cmp ne %4 %2 %4
            j_true %4 $4 $2
        :$2 
            get_field %5 %0.1
            int %6 0
            get_field %7 %0.0
            call %8 fn[254](%5, %6, %7, %1, )
            j_always $3
        :$3 
            ret_void
        :$4 
            get_field %9 %0.1
            int %10 0
            get_field %11 %0.0
            j_not_null %1 $7 $5
        :$5 
            null %12
            j_always $6
        :$6 
            call %13 fn[255](%9, %10, %11, %12, )
            ret_void
        :$7 
            instance_closure %14 fn[354] %1
            call %15 fn[255](%9, %10, %11, %14, )
            ret_void
        :$8 
            unreachable
#139 = fn[215] fn(obj<hl.types.ArrayBytes_Int>, i32, i32, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  i32
        %4  bool
        %5  obj<hl.types.ArrayBytes_Int>
        %6  void
        %7  i32
        %8  bool
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 bool
        %14 i32
        %15 i32
        %16 i32
        %17 bool
        %18 i32
        %19 i32
        %20 obj<hl.types.ArrayBytes_Int>
        %21 i32
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 obj<hl.types.ArrayBytes_Int>
        %30 i32
        %31 i32
        %32 bool
        %33 i32
        %34 i32
        %35 i32
        %36 i32
        %37 obj<hl.types.ArrayBytes_Int>
        %38 obj<hl.types.ArrayBytes_Int>
        %39 void
        %40 i32
        %41 obj<hl.types.ArrayBytes_Int>
        %42 i32
        %43 i32
        %44 i32
        %45 obj<hl.types.ArrayBytes_Int>
        %46 void
        %47 bytes
        %48 bytes
        %49 i32
        %50 i32
        %51 bytes
        %52 i32
        %53 i32
        %54 bytes
        %55 i32
        %56 bytes
        %57 bytes
        %58 i32
        %59 i32
        %60 bytes
        %61 bytes
        %62 i32
        %63 i32
        %64 bytes
        %65 i32
        %66 i32
        %67 i32
        %68 i32
        %69 void
        %70 i32
        %71 i32
        %72 i32
        %73 i32
        %74 obj<hl.types.ArrayBytes_Int>
        %75 i32
        %76 i32
        %77 i32
        %78 bool
        %79 i32
        %80 i32
        %81 i32
        %82 i32
        %83 bool
        %84 i32
        %85 i32
        %86 i32
        %87 bool
        %88 i32
        %89 i32
        %90 obj<hl.types.ArrayBytes_Int>
        %91 i32
        %92 i32
        %93 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %2 %3
            j_true %4 $3 $2
        :$2 
            new %5
            call %6 fn[353](%5, )
            ret %5
        :$3 
            int %7 0
            cmp sge %8 %1 %7
            j_true %8 $13 $4
        :$4 
            get_field %9 %0.0
            add %10 %4 %1
            mov %11 %4
            int %12 0
            cmp sge %13 %4 %12
            j_true %13 $13 $5
        :$5 
            int %14 0
            mov %15 %4
            get_field %16 %0.0
            cmp sge %17 %16 %15
            j_true %17 $10 $6
        :$6 
            phi %18 [%91 $13], [%15 $5], 
            phi %19 [%88 $13], [%2 $5], 
            phi %20 [%90 $13], [%0 $5], 
            phi %21 [%92 $13], [%16 $5], 
            int %22 0
            mov %23 %4
            int %24 0
            mov %25 %4
            j_always $7
        :$7 
            phi %26 [%21 $6], [%82 $11], [%77 $10], 
            phi %27 [%25 $6], [%81 $11], [%72 $10], 
            phi %28 [%23 $6], [%73 $11], [%73 $10], 
            phi %29 [%20 $6], [%74 $11], [%74 $10], 
            phi %30 [%24 $6], [%80 $11], [%76 $10], 
            int %31 0
            cmp ne %32 %27 %31
            j_true %32 $9 $8
        :$8 
            phi %33 [%73 $12], [%28 $7], 
            phi %34 [%86 $12], [%31 $7], 
            phi %35 [%84 $12], [%30 $7], 
            phi %36 [%85 $12], [%27 $7], 
            phi %37 [%74 $12], [%29 $7], 
            new %38
            call %39 fn[353](%38, )
            ret %38
        :$9 
            phi %40 [%28 $7], [%73 $12], 
            phi %41 [%29 $7], [%74 $12], 
            phi %42 [%27 $7], [%85 $12], 
            phi %43 [%31 $7], [%86 $12], 
            phi %44 [%30 $7], [%84 $12], 
            new %45
            call %46 fn[353](%45, )
            get_field %47 %41.1
            get_field %48 %41.1
            int %49 2
            shl %50 %40 %49
            get_field %51 %41.1
            int %52 2
            shl %53 %42 %52
            call %54 fn[256](%47, %4, %53, )
            set_field %45.1 %54
            set_field %45.0 %42
            set_field %45.2 %42
            add %55 %40 %42
            get_field %56 %41.1
            get_field %57 %41.1
            int %58 2
            shl %59 %40 %58
            get_field %60 %41.1
            get_field %61 %41.1
            int %62 2
            shl %63 %55 %62
            get_field %64 %41.1
            get_field %65 %41.0
            sub %66 %65 %55
            int %67 2
            shl %68 %66 %67
            call %69 fn[39](%56, %59, %60, %63, %68, )
            get_field %70 %41.0
            sub %71 %70 %42
            set_field %41.0 %71
            ret %45
        :$10
            phi %72 [%2 $5], [%88 $13], 
            phi %73 [%15 $5], [%91 $13], 
            phi %74 [%0 $5], [%90 $13], 
            phi %75 [%16 $5], [%92 $13], 
            add %76 %73 %72
            get_field %77 %74.0
            cmp sge %78 %77 %4
            j_true %78 $7 $11
        :$11
            get_field %79 %74.0
            sub %80 %4 %73
            mov %81 %4
            int %82 0
            cmp sge %83 %4 %82
            j_true %83 $7 $12
        :$12
            int %84 0
            mov %85 %4
            int %86 0
            cmp ne %87 %85 %86
            j_true %87 $9 $8
        :$13
            phi %88 [%2 $4], [%2 $3], 
            phi %89 [%12 $4], [%7 $3], 
            phi %90 [%0 $4], [%0 $3], 
            phi %91 [%11 $4], [%1 $3], 
            get_field %92 %90.0
            cmp sge %93 %92 %91
            j_true %93 $10 $6
        :$14
            unreachable
#140 = fn[216] fn(obj<hl.types.ArrayBytes_Int>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  obj<StringBuf>
        %2  void
        %3  i32
        %4  void
        %5  i32
        %6  i32
        %7  bool
        %8  obj<StringBuf>
        %9  obj<hl.types.ArrayBytes_Int>
        %10 i32
        %11 i32
        %12 void
        %13 i32
        %14 i32
        %15 i32
        %16 bool
        %17 void
        %18 i32
        %19 void
        %20 bytes
        %21 void
        %22 i32
        %23 i32
        %24 i32
        %25 null<i32>
        %26 void
        %27 i32
        %28 obj<hl.types.ArrayBytes_Int>
        %29 i32
        %30 null<i32>
        %31 void
        %32 obj<StringBuf>
        %33 i32
        %34 bytes
        %35 i32
        %36 i32
        %37 bool
        %38 i32
        %39 i32
        %40 obj<hl.types.ArrayBytes_Int>
        %41 void
        %42 obj<StringBuf>
        %43 void
        %44 i32
        %45 void
        %46 obj<String>
        %47 bytes
        %48 void
        %49 i32
        %50 i32
        %51 i32
        %52 null<i32>
        %53 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %1
            call %2 fn[245](%1, )
            int %3 91
            call %4 fn[247](%1, %3, )
            int %5 0
            get_field %6 %0.0
            nop
            cmp sge %7 %5 %6
            j_true %7 $5 $2
        :$2 
            phi %8 [%1 $1], [%32 $4], 
            phi %9 [%0 $1], [%28 $4], 
            phi %10 [%6 $1], [%29 $4], 
            phi %11 [%5 $1], [%27 $4], 
            phi %12 [%4 $1], [%31 $4], 
            mov %13 %11
            incr %14 %11
            int %15 0
            cmp sge %16 %7 %13
            j_true %16 $6 $3
        :$3 
            call_intrinsic %17 @eon.null_check(%8, )
            int %18 44
            call %19 fn[247](%8, %18, )
            get_field %20 %9.1
            call_intrinsic %21 @eon.null_check(%8, )
            int %22 2
            shl %23 %13 %7
            get_mem %24 %20[%7]
            to_dyn %25 %24
            call %26 fn[246](%8, %25, )
            j_always $4
        :$4 
            phi %27 [%14 $3], [%14 $6], 
            phi %28 [%9 $3], [%9 $6], 
            phi %29 [%10 $3], [%10 $6], 
            phi %30 [%25 $3], [%52 $6], 
            phi %31 [%26 $3], [%53 $6], 
            phi %32 [%8 $3], [%8 $6], 
            phi %33 [%24 $3], [%51 $6], 
            phi %34 [%20 $3], [%47 $6], 
            phi %35 [%13 $3], [%13 $6], 
            phi %36 [%23 $3], [%50 $6], 
            nop
            cmp sge %37 %27 %29
            j_true %37 $5 $2
        :$5 
            phi %38 [%29 $4], [%6 $1], 
            phi %39 [%27 $4], [%5 $1], 
            phi %40 [%28 $4], [%0 $1], 
            phi %41 [%31 $4], [%4 $1], 
            phi %42 [%32 $4], [%1 $1], 
            call_intrinsic %43 @eon.null_check(%42, )
            int %44 93
            call %45 fn[247](%42, %44, )
            call %46 fn[248](%42, )
            ret %46
        :$6 
            get_field %47 %9.1
            call_intrinsic %48 @eon.null_check(%8, )
            int %49 2
            shl %50 %13 %7
            get_mem %51 %47[%7]
            to_dyn %52 %51
            call %53 fn[246](%8, %52, )
            j_always $4
        :$7 
            unreachable
#141 = fn[217] fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  i32
        %4  bool
        %5  i32
        %6  void
        %7  bytes
        %8  bytes
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 void
        %21 bytes
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 i32
        %27 bytes
        %28 bytes
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 bytes
        %34 i32
        %35 i32
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 void
        %41 bytes
        %42 i32
        %43 i32
        %44 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            get_field %3 %0.2
            cmp ne %4 %2 %4
            j_true %4 $4 $2
        :$2 
            get_field %5 %0.0
            call %6 fn[239](%0, %5, )
            j_always $3
        :$3 
            get_field %7 %0.1
            get_field %8 %0.1
            int %9 1
            int %10 2
            shl %11 %9 %4
            get_field %12 %0.1
            get_field %13 %0.1
            int %14 0
            get_field %15 %0.0
            int %16 1
            sub %17 %15 %16
            int %18 2
            shl %19 %17 %18
            call %20 fn[39](%7, %11, %13, %14, %19, )
            get_field %21 %0.1
            int %22 0
            int %23 2
            shl %24 %4 %23
            set_mem %21[%24] %1
            ret_void
        :$4 
            get_field %25 %0.0
            incr %26 %25
            set_field %0.0 %26
            get_field %27 %0.1
            get_field %28 %0.1
            int %29 1
            int %30 2
            shl %31 %29 %4
            get_field %32 %0.1
            get_field %33 %0.1
            int %34 0
            get_field %35 %0.0
            int %36 1
            sub %37 %35 %36
            int %38 2
            shl %39 %37 %38
            call %40 fn[39](%27, %31, %33, %34, %39, )
            get_field %41 %0.1
            int %42 0
            int %43 2
            shl %44 %4 %43
            set_mem %41[%44] %1
            ret_void
        :$5 
            unreachable
#142 = fn[218] fn(obj<hl.types.ArrayBytes_Int>, i32, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 obj<hl.types.ArrayBytes_Int>
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 bool
        %19 i32
        %20 i32
        %21 obj<hl.types.ArrayBytes_Int>
        %22 i32
        %23 i32
        %24 i32
        %25 void
        %26 bytes
        %27 bytes
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 bytes
        %34 i32
        %35 i32
        %36 bytes
        %37 i32
        %38 i32
        %39 i32
        %40 i32
        %41 i32
        %42 i32
        %43 void
        %44 bytes
        %45 i32
        %46 i32
        %47 i32
        %48 obj<hl.types.ArrayBytes_Int>
        %49 i32
        %50 i32
        %51 i32
        %52 i32
        %53 i32
        %54 bytes
        %55 bytes
        %56 i32
        %57 i32
        %58 i32
        %59 i32
        %60 bytes
        %61 bytes
        %62 i32
        %63 i32
        %64 bytes
        %65 i32
        %66 i32
        %67 i32
        %68 i32
        %69 i32
        %70 i32
        %71 void
        %72 bytes
        %73 i32
        %74 i32
        %75 i32
        %76 bool
        %77 i32
        %78 i32
        %79 i32
        %80 i32
        %81 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $9 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $8 $3
        :$3 
            int %10 0
            mov %11 %4
            j_always $4
        :$4 
            phi %12 [%0 $9], [%0 $8], [%0 $3], 
            phi %13 [%2 $9], [%2 $8], [%2 $3], 
            phi %14 [%75 $9], [%8 $8], [%8 $3], 
            phi %15 [%1 $9], [%7 $8], [%11 $3], 
            get_field %16 %12.0
            get_field %17 %12.2
            cmp ne %18 %4 %17
            j_true %18 $7 $5
        :$5 
            phi %19 [%80 $10], [%17 $4], 
            phi %20 [%2 $10], [%13 $4], 
            phi %21 [%0 $10], [%12 $4], 
            phi %22 [%78 $10], [%15 $4], 
            phi %23 [%79 $10], [%16 $4], 
            get_field %24 %21.0
            call %25 fn[239](%21, %4, )
            j_always $6
        :$6 
            get_field %26 %21.1
            get_field %27 %21.1
            int %28 1
            add %29 %22 %28
            int %30 2
            shl %31 %4 %30
            get_field %32 %21.1
            get_field %33 %21.1
            int %34 2
            shl %35 %22 %34
            get_field %36 %21.1
            get_field %37 %21.0
            sub %38 %37 %22
            int %39 1
            sub %40 %38 %39
            int %41 2
            shl %42 %40 %41
            call %43 fn[39](%26, %4, %32, %35, %42, )
            get_field %44 %21.1
            int %45 2
            shl %46 %22 %45
            set_mem %44[%46] %20
            ret_void
        :$7 
            phi %47 [%16 $4], [%79 $10], 
            phi %48 [%12 $4], [%0 $10], 
            phi %49 [%17 $4], [%80 $10], 
            phi %50 [%15 $4], [%78 $10], 
            phi %51 [%13 $4], [%2 $10], 
            get_field %52 %48.0
            incr %53 %4
            set_field %48.0 %4
            get_field %54 %48.1
            get_field %55 %48.1
            int %56 1
            add %57 %50 %56
            int %58 2
            shl %59 %4 %58
            get_field %60 %48.1
            get_field %61 %48.1
            int %62 2
            shl %63 %50 %62
            get_field %64 %48.1
            get_field %65 %48.0
            sub %66 %65 %50
            int %67 1
            sub %68 %66 %67
            int %69 2
            shl %70 %68 %69
            call %71 fn[39](%54, %4, %60, %63, %70, )
            get_field %72 %48.1
            int %73 2
            shl %74 %50 %73
            set_mem %72[%74] %51
            ret_void
        :$8 
            j_always $4
        :$9 
            get_field %75 %0.0
            cmp sge %76 %75 %1
            j_true %76 $4 $10
        :$10
            get_field %77 %0.0
            mov %78 %4
            get_field %79 %0.0
            get_field %80 %0.2
            cmp ne %81 %4 %80
            j_true %81 $7 $5
        :$11
            unreachable
#143 = fn[219] fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 i32
        %2 null<i32>
        %3 i32
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call %3 fn[221](%0, %1, %2, )
            int %4 -1
            cmp ne %5 %3 %5
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#144 = fn[220] fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> bool
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  bool
        %7  i32
        %8  i32
        %9  bytes
        %10 bytes
        %11 i32
        %12 i32
        %13 bytes
        %14 bytes
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 bytes
        %20 i32
        %21 i32
        %22 i32
        %23 i32
        %24 void
        %25 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            null %2
            call %3 fn[221](%0, %1, %2, )
            int %4 0
            cmp sge %5 %3 %4
            j_true %5 $3 $2
        :$2 
            bool %6 false
            ret %6
        :$3 
            get_field %7 %0.0
            decr %8 %5
            set_field %0.0 %5
            get_field %9 %0.1
            get_field %10 %0.1
            int %11 2
            shl %12 %3 %11
            get_field %13 %0.1
            get_field %14 %0.1
            int %15 1
            add %16 %3 %15
            int %17 2
            shl %18 %16 %17
            get_field %19 %0.1
            get_field %20 %0.0
            sub %21 %20 %3
            int %22 2
            shl %23 %21 %22
            call %24 fn[39](%9, %5, %13, %18, %23, )
            bool %25 true
            ret %25
        :$4 
            unreachable
#145 = fn[221] fn(obj<hl.types.ArrayBytes_Int>, i32, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  obj<hl.types.ArrayBytes_Int>
        %7  i32
        %8  null<i32>
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 bool
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 bool
        %21 i32
        %22 i32
        %23 null<i32>
        %24 obj<hl.types.ArrayBytes_Int>
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 bytes
        %30 i32
        %31 i32
        %32 i32
        %33 bool
        %34 bool
        %35 i32
        %36 i32
        %37 i32
        %38 null<i32>
        %39 obj<hl.types.ArrayBytes_Int>
        %40 i32
        %41 i32
        %42 null<i32>
        %43 i32
        %44 obj<hl.types.ArrayBytes_Int>
        %45 i32
        %46 i32
        %47 i32
        %48 i32
        %49 bool
        %50 i32
        %51 i32
        %52 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            j_not_null %2 $12 $2
        :$2 
            int %3 0
            j_always $3
        :$3 
            int %4 0
            cmp sge %5 %3 %5
            j_true %5 $11 $4
        :$4 
            phi %6 [%0 $12], [%0 $3], 
            phi %7 [%50 $12], [%3 $3], 
            phi %8 [%2 $12], [%2 $3], 
            phi %9 [%51 $12], [%4 $3], 
            phi %10 [%1 $12], [%1 $3], 
            get_field %11 %6.0
            add %12 %7 %5
            mov %13 %12
            int %14 0
            cmp sge %15 %12 %5
            j_true %15 $11 $5
        :$5 
            int %16 0
            mov %17 %16
            mov %18 %17
            get_field %19 %6.0
            nop
            cmp sge %20 %18 %5
            j_true %20 $10 $6
        :$6 
            phi %21 [%21 $9], [%43 $11], [%10 $5], 
            phi %22 [%22 $9], [%45 $11], [%17 $5], 
            phi %23 [%23 $9], [%42 $11], [%8 $5], 
            phi %24 [%24 $9], [%44 $11], [%6 $5], 
            phi %25 [%25 $9], [%48 $11], [%19 $5], 
            phi %26 [%28 $9], [%47 $11], [%18 $5], 
            mov %27 %26
            incr %28 %26
            get_field %29 %24.1
            int %30 2
            shl %31 %27 %30
            get_mem %32 %29[%31]
            cmp ne %33 %32 %21
            j_true %33 $8 $7
        :$7 
            ret %27
        :$8 
            j_always $9
        :$9 
            nop
            cmp sge %34 %28 %5
            j_true %34 $10 $6
        :$10
            phi %35 [%43 $11], [%21 $9], [%10 $5], 
            phi %36 [%48 $11], [%25 $9], [%19 $5], 
            phi %37 [%47 $11], [%28 $9], [%18 $5], 
            phi %38 [%42 $11], [%23 $9], [%8 $5], 
            phi %39 [%44 $11], [%24 $9], [%6 $5], 
            phi %40 [%45 $11], [%22 $9], [%17 $5], 
            int %41 -1
            ret %41
        :$11
            phi %42 [%2 $3], [%2 $12], [%8 $4], 
            phi %43 [%1 $3], [%1 $12], [%10 $4], 
            phi %44 [%0 $3], [%0 $12], [%6 $4], 
            phi %45 [%3 $3], [%50 $12], [%13 $4], 
            phi %46 [%4 $3], [%51 $12], [%14 $4], 
            mov %47 %45
            get_field %48 %44.0
            nop
            cmp sge %49 %47 %5
            j_true %49 $10 $6
        :$12
            call_intrinsic %50 @eon.safe_cast(%2, )
            int %51 0
            cmp sge %52 %50 %5
            j_true %52 $11 $4
        :$13
            unreachable
#146 = fn[222] fn(obj<hl.types.ArrayBytes_Int>, i32, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  null<i32>
        %7  i32
        %8  obj<hl.types.ArrayBytes_Int>
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 null<i32>
        %18 i32
        %19 obj<hl.types.ArrayBytes_Int>
        %20 i32
        %21 bool
        %22 i32
        %23 null<i32>
        %24 obj<hl.types.ArrayBytes_Int>
        %25 i32
        %26 i32
        %27 i32
        %28 bytes
        %29 i32
        %30 i32
        %31 i32
        %32 bool
        %33 i32
        %34 obj<hl.types.ArrayBytes_Int>
        %35 i32
        %36 i32
        %37 null<i32>
        %38 i32
        %39 i32
        %40 i32
        %41 null<i32>
        %42 i32
        %43 obj<hl.types.ArrayBytes_Int>
        %44 i32
        %45 i32
        %46 i32
        %47 bool
        %48 i32
        %49 i32
        %50 i32
        %51 bool
        %52 i32
        %53 i32
        %54 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            j_null %2 $12 $2
        :$2 
            call_intrinsic %4 @eon.safe_cast(%2, )
            j_always $3
        :$3 
            cmp slt %5 %4 %3
            j_true %5 $10 $4
        :$4 
            phi %6 [%2 $12], [%2 $3], 
            phi %7 [%3 $12], [%3 $3], 
            phi %8 [%0 $12], [%0 $3], 
            phi %9 [%53 $12], [%4 $3], 
            phi %10 [%1 $12], [%1 $3], 
            int %11 1
            sub %12 %7 %11
            mov %13 %5
            j_always $5
        :$5 
            phi %14 [%44 $10], [%10 $4], [%27 $8], 
            phi %15 [%42 $10], [%13 $4], [%33 $8], 
            phi %16 [%45 $10], [%7 $4], [%26 $8], 
            phi %17 [%41 $10], [%6 $4], [%23 $8], 
            phi %18 [%46 $10], [%11 $4], [%30 $8], 
            phi %19 [%43 $10], [%8 $4], [%24 $8], 
            nop
            int %20 0
            cmp slt %21 %15 %20
            j_true %21 $9 $6
        :$6 
            phi %22 [%20 $5], [%50 $11], 
            phi %23 [%17 $5], [%41 $11], 
            phi %24 [%19 $5], [%43 $11], 
            phi %25 [%15 $5], [%49 $11], 
            phi %26 [%16 $5], [%45 $11], 
            phi %27 [%14 $5], [%44 $11], 
            get_field %28 %24.1
            int %29 2
            shl %30 %25 %29
            get_mem %31 %28[%30]
            cmp ne %32 %5 %27
            j_true %32 $8 $7
        :$7 
            ret %25
        :$8 
            decr %33 %25
            j_always $5
        :$9 
            phi %34 [%43 $11], [%19 $5], 
            phi %35 [%50 $11], [%20 $5], 
            phi %36 [%49 $11], [%15 $5], 
            phi %37 [%41 $11], [%17 $5], 
            phi %38 [%45 $11], [%16 $5], 
            phi %39 [%44 $11], [%14 $5], 
            int %40 -1
            ret %5
        :$10
            phi %41 [%2 $3], [%2 $12], 
            phi %42 [%4 $3], [%53 $12], 
            phi %43 [%0 $3], [%0 $12], 
            phi %44 [%1 $3], [%1 $12], 
            phi %45 [%3 $3], [%3 $12], 
            int %46 0
            cmp sge %47 %42 %46
            j_true %47 $5 $11
        :$11
            add %48 %42 %45
            mov %49 %5
            nop
            int %50 0
            cmp slt %51 %49 %50
            j_true %51 $9 $6
        :$12
            int %52 1
            sub %53 %3 %5
            cmp slt %54 %53 %3
            j_true %54 $10 $4
        :$13
            unreachable
#147 = fn[223] fn(obj<hl.types.ArrayBytes_Int>, ) -> obj<hl.types.ArrayBytes_Int>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  obj<hl.types.ArrayBytes_Int>
        %2  void
        %3  i32
        %4  bytes
        %5  i32
        %6  i32
        %7  i32
        %8  bytes
        %9  bytes
        %10 bytes
        %11 i32
        %12 bytes
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %1
            call %2 fn[353](%1, )
            get_field %3 %0.0
            set_field %1.2 %3
            set_field %1.0 %3
            get_field %4 %0.1
            get_field %5 %0.0
            int %6 2
            shl %7 %5 %6
            call %8 fn[36](%7, )
            set_field %1.1 %8
            get_field %9 %0.1
            get_field %10 %1.1
            int %11 0
            get_field %12 %0.1
            int %13 0
            get_field %14 %0.0
            int %15 2
            shl %16 %14 %15
            call %17 fn[39](%10, %11, %12, %13, %16, )
            ret %1
        :$2 
            unreachable
#148 = fn[224] fn(obj<hl.types.ArrayBytes_Int>, ) -> obj<haxe.iterators.ArrayIterator>
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 obj<hl.types.BytesIterator_Int>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[357](%1, %0, )
            ret %1
        :$2
            unreachable
#149 = fn[225] fn(obj<hl.types.ArrayBytes_Int>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 obj<hl.types.BytesKeyValueIterator_Int>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[360](%1, %0, )
            ret %1
        :$2
            unreachable
#150 = fn[226] fn(obj<hl.types.ArrayBytes_Int>, fn(i32, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  fn(i32, ) -> dyn
        %2  obj<hl.types.ArrayObj>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  i32
        %8  i32
        %9  i32
        %10 void
        %11 i32
        %12 i32
        %13 bool
        %14 fn(i32, ) -> dyn
        %15 void
        %16 obj<hl.types.ArrayObj>
        %17 obj<hl.types.ArrayBytes_Int>
        %18 i32
        %19 i32
        %20 i32
        %21 i32
        %22 void
        %23 array<void>
        %24 bytes
        %25 void
        %26 i32
        %27 i32
        %28 i32
        %29 dyn
        %30 bool
        %31 fn(i32, ) -> dyn
        %32 obj<hl.types.ArrayObj>
        %33 obj<hl.types.ArrayBytes_Int>
        %34 i32
        %35 void
        %36 i32
        %37 bool
        %38 ref<bool>
        %39 obj<hl.types.ArrayDyn>
        %40 i32
        %41 i32
        %42 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[269](%2, )
            get_field %4 %0.0
            int %5 0
            cmp sge %6 %5 %4
            j_true %6 $6 $2
        :$2 
            get_field %7 %0.0
            int %8 1
            sub %9 %7 %8
            call %10 fn[92](%2, %9, )
            int %11 0
            get_field %12 %0.0
            nop
            cmp sge %13 %11 %12
            j_true %13 $5 $3
        :$3 
            phi %14 [%1 $2], [%14 $4], [%1 $6], 
            phi %15 [%10 $2], [%15 $4], [%3 $6], 
            phi %16 [%2 $2], [%16 $4], [%2 $6], 
            phi %17 [%0 $2], [%17 $4], [%0 $6], 
            phi %18 [%11 $2], [%21 $4], [%40 $6], 
            phi %19 [%12 $2], [%19 $4], [%41 $6], 
            mov %20 %18
            incr %21 %18
            call_intrinsic %22 @eon.null_check(%16, )
            get_field %23 %16.1
            get_field %24 %17.1
            call_intrinsic %25 @eon.null_check(%14, )
            int %26 2
            shl %27 %6 %26
            get_mem %28 %24[%27]
            call_closure %29 %14(%28, )
            set_array %23[%6] %29
            j_always $4
        :$4 
            nop
            cmp sge %30 %21 %19
            j_true %30 $5 $3
        :$5 
            phi %31 [%14 $4], [%1 $2], [%1 $6], 
            phi %32 [%16 $4], [%2 $2], [%2 $6], 
            phi %33 [%17 $4], [%0 $2], [%0 $6], 
            phi %34 [%19 $4], [%12 $2], [%41 $6], 
            phi %35 [%15 $4], [%10 $2], [%3 $6], 
            phi %36 [%21 $4], [%11 $2], [%40 $6], 
            bool %37 true
            ref %38 %13
            call %39 fn[343](%32, %38, )
            ret %39
        :$6 
            int %40 0
            get_field %41 %0.0
            nop
            cmp sge %42 %40 %41
            j_true %42 $5 $3
        :$7 
            unreachable
#151 = fn[227] fn(obj<hl.types.ArrayBytes_Int>, fn(i32, ) -> bool, ) -> obj<hl.types.ArrayBytes_Int>
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  fn(i32, ) -> bool
        %2  obj<hl.types.ArrayBytes_Int>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  obj<hl.types.ArrayBytes_Int>
        %8  fn(i32, ) -> bool
        %9  obj<hl.types.ArrayBytes_Int>
        %10 void
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 bytes
        %16 i32
        %17 i32
        %18 i32
        %19 void
        %20 bool
        %21 void
        %22 i32
        %23 obj<hl.types.ArrayBytes_Int>
        %24 obj<hl.types.ArrayBytes_Int>
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 i32
        %30 bool
        %31 bytes
        %32 fn(i32, ) -> bool
        %33 void
        %34 bool
        %35 i32
        %36 void
        %37 i32
        %38 obj<hl.types.ArrayBytes_Int>
        %39 fn(i32, ) -> bool
        %40 obj<hl.types.ArrayBytes_Int>
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[353](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%23 $4], [%0 $1], 
            phi %8 [%32 $4], [%1 $1], 
            phi %9 [%24 $4], [%2 $1], 
            phi %10 [%33 $4], [%3 $1], 
            phi %11 [%26 $4], [%4 $1], 
            phi %12 [%25 $4], [%5 $1], 
            mov %13 %11
            incr %14 %11
            get_field %15 %7.1
            int %16 2
            shl %17 %6 %16
            get_mem %18 %15[%17]
            call_intrinsic %19 @eon.null_check(%8, )
            call_closure %20 %8(%18, )
            j_false %20 $6 $3
        :$3 
            call_intrinsic %21 @eon.null_check(%9, )
            call %22 fn[209](%9, %18, )
            j_always $4
        :$4 
            phi %23 [%7 $3], [%7 $6], 
            phi %24 [%9 $3], [%9 $6], 
            phi %25 [%12 $3], [%12 $6], 
            phi %26 [%14 $3], [%14 $6], 
            phi %27 [%18 $3], [%18 $6], 
            phi %28 [%13 $3], [%13 $6], 
            phi %29 [%22 $3], [%17 $6], 
            phi %30 [%20 $3], [%20 $6], 
            phi %31 [%15 $3], [%15 $6], 
            phi %32 [%8 $3], [%8 $6], 
            phi %33 [%10 $3], [%10 $6], 
            nop
            cmp sge %34 %26 %25
            j_true %34 $5 $2
        :$5 
            phi %35 [%25 $4], [%5 $1], 
            phi %36 [%33 $4], [%3 $1], 
            phi %37 [%26 $4], [%4 $1], 
            phi %38 [%23 $4], [%0 $1], 
            phi %39 [%32 $4], [%1 $1], 
            phi %40 [%24 $4], [%2 $1], 
            ret %40
        :$6 
            j_always $4
        :$7 
            unreachable
#152 = fn[228] fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  bool
        %4  i32
        %5  i32
        %6  void
        %7  i32
        %8  obj<hl.types.ArrayBytes_Int>
        %9  i32
        %10 i32
        %11 bool
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 bytes
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 i32
        %22 void
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            cmp sge %3 %3 %1
            j_true %3 $4 $2
        :$2 
            int %4 1
            sub %5 %1 %4
            call %6 fn[239](%0, %3, )
            j_always $3
        :$3 
            phi %7 [%1 $2], [%1 $4], 
            phi %8 [%0 $2], [%0 $4], 
            phi %9 [%5 $2], [%10 $4], 
            ret_void
        :$4 
            get_field %10 %0.0
            cmp sge %11 %1 %3
            j_true %11 $3 $5
        :$5 
            get_field %12 %0.1
            get_field %13 %0.1
            int %14 2
            shl %15 %1 %14
            get_field %16 %0.1
            get_field %17 %0.0
            sub %18 %17 %1
            int %19 2
            shl %20 %18 %19
            int %21 0
            call %22 fn[253](%12, %3, %20, %21, )
            set_field %0.0 %1
            ret_void
        :$6 
            unreachable
#153 = fn[229] fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> dyn
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  bool
        %4  bytes
        %5  i32
        %6  dyn
        %7  bytes
        %8  i32
        %9  i32
        %10 i32
        %11 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            cmp slt %3 %1 %3
            j_true %3 $3 $2
        :$2 
            get_field %4 %0.1
            int %5 0
            to_dyn %6 %5
            ret %6
        :$3 
            get_field %7 %0.1
            int %8 2
            shl %9 %1 %3
            get_mem %10 %7[%3]
            to_dyn %11 %10
            ret %11
        :$4 
            unreachable
#154 = fn[230] fn(obj<hl.types.ArrayBytes_Int>, i32, dyn, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  dyn
        %3  i32
        %4  bool
        %5  void
        %6  bytes
        %7  i32
        %8  i32
        %9  i32
        %10 bytes
        %11 i32
        %12 i32
        %13 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            cmp slt %4 %1 %3
            j_true %4 $3 $2
        :$2 
            call %5 fn[239](%0, %1, )
            get_field %6 %0.1
            call_intrinsic %7 @eon.safe_cast(%2, )
            int %8 2
            shl %9 %1 %8
            set_mem %6[%9] %4
            ret_void
        :$3 
            get_field %10 %0.1
            call_intrinsic %11 @eon.safe_cast(%2, )
            int %12 2
            shl %13 %1 %12
            set_mem %10[%13] %4
            ret_void
        :$4 
            unreachable
#155 = fn[231] fn(obj<hl.types.ArrayBytes_Int>, dyn, ) -> i32
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 dyn
        %2 i32
        %3 i32
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[209](%0, %2, )
            ret %3
        :$2
            unreachable
#156 = fn[232] fn(obj<hl.types.ArrayBytes_Int>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 null<i32>
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[208](%0, )
            ret %1
        :$2
            unreachable
#157 = fn[233] fn(obj<hl.types.ArrayBytes_Int>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 null<i32>
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[211](%0, )
            ret %1
        :$2
            unreachable
#158 = fn[234] fn(obj<hl.types.ArrayBytes_Int>, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 dyn
        %2 i32
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[217](%0, %2, )
            ret_void
        :$2
            unreachable
#159 = fn[235] fn(obj<hl.types.ArrayBytes_Int>, i32, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 i32
        %2 dyn
        %3 i32
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[218](%0, %1, %3, )
            ret_void
        :$2
            unreachable
#160 = fn[236] fn(obj<hl.types.ArrayBytes_Int>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 dyn
        %2 i32
        %3 bool
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[219](%0, %2, )
            ret %3
        :$2
            unreachable
#161 = fn[237] fn(obj<hl.types.ArrayBytes_Int>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 dyn
        %2 i32
        %3 bool
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[220](%0, %2, )
            ret %3
        :$2
            unreachable
#162 = fn[361] fn(fn(dyn, dyn, ) -> i32, i32, i32, ) -> i32
    [Values]
        %0 fn(dyn, dyn, ) -> i32
        %1 i32
        %2 i32
        %3 dyn
        %4 dyn
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_dyn %3 %1
            to_dyn %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#163 = fn[238] fn(obj<hl.types.ArrayBytes_Int>, fn(dyn, dyn, ) -> i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_Int>
        %1 fn(dyn, dyn, ) -> i32
        %2 fn(i32, i32, ) -> i32
        %3 void
        %4 fn(i32, i32, ) -> i32
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            j_not_null %1 $4 $2
        :$2
            null %2
            j_always $3
        :$3
            call %3 fn[214](%0, %2, )
            ret_void
        :$4
            instance_closure %4 fn[361] %1
            call %5 fn[214](%0, %4, )
            ret_void
        :$5
            unreachable
#164 = fn[239] fn(obj<hl.types.ArrayBytes_Int>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_Int>
        %1  i32
        %2  i32
        %3  bool
        %4  obj<String>
        %5  i32
        %6  ref<i32>
        %7  bytes
        %8  obj<String>
        %9  obj<String>
        %10 dyn
        %11 void
        %12 i32
        %13 i32
        %14 i32
        %15 bool
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 bool
        %22 i32
        %23 bytes
        %24 i32
        %25 i32
        %26 bytes
        %27 bytes
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 i32
        %34 void
        %35 bytes
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 void
        %41 bytes
        %42 i32
        %43 i32
        %44 bytes
        %45 bytes
        %46 i32
        %47 i32
        %48 i32
        %49 i32
        %50 bytes
        %51 i32
        %52 void
        %53 bytes
        %54 i32
        %55 i32
        %56 i32
        %57 i32
        %58 void
    [Code]
        :$0 
            j_always $1
        :$1 
            int %2 0
            cmp sge %3 %1 %2
            j_true %3 $3 $2
        :$2 
            get_global %4 global[31]
            mov %5 %1
            ref %6 %3
            call %7 fn[35](%3, %6, )
            call %8 fn[16](%7, %3, )
            call %9 fn[20](%4, %8, )
            call %10 fn[34](%9, )
            invoke_intrinsic %11 @eon.throw(%10, ) cont $8 unwind $8
        :$3 
            int %12 1
            add %13 %1 %12
            get_field %14 %0.2
            cmp sge %15 %14 %3
            j_true %15 $7 $4
        :$4 
            get_field %16 %0.2
            int %17 3
            mul %18 %16 %17
            int %19 1
            sshr %20 %18 %19
            cmp sge %21 %20 %3
            j_true %21 $6 $5
        :$5 
            mov %22 %3
            get_field %23 %0.1
            int %24 2
            shl %25 %22 %24
            call %26 fn[36](%25, )
            get_field %27 %0.1
            get_field %28 %0.0
            int %29 2
            shl %30 %28 %29
            int %31 0
            get_field %32 %0.1
            int %33 0
            call %34 fn[39](%26, %31, %15, %33, %30, )
            get_field %35 %0.1
            int %36 2
            shl %37 %22 %36
            sub %38 %37 %30
            int %39 0
            call %40 fn[253](%26, %30, %38, %39, )
            set_field %0.1 %26
            set_field %0.2 %22
            set_field %0.0 %3
            ret_void
        :$6 
            get_field %41 %0.1
            int %42 2
            shl %43 %20 %42
            call %44 fn[36](%43, )
            get_field %45 %0.1
            get_field %46 %0.0
            int %47 2
            shl %48 %46 %47
            int %49 0
            get_field %50 %0.1
            int %51 0
            call %52 fn[39](%44, %49, %15, %51, %48, )
            get_field %53 %0.1
            int %54 2
            shl %55 %20 %54
            sub %56 %55 %48
            int %57 0
            call %58 fn[253](%44, %48, %56, %57, )
            set_field %0.1 %44
            set_field %0.2 %20
            set_field %0.0 %3
            ret_void
        :$7 
            set_field %0.0 %3
            ret_void
        :$8 
            unreachable
#165 = fn[171] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 i32
        %2 bytes
    [Code]
        :$0
            j_always $1
        :$1
            int %1 0
            set_field %0.0 %1
            set_field %0.2 %1
            null %2
            set_field %0.1 %2
            ret_void
        :$2
            unreachable
#166 = fn[137] fn(obj<hl.types.ArrayBytes_hl_F32>, obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<hl.types.ArrayBytes_hl_F32>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  obj<hl.types.ArrayBytes_hl_F32>
        %2  obj<hl.types.ArrayBytes_hl_F32>
        %3  void
        %4  i32
        %5  void
        %6  i32
        %7  i32
        %8  bytes
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 i32
        %17 bytes
        %18 i32
        %19 bytes
        %20 i32
        %21 void
        %22 bytes
        %23 bytes
        %24 bytes
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[171](%2, )
            get_field %4 %0.0
            call_intrinsic %5 @eon.null_check(%1, )
            get_field %6 %1.0
            add %7 %4 %6
            set_field %2.2 %7
            set_field %2.0 %7
            get_field %8 %0.1
            get_field %9 %2.0
            int %10 2
            shl %11 %9 %10
            call %12 fn[36](%11, )
            set_field %2.1 %12
            get_field %13 %0.1
            get_field %14 %0.0
            int %15 2
            shl %16 %14 %15
            get_field %17 %2.1
            int %18 0
            get_field %19 %0.1
            int %20 0
            call %21 fn[39](%17, %18, %19, %20, %16, )
            get_field %22 %0.1
            get_field %23 %2.1
            get_field %24 %1.1
            int %25 0
            get_field %26 %1.0
            int %27 2
            shl %28 %26 %27
            call %29 fn[39](%23, %16, %24, %25, %28, )
            ret %2
        :$2 
            unreachable
#167 = fn[138] fn(obj<hl.types.ArrayBytes_hl_F32>, obj<String>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  obj<String>
        %2  obj<StringBuf>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  i32
        %8  obj<String>
        %9  void
        %10 obj<hl.types.ArrayBytes_hl_F32>
        %11 obj<StringBuf>
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 bool
        %17 void
        %18 void
        %19 bytes
        %20 void
        %21 i32
        %22 i32
        %23 f32
        %24 null<f32>
        %25 void
        %26 void
        %27 i32
        %28 obj<hl.types.ArrayBytes_hl_F32>
        %29 i32
        %30 obj<StringBuf>
        %31 i32
        %32 f32
        %33 bytes
        %34 obj<String>
        %35 null<f32>
        %36 i32
        %37 bool
        %38 obj<hl.types.ArrayBytes_hl_F32>
        %39 i32
        %40 void
        %41 obj<StringBuf>
        %42 obj<String>
        %43 i32
        %44 void
        %45 obj<String>
        %46 bytes
        %47 void
        %48 i32
        %49 i32
        %50 f32
        %51 null<f32>
        %52 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[245](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%36 $4], [%4 $1], 
            phi %8 [%34 $4], [%1 $1], 
            phi %9 [%26 $4], [%3 $1], 
            phi %10 [%28 $4], [%0 $1], 
            phi %11 [%30 $4], [%2 $1], 
            phi %12 [%29 $4], [%5 $1], 
            mov %13 %7
            incr %14 %7
            int %15 0
            cmp sge %16 %15 %6
            j_true %16 $6 $3
        :$3 
            call_intrinsic %17 @eon.null_check(%11, )
            call %18 fn[246](%11, %8, )
            get_field %19 %10.1
            call_intrinsic %20 @eon.null_check(%11, )
            int %21 2
            shl %22 %6 %21
            get_mem %23 %19[%22]
            to_dyn %24 %23
            call %25 fn[246](%11, %24, )
            j_always $4
        :$4 
            phi %26 [%25 $3], [%52 $6], 
            phi %27 [%13 $3], [%13 $6], 
            phi %28 [%10 $3], [%10 $6], 
            phi %29 [%12 $3], [%12 $6], 
            phi %30 [%11 $3], [%11 $6], 
            phi %31 [%22 $3], [%49 $6], 
            phi %32 [%23 $3], [%50 $6], 
            phi %33 [%19 $3], [%46 $6], 
            phi %34 [%8 $3], [%8 $6], 
            phi %35 [%24 $3], [%51 $6], 
            phi %36 [%14 $3], [%14 $6], 
            nop
            cmp sge %37 %36 %29
            j_true %37 $5 $2
        :$5 
            phi %38 [%28 $4], [%0 $1], 
            phi %39 [%36 $4], [%4 $1], 
            phi %40 [%26 $4], [%3 $1], 
            phi %41 [%30 $4], [%2 $1], 
            phi %42 [%34 $4], [%1 $1], 
            phi %43 [%29 $4], [%5 $1], 
            call_intrinsic %44 @eon.null_check(%41, )
            call %45 fn[248](%41, )
            ret %45
        :$6 
            get_field %46 %10.1
            call_intrinsic %47 @eon.null_check(%11, )
            int %48 2
            shl %49 %6 %48
            get_mem %50 %46[%49]
            to_dyn %51 %50
            call %52 fn[246](%11, %51, )
            j_always $4
        :$7 
            unreachable
#168 = fn[139] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> null<f32>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  i32
        %3  bool
        %4  null<f32>
        %5  i32
        %6  i32
        %7  bytes
        %8  i32
        %9  i32
        %10 i32
        %11 f32
        %12 null<f32>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %2
            j_true %3 $3 $2
        :$2 
            null %4
            ret %3
        :$3 
            get_field %5 %0.0
            decr %6 %5
            set_field %0.0 %6
            get_field %7 %0.1
            get_field %8 %0.0
            int %9 2
            shl %10 %8 %9
            get_mem %11 %7[%10]
            to_dyn %12 %11
            ret %3
        :$4 
            unreachable
#169 = fn[140] fn(obj<hl.types.ArrayBytes_hl_F32>, f32, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  f32
        %2  i32
        %3  i32
        %4  bool
        %5  void
        %6  bytes
        %7  i32
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 i32
        %14 i32
        %15 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            get_field %3 %0.2
            cmp ne %4 %4 %2
            j_true %4 $4 $2
        :$2 
            call %5 fn[170](%0, %2, )
            j_always $3
        :$3 
            get_field %6 %0.1
            int %7 2
            shl %8 %2 %7
            set_mem %6[%8] %1
            get_field %9 %0.0
            ret %4
        :$4 
            get_field %10 %0.0
            incr %11 %4
            set_field %0.0 %4
            get_field %12 %0.1
            int %13 2
            shl %14 %2 %13
            set_mem %12[%14] %1
            get_field %15 %0.0
            ret %4
        :$5 
            unreachable
#170 = fn[141] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  i32
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  i32
        %8  obj<hl.types.ArrayBytes_hl_F32>
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 bytes
        %17 i32
        %18 i32
        %19 f32
        %20 bytes
        %21 bytes
        %22 i32
        %23 i32
        %24 f32
        %25 i32
        %26 i32
        %27 bytes
        %28 i32
        %29 i32
        %30 bool
        %31 i32
        %32 i32
        %33 obj<hl.types.ArrayBytes_hl_F32>
        %34 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            int %1 0
            get_field %2 %0.0
            int %3 1
            sshr %4 %2 %3
            nop
            cmp sge %5 %1 %4
            j_true %5 $4 $2
        :$2 
            phi %6 [%10 $3], [%3 $1], 
            phi %7 [%7 $3], [%4 $1], 
            phi %8 [%8 $3], [%0 $1], 
            phi %9 [%11 $3], [%1 $1], 
            mov %10 %9
            incr %11 %9
            get_field %12 %8.0
            int %13 1
            sub %14 %5 %13
            sub %15 %5 %10
            get_field %16 %8.1
            int %17 2
            shl %18 %10 %17
            get_mem %19 %16[%18]
            get_field %20 %8.1
            get_field %21 %8.1
            int %22 2
            shl %23 %5 %22
            get_mem %24 %21[%23]
            int %25 2
            shl %26 %10 %25
            set_mem %20[%26] %24
            get_field %27 %8.1
            int %28 2
            shl %29 %5 %28
            set_mem %27[%29] %19
            j_always $3
        :$3 
            nop
            cmp sge %30 %11 %7
            j_true %30 $4 $2
        :$4 
            phi %31 [%1 $1], [%11 $3], 
            phi %32 [%3 $1], [%10 $3], 
            phi %33 [%0 $1], [%8 $3], 
            phi %34 [%4 $1], [%7 $3], 
            ret_void
        :$5 
            unreachable
#171 = fn[142] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> null<f32>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  i32
        %3  bool
        %4  null<f32>
        %5  bytes
        %6  i32
        %7  i32
        %8  i32
        %9  f32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 bytes
        %15 i32
        %16 i32
        %17 i32
        %18 bytes
        %19 i32
        %20 i32
        %21 i32
        %22 i32
        %23 void
        %24 null<f32>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %3
            j_true %3 $3 $2
        :$2 
            null %4
            ret %4
        :$3 
            get_field %5 %0.1
            int %6 0
            int %7 2
            shl %8 %6 %3
            get_mem %9 %5[%3]
            get_field %10 %0.0
            decr %11 %10
            set_field %0.0 %11
            get_field %12 %0.1
            get_field %13 %0.1
            get_field %14 %0.1
            int %15 1
            int %16 2
            shl %17 %15 %3
            get_field %18 %0.1
            int %19 0
            get_field %20 %0.0
            int %21 2
            shl %22 %20 %21
            call %23 fn[39](%12, %3, %13, %17, %22, )
            to_dyn %24 %9
            ret %24
        :$4 
            unreachable
#172 = fn[143] fn(obj<hl.types.ArrayBytes_hl_F32>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  obj<hl.types.ArrayAccess>
        %3  i32
        %4  i32
        %5  obj<hl.types.ArrayBytes_hl_F32>
        %6  i32
        %7  bool
        %8  i32
        %9  bool
        %10 i32
        %11 bool
        %12 i32
        %13 i32
        %14 bool
        %15 i32
        %16 void
        %17 i32
        %18 bool
        %19 i32
        %20 obj<hl.types.ArrayBytes_hl_F32>
        %21 i32
        %22 obj<hl.types.ArrayAccess>
        %23 i32
        %24 obj<hl.types.ArrayBytes_hl_F32>
        %25 i32
        %26 enum<haxe.io.Error>
        %27 dyn
        %28 void
        %29 bytes
        %30 bytes
        %31 i32
        %32 i32
        %33 bytes
        %34 bytes
        %35 i32
        %36 i32
        %37 bytes
        %38 i32
        %39 i32
        %40 void
    [Code]
        :$0 
            j_always $1
        :$1 
            call_intrinsic %5 @eon.safe_cast(%2, )
            int %6 0
            cmp slt %7 %1 %6
            j_true %7 $6 $2
        :$2 
            int %8 0
            cmp slt %9 %3 %8
            j_true %9 $6 $3
        :$3 
            int %10 0
            cmp slt %11 %4 %10
            j_true %11 $6 $4
        :$4 
            add %12 %1 %4
            get_field %13 %0.0
            cmp slt %14 %13 %7
            j_true %14 $6 $5
        :$5 
            add %15 %3 %4
            call_intrinsic %16 @eon.null_check(%5, )
            get_field %17 %5.0
            cmp sge %18 %17 %7
            j_true %18 $7 $6
        :$6 
            phi %19 [%6 $1], [%13 $4], [%10 $3], [%17 $5], [%8 $2], 
            phi %20 [%5 $1], [%5 $4], [%5 $3], [%5 $5], [%5 $2], 
            phi %21 [%4 $1], [%4 $4], [%4 $3], [%4 $5], [%4 $2], 
            phi %22 [%2 $1], [%2 $4], [%2 $3], [%2 $5], [%2 $2], 
            phi %23 [%1 $1], [%1 $4], [%1 $3], [%1 $5], [%1 $2], 
            phi %24 [%0 $1], [%0 $4], [%0 $3], [%0 $5], [%0 $2], 
            phi %25 [%3 $1], [%3 $4], [%3 $3], [%3 $5], [%3 $2], 
            get_global %26 global[28]
            call %27 fn[34](%26, )
            invoke_intrinsic %28 @eon.throw(%9, ) cont $8 unwind $8
        :$7 
            get_field %29 %0.1
            get_field %30 %0.1
            int %31 2
            shl %32 %1 %31
            get_field %33 %5.1
            get_field %34 %0.1
            int %35 2
            shl %36 %3 %35
            get_field %37 %0.1
            int %38 2
            shl %39 %4 %18
            call %40 fn[39](%11, %7, %33, %36, %39, )
            ret_void
        :$8 
            unreachable
#173 = fn[144] fn(obj<hl.types.ArrayBytes_hl_F32>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 null<i32>
        %15 obj<hl.types.ArrayBytes_hl_F32>
        %16 i32
        %17 i32
        %18 obj<hl.types.ArrayBytes_hl_F32>
        %19 null<i32>
        %20 i32
        %21 i32
        %22 i32
        %23 bool
        %24 i32
        %25 obj<hl.types.ArrayBytes_hl_F32>
        %26 i32
        %27 null<i32>
        %28 i32
        %29 obj<hl.types.ArrayBytes_hl_F32>
        %30 void
        %31 i32
        %32 null<i32>
        %33 i32
        %34 i32
        %35 obj<hl.types.ArrayBytes_hl_F32>
        %36 obj<hl.types.ArrayBytes_hl_F32>
        %37 void
        %38 bytes
        %39 bytes
        %40 i32
        %41 i32
        %42 bytes
        %43 i32
        %44 i32
        %45 bytes
        %46 null<i32>
        %47 obj<hl.types.ArrayBytes_hl_F32>
        %48 i32
        %49 i32
        %50 i32
        %51 i32
        %52 bool
        %53 i32
        %54 i32
        %55 i32
        %56 bool
        %57 i32
        %58 i32
        %59 null<i32>
        %60 i32
        %61 obj<hl.types.ArrayBytes_hl_F32>
        %62 i32
        %63 i32
        %64 i32
        %65 bool
        %66 i32
        %67 bool
        %68 obj<hl.types.ArrayBytes_hl_F32>
        %69 i32
        %70 null<i32>
        %71 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $12 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $12 $3
        :$3 
            int %10 0
            mov %11 %4
            j_not_null %2 $8 $4
        :$4 
            phi %12 [%8 $3], [%71 $12], 
            phi %13 [%11 $3], [%69 $12], 
            phi %14 [%2 $3], [%70 $12], 
            phi %15 [%0 $3], [%68 $12], 
            get_field %16 %15.0
            j_always $5
        :$5 
            phi %17 [%54 $9], [%50 $11], [%16 $4], 
            phi %18 [%47 $9], [%47 $11], [%15 $4], 
            phi %19 [%46 $9], [%46 $11], [%14 $4], 
            phi %20 [%49 $9], [%49 $11], [%13 $4], 
            sub %21 %17 %20
            int %22 0
            cmp sge %23 %21 %22
            j_true %23 $7 $6
        :$6 
            phi %24 [%20 $5], [%58 $10], 
            phi %25 [%18 $5], [%61 $10], 
            phi %26 [%22 $5], [%64 $10], 
            phi %27 [%19 $5], [%59 $10], 
            phi %28 [%21 $5], [%63 $10], 
            new %29
            call %30 fn[171](%29, )
            ret %29
        :$7 
            phi %31 [%22 $5], [%64 $10], 
            phi %32 [%19 $5], [%59 $10], 
            phi %33 [%21 $5], [%63 $10], 
            phi %34 [%20 $5], [%58 $10], 
            phi %35 [%18 $5], [%61 $10], 
            new %36
            call %37 fn[171](%36, )
            set_field %36.2 %33
            set_field %36.0 %33
            get_field %38 %35.1
            get_field %39 %35.1
            int %40 2
            shl %41 %34 %40
            get_field %42 %35.1
            int %43 2
            shl %44 %33 %43
            call %45 fn[256](%9, %41, %44, )
            set_field %36.1 %45
            ret %36
        :$8 
            phi %46 [%2 $3], [%70 $12], 
            phi %47 [%0 $3], [%68 $12], 
            phi %48 [%8 $3], [%71 $12], 
            phi %49 [%11 $3], [%69 $12], 
            call_intrinsic %50 @eon.safe_cast(%46, )
            int %51 0
            cmp sge %52 %50 %51
            j_true %52 $11 $9
        :$9 
            get_field %53 %47.0
            add %54 %50 %53
            get_field %55 %47.0
            cmp sge %56 %55 %54
            j_true %56 $5 $10
        :$10
            phi %57 [%50 $11], [%54 $9], 
            phi %58 [%49 $11], [%49 $9], 
            phi %59 [%46 $11], [%46 $9], 
            phi %60 [%66 $11], [%55 $9], 
            phi %61 [%47 $11], [%47 $9], 
            get_field %62 %61.0
            sub %63 %62 %58
            int %64 0
            cmp sge %65 %63 %64
            j_true %65 $7 $6
        :$11
            get_field %66 %47.0
            cmp sge %67 %66 %50
            j_true %67 $5 $10
        :$12
            phi %68 [%0 $1], [%0 $2], 
            phi %69 [%1 $1], [%7 $2], 
            phi %70 [%2 $1], [%2 $2], 
            phi %71 [%3 $1], [%8 $2], 
            j_not_null %70 $8 $4
        :$13
            unreachable
#174 = fn[362] fn(fn(f32, f32, ) -> i32, i32, i32, ) -> i32
    [Values]
        %0 fn(f32, f32, ) -> i32
        %1 i32
        %2 i32
        %3 f32
        %4 f32
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_sfloat %3 %1
            to_sfloat %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#175 = fn[363] fn(fn(f32, f32, ) -> i32, f64, f64, ) -> i32
    [Values]
        %0 fn(f32, f32, ) -> i32
        %1 f64
        %2 f64
        %3 f32
        %4 f32
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_sfloat %3 %1
            to_sfloat %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#176 = fn[145] fn(obj<hl.types.ArrayBytes_hl_F32>, fn(f32, f32, ) -> i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  fn(f32, f32, ) -> i32
        %2  type
        %3  type
        %4  bool
        %5  bytes
        %6  i32
        %7  i32
        %8  fn(i32, i32, ) -> i32
        %9  void
        %10 i32
        %11 i32
        %12 void
        %13 obj<hl.types.ArrayBytes_hl_F32>
        %14 bytes
        %15 type
        %16 type
        %17 fn(i32, i32, ) -> i32
        %18 fn(f32, f32, ) -> i32
        %19 fn(i32, i32, ) -> i32
        %20 void
        %21 bytes
        %22 i32
        %23 i32
        %24 fn(f64, f64, ) -> i32
        %25 void
        %26 fn(f64, f64, ) -> i32
        %27 void
    [Code]
        :$0 
            j_always $1
        :$1 
            type %2 type[5]
            type %3 type[3]
            cmp ne %4 %2 %4
            j_true %4 $7 $2
        :$2 
            get_field %5 %0.1
            int %6 0
            get_field %7 %0.0
            j_not_null %1 $6 $3
        :$3 
            null %8
            j_always $4
        :$4 
            call %9 fn[254](%5, %6, %7, %8, )
            j_always $5
        :$5 
            phi %10 [%7 $6], [%7 $4], 
            phi %11 [%6 $6], [%6 $4], 
            phi %12 [%20 $6], [%9 $4], 
            phi %13 [%0 $6], [%0 $4], 
            phi %14 [%5 $6], [%5 $4], 
            phi %15 [%2 $6], [%2 $4], 
            phi %16 [%3 $6], [%3 $4], 
            phi %17 [%19 $6], [%8 $4], 
            phi %18 [%1 $6], [%1 $4], 
            ret_void
        :$6 
            instance_closure %19 fn[362] %1
            call %20 fn[254](%5, %6, %7, %19, )
            j_always $5
        :$7 
            get_field %21 %0.1
            int %22 0
            get_field %23 %0.0
            j_not_null %1 $10 $8
        :$8 
            null %24
            j_always $9
        :$9 
            call %25 fn[255](%21, %22, %23, %24, )
            ret_void
        :$10
            instance_closure %26 fn[363] %1
            call %27 fn[255](%21, %22, %23, %26, )
            ret_void
        :$11
            unreachable
#177 = fn[146] fn(obj<hl.types.ArrayBytes_hl_F32>, i32, i32, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  i32
        %3  i32
        %4  bool
        %5  obj<hl.types.ArrayBytes_hl_F32>
        %6  void
        %7  i32
        %8  bool
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 bool
        %14 i32
        %15 i32
        %16 i32
        %17 bool
        %18 i32
        %19 obj<hl.types.ArrayBytes_hl_F32>
        %20 i32
        %21 i32
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 obj<hl.types.ArrayBytes_hl_F32>
        %30 i32
        %31 i32
        %32 bool
        %33 obj<hl.types.ArrayBytes_hl_F32>
        %34 i32
        %35 i32
        %36 i32
        %37 i32
        %38 obj<hl.types.ArrayBytes_hl_F32>
        %39 void
        %40 obj<hl.types.ArrayBytes_hl_F32>
        %41 i32
        %42 i32
        %43 i32
        %44 i32
        %45 obj<hl.types.ArrayBytes_hl_F32>
        %46 void
        %47 bytes
        %48 bytes
        %49 i32
        %50 i32
        %51 bytes
        %52 i32
        %53 i32
        %54 bytes
        %55 i32
        %56 bytes
        %57 bytes
        %58 i32
        %59 i32
        %60 bytes
        %61 bytes
        %62 i32
        %63 i32
        %64 bytes
        %65 i32
        %66 i32
        %67 i32
        %68 i32
        %69 void
        %70 i32
        %71 i32
        %72 obj<hl.types.ArrayBytes_hl_F32>
        %73 i32
        %74 i32
        %75 i32
        %76 i32
        %77 i32
        %78 bool
        %79 i32
        %80 i32
        %81 i32
        %82 i32
        %83 bool
        %84 i32
        %85 i32
        %86 i32
        %87 bool
        %88 obj<hl.types.ArrayBytes_hl_F32>
        %89 i32
        %90 i32
        %91 i32
        %92 i32
        %93 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %2 %3
            j_true %4 $3 $2
        :$2 
            new %5
            call %6 fn[171](%5, )
            ret %5
        :$3 
            int %7 0
            cmp sge %8 %1 %7
            j_true %8 $13 $4
        :$4 
            get_field %9 %0.0
            add %10 %4 %1
            mov %11 %4
            int %12 0
            cmp sge %13 %4 %12
            j_true %13 $13 $5
        :$5 
            int %14 0
            mov %15 %4
            get_field %16 %0.0
            cmp sge %17 %16 %15
            j_true %17 $10 $6
        :$6 
            phi %18 [%2 $5], [%89 $13], 
            phi %19 [%0 $5], [%88 $13], 
            phi %20 [%16 $5], [%92 $13], 
            phi %21 [%15 $5], [%91 $13], 
            int %22 0
            mov %23 %4
            int %24 0
            mov %25 %4
            j_always $7
        :$7 
            phi %26 [%25 $6], [%75 $10], [%81 $11], 
            phi %27 [%20 $6], [%77 $10], [%82 $11], 
            phi %28 [%24 $6], [%76 $10], [%80 $11], 
            phi %29 [%19 $6], [%72 $10], [%72 $11], 
            phi %30 [%23 $6], [%74 $10], [%74 $11], 
            int %31 0
            cmp ne %32 %26 %31
            j_true %32 $9 $8
        :$8 
            phi %33 [%29 $7], [%72 $12], 
            phi %34 [%30 $7], [%74 $12], 
            phi %35 [%26 $7], [%85 $12], 
            phi %36 [%31 $7], [%86 $12], 
            phi %37 [%28 $7], [%84 $12], 
            new %38
            call %39 fn[171](%38, )
            ret %38
        :$9 
            phi %40 [%29 $7], [%72 $12], 
            phi %41 [%26 $7], [%85 $12], 
            phi %42 [%28 $7], [%84 $12], 
            phi %43 [%31 $7], [%86 $12], 
            phi %44 [%30 $7], [%74 $12], 
            new %45
            call %46 fn[171](%45, )
            get_field %47 %40.1
            get_field %48 %40.1
            int %49 2
            shl %50 %44 %49
            get_field %51 %40.1
            int %52 2
            shl %53 %41 %52
            call %54 fn[256](%47, %4, %53, )
            set_field %45.1 %54
            set_field %45.0 %41
            set_field %45.2 %41
            add %55 %44 %41
            get_field %56 %40.1
            get_field %57 %40.1
            int %58 2
            shl %59 %44 %58
            get_field %60 %40.1
            get_field %61 %40.1
            int %62 2
            shl %63 %55 %62
            get_field %64 %40.1
            get_field %65 %40.0
            sub %66 %65 %55
            int %67 2
            shl %68 %66 %67
            call %69 fn[39](%56, %59, %60, %63, %68, )
            get_field %70 %40.0
            sub %71 %70 %41
            set_field %40.0 %71
            ret %45
        :$10
            phi %72 [%88 $13], [%0 $5], 
            phi %73 [%92 $13], [%16 $5], 
            phi %74 [%91 $13], [%15 $5], 
            phi %75 [%89 $13], [%2 $5], 
            add %76 %74 %75
            get_field %77 %72.0
            cmp sge %78 %77 %4
            j_true %78 $7 $11
        :$11
            get_field %79 %72.0
            sub %80 %4 %74
            mov %81 %4
            int %82 0
            cmp sge %83 %4 %82
            j_true %83 $7 $12
        :$12
            int %84 0
            mov %85 %4
            int %86 0
            cmp ne %87 %85 %86
            j_true %87 $9 $8
        :$13
            phi %88 [%0 $4], [%0 $3], 
            phi %89 [%2 $4], [%2 $3], 
            phi %90 [%12 $4], [%7 $3], 
            phi %91 [%11 $4], [%1 $3], 
            get_field %92 %88.0
            cmp sge %93 %92 %91
            j_true %93 $10 $6
        :$14
            unreachable
#178 = fn[147] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  obj<StringBuf>
        %2  void
        %3  i32
        %4  void
        %5  i32
        %6  i32
        %7  bool
        %8  i32
        %9  obj<StringBuf>
        %10 obj<hl.types.ArrayBytes_hl_F32>
        %11 i32
        %12 void
        %13 i32
        %14 i32
        %15 i32
        %16 bool
        %17 void
        %18 i32
        %19 void
        %20 bytes
        %21 void
        %22 i32
        %23 i32
        %24 f32
        %25 null<f32>
        %26 void
        %27 null<f32>
        %28 obj<hl.types.ArrayBytes_hl_F32>
        %29 bytes
        %30 i32
        %31 i32
        %32 i32
        %33 i32
        %34 obj<StringBuf>
        %35 void
        %36 f32
        %37 bool
        %38 obj<hl.types.ArrayBytes_hl_F32>
        %39 i32
        %40 i32
        %41 obj<StringBuf>
        %42 void
        %43 void
        %44 i32
        %45 void
        %46 obj<String>
        %47 bytes
        %48 void
        %49 i32
        %50 i32
        %51 f32
        %52 null<f32>
        %53 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %1
            call %2 fn[245](%1, )
            int %3 91
            call %4 fn[247](%1, %3, )
            int %5 0
            get_field %6 %0.0
            nop
            cmp sge %7 %5 %6
            j_true %7 $5 $2
        :$2 
            phi %8 [%5 $1], [%31 $4], 
            phi %9 [%1 $1], [%34 $4], 
            phi %10 [%0 $1], [%28 $4], 
            phi %11 [%6 $1], [%33 $4], 
            phi %12 [%4 $1], [%35 $4], 
            mov %13 %8
            incr %14 %8
            int %15 0
            cmp sge %16 %7 %13
            j_true %16 $6 $3
        :$3 
            call_intrinsic %17 @eon.null_check(%9, )
            int %18 44
            call %19 fn[247](%9, %18, )
            get_field %20 %10.1
            call_intrinsic %21 @eon.null_check(%9, )
            int %22 2
            shl %23 %13 %7
            get_mem %24 %20[%7]
            to_dyn %25 %24
            call %26 fn[246](%9, %25, )
            j_always $4
        :$4 
            phi %27 [%25 $3], [%52 $6], 
            phi %28 [%10 $3], [%10 $6], 
            phi %29 [%20 $3], [%47 $6], 
            phi %30 [%13 $3], [%13 $6], 
            phi %31 [%14 $3], [%14 $6], 
            phi %32 [%23 $3], [%50 $6], 
            phi %33 [%11 $3], [%11 $6], 
            phi %34 [%9 $3], [%9 $6], 
            phi %35 [%26 $3], [%53 $6], 
            phi %36 [%24 $3], [%51 $6], 
            nop
            cmp sge %37 %31 %33
            j_true %37 $5 $2
        :$5 
            phi %38 [%0 $1], [%28 $4], 
            phi %39 [%6 $1], [%33 $4], 
            phi %40 [%5 $1], [%31 $4], 
            phi %41 [%1 $1], [%34 $4], 
            phi %42 [%4 $1], [%35 $4], 
            call_intrinsic %43 @eon.null_check(%41, )
            int %44 93
            call %45 fn[247](%41, %44, )
            call %46 fn[248](%41, )
            ret %46
        :$6 
            get_field %47 %10.1
            call_intrinsic %48 @eon.null_check(%9, )
            int %49 2
            shl %50 %13 %7
            get_mem %51 %47[%7]
            to_dyn %52 %51
            call %53 fn[246](%9, %52, )
            j_always $4
        :$7 
            unreachable
#179 = fn[148] fn(obj<hl.types.ArrayBytes_hl_F32>, f32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  f32
        %2  i32
        %3  i32
        %4  bool
        %5  i32
        %6  void
        %7  bytes
        %8  bytes
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 void
        %21 bytes
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 i32
        %27 bytes
        %28 bytes
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 bytes
        %34 i32
        %35 i32
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 void
        %41 bytes
        %42 i32
        %43 i32
        %44 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            get_field %3 %0.2
            cmp ne %4 %2 %4
            j_true %4 $4 $2
        :$2 
            get_field %5 %0.0
            call %6 fn[170](%0, %5, )
            j_always $3
        :$3 
            get_field %7 %0.1
            get_field %8 %0.1
            int %9 1
            int %10 2
            shl %11 %9 %4
            get_field %12 %0.1
            get_field %13 %0.1
            int %14 0
            get_field %15 %0.0
            int %16 1
            sub %17 %15 %16
            int %18 2
            shl %19 %17 %18
            call %20 fn[39](%7, %11, %13, %14, %19, )
            get_field %21 %0.1
            int %22 0
            int %23 2
            shl %24 %4 %23
            set_mem %21[%24] %1
            ret_void
        :$4 
            get_field %25 %0.0
            incr %26 %25
            set_field %0.0 %26
            get_field %27 %0.1
            get_field %28 %0.1
            int %29 1
            int %30 2
            shl %31 %29 %4
            get_field %32 %0.1
            get_field %33 %0.1
            int %34 0
            get_field %35 %0.0
            int %36 1
            sub %37 %35 %36
            int %38 2
            shl %39 %37 %38
            call %40 fn[39](%27, %31, %33, %34, %39, )
            get_field %41 %0.1
            int %42 0
            int %43 2
            shl %44 %4 %43
            set_mem %41[%44] %1
            ret_void
        :$5 
            unreachable
#180 = fn[149] fn(obj<hl.types.ArrayBytes_hl_F32>, i32, f32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  f32
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 i32
        %13 obj<hl.types.ArrayBytes_hl_F32>
        %14 f32
        %15 i32
        %16 i32
        %17 i32
        %18 bool
        %19 i32
        %20 f32
        %21 i32
        %22 obj<hl.types.ArrayBytes_hl_F32>
        %23 i32
        %24 i32
        %25 void
        %26 bytes
        %27 bytes
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 bytes
        %34 i32
        %35 i32
        %36 bytes
        %37 i32
        %38 i32
        %39 i32
        %40 i32
        %41 i32
        %42 i32
        %43 void
        %44 bytes
        %45 i32
        %46 i32
        %47 i32
        %48 obj<hl.types.ArrayBytes_hl_F32>
        %49 i32
        %50 i32
        %51 f32
        %52 i32
        %53 i32
        %54 bytes
        %55 bytes
        %56 i32
        %57 i32
        %58 i32
        %59 i32
        %60 bytes
        %61 bytes
        %62 i32
        %63 i32
        %64 bytes
        %65 i32
        %66 i32
        %67 i32
        %68 i32
        %69 i32
        %70 i32
        %71 void
        %72 bytes
        %73 i32
        %74 i32
        %75 i32
        %76 bool
        %77 i32
        %78 i32
        %79 i32
        %80 i32
        %81 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $9 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $8 $3
        :$3 
            int %10 0
            mov %11 %4
            j_always $4
        :$4 
            phi %12 [%8 $8], [%8 $3], [%75 $9], 
            phi %13 [%0 $8], [%0 $3], [%0 $9], 
            phi %14 [%2 $8], [%2 $3], [%2 $9], 
            phi %15 [%7 $8], [%11 $3], [%1 $9], 
            get_field %16 %13.0
            get_field %17 %13.2
            cmp ne %18 %4 %17
            j_true %18 $7 $5
        :$5 
            phi %19 [%79 $10], [%16 $4], 
            phi %20 [%2 $10], [%14 $4], 
            phi %21 [%78 $10], [%15 $4], 
            phi %22 [%0 $10], [%13 $4], 
            phi %23 [%80 $10], [%17 $4], 
            get_field %24 %22.0
            call %25 fn[170](%22, %4, )
            j_always $6
        :$6 
            get_field %26 %22.1
            get_field %27 %22.1
            int %28 1
            add %29 %21 %28
            int %30 2
            shl %31 %4 %30
            get_field %32 %22.1
            get_field %33 %22.1
            int %34 2
            shl %35 %21 %34
            get_field %36 %22.1
            get_field %37 %22.0
            sub %38 %37 %21
            int %39 1
            sub %40 %38 %39
            int %41 2
            shl %42 %40 %41
            call %43 fn[39](%26, %4, %32, %35, %42, )
            get_field %44 %22.1
            int %45 2
            shl %46 %21 %45
            set_mem %44[%46] %20
            ret_void
        :$7 
            phi %47 [%17 $4], [%80 $10], 
            phi %48 [%13 $4], [%0 $10], 
            phi %49 [%16 $4], [%79 $10], 
            phi %50 [%15 $4], [%78 $10], 
            phi %51 [%14 $4], [%2 $10], 
            get_field %52 %48.0
            incr %53 %4
            set_field %48.0 %4
            get_field %54 %48.1
            get_field %55 %48.1
            int %56 1
            add %57 %50 %56
            int %58 2
            shl %59 %4 %58
            get_field %60 %48.1
            get_field %61 %48.1
            int %62 2
            shl %63 %50 %62
            get_field %64 %48.1
            get_field %65 %48.0
            sub %66 %65 %50
            int %67 1
            sub %68 %66 %67
            int %69 2
            shl %70 %68 %69
            call %71 fn[39](%54, %4, %60, %63, %70, )
            get_field %72 %48.1
            int %73 2
            shl %74 %50 %73
            set_mem %72[%74] %51
            ret_void
        :$8 
            j_always $4
        :$9 
            get_field %75 %0.0
            cmp sge %76 %75 %1
            j_true %76 $4 $10
        :$10
            get_field %77 %0.0
            mov %78 %4
            get_field %79 %0.0
            get_field %80 %0.2
            cmp ne %81 %4 %80
            j_true %81 $7 $5
        :$11
            unreachable
#181 = fn[150] fn(obj<hl.types.ArrayBytes_hl_F32>, f32, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 f32
        %2 null<i32>
        %3 i32
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call %3 fn[152](%0, %1, %2, )
            int %4 -1
            cmp ne %5 %3 %5
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#182 = fn[151] fn(obj<hl.types.ArrayBytes_hl_F32>, f32, ) -> bool
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  f32
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  bool
        %7  i32
        %8  i32
        %9  bytes
        %10 bytes
        %11 i32
        %12 i32
        %13 bytes
        %14 bytes
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 bytes
        %20 i32
        %21 i32
        %22 i32
        %23 i32
        %24 void
        %25 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            null %2
            call %3 fn[152](%0, %1, %2, )
            int %4 0
            cmp sge %5 %3 %4
            j_true %5 $3 $2
        :$2 
            bool %6 false
            ret %6
        :$3 
            get_field %7 %0.0
            decr %8 %5
            set_field %0.0 %5
            get_field %9 %0.1
            get_field %10 %0.1
            int %11 2
            shl %12 %3 %11
            get_field %13 %0.1
            get_field %14 %0.1
            int %15 1
            add %16 %3 %15
            int %17 2
            shl %18 %16 %17
            get_field %19 %0.1
            get_field %20 %0.0
            sub %21 %20 %3
            int %22 2
            shl %23 %21 %22
            call %24 fn[39](%9, %5, %13, %18, %23, )
            bool %25 true
            ret %25
        :$4 
            unreachable
#183 = fn[152] fn(obj<hl.types.ArrayBytes_hl_F32>, f32, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  f32
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  null<i32>
        %7  i32
        %8  i32
        %9  f32
        %10 obj<hl.types.ArrayBytes_hl_F32>
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 bool
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 bool
        %21 i32
        %22 i32
        %23 f32
        %24 null<i32>
        %25 obj<hl.types.ArrayBytes_hl_F32>
        %26 i32
        %27 i32
        %28 i32
        %29 bytes
        %30 i32
        %31 i32
        %32 f32
        %33 bool
        %34 bool
        %35 obj<hl.types.ArrayBytes_hl_F32>
        %36 i32
        %37 i32
        %38 f32
        %39 null<i32>
        %40 i32
        %41 i32
        %42 null<i32>
        %43 i32
        %44 i32
        %45 obj<hl.types.ArrayBytes_hl_F32>
        %46 f32
        %47 i32
        %48 i32
        %49 bool
        %50 i32
        %51 i32
        %52 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            j_not_null %2 $12 $2
        :$2 
            int %3 0
            j_always $3
        :$3 
            int %4 0
            cmp sge %5 %3 %5
            j_true %5 $11 $4
        :$4 
            phi %6 [%2 $12], [%2 $3], 
            phi %7 [%51 $12], [%4 $3], 
            phi %8 [%50 $12], [%3 $3], 
            phi %9 [%1 $12], [%1 $3], 
            phi %10 [%0 $12], [%0 $3], 
            get_field %11 %10.0
            add %12 %8 %5
            mov %13 %12
            int %14 0
            cmp sge %15 %12 %5
            j_true %15 $11 $5
        :$5 
            int %16 0
            mov %17 %16
            mov %18 %17
            get_field %19 %10.0
            nop
            cmp sge %20 %18 %5
            j_true %20 $10 $6
        :$6 
            phi %21 [%21 $9], [%48 $11], [%19 $5], 
            phi %22 [%22 $9], [%43 $11], [%17 $5], 
            phi %23 [%23 $9], [%46 $11], [%9 $5], 
            phi %24 [%24 $9], [%42 $11], [%6 $5], 
            phi %25 [%25 $9], [%45 $11], [%10 $5], 
            phi %26 [%28 $9], [%47 $11], [%18 $5], 
            mov %27 %26
            incr %28 %26
            get_field %29 %25.1
            int %30 2
            shl %31 %27 %30
            get_mem %32 %29[%31]
            cmp ne %33 %32 %23
            j_true %33 $8 $7
        :$7 
            ret %27
        :$8 
            j_always $9
        :$9 
            nop
            cmp sge %34 %28 %5
            j_true %34 $10 $6
        :$10
            phi %35 [%45 $11], [%10 $5], [%25 $9], 
            phi %36 [%47 $11], [%18 $5], [%28 $9], 
            phi %37 [%43 $11], [%17 $5], [%22 $9], 
            phi %38 [%46 $11], [%9 $5], [%23 $9], 
            phi %39 [%42 $11], [%6 $5], [%24 $9], 
            phi %40 [%48 $11], [%19 $5], [%21 $9], 
            int %41 -1
            ret %41
        :$11
            phi %42 [%2 $12], [%6 $4], [%2 $3], 
            phi %43 [%50 $12], [%13 $4], [%3 $3], 
            phi %44 [%51 $12], [%14 $4], [%4 $3], 
            phi %45 [%0 $12], [%10 $4], [%0 $3], 
            phi %46 [%1 $12], [%9 $4], [%1 $3], 
            mov %47 %43
            get_field %48 %45.0
            nop
            cmp sge %49 %47 %5
            j_true %49 $10 $6
        :$12
            call_intrinsic %50 @eon.safe_cast(%2, )
            int %51 0
            cmp sge %52 %50 %5
            j_true %52 $11 $4
        :$13
            unreachable
#184 = fn[153] fn(obj<hl.types.ArrayBytes_hl_F32>, f32, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  f32
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  null<i32>
        %8  f32
        %9  i32
        %10 obj<hl.types.ArrayBytes_hl_F32>
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 obj<hl.types.ArrayBytes_hl_F32>
        %16 null<i32>
        %17 f32
        %18 i32
        %19 i32
        %20 i32
        %21 bool
        %22 i32
        %23 i32
        %24 i32
        %25 obj<hl.types.ArrayBytes_hl_F32>
        %26 null<i32>
        %27 f32
        %28 bytes
        %29 i32
        %30 i32
        %31 f32
        %32 bool
        %33 i32
        %34 i32
        %35 f32
        %36 obj<hl.types.ArrayBytes_hl_F32>
        %37 i32
        %38 i32
        %39 null<i32>
        %40 i32
        %41 null<i32>
        %42 f32
        %43 i32
        %44 obj<hl.types.ArrayBytes_hl_F32>
        %45 i32
        %46 i32
        %47 bool
        %48 i32
        %49 i32
        %50 i32
        %51 bool
        %52 i32
        %53 i32
        %54 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            j_null %2 $12 $2
        :$2 
            call_intrinsic %4 @eon.safe_cast(%2, )
            j_always $3
        :$3 
            cmp slt %5 %4 %3
            j_true %5 $10 $4
        :$4 
            phi %6 [%4 $3], [%53 $12], 
            phi %7 [%2 $3], [%2 $12], 
            phi %8 [%1 $3], [%1 $12], 
            phi %9 [%3 $3], [%3 $12], 
            phi %10 [%0 $3], [%0 $12], 
            int %11 1
            sub %12 %9 %11
            mov %13 %5
            j_always $5
        :$5 
            phi %14 [%30 $8], [%11 $4], [%46 $10], 
            phi %15 [%25 $8], [%10 $4], [%44 $10], 
            phi %16 [%26 $8], [%7 $4], [%41 $10], 
            phi %17 [%27 $8], [%8 $4], [%42 $10], 
            phi %18 [%33 $8], [%13 $4], [%45 $10], 
            phi %19 [%22 $8], [%9 $4], [%43 $10], 
            nop
            int %20 0
            cmp slt %21 %18 %20
            j_true %21 $9 $6
        :$6 
            phi %22 [%19 $5], [%43 $11], 
            phi %23 [%18 $5], [%49 $11], 
            phi %24 [%20 $5], [%50 $11], 
            phi %25 [%15 $5], [%44 $11], 
            phi %26 [%16 $5], [%41 $11], 
            phi %27 [%17 $5], [%42 $11], 
            get_field %28 %25.1
            int %29 2
            shl %30 %23 %29
            get_mem %31 %28[%30]
            cmp ne %32 %31 %27
            j_true %32 $8 $7
        :$7 
            ret %23
        :$8 
            decr %33 %23
            j_always $5
        :$9 
            phi %34 [%50 $11], [%20 $5], 
            phi %35 [%42 $11], [%17 $5], 
            phi %36 [%44 $11], [%15 $5], 
            phi %37 [%43 $11], [%19 $5], 
            phi %38 [%49 $11], [%18 $5], 
            phi %39 [%41 $11], [%16 $5], 
            int %40 -1
            ret %5
        :$10
            phi %41 [%2 $3], [%2 $12], 
            phi %42 [%1 $3], [%1 $12], 
            phi %43 [%3 $3], [%3 $12], 
            phi %44 [%0 $3], [%0 $12], 
            phi %45 [%4 $3], [%53 $12], 
            int %46 0
            cmp sge %47 %45 %46
            j_true %47 $5 $11
        :$11
            add %48 %45 %43
            mov %49 %5
            nop
            int %50 0
            cmp slt %51 %49 %50
            j_true %51 $9 $6
        :$12
            int %52 1
            sub %53 %3 %5
            cmp slt %54 %53 %3
            j_true %54 $10 $4
        :$13
            unreachable
#185 = fn[154] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<hl.types.ArrayBytes_hl_F32>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  obj<hl.types.ArrayBytes_hl_F32>
        %2  void
        %3  i32
        %4  bytes
        %5  i32
        %6  i32
        %7  i32
        %8  bytes
        %9  bytes
        %10 bytes
        %11 i32
        %12 bytes
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %1
            call %2 fn[171](%1, )
            get_field %3 %0.0
            set_field %1.2 %3
            set_field %1.0 %3
            get_field %4 %0.1
            get_field %5 %0.0
            int %6 2
            shl %7 %5 %6
            call %8 fn[36](%7, )
            set_field %1.1 %8
            get_field %9 %0.1
            get_field %10 %1.1
            int %11 0
            get_field %12 %0.1
            int %13 0
            get_field %14 %0.0
            int %15 2
            shl %16 %14 %15
            call %17 fn[39](%10, %11, %12, %13, %16, )
            ret %1
        :$2 
            unreachable
#186 = fn[155] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<haxe.iterators.ArrayIterator>
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 obj<hl.types.BytesIterator_hl_F32>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[366](%1, %0, )
            ret %1
        :$2
            unreachable
#187 = fn[156] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 obj<hl.types.BytesKeyValueIterator_hl_F32>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[369](%1, %0, )
            ret %1
        :$2
            unreachable
#188 = fn[157] fn(obj<hl.types.ArrayBytes_hl_F32>, fn(f32, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  fn(f32, ) -> dyn
        %2  obj<hl.types.ArrayObj>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  i32
        %8  i32
        %9  i32
        %10 void
        %11 i32
        %12 i32
        %13 bool
        %14 obj<hl.types.ArrayBytes_hl_F32>
        %15 void
        %16 fn(f32, ) -> dyn
        %17 obj<hl.types.ArrayObj>
        %18 i32
        %19 i32
        %20 i32
        %21 i32
        %22 void
        %23 array<void>
        %24 bytes
        %25 void
        %26 i32
        %27 i32
        %28 f32
        %29 dyn
        %30 bool
        %31 i32
        %32 obj<hl.types.ArrayBytes_hl_F32>
        %33 i32
        %34 void
        %35 fn(f32, ) -> dyn
        %36 obj<hl.types.ArrayObj>
        %37 bool
        %38 ref<bool>
        %39 obj<hl.types.ArrayDyn>
        %40 i32
        %41 i32
        %42 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[269](%2, )
            get_field %4 %0.0
            int %5 0
            cmp sge %6 %5 %4
            j_true %6 $6 $2
        :$2 
            get_field %7 %0.0
            int %8 1
            sub %9 %7 %8
            call %10 fn[92](%2, %9, )
            int %11 0
            get_field %12 %0.0
            nop
            cmp sge %13 %11 %12
            j_true %13 $5 $3
        :$3 
            phi %14 [%0 $2], [%14 $4], [%0 $6], 
            phi %15 [%10 $2], [%15 $4], [%3 $6], 
            phi %16 [%1 $2], [%16 $4], [%1 $6], 
            phi %17 [%2 $2], [%17 $4], [%2 $6], 
            phi %18 [%12 $2], [%18 $4], [%41 $6], 
            phi %19 [%11 $2], [%21 $4], [%40 $6], 
            mov %20 %19
            incr %21 %19
            call_intrinsic %22 @eon.null_check(%17, )
            get_field %23 %17.1
            get_field %24 %14.1
            call_intrinsic %25 @eon.null_check(%16, )
            int %26 2
            shl %27 %6 %26
            get_mem %28 %24[%27]
            call_closure %29 %16(%28, )
            set_array %23[%6] %29
            j_always $4
        :$4 
            nop
            cmp sge %30 %21 %18
            j_true %30 $5 $3
        :$5 
            phi %31 [%21 $4], [%11 $2], [%40 $6], 
            phi %32 [%14 $4], [%0 $2], [%0 $6], 
            phi %33 [%18 $4], [%12 $2], [%41 $6], 
            phi %34 [%15 $4], [%10 $2], [%3 $6], 
            phi %35 [%16 $4], [%1 $2], [%1 $6], 
            phi %36 [%17 $4], [%2 $2], [%2 $6], 
            bool %37 true
            ref %38 %13
            call %39 fn[343](%36, %38, )
            ret %39
        :$6 
            int %40 0
            get_field %41 %0.0
            nop
            cmp sge %42 %40 %41
            j_true %42 $5 $3
        :$7 
            unreachable
#189 = fn[158] fn(obj<hl.types.ArrayBytes_hl_F32>, fn(f32, ) -> bool, ) -> obj<hl.types.ArrayBytes_hl_F32>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  fn(f32, ) -> bool
        %2  obj<hl.types.ArrayBytes_hl_F32>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  void
        %8  obj<hl.types.ArrayBytes_hl_F32>
        %9  fn(f32, ) -> bool
        %10 obj<hl.types.ArrayBytes_hl_F32>
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 bytes
        %16 i32
        %17 i32
        %18 f32
        %19 void
        %20 bool
        %21 void
        %22 i32
        %23 obj<hl.types.ArrayBytes_hl_F32>
        %24 fn(f32, ) -> bool
        %25 i32
        %26 i32
        %27 void
        %28 bool
        %29 bytes
        %30 i32
        %31 f32
        %32 i32
        %33 obj<hl.types.ArrayBytes_hl_F32>
        %34 bool
        %35 obj<hl.types.ArrayBytes_hl_F32>
        %36 obj<hl.types.ArrayBytes_hl_F32>
        %37 i32
        %38 void
        %39 i32
        %40 fn(f32, ) -> bool
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[171](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%27 $4], [%3 $1], 
            phi %8 [%33 $4], [%0 $1], 
            phi %9 [%24 $4], [%1 $1], 
            phi %10 [%23 $4], [%2 $1], 
            phi %11 [%25 $4], [%5 $1], 
            phi %12 [%26 $4], [%4 $1], 
            mov %13 %12
            incr %14 %12
            get_field %15 %8.1
            int %16 2
            shl %17 %6 %16
            get_mem %18 %15[%17]
            call_intrinsic %19 @eon.null_check(%9, )
            call_closure %20 %9(%18, )
            j_false %20 $6 $3
        :$3 
            call_intrinsic %21 @eon.null_check(%10, )
            call %22 fn[140](%10, %18, )
            j_always $4
        :$4 
            phi %23 [%10 $6], [%10 $3], 
            phi %24 [%9 $6], [%9 $3], 
            phi %25 [%11 $6], [%11 $3], 
            phi %26 [%14 $6], [%14 $3], 
            phi %27 [%7 $6], [%7 $3], 
            phi %28 [%20 $6], [%20 $3], 
            phi %29 [%15 $6], [%15 $3], 
            phi %30 [%13 $6], [%13 $3], 
            phi %31 [%18 $6], [%18 $3], 
            phi %32 [%17 $6], [%17 $3], 
            phi %33 [%8 $6], [%8 $3], 
            nop
            cmp sge %34 %26 %25
            j_true %34 $5 $2
        :$5 
            phi %35 [%0 $1], [%33 $4], 
            phi %36 [%2 $1], [%23 $4], 
            phi %37 [%4 $1], [%26 $4], 
            phi %38 [%3 $1], [%27 $4], 
            phi %39 [%5 $1], [%25 $4], 
            phi %40 [%1 $1], [%24 $4], 
            ret %36
        :$6 
            j_always $4
        :$7 
            unreachable
#190 = fn[159] fn(obj<hl.types.ArrayBytes_hl_F32>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  i32
        %3  bool
        %4  i32
        %5  i32
        %6  void
        %7  obj<hl.types.ArrayBytes_hl_F32>
        %8  i32
        %9  i32
        %10 i32
        %11 bool
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 bytes
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 i32
        %22 void
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            cmp sge %3 %3 %1
            j_true %3 $4 $2
        :$2 
            int %4 1
            sub %5 %1 %4
            call %6 fn[170](%0, %3, )
            j_always $3
        :$3 
            phi %7 [%0 $2], [%0 $4], 
            phi %8 [%5 $2], [%10 $4], 
            phi %9 [%1 $2], [%1 $4], 
            ret_void
        :$4 
            get_field %10 %0.0
            cmp sge %11 %1 %3
            j_true %11 $3 $5
        :$5 
            get_field %12 %0.1
            get_field %13 %0.1
            int %14 2
            shl %15 %1 %14
            get_field %16 %0.1
            get_field %17 %0.0
            sub %18 %17 %1
            int %19 2
            shl %20 %18 %19
            int %21 0
            call %22 fn[253](%12, %3, %20, %21, )
            set_field %0.0 %1
            ret_void
        :$6 
            unreachable
#191 = fn[160] fn(obj<hl.types.ArrayBytes_hl_F32>, i32, ) -> dyn
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  i32
        %3  bool
        %4  bytes
        %5  f32
        %6  dyn
        %7  bytes
        %8  i32
        %9  i32
        %10 f32
        %11 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            cmp slt %3 %1 %2
            j_true %3 $3 $2
        :$2 
            get_field %4 %0.1
            float %5 0
            to_dyn %6 %5
            ret %6
        :$3 
            get_field %7 %0.1
            int %8 2
            shl %9 %1 %8
            get_mem %10 %3[%9]
            to_dyn %11 %10
            ret %11
        :$4 
            unreachable
#192 = fn[161] fn(obj<hl.types.ArrayBytes_hl_F32>, i32, dyn, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  dyn
        %3  i32
        %4  bool
        %5  void
        %6  bytes
        %7  f32
        %8  i32
        %9  i32
        %10 bytes
        %11 f32
        %12 i32
        %13 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            cmp slt %4 %1 %4
            j_true %4 $3 $2
        :$2 
            call %5 fn[170](%0, %1, )
            get_field %6 %0.1
            call_intrinsic %7 @eon.safe_cast(%2, )
            int %8 2
            shl %9 %1 %4
            set_mem %6[%4] %7
            ret_void
        :$3 
            get_field %10 %0.1
            call_intrinsic %11 @eon.safe_cast(%2, )
            int %12 2
            shl %13 %1 %4
            set_mem %10[%4] %11
            ret_void
        :$4 
            unreachable
#193 = fn[162] fn(obj<hl.types.ArrayBytes_hl_F32>, dyn, ) -> i32
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 dyn
        %2 f32
        %3 i32
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[140](%0, %2, )
            ret %3
        :$2
            unreachable
#194 = fn[163] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 null<f32>
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[139](%0, )
            ret %1
        :$2
            unreachable
#195 = fn[164] fn(obj<hl.types.ArrayBytes_hl_F32>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 null<f32>
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[142](%0, )
            ret %1
        :$2
            unreachable
#196 = fn[165] fn(obj<hl.types.ArrayBytes_hl_F32>, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 dyn
        %2 f32
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[148](%0, %2, )
            ret_void
        :$2
            unreachable
#197 = fn[166] fn(obj<hl.types.ArrayBytes_hl_F32>, i32, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 i32
        %2 dyn
        %3 f32
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[149](%0, %1, %3, )
            ret_void
        :$2
            unreachable
#198 = fn[167] fn(obj<hl.types.ArrayBytes_hl_F32>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 dyn
        %2 f32
        %3 bool
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[150](%0, %2, )
            ret %3
        :$2
            unreachable
#199 = fn[168] fn(obj<hl.types.ArrayBytes_hl_F32>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 dyn
        %2 f32
        %3 bool
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[151](%0, %2, )
            ret %3
        :$2
            unreachable
#200 = fn[370] fn(fn(dyn, dyn, ) -> i32, f32, f32, ) -> i32
    [Values]
        %0 fn(dyn, dyn, ) -> i32
        %1 f32
        %2 f32
        %3 dyn
        %4 dyn
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_dyn %3 %1
            to_dyn %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#201 = fn[169] fn(obj<hl.types.ArrayBytes_hl_F32>, fn(dyn, dyn, ) -> i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_F32>
        %1 fn(dyn, dyn, ) -> i32
        %2 fn(f32, f32, ) -> i32
        %3 void
        %4 fn(f32, f32, ) -> i32
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            j_not_null %1 $4 $2
        :$2
            null %2
            j_always $3
        :$3
            call %3 fn[145](%0, %2, )
            ret_void
        :$4
            instance_closure %4 fn[370] %1
            call %5 fn[145](%0, %4, )
            ret_void
        :$5
            unreachable
#202 = fn[170] fn(obj<hl.types.ArrayBytes_hl_F32>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_F32>
        %1  i32
        %2  i32
        %3  bool
        %4  obj<String>
        %5  i32
        %6  ref<i32>
        %7  bytes
        %8  obj<String>
        %9  obj<String>
        %10 dyn
        %11 void
        %12 i32
        %13 i32
        %14 i32
        %15 bool
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 bool
        %22 i32
        %23 bytes
        %24 i32
        %25 i32
        %26 bytes
        %27 bytes
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 i32
        %34 void
        %35 bytes
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 void
        %41 bytes
        %42 i32
        %43 i32
        %44 bytes
        %45 bytes
        %46 i32
        %47 i32
        %48 i32
        %49 i32
        %50 bytes
        %51 i32
        %52 void
        %53 bytes
        %54 i32
        %55 i32
        %56 i32
        %57 i32
        %58 void
    [Code]
        :$0 
            j_always $1
        :$1 
            int %2 0
            cmp sge %3 %1 %2
            j_true %3 $3 $2
        :$2 
            get_global %4 global[31]
            mov %5 %1
            ref %6 %3
            call %7 fn[35](%3, %6, )
            call %8 fn[16](%7, %3, )
            call %9 fn[20](%4, %8, )
            call %10 fn[34](%9, )
            invoke_intrinsic %11 @eon.throw(%10, ) cont $8 unwind $8
        :$3 
            int %12 1
            add %13 %1 %12
            get_field %14 %0.2
            cmp sge %15 %14 %3
            j_true %15 $7 $4
        :$4 
            get_field %16 %0.2
            int %17 3
            mul %18 %16 %17
            int %19 1
            sshr %20 %18 %19
            cmp sge %21 %20 %3
            j_true %21 $6 $5
        :$5 
            mov %22 %3
            get_field %23 %0.1
            int %24 2
            shl %25 %22 %24
            call %26 fn[36](%25, )
            get_field %27 %0.1
            get_field %28 %0.0
            int %29 2
            shl %30 %28 %29
            int %31 0
            get_field %32 %0.1
            int %33 0
            call %34 fn[39](%26, %31, %15, %33, %30, )
            get_field %35 %0.1
            int %36 2
            shl %37 %22 %36
            sub %38 %37 %30
            int %39 0
            call %40 fn[253](%26, %30, %38, %39, )
            set_field %0.1 %26
            set_field %0.2 %22
            set_field %0.0 %3
            ret_void
        :$6 
            get_field %41 %0.1
            int %42 2
            shl %43 %20 %42
            call %44 fn[36](%43, )
            get_field %45 %0.1
            get_field %46 %0.0
            int %47 2
            shl %48 %46 %47
            int %49 0
            get_field %50 %0.1
            int %51 0
            call %52 fn[39](%44, %49, %15, %51, %48, )
            get_field %53 %0.1
            int %54 2
            shl %55 %20 %54
            sub %56 %55 %48
            int %57 0
            call %58 fn[253](%44, %48, %56, %57, )
            set_field %0.1 %44
            set_field %0.2 %20
            set_field %0.0 %3
            ret_void
        :$7 
            set_field %0.0 %3
            ret_void
        :$8 
            unreachable
#203 = fn[371] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 i32
        %2 bytes
    [Code]
        :$0
            j_always $1
        :$1
            int %1 0
            set_field %0.0 %1
            set_field %0.2 %1
            null %2
            set_field %0.1 %2
            ret_void
        :$2
            unreachable
#204 = fn[172] fn(obj<hl.types.ArrayBytes_hl_UI16>, obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<hl.types.ArrayBytes_hl_UI16>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  obj<hl.types.ArrayBytes_hl_UI16>
        %2  obj<hl.types.ArrayBytes_hl_UI16>
        %3  void
        %4  i32
        %5  void
        %6  i32
        %7  i32
        %8  bytes
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 i32
        %17 bytes
        %18 i32
        %19 bytes
        %20 i32
        %21 void
        %22 bytes
        %23 bytes
        %24 bytes
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[371](%2, )
            get_field %4 %0.0
            call_intrinsic %5 @eon.null_check(%1, )
            get_field %6 %1.0
            add %7 %4 %6
            set_field %2.2 %7
            set_field %2.0 %7
            get_field %8 %0.1
            get_field %9 %2.0
            int %10 1
            shl %11 %9 %10
            call %12 fn[36](%11, )
            set_field %2.1 %12
            get_field %13 %0.1
            get_field %14 %0.0
            int %15 1
            shl %16 %14 %15
            get_field %17 %2.1
            int %18 0
            get_field %19 %0.1
            int %20 0
            call %21 fn[39](%17, %18, %19, %20, %16, )
            get_field %22 %0.1
            get_field %23 %2.1
            get_field %24 %1.1
            int %25 0
            get_field %26 %1.0
            int %27 1
            shl %28 %26 %27
            call %29 fn[39](%23, %16, %24, %25, %28, )
            ret %2
        :$2 
            unreachable
#205 = fn[173] fn(obj<hl.types.ArrayBytes_hl_UI16>, obj<String>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  obj<String>
        %2  obj<StringBuf>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  obj<StringBuf>
        %8  i32
        %9  obj<hl.types.ArrayBytes_hl_UI16>
        %10 i32
        %11 void
        %12 obj<String>
        %13 i32
        %14 i32
        %15 i32
        %16 bool
        %17 void
        %18 void
        %19 bytes
        %20 void
        %21 i32
        %22 i32
        %23 i32
        %24 u16
        %25 null<u16>
        %26 void
        %27 i32
        %28 i32
        %29 i32
        %30 obj<StringBuf>
        %31 i32
        %32 bytes
        %33 obj<hl.types.ArrayBytes_hl_UI16>
        %34 null<u16>
        %35 i32
        %36 obj<String>
        %37 u16
        %38 void
        %39 bool
        %40 obj<String>
        %41 obj<hl.types.ArrayBytes_hl_UI16>
        %42 i32
        %43 obj<StringBuf>
        %44 i32
        %45 void
        %46 void
        %47 obj<String>
        %48 bytes
        %49 void
        %50 i32
        %51 i32
        %52 i32
        %53 u16
        %54 null<u16>
        %55 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[245](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%30 $4], [%2 $1], 
            phi %8 [%27 $4], [%5 $1], 
            phi %9 [%33 $4], [%0 $1], 
            phi %10 [%35 $4], [%4 $1], 
            phi %11 [%38 $4], [%3 $1], 
            phi %12 [%36 $4], [%1 $1], 
            mov %13 %10
            incr %14 %10
            int %15 0
            cmp sge %16 %15 %6
            j_true %16 $6 $3
        :$3 
            call_intrinsic %17 @eon.null_check(%7, )
            call %18 fn[246](%7, %12, )
            get_field %19 %9.1
            call_intrinsic %20 @eon.null_check(%7, )
            int %21 1
            shl %22 %6 %21
            get_i16 %23 %19[%22]
            to_int %24 %23
            to_dyn %25 %24
            call %26 fn[246](%7, %25, )
            j_always $4
        :$4 
            phi %27 [%8 $3], [%8 $6], 
            phi %28 [%23 $3], [%52 $6], 
            phi %29 [%13 $3], [%13 $6], 
            phi %30 [%7 $3], [%7 $6], 
            phi %31 [%22 $3], [%51 $6], 
            phi %32 [%19 $3], [%48 $6], 
            phi %33 [%9 $3], [%9 $6], 
            phi %34 [%25 $3], [%54 $6], 
            phi %35 [%14 $3], [%14 $6], 
            phi %36 [%12 $3], [%12 $6], 
            phi %37 [%24 $3], [%53 $6], 
            phi %38 [%26 $3], [%55 $6], 
            nop
            cmp sge %39 %35 %27
            j_true %39 $5 $2
        :$5 
            phi %40 [%1 $1], [%36 $4], 
            phi %41 [%0 $1], [%33 $4], 
            phi %42 [%4 $1], [%35 $4], 
            phi %43 [%2 $1], [%30 $4], 
            phi %44 [%5 $1], [%27 $4], 
            phi %45 [%3 $1], [%38 $4], 
            call_intrinsic %46 @eon.null_check(%43, )
            call %47 fn[248](%43, )
            ret %47
        :$6 
            get_field %48 %9.1
            call_intrinsic %49 @eon.null_check(%7, )
            int %50 1
            shl %51 %6 %50
            get_i16 %52 %48[%51]
            to_int %53 %52
            to_dyn %54 %53
            call %55 fn[246](%7, %54, )
            j_always $4
        :$7 
            unreachable
#206 = fn[174] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> null<u16>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  i32
        %3  bool
        %4  null<u16>
        %5  i32
        %6  i32
        %7  bytes
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 u16
        %13 null<u16>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %2
            j_true %3 $3 $2
        :$2 
            null %4
            ret %3
        :$3 
            get_field %5 %0.0
            decr %6 %5
            set_field %0.0 %6
            get_field %7 %0.1
            get_field %8 %0.0
            int %9 1
            shl %10 %8 %9
            get_i16 %11 %7[%10]
            to_int %12 %11
            to_dyn %13 %12
            ret %3
        :$4 
            unreachable
#207 = fn[175] fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  u16
        %2  i32
        %3  i32
        %4  bool
        %5  void
        %6  bytes
        %7  i32
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 bytes
        %14 i32
        %15 i32
        %16 i32
        %17 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            get_field %3 %0.2
            cmp ne %4 %4 %2
            j_true %4 $4 $2
        :$2 
            call %5 fn[205](%0, %2, )
            j_always $3
        :$3 
            get_field %6 %0.1
            to_int %7 %1
            int %8 1
            shl %9 %2 %8
            set_i16 %6[%9] %7
            get_field %10 %0.0
            ret %4
        :$4 
            get_field %11 %0.0
            incr %12 %4
            set_field %0.0 %4
            get_field %13 %0.1
            to_int %14 %1
            int %15 1
            shl %16 %2 %15
            set_i16 %13[%16] %14
            get_field %17 %0.0
            ret %4
        :$5 
            unreachable
#208 = fn[176] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  i32
        %3  i32
        %4  i32
        %5  bool
        %6  obj<hl.types.ArrayBytes_hl_UI16>
        %7  i32
        %8  i32
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 bytes
        %17 i32
        %18 i32
        %19 i32
        %20 u16
        %21 bytes
        %22 bytes
        %23 i32
        %24 i32
        %25 i32
        %26 u16
        %27 i32
        %28 i32
        %29 i32
        %30 bytes
        %31 i32
        %32 i32
        %33 i32
        %34 bool
        %35 i32
        %36 i32
        %37 i32
        %38 obj<hl.types.ArrayBytes_hl_UI16>
    [Code]
        :$0 
            j_always $1
        :$1 
            int %1 0
            get_field %2 %0.0
            int %3 1
            sshr %4 %2 %3
            nop
            cmp sge %5 %1 %4
            j_true %5 $4 $2
        :$2 
            phi %6 [%6 $3], [%0 $1], 
            phi %7 [%7 $3], [%4 $1], 
            phi %8 [%11 $3], [%1 $1], 
            phi %9 [%10 $3], [%3 $1], 
            mov %10 %8
            incr %11 %8
            get_field %12 %6.0
            int %13 1
            sub %14 %5 %13
            sub %15 %5 %10
            get_field %16 %6.1
            int %17 1
            shl %18 %10 %17
            get_i16 %19 %16[%18]
            to_int %20 %19
            get_field %21 %6.1
            get_field %22 %6.1
            int %23 1
            shl %24 %5 %23
            get_i16 %25 %22[%24]
            to_int %26 %25
            to_int %27 %26
            int %28 1
            shl %29 %10 %28
            set_i16 %21[%29] %27
            get_field %30 %6.1
            to_int %31 %20
            int %32 1
            shl %33 %5 %32
            set_i16 %30[%33] %31
            j_always $3
        :$3 
            nop
            cmp sge %34 %11 %7
            j_true %34 $4 $2
        :$4 
            phi %35 [%11 $3], [%1 $1], 
            phi %36 [%10 $3], [%3 $1], 
            phi %37 [%7 $3], [%4 $1], 
            phi %38 [%6 $3], [%0 $1], 
            ret_void
        :$5 
            unreachable
#209 = fn[177] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> null<u16>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  i32
        %3  bool
        %4  null<u16>
        %5  bytes
        %6  i32
        %7  i32
        %8  i32
        %9  i32
        %10 u16
        %11 i32
        %12 i32
        %13 bytes
        %14 bytes
        %15 bytes
        %16 i32
        %17 i32
        %18 i32
        %19 bytes
        %20 i32
        %21 i32
        %22 i32
        %23 i32
        %24 void
        %25 null<u16>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %3
            j_true %3 $3 $2
        :$2 
            null %4
            ret %4
        :$3 
            get_field %5 %0.1
            int %6 0
            int %7 1
            shl %8 %6 %3
            get_i16 %9 %5[%3]
            to_int %10 %9
            get_field %11 %0.0
            decr %12 %11
            set_field %0.0 %12
            get_field %13 %0.1
            get_field %14 %0.1
            get_field %15 %0.1
            int %16 1
            int %17 1
            shl %18 %16 %3
            get_field %19 %0.1
            int %20 0
            get_field %21 %0.0
            int %22 1
            shl %23 %21 %22
            call %24 fn[39](%13, %3, %14, %18, %23, )
            to_dyn %25 %10
            ret %25
        :$4 
            unreachable
#210 = fn[178] fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  obj<hl.types.ArrayAccess>
        %3  i32
        %4  i32
        %5  obj<hl.types.ArrayBytes_hl_UI16>
        %6  i32
        %7  bool
        %8  i32
        %9  bool
        %10 i32
        %11 bool
        %12 i32
        %13 i32
        %14 bool
        %15 i32
        %16 void
        %17 i32
        %18 bool
        %19 i32
        %20 i32
        %21 obj<hl.types.ArrayBytes_hl_UI16>
        %22 i32
        %23 i32
        %24 obj<hl.types.ArrayBytes_hl_UI16>
        %25 obj<hl.types.ArrayAccess>
        %26 enum<haxe.io.Error>
        %27 dyn
        %28 void
        %29 bytes
        %30 bytes
        %31 i32
        %32 i32
        %33 bytes
        %34 bytes
        %35 i32
        %36 i32
        %37 bytes
        %38 i32
        %39 i32
        %40 void
    [Code]
        :$0 
            j_always $1
        :$1 
            call_intrinsic %5 @eon.safe_cast(%2, )
            int %6 0
            cmp slt %7 %1 %6
            j_true %7 $6 $2
        :$2 
            int %8 0
            cmp slt %9 %3 %8
            j_true %9 $6 $3
        :$3 
            int %10 0
            cmp slt %11 %4 %10
            j_true %11 $6 $4
        :$4 
            add %12 %1 %4
            get_field %13 %0.0
            cmp slt %14 %13 %7
            j_true %14 $6 $5
        :$5 
            add %15 %3 %4
            call_intrinsic %16 @eon.null_check(%5, )
            get_field %17 %5.0
            cmp sge %18 %17 %7
            j_true %18 $7 $6
        :$6 
            phi %19 [%6 $1], [%8 $2], [%10 $3], [%17 $5], [%13 $4], 
            phi %20 [%1 $1], [%1 $2], [%1 $3], [%1 $5], [%1 $4], 
            phi %21 [%5 $1], [%5 $2], [%5 $3], [%5 $5], [%5 $4], 
            phi %22 [%4 $1], [%4 $2], [%4 $3], [%4 $5], [%4 $4], 
            phi %23 [%3 $1], [%3 $2], [%3 $3], [%3 $5], [%3 $4], 
            phi %24 [%0 $1], [%0 $2], [%0 $3], [%0 $5], [%0 $4], 
            phi %25 [%2 $1], [%2 $2], [%2 $3], [%2 $5], [%2 $4], 
            get_global %26 global[28]
            call %27 fn[34](%26, )
            invoke_intrinsic %28 @eon.throw(%9, ) cont $8 unwind $8
        :$7 
            get_field %29 %0.1
            get_field %30 %0.1
            int %31 1
            shl %32 %1 %31
            get_field %33 %5.1
            get_field %34 %0.1
            int %35 1
            shl %36 %3 %35
            get_field %37 %0.1
            int %38 1
            shl %39 %4 %18
            call %40 fn[39](%11, %7, %33, %36, %39, )
            ret_void
        :$8 
            unreachable
#211 = fn[179] fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 null<i32>
        %13 i32
        %14 obj<hl.types.ArrayBytes_hl_UI16>
        %15 i32
        %16 i32
        %17 null<i32>
        %18 i32
        %19 i32
        %20 obj<hl.types.ArrayBytes_hl_UI16>
        %21 i32
        %22 i32
        %23 bool
        %24 obj<hl.types.ArrayBytes_hl_UI16>
        %25 null<i32>
        %26 i32
        %27 i32
        %28 i32
        %29 obj<hl.types.ArrayBytes_hl_UI16>
        %30 void
        %31 null<i32>
        %32 obj<hl.types.ArrayBytes_hl_UI16>
        %33 i32
        %34 i32
        %35 i32
        %36 obj<hl.types.ArrayBytes_hl_UI16>
        %37 void
        %38 bytes
        %39 bytes
        %40 i32
        %41 i32
        %42 bytes
        %43 i32
        %44 i32
        %45 bytes
        %46 i32
        %47 i32
        %48 null<i32>
        %49 obj<hl.types.ArrayBytes_hl_UI16>
        %50 i32
        %51 i32
        %52 bool
        %53 i32
        %54 i32
        %55 i32
        %56 bool
        %57 i32
        %58 i32
        %59 obj<hl.types.ArrayBytes_hl_UI16>
        %60 null<i32>
        %61 i32
        %62 i32
        %63 i32
        %64 i32
        %65 bool
        %66 i32
        %67 bool
        %68 i32
        %69 null<i32>
        %70 obj<hl.types.ArrayBytes_hl_UI16>
        %71 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $12 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $12 $3
        :$3 
            int %10 0
            mov %11 %4
            j_not_null %2 $8 $4
        :$4 
            phi %12 [%69 $12], [%2 $3], 
            phi %13 [%71 $12], [%8 $3], 
            phi %14 [%70 $12], [%0 $3], 
            phi %15 [%68 $12], [%11 $3], 
            get_field %16 %14.0
            j_always $5
        :$5 
            phi %17 [%48 $9], [%48 $11], [%12 $4], 
            phi %18 [%46 $9], [%46 $11], [%15 $4], 
            phi %19 [%54 $9], [%50 $11], [%16 $4], 
            phi %20 [%49 $9], [%49 $11], [%14 $4], 
            sub %21 %19 %18
            int %22 0
            cmp sge %23 %21 %22
            j_true %23 $7 $6
        :$6 
            phi %24 [%20 $5], [%59 $10], 
            phi %25 [%17 $5], [%60 $10], 
            phi %26 [%22 $5], [%64 $10], 
            phi %27 [%18 $5], [%57 $10], 
            phi %28 [%21 $5], [%63 $10], 
            new %29
            call %30 fn[371](%29, )
            ret %29
        :$7 
            phi %31 [%17 $5], [%60 $10], 
            phi %32 [%20 $5], [%59 $10], 
            phi %33 [%18 $5], [%57 $10], 
            phi %34 [%21 $5], [%63 $10], 
            phi %35 [%22 $5], [%64 $10], 
            new %36
            call %37 fn[371](%36, )
            set_field %36.2 %34
            set_field %36.0 %34
            get_field %38 %32.1
            get_field %39 %32.1
            int %40 1
            shl %41 %33 %40
            get_field %42 %32.1
            int %43 1
            shl %44 %34 %43
            call %45 fn[256](%9, %41, %44, )
            set_field %36.1 %45
            ret %36
        :$8 
            phi %46 [%11 $3], [%68 $12], 
            phi %47 [%8 $3], [%71 $12], 
            phi %48 [%2 $3], [%69 $12], 
            phi %49 [%0 $3], [%70 $12], 
            call_intrinsic %50 @eon.safe_cast(%48, )
            int %51 0
            cmp sge %52 %50 %51
            j_true %52 $11 $9
        :$9 
            get_field %53 %49.0
            add %54 %50 %53
            get_field %55 %49.0
            cmp sge %56 %55 %54
            j_true %56 $5 $10
        :$10
            phi %57 [%46 $11], [%46 $9], 
            phi %58 [%50 $11], [%54 $9], 
            phi %59 [%49 $11], [%49 $9], 
            phi %60 [%48 $11], [%48 $9], 
            phi %61 [%66 $11], [%55 $9], 
            get_field %62 %59.0
            sub %63 %62 %57
            int %64 0
            cmp sge %65 %63 %64
            j_true %65 $7 $6
        :$11
            get_field %66 %49.0
            cmp sge %67 %66 %50
            j_true %67 $5 $10
        :$12
            phi %68 [%7 $2], [%1 $1], 
            phi %69 [%2 $2], [%2 $1], 
            phi %70 [%0 $2], [%0 $1], 
            phi %71 [%8 $2], [%3 $1], 
            j_not_null %69 $8 $4
        :$13
            unreachable
#212 = fn[372] fn(fn(u16, u16, ) -> i32, i32, i32, ) -> i32
    [Values]
        %0 fn(u16, u16, ) -> i32
        %1 i32
        %2 i32
        %3 u16
        %4 u16
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_int %3 %1
            to_int %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#213 = fn[373] fn(fn(u16, u16, ) -> i32, f64, f64, ) -> i32
    [Values]
        %0 fn(u16, u16, ) -> i32
        %1 f64
        %2 f64
        %3 u16
        %4 u16
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_int %3 %1
            to_int %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#214 = fn[180] fn(obj<hl.types.ArrayBytes_hl_UI16>, fn(u16, u16, ) -> i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  fn(u16, u16, ) -> i32
        %2  type
        %3  type
        %4  bool
        %5  bytes
        %6  i32
        %7  i32
        %8  fn(i32, i32, ) -> i32
        %9  void
        %10 fn(i32, i32, ) -> i32
        %11 void
        %12 i32
        %13 fn(u16, u16, ) -> i32
        %14 type
        %15 type
        %16 i32
        %17 obj<hl.types.ArrayBytes_hl_UI16>
        %18 bytes
        %19 fn(i32, i32, ) -> i32
        %20 void
        %21 bytes
        %22 i32
        %23 i32
        %24 fn(f64, f64, ) -> i32
        %25 void
        %26 fn(f64, f64, ) -> i32
        %27 void
    [Code]
        :$0 
            j_always $1
        :$1 
            type %2 type[2]
            type %3 type[3]
            cmp ne %4 %2 %4
            j_true %4 $7 $2
        :$2 
            get_field %5 %0.1
            int %6 0
            get_field %7 %0.0
            j_not_null %1 $6 $3
        :$3 
            null %8
            j_always $4
        :$4 
            call %9 fn[254](%5, %6, %7, %8, )
            j_always $5
        :$5 
            phi %10 [%19 $6], [%8 $4], 
            phi %11 [%20 $6], [%9 $4], 
            phi %12 [%7 $6], [%7 $4], 
            phi %13 [%1 $6], [%1 $4], 
            phi %14 [%2 $6], [%2 $4], 
            phi %15 [%3 $6], [%3 $4], 
            phi %16 [%6 $6], [%6 $4], 
            phi %17 [%0 $6], [%0 $4], 
            phi %18 [%5 $6], [%5 $4], 
            ret_void
        :$6 
            instance_closure %19 fn[372] %1
            call %20 fn[254](%5, %6, %7, %19, )
            j_always $5
        :$7 
            get_field %21 %0.1
            int %22 0
            get_field %23 %0.0
            j_not_null %1 $10 $8
        :$8 
            null %24
            j_always $9
        :$9 
            call %25 fn[255](%21, %22, %23, %24, )
            ret_void
        :$10
            instance_closure %26 fn[373] %1
            call %27 fn[255](%21, %22, %23, %26, )
            ret_void
        :$11
            unreachable
#215 = fn[181] fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, i32, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  i32
        %3  i32
        %4  bool
        %5  obj<hl.types.ArrayBytes_hl_UI16>
        %6  void
        %7  i32
        %8  bool
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 bool
        %14 i32
        %15 i32
        %16 i32
        %17 bool
        %18 i32
        %19 i32
        %20 i32
        %21 obj<hl.types.ArrayBytes_hl_UI16>
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 i32
        %30 obj<hl.types.ArrayBytes_hl_UI16>
        %31 i32
        %32 bool
        %33 i32
        %34 i32
        %35 obj<hl.types.ArrayBytes_hl_UI16>
        %36 i32
        %37 i32
        %38 obj<hl.types.ArrayBytes_hl_UI16>
        %39 void
        %40 obj<hl.types.ArrayBytes_hl_UI16>
        %41 i32
        %42 i32
        %43 i32
        %44 i32
        %45 obj<hl.types.ArrayBytes_hl_UI16>
        %46 void
        %47 bytes
        %48 bytes
        %49 i32
        %50 i32
        %51 bytes
        %52 i32
        %53 i32
        %54 bytes
        %55 i32
        %56 bytes
        %57 bytes
        %58 i32
        %59 i32
        %60 bytes
        %61 bytes
        %62 i32
        %63 i32
        %64 bytes
        %65 i32
        %66 i32
        %67 i32
        %68 i32
        %69 void
        %70 i32
        %71 i32
        %72 obj<hl.types.ArrayBytes_hl_UI16>
        %73 i32
        %74 i32
        %75 i32
        %76 i32
        %77 i32
        %78 bool
        %79 i32
        %80 i32
        %81 i32
        %82 i32
        %83 bool
        %84 i32
        %85 i32
        %86 i32
        %87 bool
        %88 i32
        %89 obj<hl.types.ArrayBytes_hl_UI16>
        %90 i32
        %91 i32
        %92 i32
        %93 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %2 %3
            j_true %4 $3 $2
        :$2 
            new %5
            call %6 fn[371](%5, )
            ret %5
        :$3 
            int %7 0
            cmp sge %8 %1 %7
            j_true %8 $13 $4
        :$4 
            get_field %9 %0.0
            add %10 %4 %1
            mov %11 %4
            int %12 0
            cmp sge %13 %4 %12
            j_true %13 $13 $5
        :$5 
            int %14 0
            mov %15 %4
            get_field %16 %0.0
            cmp sge %17 %16 %15
            j_true %17 $10 $6
        :$6 
            phi %18 [%90 $13], [%2 $5], 
            phi %19 [%92 $13], [%16 $5], 
            phi %20 [%88 $13], [%15 $5], 
            phi %21 [%89 $13], [%0 $5], 
            int %22 0
            mov %23 %4
            int %24 0
            mov %25 %4
            j_always $7
        :$7 
            phi %26 [%19 $6], [%82 $11], [%77 $10], 
            phi %27 [%23 $6], [%74 $11], [%74 $10], 
            phi %28 [%25 $6], [%81 $11], [%75 $10], 
            phi %29 [%24 $6], [%80 $11], [%76 $10], 
            phi %30 [%21 $6], [%72 $11], [%72 $10], 
            int %31 0
            cmp ne %32 %28 %31
            j_true %32 $9 $8
        :$8 
            phi %33 [%29 $7], [%84 $12], 
            phi %34 [%31 $7], [%86 $12], 
            phi %35 [%30 $7], [%72 $12], 
            phi %36 [%28 $7], [%85 $12], 
            phi %37 [%27 $7], [%74 $12], 
            new %38
            call %39 fn[371](%38, )
            ret %38
        :$9 
            phi %40 [%72 $12], [%30 $7], 
            phi %41 [%86 $12], [%31 $7], 
            phi %42 [%74 $12], [%27 $7], 
            phi %43 [%84 $12], [%29 $7], 
            phi %44 [%85 $12], [%28 $7], 
            new %45
            call %46 fn[371](%45, )
            get_field %47 %40.1
            get_field %48 %40.1
            int %49 1
            shl %50 %42 %49
            get_field %51 %40.1
            int %52 1
            shl %53 %44 %52
            call %54 fn[256](%47, %4, %53, )
            set_field %45.1 %54
            set_field %45.0 %44
            set_field %45.2 %44
            add %55 %42 %44
            get_field %56 %40.1
            get_field %57 %40.1
            int %58 1
            shl %59 %42 %58
            get_field %60 %40.1
            get_field %61 %40.1
            int %62 1
            shl %63 %55 %62
            get_field %64 %40.1
            get_field %65 %40.0
            sub %66 %65 %55
            int %67 1
            shl %68 %66 %67
            call %69 fn[39](%56, %59, %60, %63, %68, )
            get_field %70 %40.0
            sub %71 %70 %44
            set_field %40.0 %71
            ret %45
        :$10
            phi %72 [%0 $5], [%89 $13], 
            phi %73 [%16 $5], [%92 $13], 
            phi %74 [%15 $5], [%88 $13], 
            phi %75 [%2 $5], [%90 $13], 
            add %76 %74 %75
            get_field %77 %72.0
            cmp sge %78 %77 %4
            j_true %78 $7 $11
        :$11
            get_field %79 %72.0
            sub %80 %4 %74
            mov %81 %4
            int %82 0
            cmp sge %83 %4 %82
            j_true %83 $7 $12
        :$12
            int %84 0
            mov %85 %4
            int %86 0
            cmp ne %87 %85 %86
            j_true %87 $9 $8
        :$13
            phi %88 [%1 $3], [%11 $4], 
            phi %89 [%0 $3], [%0 $4], 
            phi %90 [%2 $3], [%2 $4], 
            phi %91 [%7 $3], [%12 $4], 
            get_field %92 %89.0
            cmp sge %93 %92 %88
            j_true %93 $10 $6
        :$14
            unreachable
#216 = fn[182] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  obj<StringBuf>
        %2  void
        %3  i32
        %4  void
        %5  i32
        %6  i32
        %7  bool
        %8  obj<hl.types.ArrayBytes_hl_UI16>
        %9  i32
        %10 obj<StringBuf>
        %11 i32
        %12 void
        %13 i32
        %14 i32
        %15 i32
        %16 bool
        %17 void
        %18 i32
        %19 void
        %20 bytes
        %21 void
        %22 i32
        %23 i32
        %24 i32
        %25 u16
        %26 null<u16>
        %27 void
        %28 obj<hl.types.ArrayBytes_hl_UI16>
        %29 obj<StringBuf>
        %30 i32
        %31 i32
        %32 u16
        %33 i32
        %34 i32
        %35 void
        %36 bytes
        %37 null<u16>
        %38 i32
        %39 bool
        %40 void
        %41 i32
        %42 obj<hl.types.ArrayBytes_hl_UI16>
        %43 i32
        %44 obj<StringBuf>
        %45 void
        %46 i32
        %47 void
        %48 obj<String>
        %49 bytes
        %50 void
        %51 i32
        %52 i32
        %53 i32
        %54 u16
        %55 null<u16>
        %56 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %1
            call %2 fn[245](%1, )
            int %3 91
            call %4 fn[247](%1, %3, )
            int %5 0
            get_field %6 %0.0
            nop
            cmp sge %7 %5 %6
            j_true %7 $5 $2
        :$2 
            phi %8 [%28 $4], [%0 $1], 
            phi %9 [%38 $4], [%5 $1], 
            phi %10 [%29 $4], [%1 $1], 
            phi %11 [%31 $4], [%6 $1], 
            phi %12 [%35 $4], [%4 $1], 
            mov %13 %9
            incr %14 %9
            int %15 0
            cmp sge %16 %7 %13
            j_true %16 $6 $3
        :$3 
            call_intrinsic %17 @eon.null_check(%10, )
            int %18 44
            call %19 fn[247](%10, %18, )
            get_field %20 %8.1
            call_intrinsic %21 @eon.null_check(%10, )
            int %22 1
            shl %23 %13 %7
            get_i16 %24 %20[%7]
            to_int %25 %24
            to_dyn %26 %25
            call %27 fn[246](%10, %26, )
            j_always $4
        :$4 
            phi %28 [%8 $6], [%8 $3], 
            phi %29 [%10 $6], [%10 $3], 
            phi %30 [%13 $6], [%13 $3], 
            phi %31 [%11 $6], [%11 $3], 
            phi %32 [%54 $6], [%25 $3], 
            phi %33 [%53 $6], [%24 $3], 
            phi %34 [%52 $6], [%23 $3], 
            phi %35 [%56 $6], [%27 $3], 
            phi %36 [%49 $6], [%20 $3], 
            phi %37 [%55 $6], [%26 $3], 
            phi %38 [%14 $6], [%14 $3], 
            nop
            cmp sge %39 %38 %31
            j_true %39 $5 $2
        :$5 
            phi %40 [%4 $1], [%35 $4], 
            phi %41 [%5 $1], [%38 $4], 
            phi %42 [%0 $1], [%28 $4], 
            phi %43 [%6 $1], [%31 $4], 
            phi %44 [%1 $1], [%29 $4], 
            call_intrinsic %45 @eon.null_check(%44, )
            int %46 93
            call %47 fn[247](%44, %46, )
            call %48 fn[248](%44, )
            ret %48
        :$6 
            get_field %49 %8.1
            call_intrinsic %50 @eon.null_check(%10, )
            int %51 1
            shl %52 %13 %7
            get_i16 %53 %49[%7]
            to_int %54 %53
            to_dyn %55 %54
            call %56 fn[246](%10, %55, )
            j_always $4
        :$7 
            unreachable
#217 = fn[183] fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  u16
        %2  i32
        %3  i32
        %4  bool
        %5  i32
        %6  void
        %7  bytes
        %8  bytes
        %9  i32
        %10 i32
        %11 i32
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 void
        %21 bytes
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 i32
        %27 i32
        %28 bytes
        %29 bytes
        %30 i32
        %31 i32
        %32 i32
        %33 bytes
        %34 bytes
        %35 i32
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 i32
        %41 void
        %42 bytes
        %43 i32
        %44 i32
        %45 i32
        %46 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            get_field %3 %0.2
            cmp ne %4 %2 %4
            j_true %4 $4 $2
        :$2 
            get_field %5 %0.0
            call %6 fn[205](%0, %5, )
            j_always $3
        :$3 
            get_field %7 %0.1
            get_field %8 %0.1
            int %9 1
            int %10 1
            shl %11 %9 %4
            get_field %12 %0.1
            get_field %13 %0.1
            int %14 0
            get_field %15 %0.0
            int %16 1
            sub %17 %15 %16
            int %18 1
            shl %19 %17 %18
            call %20 fn[39](%7, %11, %13, %14, %19, )
            get_field %21 %0.1
            int %22 0
            to_int %23 %1
            int %24 1
            shl %25 %4 %24
            set_i16 %21[%25] %23
            ret_void
        :$4 
            get_field %26 %0.0
            incr %27 %26
            set_field %0.0 %27
            get_field %28 %0.1
            get_field %29 %0.1
            int %30 1
            int %31 1
            shl %32 %30 %4
            get_field %33 %0.1
            get_field %34 %0.1
            int %35 0
            get_field %36 %0.0
            int %37 1
            sub %38 %36 %37
            int %39 1
            shl %40 %38 %39
            call %41 fn[39](%28, %32, %34, %35, %40, )
            get_field %42 %0.1
            int %43 0
            to_int %44 %1
            int %45 1
            shl %46 %4 %45
            set_i16 %42[%46] %44
            ret_void
        :$5 
            unreachable
#218 = fn[184] fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, u16, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  u16
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 u16
        %15 obj<hl.types.ArrayBytes_hl_UI16>
        %16 i32
        %17 i32
        %18 bool
        %19 obj<hl.types.ArrayBytes_hl_UI16>
        %20 i32
        %21 i32
        %22 i32
        %23 u16
        %24 i32
        %25 void
        %26 bytes
        %27 bytes
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 bytes
        %34 i32
        %35 i32
        %36 bytes
        %37 i32
        %38 i32
        %39 i32
        %40 i32
        %41 i32
        %42 i32
        %43 void
        %44 bytes
        %45 i32
        %46 i32
        %47 i32
        %48 i32
        %49 i32
        %50 obj<hl.types.ArrayBytes_hl_UI16>
        %51 u16
        %52 i32
        %53 i32
        %54 i32
        %55 bytes
        %56 bytes
        %57 i32
        %58 i32
        %59 i32
        %60 i32
        %61 bytes
        %62 bytes
        %63 i32
        %64 i32
        %65 bytes
        %66 i32
        %67 i32
        %68 i32
        %69 i32
        %70 i32
        %71 i32
        %72 void
        %73 bytes
        %74 i32
        %75 i32
        %76 i32
        %77 i32
        %78 bool
        %79 i32
        %80 i32
        %81 i32
        %82 i32
        %83 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $9 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $8 $3
        :$3 
            int %10 0
            mov %11 %4
            j_always $4
        :$4 
            phi %12 [%8 $8], [%8 $3], [%77 $9], 
            phi %13 [%7 $8], [%11 $3], [%1 $9], 
            phi %14 [%2 $8], [%2 $3], [%2 $9], 
            phi %15 [%0 $8], [%0 $3], [%0 $9], 
            get_field %16 %15.0
            get_field %17 %15.2
            cmp ne %18 %4 %17
            j_true %18 $7 $5
        :$5 
            phi %19 [%0 $10], [%15 $4], 
            phi %20 [%80 $10], [%13 $4], 
            phi %21 [%81 $10], [%16 $4], 
            phi %22 [%82 $10], [%17 $4], 
            phi %23 [%2 $10], [%14 $4], 
            get_field %24 %19.0
            call %25 fn[205](%19, %4, )
            j_always $6
        :$6 
            get_field %26 %19.1
            get_field %27 %19.1
            int %28 1
            add %29 %20 %28
            int %30 1
            shl %31 %4 %30
            get_field %32 %19.1
            get_field %33 %19.1
            int %34 1
            shl %35 %20 %34
            get_field %36 %19.1
            get_field %37 %19.0
            sub %38 %37 %20
            int %39 1
            sub %40 %38 %39
            int %41 1
            shl %42 %40 %41
            call %43 fn[39](%26, %4, %32, %35, %42, )
            get_field %44 %19.1
            to_int %45 %23
            int %46 1
            shl %47 %20 %46
            set_i16 %44[%47] %45
            ret_void
        :$7 
            phi %48 [%81 $10], [%16 $4], 
            phi %49 [%82 $10], [%17 $4], 
            phi %50 [%0 $10], [%15 $4], 
            phi %51 [%2 $10], [%14 $4], 
            phi %52 [%80 $10], [%13 $4], 
            get_field %53 %50.0
            incr %54 %4
            set_field %50.0 %4
            get_field %55 %50.1
            get_field %56 %50.1
            int %57 1
            add %58 %52 %57
            int %59 1
            shl %60 %4 %59
            get_field %61 %50.1
            get_field %62 %50.1
            int %63 1
            shl %64 %52 %63
            get_field %65 %50.1
            get_field %66 %50.0
            sub %67 %66 %52
            int %68 1
            sub %69 %67 %68
            int %70 1
            shl %71 %69 %70
            call %72 fn[39](%55, %4, %61, %64, %71, )
            get_field %73 %50.1
            to_int %74 %51
            int %75 1
            shl %76 %52 %75
            set_i16 %73[%76] %74
            ret_void
        :$8 
            j_always $4
        :$9 
            get_field %77 %0.0
            cmp sge %78 %77 %1
            j_true %78 $4 $10
        :$10
            get_field %79 %0.0
            mov %80 %4
            get_field %81 %0.0
            get_field %82 %0.2
            cmp ne %83 %4 %82
            j_true %83 $7 $5
        :$11
            unreachable
#219 = fn[185] fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 u16
        %2 null<i32>
        %3 i32
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call %3 fn[187](%0, %1, %2, )
            int %4 -1
            cmp ne %5 %3 %5
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#220 = fn[186] fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, ) -> bool
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  u16
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  bool
        %7  i32
        %8  i32
        %9  bytes
        %10 bytes
        %11 i32
        %12 i32
        %13 bytes
        %14 bytes
        %15 i32
        %16 i32
        %17 i32
        %18 i32
        %19 bytes
        %20 i32
        %21 i32
        %22 i32
        %23 i32
        %24 void
        %25 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            null %2
            call %3 fn[187](%0, %1, %2, )
            int %4 0
            cmp sge %5 %3 %4
            j_true %5 $3 $2
        :$2 
            bool %6 false
            ret %6
        :$3 
            get_field %7 %0.0
            decr %8 %5
            set_field %0.0 %5
            get_field %9 %0.1
            get_field %10 %0.1
            int %11 1
            shl %12 %3 %11
            get_field %13 %0.1
            get_field %14 %0.1
            int %15 1
            add %16 %3 %15
            int %17 1
            shl %18 %16 %17
            get_field %19 %0.1
            get_field %20 %0.0
            sub %21 %20 %3
            int %22 1
            shl %23 %21 %22
            call %24 fn[39](%9, %5, %13, %18, %23, )
            bool %25 true
            ret %25
        :$4 
            unreachable
#221 = fn[187] fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  u16
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  obj<hl.types.ArrayBytes_hl_UI16>
        %7  i32
        %8  u16
        %9  null<i32>
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 bool
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 bool
        %21 obj<hl.types.ArrayBytes_hl_UI16>
        %22 null<i32>
        %23 u16
        %24 i32
        %25 i32
        %26 i32
        %27 i32
        %28 i32
        %29 bytes
        %30 i32
        %31 i32
        %32 i32
        %33 u16
        %34 bool
        %35 bool
        %36 u16
        %37 i32
        %38 null<i32>
        %39 obj<hl.types.ArrayBytes_hl_UI16>
        %40 i32
        %41 i32
        %42 i32
        %43 obj<hl.types.ArrayBytes_hl_UI16>
        %44 i32
        %45 u16
        %46 i32
        %47 null<i32>
        %48 i32
        %49 i32
        %50 bool
        %51 i32
        %52 i32
        %53 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            j_not_null %2 $12 $2
        :$2 
            int %3 0
            j_always $3
        :$3 
            int %4 0
            cmp sge %5 %3 %5
            j_true %5 $11 $4
        :$4 
            phi %6 [%0 $12], [%0 $3], 
            phi %7 [%52 $12], [%4 $3], 
            phi %8 [%1 $12], [%1 $3], 
            phi %9 [%2 $12], [%2 $3], 
            phi %10 [%51 $12], [%3 $3], 
            get_field %11 %6.0
            add %12 %10 %5
            mov %13 %12
            int %14 0
            cmp sge %15 %12 %5
            j_true %15 $11 $5
        :$5 
            int %16 0
            mov %17 %16
            mov %18 %17
            get_field %19 %6.0
            nop
            cmp sge %20 %18 %5
            j_true %20 $10 $6
        :$6 
            phi %21 [%43 $11], [%6 $5], [%21 $9], 
            phi %22 [%47 $11], [%9 $5], [%22 $9], 
            phi %23 [%45 $11], [%8 $5], [%23 $9], 
            phi %24 [%44 $11], [%17 $5], [%24 $9], 
            phi %25 [%48 $11], [%18 $5], [%28 $9], 
            phi %26 [%49 $11], [%19 $5], [%26 $9], 
            mov %27 %25
            incr %28 %25
            get_field %29 %21.1
            int %30 1
            shl %31 %27 %30
            get_i16 %32 %29[%31]
            to_int %33 %32
            cmp ne %34 %33 %23
            j_true %34 $8 $7
        :$7 
            ret %27
        :$8 
            j_always $9
        :$9 
            nop
            cmp sge %35 %28 %5
            j_true %35 $10 $6
        :$10
            phi %36 [%23 $9], [%45 $11], [%8 $5], 
            phi %37 [%28 $9], [%48 $11], [%18 $5], 
            phi %38 [%22 $9], [%47 $11], [%9 $5], 
            phi %39 [%21 $9], [%43 $11], [%6 $5], 
            phi %40 [%24 $9], [%44 $11], [%17 $5], 
            phi %41 [%26 $9], [%49 $11], [%19 $5], 
            int %42 -1
            ret %42
        :$11
            phi %43 [%0 $12], [%6 $4], [%0 $3], 
            phi %44 [%51 $12], [%13 $4], [%3 $3], 
            phi %45 [%1 $12], [%8 $4], [%1 $3], 
            phi %46 [%52 $12], [%14 $4], [%4 $3], 
            phi %47 [%2 $12], [%9 $4], [%2 $3], 
            mov %48 %44
            get_field %49 %43.0
            nop
            cmp sge %50 %48 %5
            j_true %50 $10 $6
        :$12
            call_intrinsic %51 @eon.safe_cast(%2, )
            int %52 0
            cmp sge %53 %51 %5
            j_true %53 $11 $4
        :$13
            unreachable
#222 = fn[188] fn(obj<hl.types.ArrayBytes_hl_UI16>, u16, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  u16
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  null<i32>
        %8  obj<hl.types.ArrayBytes_hl_UI16>
        %9  i32
        %10 u16
        %11 i32
        %12 i32
        %13 i32
        %14 u16
        %15 null<i32>
        %16 i32
        %17 i32
        %18 obj<hl.types.ArrayBytes_hl_UI16>
        %19 i32
        %20 i32
        %21 bool
        %22 obj<hl.types.ArrayBytes_hl_UI16>
        %23 i32
        %24 i32
        %25 null<i32>
        %26 i32
        %27 u16
        %28 bytes
        %29 i32
        %30 i32
        %31 i32
        %32 u16
        %33 bool
        %34 i32
        %35 i32
        %36 null<i32>
        %37 i32
        %38 u16
        %39 i32
        %40 obj<hl.types.ArrayBytes_hl_UI16>
        %41 i32
        %42 i32
        %43 u16
        %44 i32
        %45 null<i32>
        %46 obj<hl.types.ArrayBytes_hl_UI16>
        %47 i32
        %48 bool
        %49 i32
        %50 i32
        %51 i32
        %52 bool
        %53 i32
        %54 i32
        %55 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            j_null %2 $12 $2
        :$2 
            call_intrinsic %4 @eon.safe_cast(%2, )
            j_always $3
        :$3 
            cmp slt %5 %4 %3
            j_true %5 $10 $4
        :$4 
            phi %6 [%3 $3], [%3 $12], 
            phi %7 [%2 $3], [%2 $12], 
            phi %8 [%0 $3], [%0 $12], 
            phi %9 [%4 $3], [%54 $12], 
            phi %10 [%1 $3], [%1 $12], 
            int %11 1
            sub %12 %6 %11
            mov %13 %5
            j_always $5
        :$5 
            phi %14 [%43 $10], [%10 $4], [%27 $8], 
            phi %15 [%45 $10], [%7 $4], [%25 $8], 
            phi %16 [%44 $10], [%6 $4], [%24 $8], 
            phi %17 [%42 $10], [%13 $4], [%34 $8], 
            phi %18 [%46 $10], [%8 $4], [%22 $8], 
            phi %19 [%47 $10], [%11 $4], [%30 $8], 
            nop
            int %20 0
            cmp slt %21 %17 %20
            j_true %21 $9 $6
        :$6 
            phi %22 [%18 $5], [%46 $11], 
            phi %23 [%17 $5], [%50 $11], 
            phi %24 [%16 $5], [%44 $11], 
            phi %25 [%15 $5], [%45 $11], 
            phi %26 [%20 $5], [%51 $11], 
            phi %27 [%14 $5], [%43 $11], 
            get_field %28 %22.1
            int %29 1
            shl %30 %23 %29
            get_i16 %31 %28[%30]
            to_int %32 %5
            cmp ne %33 %32 %27
            j_true %33 $8 $7
        :$7 
            ret %23
        :$8 
            decr %34 %23
            j_always $5
        :$9 
            phi %35 [%50 $11], [%17 $5], 
            phi %36 [%45 $11], [%15 $5], 
            phi %37 [%44 $11], [%16 $5], 
            phi %38 [%43 $11], [%14 $5], 
            phi %39 [%51 $11], [%20 $5], 
            phi %40 [%46 $11], [%18 $5], 
            int %41 -1
            ret %5
        :$10
            phi %42 [%4 $3], [%54 $12], 
            phi %43 [%1 $3], [%1 $12], 
            phi %44 [%3 $3], [%3 $12], 
            phi %45 [%2 $3], [%2 $12], 
            phi %46 [%0 $3], [%0 $12], 
            int %47 0
            cmp sge %48 %42 %47
            j_true %48 $5 $11
        :$11
            add %49 %42 %44
            mov %50 %5
            nop
            int %51 0
            cmp slt %52 %50 %51
            j_true %52 $9 $6
        :$12
            int %53 1
            sub %54 %3 %5
            cmp slt %55 %54 %3
            j_true %55 $10 $4
        :$13
            unreachable
#223 = fn[189] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<hl.types.ArrayBytes_hl_UI16>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  obj<hl.types.ArrayBytes_hl_UI16>
        %2  void
        %3  i32
        %4  bytes
        %5  i32
        %6  i32
        %7  i32
        %8  bytes
        %9  bytes
        %10 bytes
        %11 i32
        %12 bytes
        %13 i32
        %14 i32
        %15 i32
        %16 i32
        %17 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %1
            call %2 fn[371](%1, )
            get_field %3 %0.0
            set_field %1.2 %3
            set_field %1.0 %3
            get_field %4 %0.1
            get_field %5 %0.0
            int %6 1
            shl %7 %5 %6
            call %8 fn[36](%7, )
            set_field %1.1 %8
            get_field %9 %0.1
            get_field %10 %1.1
            int %11 0
            get_field %12 %0.1
            int %13 0
            get_field %14 %0.0
            int %15 1
            shl %16 %14 %15
            call %17 fn[39](%10, %11, %12, %13, %16, )
            ret %1
        :$2 
            unreachable
#224 = fn[190] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<haxe.iterators.ArrayIterator>
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 obj<hl.types.BytesIterator_hl_UI16>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[376](%1, %0, )
            ret %1
        :$2
            unreachable
#225 = fn[191] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 obj<hl.types.BytesKeyValueIterator_hl_UI16>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[379](%1, %0, )
            ret %1
        :$2
            unreachable
#226 = fn[192] fn(obj<hl.types.ArrayBytes_hl_UI16>, fn(u16, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  fn(u16, ) -> dyn
        %2  obj<hl.types.ArrayObj>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  i32
        %8  i32
        %9  i32
        %10 void
        %11 i32
        %12 i32
        %13 bool
        %14 obj<hl.types.ArrayBytes_hl_UI16>
        %15 void
        %16 obj<hl.types.ArrayObj>
        %17 i32
        %18 i32
        %19 fn(u16, ) -> dyn
        %20 i32
        %21 i32
        %22 void
        %23 array<void>
        %24 bytes
        %25 void
        %26 i32
        %27 i32
        %28 i32
        %29 u16
        %30 dyn
        %31 bool
        %32 obj<hl.types.ArrayObj>
        %33 i32
        %34 void
        %35 fn(u16, ) -> dyn
        %36 i32
        %37 obj<hl.types.ArrayBytes_hl_UI16>
        %38 bool
        %39 ref<bool>
        %40 obj<hl.types.ArrayDyn>
        %41 i32
        %42 i32
        %43 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[269](%2, )
            get_field %4 %0.0
            int %5 0
            cmp sge %6 %5 %4
            j_true %6 $6 $2
        :$2 
            get_field %7 %0.0
            int %8 1
            sub %9 %7 %8
            call %10 fn[92](%2, %9, )
            int %11 0
            get_field %12 %0.0
            nop
            cmp sge %13 %11 %12
            j_true %13 $5 $3
        :$3 
            phi %14 [%0 $6], [%14 $4], [%0 $2], 
            phi %15 [%3 $6], [%15 $4], [%10 $2], 
            phi %16 [%2 $6], [%16 $4], [%2 $2], 
            phi %17 [%42 $6], [%17 $4], [%12 $2], 
            phi %18 [%41 $6], [%21 $4], [%11 $2], 
            phi %19 [%1 $6], [%19 $4], [%1 $2], 
            mov %20 %18
            incr %21 %18
            call_intrinsic %22 @eon.null_check(%16, )
            get_field %23 %16.1
            get_field %24 %14.1
            call_intrinsic %25 @eon.null_check(%19, )
            int %26 1
            shl %27 %6 %26
            get_i16 %28 %24[%27]
            to_int %29 %28
            call_closure %30 %19(%29, )
            set_array %23[%6] %30
            j_always $4
        :$4 
            nop
            cmp sge %31 %21 %17
            j_true %31 $5 $3
        :$5 
            phi %32 [%2 $2], [%16 $4], [%2 $6], 
            phi %33 [%11 $2], [%21 $4], [%41 $6], 
            phi %34 [%10 $2], [%15 $4], [%3 $6], 
            phi %35 [%1 $2], [%19 $4], [%1 $6], 
            phi %36 [%12 $2], [%17 $4], [%42 $6], 
            phi %37 [%0 $2], [%14 $4], [%0 $6], 
            bool %38 true
            ref %39 %38
            call %40 fn[343](%32, %39, )
            ret %13
        :$6 
            int %41 0
            get_field %42 %0.0
            nop
            cmp sge %43 %41 %42
            j_true %43 $5 $3
        :$7 
            unreachable
#227 = fn[193] fn(obj<hl.types.ArrayBytes_hl_UI16>, fn(u16, ) -> bool, ) -> obj<hl.types.ArrayBytes_hl_UI16>
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  fn(u16, ) -> bool
        %2  obj<hl.types.ArrayBytes_hl_UI16>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  i32
        %8  obj<hl.types.ArrayBytes_hl_UI16>
        %9  void
        %10 fn(u16, ) -> bool
        %11 i32
        %12 obj<hl.types.ArrayBytes_hl_UI16>
        %13 i32
        %14 i32
        %15 bytes
        %16 i32
        %17 i32
        %18 i32
        %19 u16
        %20 void
        %21 bool
        %22 void
        %23 i32
        %24 bool
        %25 i32
        %26 u16
        %27 void
        %28 obj<hl.types.ArrayBytes_hl_UI16>
        %29 i32
        %30 i32
        %31 fn(u16, ) -> bool
        %32 i32
        %33 bytes
        %34 obj<hl.types.ArrayBytes_hl_UI16>
        %35 i32
        %36 bool
        %37 void
        %38 obj<hl.types.ArrayBytes_hl_UI16>
        %39 i32
        %40 fn(u16, ) -> bool
        %41 obj<hl.types.ArrayBytes_hl_UI16>
        %42 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[371](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%5 $1], [%29 $4], 
            phi %8 [%2 $1], [%28 $4], 
            phi %9 [%3 $1], [%27 $4], 
            phi %10 [%1 $1], [%31 $4], 
            phi %11 [%4 $1], [%35 $4], 
            phi %12 [%0 $1], [%34 $4], 
            mov %13 %11
            incr %14 %11
            get_field %15 %12.1
            int %16 1
            shl %17 %6 %16
            get_i16 %18 %15[%17]
            to_int %19 %18
            call_intrinsic %20 @eon.null_check(%10, )
            call_closure %21 %10(%19, )
            j_false %21 $6 $3
        :$3 
            call_intrinsic %22 @eon.null_check(%8, )
            call %23 fn[175](%8, %19, )
            j_always $4
        :$4 
            phi %24 [%21 $6], [%21 $3], 
            phi %25 [%13 $6], [%13 $3], 
            phi %26 [%19 $6], [%19 $3], 
            phi %27 [%9 $6], [%9 $3], 
            phi %28 [%8 $6], [%8 $3], 
            phi %29 [%7 $6], [%7 $3], 
            phi %30 [%18 $6], [%23 $3], 
            phi %31 [%10 $6], [%10 $3], 
            phi %32 [%17 $6], [%17 $3], 
            phi %33 [%15 $6], [%15 $3], 
            phi %34 [%12 $6], [%12 $3], 
            phi %35 [%14 $6], [%14 $3], 
            nop
            cmp sge %36 %35 %29
            j_true %36 $5 $2
        :$5 
            phi %37 [%3 $1], [%27 $4], 
            phi %38 [%0 $1], [%34 $4], 
            phi %39 [%4 $1], [%35 $4], 
            phi %40 [%1 $1], [%31 $4], 
            phi %41 [%2 $1], [%28 $4], 
            phi %42 [%5 $1], [%29 $4], 
            ret %41
        :$6 
            j_always $4
        :$7 
            unreachable
#228 = fn[194] fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  i32
        %3  bool
        %4  i32
        %5  i32
        %6  void
        %7  obj<hl.types.ArrayBytes_hl_UI16>
        %8  i32
        %9  i32
        %10 i32
        %11 bool
        %12 bytes
        %13 bytes
        %14 i32
        %15 i32
        %16 bytes
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 i32
        %22 void
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            cmp sge %3 %3 %1
            j_true %3 $4 $2
        :$2 
            int %4 1
            sub %5 %1 %4
            call %6 fn[205](%0, %3, )
            j_always $3
        :$3 
            phi %7 [%0 $4], [%0 $2], 
            phi %8 [%10 $4], [%5 $2], 
            phi %9 [%1 $4], [%1 $2], 
            ret_void
        :$4 
            get_field %10 %0.0
            cmp sge %11 %1 %3
            j_true %11 $3 $5
        :$5 
            get_field %12 %0.1
            get_field %13 %0.1
            int %14 1
            shl %15 %1 %14
            get_field %16 %0.1
            get_field %17 %0.0
            sub %18 %17 %1
            int %19 1
            shl %20 %18 %19
            int %21 0
            call %22 fn[253](%12, %3, %20, %21, )
            set_field %0.0 %1
            ret_void
        :$6 
            unreachable
#229 = fn[195] fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, ) -> dyn
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  i32
        %3  bool
        %4  bytes
        %5  u16
        %6  dyn
        %7  bytes
        %8  i32
        %9  i32
        %10 i32
        %11 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            cmp slt %3 %1 %3
            j_true %3 $3 $2
        :$2 
            get_field %4 %0.1
            int %5 0
            to_dyn %6 %5
            ret %6
        :$3 
            get_field %7 %0.1
            int %8 1
            shl %9 %1 %3
            get_i16 %10 %7[%3]
            to_dyn %11 %10
            ret %11
        :$4 
            unreachable
#230 = fn[196] fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, dyn, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  dyn
        %3  i32
        %4  bool
        %5  void
        %6  bytes
        %7  u16
        %8  i32
        %9  i32
        %10 i32
        %11 bytes
        %12 u16
        %13 i32
        %14 i32
        %15 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            cmp slt %4 %1 %4
            j_true %4 $3 $2
        :$2 
            call %5 fn[205](%0, %1, )
            get_field %6 %0.1
            call_intrinsic %7 @eon.safe_cast(%2, )
            to_int %8 %7
            int %9 1
            shl %10 %1 %9
            set_i16 %6[%10] %4
            ret_void
        :$3 
            get_field %11 %0.1
            call_intrinsic %12 @eon.safe_cast(%2, )
            to_int %13 %12
            int %14 1
            shl %15 %1 %14
            set_i16 %11[%15] %4
            ret_void
        :$4 
            unreachable
#231 = fn[197] fn(obj<hl.types.ArrayBytes_hl_UI16>, dyn, ) -> i32
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 dyn
        %2 u16
        %3 i32
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[175](%0, %2, )
            ret %3
        :$2
            unreachable
#232 = fn[198] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 null<u16>
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[174](%0, )
            ret %1
        :$2
            unreachable
#233 = fn[199] fn(obj<hl.types.ArrayBytes_hl_UI16>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 null<u16>
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[177](%0, )
            ret %1
        :$2
            unreachable
#234 = fn[200] fn(obj<hl.types.ArrayBytes_hl_UI16>, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 dyn
        %2 u16
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[183](%0, %2, )
            ret_void
        :$2
            unreachable
#235 = fn[201] fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 i32
        %2 dyn
        %3 u16
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[184](%0, %1, %3, )
            ret_void
        :$2
            unreachable
#236 = fn[202] fn(obj<hl.types.ArrayBytes_hl_UI16>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 dyn
        %2 u16
        %3 bool
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[185](%0, %2, )
            ret %3
        :$2
            unreachable
#237 = fn[203] fn(obj<hl.types.ArrayBytes_hl_UI16>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 dyn
        %2 u16
        %3 bool
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%1, )
            call %3 fn[186](%0, %2, )
            ret %3
        :$2
            unreachable
#238 = fn[380] fn(fn(dyn, dyn, ) -> i32, u16, u16, ) -> i32
    [Values]
        %0 fn(dyn, dyn, ) -> i32
        %1 u16
        %2 u16
        %3 dyn
        %4 dyn
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            to_dyn %3 %1
            to_dyn %4 %2
            call_closure %5 %0(%3, %4, )
            ret %5
        :$2
            unreachable
#239 = fn[204] fn(obj<hl.types.ArrayBytes_hl_UI16>, fn(dyn, dyn, ) -> i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayBytes_hl_UI16>
        %1 fn(dyn, dyn, ) -> i32
        %2 fn(u16, u16, ) -> i32
        %3 void
        %4 fn(u16, u16, ) -> i32
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            j_not_null %1 $4 $2
        :$2
            null %2
            j_always $3
        :$3
            call %3 fn[180](%0, %2, )
            ret_void
        :$4
            instance_closure %4 fn[380] %1
            call %5 fn[180](%0, %4, )
            ret_void
        :$5
            unreachable
#240 = fn[205] fn(obj<hl.types.ArrayBytes_hl_UI16>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayBytes_hl_UI16>
        %1  i32
        %2  i32
        %3  bool
        %4  obj<String>
        %5  i32
        %6  ref<i32>
        %7  bytes
        %8  obj<String>
        %9  obj<String>
        %10 dyn
        %11 void
        %12 i32
        %13 i32
        %14 i32
        %15 bool
        %16 i32
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 bool
        %22 i32
        %23 bytes
        %24 i32
        %25 i32
        %26 bytes
        %27 bytes
        %28 i32
        %29 i32
        %30 i32
        %31 i32
        %32 bytes
        %33 i32
        %34 void
        %35 bytes
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 void
        %41 bytes
        %42 i32
        %43 i32
        %44 bytes
        %45 bytes
        %46 i32
        %47 i32
        %48 i32
        %49 i32
        %50 bytes
        %51 i32
        %52 void
        %53 bytes
        %54 i32
        %55 i32
        %56 i32
        %57 i32
        %58 void
    [Code]
        :$0 
            j_always $1
        :$1 
            int %2 0
            cmp sge %3 %1 %2
            j_true %3 $3 $2
        :$2 
            get_global %4 global[31]
            mov %5 %1
            ref %6 %3
            call %7 fn[35](%3, %6, )
            call %8 fn[16](%7, %3, )
            call %9 fn[20](%4, %8, )
            call %10 fn[34](%9, )
            invoke_intrinsic %11 @eon.throw(%10, ) cont $8 unwind $8
        :$3 
            int %12 1
            add %13 %1 %12
            get_field %14 %0.2
            cmp sge %15 %14 %3
            j_true %15 $7 $4
        :$4 
            get_field %16 %0.2
            int %17 3
            mul %18 %16 %17
            int %19 1
            sshr %20 %18 %19
            cmp sge %21 %20 %3
            j_true %21 $6 $5
        :$5 
            mov %22 %3
            get_field %23 %0.1
            int %24 1
            shl %25 %22 %24
            call %26 fn[36](%25, )
            get_field %27 %0.1
            get_field %28 %0.0
            int %29 1
            shl %30 %28 %29
            int %31 0
            get_field %32 %0.1
            int %33 0
            call %34 fn[39](%26, %31, %15, %33, %30, )
            get_field %35 %0.1
            int %36 1
            shl %37 %22 %36
            sub %38 %37 %30
            int %39 0
            call %40 fn[253](%26, %30, %38, %39, )
            set_field %0.1 %26
            set_field %0.2 %22
            set_field %0.0 %3
            ret_void
        :$6 
            get_field %41 %0.1
            int %42 1
            shl %43 %20 %42
            call %44 fn[36](%43, )
            get_field %45 %0.1
            get_field %46 %0.0
            int %47 1
            shl %48 %46 %47
            int %49 0
            get_field %50 %0.1
            int %51 0
            call %52 fn[39](%44, %49, %15, %51, %48, )
            get_field %53 %0.1
            int %54 1
            shl %55 %20 %54
            sub %56 %55 %48
            int %57 0
            call %58 fn[253](%44, %48, %56, %57, )
            set_field %0.1 %44
            set_field %0.2 %20
            set_field %0.0 %3
            ret_void
        :$7 
            set_field %0.0 %3
            ret_void
        :$8 
            unreachable
#241 = fn[381] fn(obj<hl.types.ArrayDynIterator>, obj<hl.types.ArrayBase>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDynIterator>
        %1 obj<hl.types.ArrayBase>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[323](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#242 = fn[382] fn(obj<hl.types.ArrayDynIterator>, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayDynIterator>
        %1 i32
        %2 obj<hl.types.ArrayBase>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.1
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#243 = fn[383] fn(obj<hl.types.ArrayDynIterator>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayDynIterator>
        %1 obj<hl.types.ArrayBase>
        %2 void
        %3 i32
        %4 i32
        %5 i32
        %6 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %0.1
            mov %4 %3
            incr %5 %3
            set_field %0.1 %5
            call_method %6 %1 fn[0](%4, )
            ret %6
        :$2
            unreachable
#244 = fn[384] fn(obj<hl.types.ArrayDynKeyValueIterator>, obj<hl.types.ArrayBase>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDynKeyValueIterator>
        %1 obj<hl.types.ArrayBase>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[326](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#245 = fn[343] fn(obj<hl.types.ArrayBase>, ref<bool>, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0 obj<hl.types.ArrayBase>
        %1 ref<bool>
        %2 bool
        %3 obj<hl.types.ArrayDyn>
        %4 bool
        %5 obj<hl.types.ArrayDyn>
    [Code]
        :$0
            j_always $1
        :$1
            j_not_null %1 $4 $2
        :$2
            bool %2 false
            j_always $3
        :$3
            new %3
            set_field %3.0 %0
            set_field %3.1 %2
            ret %3
        :$4
            un_ref %4 %1
            new %5
            set_field %5.0 %0
            set_field %5.1 %4
            ret %5
        :$5
            unreachable
#246 = fn[385] fn(obj<hl.types.ArrayDyn>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<hl.types.ArrayObj>
        %2 void
        %3 bool
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[269](%1, )
            set_field %0.0 %1
            bool %3 true
            set_field %0.1 %3
            ret_void
        :$2
            unreachable
#247 = fn[286] fn(obj<hl.types.ArrayDyn>, ) -> i32
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<hl.types.ArrayBase>
        %2 void
        %3 i32
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            ret %3
        :$2
            unreachable
#248 = fn[287] fn(obj<hl.types.ArrayDyn>, i32, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 i32
        %2 obj<hl.types.ArrayBase>
        %3 void
        %4 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            call_method %4 %2 fn[0](%1, )
            ret %4
        :$2
            unreachable
#249 = fn[288] fn(obj<hl.types.ArrayDyn>, i32, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 i32
        %2 dyn
        %3 obj<hl.types.ArrayBase>
        %4 void
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            get_field %3 %0.0
            call_intrinsic %4 @eon.null_check(%3, )
            call_method %5 %3 fn[1](%1, %2, )
            ret_void
        :$2
            unreachable
#250 = fn[289] fn(obj<hl.types.ArrayDyn>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 i32
        %2 obj<hl.types.ArrayAccess>
        %3 i32
        %4 i32
        %5 obj<hl.types.ArrayBase>
        %6 void
        %7 void
    [Code]
        :$0
            j_always $1
        :$1
            get_field %5 %0.0
            call_intrinsic %6 @eon.null_check(%5, )
            call_method %7 %5 fn[2](%1, %2, %3, %4, )
            ret_void
        :$2
            unreachable
#251 = fn[290] fn(obj<hl.types.ArrayDyn>, obj<hl.types.ArrayDyn>, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  obj<hl.types.ArrayDyn>
        %2  obj<hl.types.ArrayBase>
        %3  void
        %4  obj<hl.types.ArrayBase>
        %5  void
        %6  i32
        %7  void
        %8  i32
        %9  i32
        %10 type
        %11 array<void>
        %12 i32
        %13 i32
        %14 bool
        %15 array<void>
        %16 obj<hl.types.ArrayDyn>
        %17 i32
        %18 obj<hl.types.ArrayDyn>
        %19 type
        %20 obj<hl.types.ArrayBase>
        %21 i32
        %22 i32
        %23 obj<hl.types.ArrayBase>
        %24 i32
        %25 i32
        %26 i32
        %27 void
        %28 dyn
        %29 bool
        %30 i32
        %31 i32
        %32 obj<hl.types.ArrayDyn>
        %33 i32
        %34 obj<hl.types.ArrayDyn>
        %35 type
        %36 obj<hl.types.ArrayBase>
        %37 i32
        %38 obj<hl.types.ArrayBase>
        %39 array<void>
        %40 i32
        %41 void
        %42 i32
        %43 bool
        %44 obj<hl.types.ArrayBase>
        %45 type
        %46 i32
        %47 obj<hl.types.ArrayDyn>
        %48 obj<hl.types.ArrayDyn>
        %49 i32
        %50 i32
        %51 i32
        %52 obj<hl.types.ArrayBase>
        %53 array<void>
        %54 i32
        %55 i32
        %56 void
        %57 dyn
        %58 i32
        %59 bool
        %60 obj<hl.types.ArrayDyn>
        %61 i32
        %62 i32
        %63 type
        %64 array<void>
        %65 obj<hl.types.ArrayDyn>
        %66 obj<hl.types.ArrayBase>
        %67 obj<hl.types.ArrayBase>
        %68 i32
        %69 i32
        %70 obj<hl.types.ArrayObj>
        %71 bool
        %72 ref<bool>
        %73 obj<hl.types.ArrayDyn>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%1, )
            get_field %4 %1.0
            call_intrinsic %5 @eon.null_check(%2, )
            get_field %6 %2.0
            call_intrinsic %7 @eon.null_check(%4, )
            get_field %8 %4.0
            add %9 %6 %8
            type %10 type[9]
            call %11 fn[240](%10, %9, )
            int %12 0
            mov %13 %6
            nop
            cmp sge %14 %12 %13
            j_true %14 $4 $2
        :$2 
            phi %15 [%11 $1], [%15 $3], 
            phi %16 [%0 $1], [%16 $3], 
            phi %17 [%12 $1], [%26 $3], 
            phi %18 [%1 $1], [%18 $3], 
            phi %19 [%10 $1], [%19 $3], 
            phi %20 [%4 $1], [%20 $3], 
            phi %21 [%6 $1], [%21 $3], 
            phi %22 [%9 $1], [%22 $3], 
            phi %23 [%2 $1], [%23 $3], 
            phi %24 [%13 $1], [%24 $3], 
            mov %25 %17
            incr %26 %17
            call_intrinsic %27 @eon.null_check(%23, )
            call_method %28 %23 fn[0](%25, )
            set_array %15[%25] %28
            j_always $3
        :$3 
            nop
            cmp sge %29 %26 %24
            j_true %29 $4 $2
        :$4 
            phi %30 [%12 $1], [%26 $3], 
            phi %31 [%6 $1], [%21 $3], 
            phi %32 [%0 $1], [%16 $3], 
            phi %33 [%9 $1], [%22 $3], 
            phi %34 [%1 $1], [%18 $3], 
            phi %35 [%10 $1], [%19 $3], 
            phi %36 [%2 $1], [%23 $3], 
            phi %37 [%13 $1], [%24 $3], 
            phi %38 [%4 $1], [%20 $3], 
            phi %39 [%11 $1], [%15 $3], 
            int %40 0
            call_intrinsic %41 @eon.null_check(%38, )
            get_field %42 %38.0
            nop
            cmp sge %43 %40 %42
            j_true %43 $7 $5
        :$5 
            phi %44 [%36 $4], [%44 $6], 
            phi %45 [%35 $4], [%45 $6], 
            phi %46 [%31 $4], [%46 $6], 
            phi %47 [%34 $4], [%47 $6], 
            phi %48 [%32 $4], [%48 $6], 
            phi %49 [%40 $4], [%55 $6], 
            phi %50 [%33 $4], [%50 $6], 
            phi %51 [%42 $4], [%51 $6], 
            phi %52 [%38 $4], [%52 $6], 
            phi %53 [%39 $4], [%53 $6], 
            mov %54 %49
            incr %55 %49
            call_intrinsic %56 @eon.null_check(%52, )
            call_method %57 %52 fn[0](%54, )
            add %58 %54 %46
            set_array %53[%58] %57
            j_always $6
        :$6 
            nop
            cmp sge %59 %55 %51
            j_true %59 $7 $5
        :$7 
            phi %60 [%34 $4], [%47 $6], 
            phi %61 [%40 $4], [%55 $6], 
            phi %62 [%42 $4], [%51 $6], 
            phi %63 [%35 $4], [%45 $6], 
            phi %64 [%39 $4], [%53 $6], 
            phi %65 [%32 $4], [%48 $6], 
            phi %66 [%38 $4], [%52 $6], 
            phi %67 [%36 $4], [%44 $6], 
            phi %68 [%33 $4], [%50 $6], 
            phi %69 [%31 $4], [%46 $6], 
            call %70 fn[241](%64, )
            bool %71 true
            ref %72 %71
            call %73 fn[343](%14, %72, )
            ret %73
        :$8 
            unreachable
#252 = fn[291] fn(obj<hl.types.ArrayDyn>, obj<String>, ) -> obj<String>
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<String>
        %2 obj<hl.types.ArrayBase>
        %3 void
        %4 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            call_method %4 %2 fn[13](%1, )
            ret %4
        :$2
            unreachable
#253 = fn[292] fn(obj<hl.types.ArrayDyn>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<hl.types.ArrayBase>
        %2 void
        %3 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            call_intrinsic %2 @eon.null_check(%1, )
            call_method %3 %1 fn[4]()
            ret %3
        :$2
            unreachable
#254 = fn[293] fn(obj<hl.types.ArrayDyn>, dyn, ) -> i32
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 dyn
        %2 obj<hl.types.ArrayBase>
        %3 void
        %4 i32
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            call_method %4 %2 fn[3](%1, )
            ret %4
        :$2
            unreachable
#255 = fn[294] fn(obj<hl.types.ArrayDyn>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<hl.types.ArrayBase>
        %2 void
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            call_intrinsic %2 @eon.null_check(%1, )
            call_method %3 %1 fn[14]()
            ret_void
        :$2
            unreachable
#256 = fn[295] fn(obj<hl.types.ArrayDyn>, i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 i32
        %2 obj<hl.types.ArrayBase>
        %3 void
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            call_method %4 %2 fn[15](%1, )
            ret_void
        :$2
            unreachable
#257 = fn[296] fn(obj<hl.types.ArrayDyn>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<hl.types.ArrayBase>
        %2 void
        %3 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            call_intrinsic %2 @eon.null_check(%1, )
            call_method %3 %1 fn[5]()
            ret %3
        :$2
            unreachable
#258 = fn[297] fn(obj<hl.types.ArrayDyn>, i32, null<i32>, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 i32
        %2 null<i32>
        %3 obj<hl.types.ArrayBase>
        %4 void
        %5 obj<hl.types.ArrayBase>
        %6 bool
        %7 ref<bool>
        %8 obj<hl.types.ArrayDyn>
    [Code]
        :$0
            j_always $1
        :$1
            get_field %3 %0.0
            call_intrinsic %4 @eon.null_check(%3, )
            call_method %5 %3 fn[11](%1, %2, )
            bool %6 true
            ref %7 %6
            call %8 fn[343](%5, %7, )
            ret %8
        :$2
            unreachable
#259 = fn[298] fn(obj<hl.types.ArrayDyn>, fn(dyn, dyn, ) -> i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 fn(dyn, dyn, ) -> i32
        %2 obj<hl.types.ArrayBase>
        %3 void
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            call_method %4 %2 fn[10](%1, )
            ret_void
        :$2
            unreachable
#260 = fn[299] fn(obj<hl.types.ArrayDyn>, i32, i32, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 i32
        %2 i32
        %3 obj<hl.types.ArrayBase>
        %4 void
        %5 obj<hl.types.ArrayBase>
        %6 bool
        %7 ref<bool>
        %8 obj<hl.types.ArrayDyn>
    [Code]
        :$0
            j_always $1
        :$1
            get_field %3 %0.0
            call_intrinsic %4 @eon.null_check(%3, )
            call_method %5 %3 fn[12](%1, %2, )
            bool %6 true
            ref %7 %6
            call %8 fn[343](%5, %7, )
            ret %8
        :$2
            unreachable
#261 = fn[300] fn(obj<hl.types.ArrayDyn>, ) -> obj<String>
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<hl.types.ArrayBase>
        %2 void
        %3 obj<String>
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            call_intrinsic %2 @eon.null_check(%1, )
            call_method %3 %1 fn[16]()
            ret %3
        :$2
            unreachable
#262 = fn[315] fn(obj<hl.types.ArrayDyn>, ) -> bytes
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<String>
        %2 void
        %3 bytes
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[300](%0, )
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            ret %3
        :$2
            unreachable
#263 = fn[301] fn(obj<hl.types.ArrayDyn>, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 dyn
        %2 obj<hl.types.ArrayBase>
        %3 void
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            call_method %4 %2 fn[6](%1, )
            ret_void
        :$2
            unreachable
#264 = fn[302] fn(obj<hl.types.ArrayDyn>, i32, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 i32
        %2 dyn
        %3 obj<hl.types.ArrayBase>
        %4 void
        %5 void
    [Code]
        :$0
            j_always $1
        :$1
            get_field %3 %0.0
            call_intrinsic %4 @eon.null_check(%3, )
            call_method %5 %3 fn[7](%1, %2, )
            ret_void
        :$2
            unreachable
#265 = fn[303] fn(obj<hl.types.ArrayDyn>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 dyn
        %2 obj<hl.types.ArrayBase>
        %3 void
        %4 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            call_method %4 %2 fn[8](%1, )
            ret %4
        :$2
            unreachable
#266 = fn[304] fn(obj<hl.types.ArrayDyn>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 dyn
        %2 obj<hl.types.ArrayBase>
        %3 void
        %4 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            call_method %4 %2 fn[9](%1, )
            ret %4
        :$2
            unreachable
#267 = fn[305] fn(obj<hl.types.ArrayDyn>, dyn, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  dyn
        %2  null<i32>
        %3  i32
        %4  obj<hl.types.ArrayBase>
        %5  void
        %6  i32
        %7  obj<hl.types.ArrayBase>
        %8  bool
        %9  obj<hl.types.ArrayDyn>
        %10 obj<hl.types.ArrayBase>
        %11 i32
        %12 i32
        %13 dyn
        %14 null<i32>
        %15 void
        %16 dyn
        %17 bool
        %18 i32
        %19 bool
        %20 null<i32>
        %21 i32
        %22 dyn
        %23 i32
        %24 obj<hl.types.ArrayDyn>
        %25 obj<hl.types.ArrayBase>
        %26 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            call_intrinsic %3 @eon.safe_cast(%2, )
            get_field %4 %0.0
            call_intrinsic %5 @eon.null_check(%4, )
            get_field %6 %4.0
            get_field %7 %0.0
            nop
            cmp sge %8 %3 %6
            j_true %8 $6 $2
        :$2 
            phi %9 [%9 $5], [%0 $1], 
            phi %10 [%10 $5], [%7 $1], 
            phi %11 [%18 $5], [%3 $1], 
            phi %12 [%12 $5], [%6 $1], 
            phi %13 [%13 $5], [%1 $1], 
            phi %14 [%14 $5], [%2 $1], 
            call_intrinsic %15 @eon.null_check(%10, )
            call_method %16 %10 fn[0](%11, )
            cmp ne %17 %16 %13
            j_true %17 $4 $3
        :$3 
            ret %11
        :$4 
            incr %18 %11
            j_always $5
        :$5 
            nop
            cmp sge %19 %18 %12
            j_true %19 $6 $2
        :$6 
            phi %20 [%14 $5], [%2 $1], 
            phi %21 [%12 $5], [%6 $1], 
            phi %22 [%13 $5], [%1 $1], 
            phi %23 [%18 $5], [%3 $1], 
            phi %24 [%9 $5], [%0 $1], 
            phi %25 [%10 $5], [%7 $1], 
            int %26 -1
            ret %26
        :$7 
            unreachable
#268 = fn[306] fn(obj<hl.types.ArrayDyn>, dyn, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  dyn
        %2  null<i32>
        %3  obj<hl.types.ArrayBase>
        %4  void
        %5  i32
        %6  i32
        %7  bool
        %8  i32
        %9  i32
        %10 dyn
        %11 null<i32>
        %12 obj<hl.types.ArrayDyn>
        %13 obj<hl.types.ArrayBase>
        %14 i32
        %15 i32
        %16 i32
        %17 i32
        %18 null<i32>
        %19 i32
        %20 dyn
        %21 i32
        %22 obj<hl.types.ArrayDyn>
        %23 obj<hl.types.ArrayBase>
        %24 i32
        %25 bool
        %26 i32
        %27 i32
        %28 obj<hl.types.ArrayDyn>
        %29 null<i32>
        %30 obj<hl.types.ArrayBase>
        %31 i32
        %32 dyn
        %33 obj<hl.types.ArrayBase>
        %34 void
        %35 dyn
        %36 bool
        %37 i32
        %38 dyn
        %39 obj<hl.types.ArrayDyn>
        %40 null<i32>
        %41 i32
        %42 i32
        %43 i32
        %44 obj<hl.types.ArrayBase>
        %45 i32
        %46 i32
        %47 i32
        %48 obj<hl.types.ArrayDyn>
        %49 obj<hl.types.ArrayBase>
        %50 dyn
        %51 null<i32>
        %52 i32
        %53 bool
        %54 i32
        %55 i32
        %56 i32
        %57 bool
        %58 i32
        %59 i32
        %60 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            call_intrinsic %4 @eon.null_check(%3, )
            get_field %5 %3.0
            j_null %2 $12 $2
        :$2 
            call_intrinsic %6 @eon.safe_cast(%2, )
            j_always $3
        :$3 
            cmp slt %7 %6 %5
            j_true %7 $10 $4
        :$4 
            phi %8 [%5 $3], [%5 $12], 
            phi %9 [%6 $3], [%59 $12], 
            phi %10 [%1 $3], [%1 $12], 
            phi %11 [%2 $3], [%2 $12], 
            phi %12 [%0 $3], [%0 $12], 
            phi %13 [%3 $3], [%3 $12], 
            int %14 1
            sub %15 %8 %7
            mov %16 %15
            j_always $5
        :$5 
            phi %17 [%14 $4], [%26 $8], [%52 $10], 
            phi %18 [%11 $4], [%29 $8], [%51 $10], 
            phi %19 [%16 $4], [%37 $8], [%46 $10], 
            phi %20 [%10 $4], [%32 $8], [%50 $10], 
            phi %21 [%8 $4], [%27 $8], [%47 $10], 
            phi %22 [%12 $4], [%28 $8], [%48 $10], 
            phi %23 [%13 $4], [%33 $8], [%49 $10], 
            nop
            int %24 0
            cmp slt %25 %19 %7
            j_true %25 $9 $6
        :$6 
            phi %26 [%24 $5], [%56 $11], 
            phi %27 [%21 $5], [%47 $11], 
            phi %28 [%22 $5], [%48 $11], 
            phi %29 [%18 $5], [%51 $11], 
            phi %30 [%23 $5], [%49 $11], 
            phi %31 [%19 $5], [%55 $11], 
            phi %32 [%20 $5], [%50 $11], 
            get_field %33 %28.0
            call_intrinsic %34 @eon.null_check(%33, )
            call_method %35 %33 fn[0](%31, )
            cmp ne %36 %35 %32
            j_true %36 $8 $7
        :$7 
            ret %31
        :$8 
            decr %37 %31
            j_always $5
        :$9 
            phi %38 [%20 $5], [%50 $11], 
            phi %39 [%22 $5], [%48 $11], 
            phi %40 [%18 $5], [%51 $11], 
            phi %41 [%19 $5], [%55 $11], 
            phi %42 [%24 $5], [%56 $11], 
            phi %43 [%21 $5], [%47 $11], 
            phi %44 [%23 $5], [%49 $11], 
            int %45 -1
            ret %45
        :$10
            phi %46 [%6 $3], [%59 $12], 
            phi %47 [%5 $3], [%5 $12], 
            phi %48 [%0 $3], [%0 $12], 
            phi %49 [%3 $3], [%3 $12], 
            phi %50 [%1 $3], [%1 $12], 
            phi %51 [%2 $3], [%2 $12], 
            int %52 0
            cmp sge %53 %46 %7
            j_true %53 $5 $11
        :$11
            add %54 %46 %47
            mov %55 %54
            nop
            int %56 0
            cmp slt %57 %55 %7
            j_true %57 $9 $6
        :$12
            int %58 1
            sub %59 %5 %58
            cmp slt %60 %59 %5
            j_true %60 $10 $4
        :$13
            unreachable
#269 = fn[307] fn(obj<hl.types.ArrayDyn>, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  obj<hl.types.ArrayBase>
        %2  void
        %3  i32
        %4  type
        %5  array<void>
        %6  i32
        %7  obj<hl.types.ArrayBase>
        %8  void
        %9  i32
        %10 bool
        %11 i32
        %12 array<void>
        %13 i32
        %14 obj<hl.types.ArrayBase>
        %15 i32
        %16 obj<hl.types.ArrayDyn>
        %17 type
        %18 i32
        %19 i32
        %20 obj<hl.types.ArrayBase>
        %21 void
        %22 dyn
        %23 bool
        %24 i32
        %25 obj<hl.types.ArrayBase>
        %26 obj<hl.types.ArrayDyn>
        %27 type
        %28 i32
        %29 i32
        %30 array<void>
        %31 obj<hl.types.ArrayObj>
        %32 bool
        %33 ref<bool>
        %34 obj<hl.types.ArrayDyn>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.0
            type %4 type[9]
            call %5 fn[240](%4, %3, )
            int %6 0
            get_field %7 %0.0
            call_intrinsic %8 @eon.null_check(%7, )
            get_field %9 %7.0
            nop
            cmp sge %10 %6 %9
            j_true %10 $4 $2
        :$2 
            phi %11 [%19 $3], [%6 $1], 
            phi %12 [%12 $3], [%5 $1], 
            phi %13 [%13 $3], [%9 $1], 
            phi %14 [%20 $3], [%7 $1], 
            phi %15 [%15 $3], [%3 $1], 
            phi %16 [%16 $3], [%0 $1], 
            phi %17 [%17 $3], [%4 $1], 
            mov %18 %11
            incr %19 %11
            get_field %20 %16.0
            call_intrinsic %21 @eon.null_check(%20, )
            call_method %22 %20 fn[0](%18, )
            set_array %12[%18] %22
            j_always $3
        :$3 
            nop
            cmp sge %23 %19 %13
            j_true %23 $4 $2
        :$4 
            phi %24 [%13 $3], [%9 $1], 
            phi %25 [%20 $3], [%7 $1], 
            phi %26 [%16 $3], [%0 $1], 
            phi %27 [%17 $3], [%4 $1], 
            phi %28 [%15 $3], [%3 $1], 
            phi %29 [%19 $3], [%6 $1], 
            phi %30 [%12 $3], [%5 $1], 
            call %31 fn[241](%30, )
            bool %32 true
            ref %33 %32
            call %34 fn[343](%10, %33, )
            ret %34
        :$5 
            unreachable
#270 = fn[308] fn(obj<hl.types.ArrayDyn>, ) -> obj<haxe.iterators.ArrayIterator>
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<hl.types.ArrayDynIterator>
        %2 obj<hl.types.ArrayBase>
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            get_field %2 %0.0
            call %3 fn[381](%1, %2, )
            ret %1
        :$2
            unreachable
#271 = fn[309] fn(obj<hl.types.ArrayDyn>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 obj<hl.types.ArrayDynKeyValueIterator>
        %2 obj<hl.types.ArrayBase>
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            get_field %2 %0.0
            call %3 fn[384](%1, %2, )
            ret %1
        :$2
            unreachable
#272 = fn[310] fn(obj<hl.types.ArrayDyn>, fn(dyn, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  fn(dyn, ) -> dyn
        %2  obj<hl.types.ArrayBase>
        %3  void
        %4  i32
        %5  type
        %6  array<void>
        %7  i32
        %8  obj<hl.types.ArrayBase>
        %9  void
        %10 i32
        %11 bool
        %12 fn(dyn, ) -> dyn
        %13 i32
        %14 type
        %15 array<void>
        %16 obj<hl.types.ArrayBase>
        %17 i32
        %18 i32
        %19 obj<hl.types.ArrayDyn>
        %20 i32
        %21 i32
        %22 void
        %23 obj<hl.types.ArrayBase>
        %24 void
        %25 dyn
        %26 dyn
        %27 bool
        %28 obj<hl.types.ArrayDyn>
        %29 array<void>
        %30 fn(dyn, ) -> dyn
        %31 i32
        %32 obj<hl.types.ArrayBase>
        %33 type
        %34 i32
        %35 i32
        %36 obj<hl.types.ArrayObj>
        %37 bool
        %38 ref<bool>
        %39 obj<hl.types.ArrayDyn>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            type %5 type[9]
            call %6 fn[240](%5, %4, )
            int %7 0
            get_field %8 %0.0
            call_intrinsic %9 @eon.null_check(%8, )
            get_field %10 %8.0
            nop
            cmp sge %11 %7 %10
            j_true %11 $4 $2
        :$2 
            phi %12 [%1 $1], [%12 $3], 
            phi %13 [%4 $1], [%13 $3], 
            phi %14 [%5 $1], [%14 $3], 
            phi %15 [%6 $1], [%15 $3], 
            phi %16 [%8 $1], [%23 $3], 
            phi %17 [%7 $1], [%21 $3], 
            phi %18 [%10 $1], [%18 $3], 
            phi %19 [%0 $1], [%19 $3], 
            mov %20 %17
            incr %21 %17
            call_intrinsic %22 @eon.null_check(%12, )
            get_field %23 %19.0
            call_intrinsic %24 @eon.null_check(%23, )
            call_method %25 %23 fn[0](%20, )
            call_closure %26 %12(%25, )
            set_array %15[%20] %26
            j_always $3
        :$3 
            nop
            cmp sge %27 %21 %18
            j_true %27 $4 $2
        :$4 
            phi %28 [%19 $3], [%0 $1], 
            phi %29 [%15 $3], [%6 $1], 
            phi %30 [%12 $3], [%1 $1], 
            phi %31 [%13 $3], [%4 $1], 
            phi %32 [%23 $3], [%8 $1], 
            phi %33 [%14 $3], [%5 $1], 
            phi %34 [%18 $3], [%10 $1], 
            phi %35 [%21 $3], [%7 $1], 
            call %36 fn[241](%29, )
            bool %37 true
            ref %38 %37
            call %39 fn[343](%11, %38, )
            ret %39
        :$5 
            unreachable
#273 = fn[311] fn(obj<hl.types.ArrayDyn>, fn(dyn, ) -> bool, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0  obj<hl.types.ArrayDyn>
        %1  fn(dyn, ) -> bool
        %2  obj<hl.types.ArrayObj>
        %3  void
        %4  i32
        %5  obj<hl.types.ArrayBase>
        %6  void
        %7  i32
        %8  bool
        %9  obj<hl.types.ArrayBase>
        %10 i32
        %11 obj<hl.types.ArrayDyn>
        %12 i32
        %13 fn(dyn, ) -> bool
        %14 obj<hl.types.ArrayObj>
        %15 void
        %16 obj<hl.types.ArrayBase>
        %17 void
        %18 i32
        %19 i32
        %20 dyn
        %21 void
        %22 bool
        %23 void
        %24 i32
        %25 obj<hl.types.ArrayDyn>
        %26 dyn
        %27 i32
        %28 fn(dyn, ) -> bool
        %29 obj<hl.types.ArrayObj>
        %30 i32
        %31 bool
        %32 void
        %33 i32
        %34 obj<hl.types.ArrayBase>
        %35 bool
        %36 i32
        %37 obj<hl.types.ArrayBase>
        %38 void
        %39 obj<hl.types.ArrayDyn>
        %40 fn(dyn, ) -> bool
        %41 obj<hl.types.ArrayObj>
        %42 i32
        %43 bool
        %44 ref<bool>
        %45 obj<hl.types.ArrayDyn>
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[269](%2, )
            int %4 0
            get_field %5 %0.0
            call_intrinsic %6 @eon.null_check(%5, )
            get_field %7 %5.0
            nop
            cmp sge %8 %4 %7
            j_true %8 $5 $2
        :$2 
            phi %9 [%5 $1], [%34 $4], 
            phi %10 [%4 $1], [%30 $4], 
            phi %11 [%0 $1], [%25 $4], 
            phi %12 [%7 $1], [%33 $4], 
            phi %13 [%1 $1], [%28 $4], 
            phi %14 [%2 $1], [%29 $4], 
            phi %15 [%3 $1], [%32 $4], 
            get_field %16 %11.0
            call_intrinsic %17 @eon.null_check(%16, )
            mov %18 %10
            incr %19 %10
            call_method %20 %16 fn[0](%18, )
            call_intrinsic %21 @eon.null_check(%13, )
            call_closure %22 %13(%8, )
            j_false %22 $6 $3
        :$3 
            call_intrinsic %23 @eon.null_check(%14, )
            call %24 fn[72](%14, %8, )
            j_always $4
        :$4 
            phi %25 [%11 $6], [%11 $3], 
            phi %26 [%20 $6], [%20 $3], 
            phi %27 [%18 $6], [%24 $3], 
            phi %28 [%13 $6], [%13 $3], 
            phi %29 [%14 $6], [%14 $3], 
            phi %30 [%19 $6], [%19 $3], 
            phi %31 [%22 $6], [%22 $3], 
            phi %32 [%15 $6], [%15 $3], 
            phi %33 [%12 $6], [%12 $3], 
            phi %34 [%16 $6], [%16 $3], 
            nop
            cmp sge %35 %30 %33
            j_true %35 $5 $2
        :$5 
            phi %36 [%4 $1], [%30 $4], 
            phi %37 [%5 $1], [%34 $4], 
            phi %38 [%3 $1], [%32 $4], 
            phi %39 [%0 $1], [%25 $4], 
            phi %40 [%1 $1], [%28 $4], 
            phi %41 [%2 $1], [%29 $4], 
            phi %42 [%7 $1], [%33 $4], 
            bool %43 true
            ref %44 %43
            call %45 fn[343](%41, %44, )
            ret %45
        :$6 
            j_always $4
        :$7 
            unreachable
#274 = fn[312] fn(obj<hl.types.ArrayDyn>, i32, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 i32
        %2 i32
        %3 bool
        %4 obj<hl.types.ArrayBase>
        %5 void
        %6 i32
        %7 dyn
        %8 dyn
    [Code]
        :$0
            j_always $1
        :$1
            int %2 -16280745
            cmp ne %3 %1 %3
            j_true %3 $3 $2
        :$2
            get_field %4 %0.0
            call_intrinsic %5 @eon.null_check(%4, )
            get_field %6 %4.0
            to_dyn %7 %6
            ret %7
        :$3
            null %8
            ret %8
        :$4
            unreachable
#275 = fn[313] fn(obj<hl.types.ArrayDyn>, type, ) -> dyn
    [Values]
        %0   obj<hl.types.ArrayDyn>
        %1   type
        %2   obj<hl.types.ArrayBase>
        %3   type
        %4   bool
        %5   obj<hl.types.ArrayBase>
        %6   bool
        %7   dyn
        %8   obj<hl.types.ArrayBytes_Int>
        %9   type
        %10  bool
        %11  bytes
        %12  obj<hl.types.ArrayBase>
        %13  void
        %14  i32
        %15  i32
        %16  i32
        %17  bytes
        %18  bytes
        %19  i32
        %20  obj<hl.types.ArrayBase>
        %21  void
        %22  i32
        %23  bool
        %24  type
        %25  i32
        %26  bytes
        %27  obj<hl.types.ArrayDyn>
        %28  type
        %29  obj<hl.types.ArrayBase>
        %30  bytes
        %31  obj<hl.types.ArrayBytes_Int>
        %32  i32
        %33  bool
        %34  i32
        %35  i32
        %36  obj<hl.types.ArrayBase>
        %37  void
        %38  dyn
        %39  i32
        %40  i32
        %41  i32
        %42  bool
        %43  type
        %44  type
        %45  i32
        %46  obj<hl.types.ArrayDyn>
        %47  bool
        %48  bytes
        %49  bytes
        %50  obj<hl.types.ArrayBase>
        %51  i32
        %52  obj<hl.types.ArrayBytes_Int>
        %53  obj<hl.types.ArrayBase>
        %54  void
        %55  i32
        %56  obj<hl.types.ArrayBytes_Int>
        %57  bool
        %58  obj<hl.types.ArrayBytes_Float>
        %59  type
        %60  bool
        %61  bytes
        %62  obj<hl.types.ArrayBase>
        %63  void
        %64  i32
        %65  i32
        %66  i32
        %67  bytes
        %68  bytes
        %69  i32
        %70  obj<hl.types.ArrayBase>
        %71  void
        %72  i32
        %73  bool
        %74  obj<hl.types.ArrayBase>
        %75  bytes
        %76  i32
        %77  obj<hl.types.ArrayDyn>
        %78  bool
        %79  obj<hl.types.ArrayBytes_Float>
        %80  obj<hl.types.ArrayBytes_Int>
        %81  type
        %82  bytes
        %83  i32
        %84  type
        %85  i32
        %86  i32
        %87  obj<hl.types.ArrayBase>
        %88  void
        %89  dyn
        %90  f64
        %91  i32
        %92  i32
        %93  bool
        %94  type
        %95  i32
        %96  obj<hl.types.ArrayBytes_Float>
        %97  bool
        %98  bytes
        %99  i32
        %100 obj<hl.types.ArrayBase>
        %101 type
        %102 obj<hl.types.ArrayBytes_Int>
        %103 bytes
        %104 obj<hl.types.ArrayDyn>
        %105 obj<hl.types.ArrayBase>
        %106 void
        %107 i32
        %108 obj<hl.types.ArrayBytes_Float>
        %109 bool
        %110 dyn
    [Code]
        :$0  
            j_always $1
        :$1  
            get_field %2 %0.0
            get_type %3 %2
            cmp ne %4 %1 %3
            j_true %4 $3 $2
        :$2  
            get_field %5 %0.0
            ret %5
        :$3  
            get_field %6 %0.1
            j_true %6 $5 $4
        :$4  
            null %7
            ret %4
        :$5  
            null %8
            type %9 type[28]
            cmp ne %10 %1 %9
            j_true %10 $10 $6
        :$6  
            null %11
            get_field %12 %0.0
            call_intrinsic %13 @eon.null_check(%12, )
            get_field %14 %12.0
            int %15 2
            shl %16 %14 %10
            call %17 fn[36](%16, )
            mov %18 %17
            int %19 0
            get_field %20 %0.0
            call_intrinsic %21 @eon.null_check(%20, )
            get_field %22 %20.0
            nop
            cmp sge %23 %19 %10
            j_true %23 $9 $7
        :$7  
            phi %24 [%9 $6], [%24 $8], 
            phi %25 [%22 $6], [%25 $8], 
            phi %26 [%17 $6], [%26 $8], 
            phi %27 [%0 $6], [%27 $8], 
            phi %28 [%1 $6], [%28 $8], 
            phi %29 [%20 $6], [%36 $8], 
            phi %30 [%18 $6], [%30 $8], 
            phi %31 [%8 $6], [%31 $8], 
            phi %32 [%19 $6], [%35 $8], 
            phi %33 [%6 $6], [%33 $8], 
            mov %34 %32
            incr %35 %32
            get_field %36 %27.0
            call_intrinsic %37 @eon.null_check(%36, )
            call_method %38 %36 fn[0](%34, )
            call_intrinsic %39 @eon.safe_cast(%4, )
            int %40 2
            shl %41 %34 %40
            set_mem %30[%41] %39
            j_always $8
        :$8  
            nop
            cmp sge %42 %35 %10
            j_true %42 $9 $7
        :$9  
            phi %43 [%28 $8], [%1 $6], 
            phi %44 [%24 $8], [%9 $6], 
            phi %45 [%25 $8], [%22 $6], 
            phi %46 [%27 $8], [%0 $6], 
            phi %47 [%33 $8], [%6 $6], 
            phi %48 [%30 $8], [%18 $6], 
            phi %49 [%26 $8], [%17 $6], 
            phi %50 [%36 $8], [%20 $6], 
            phi %51 [%35 $8], [%19 $6], 
            phi %52 [%31 $8], [%8 $6], 
            get_field %53 %46.0
            call_intrinsic %54 @eon.null_check(%53, )
            get_field %55 %53.0
            call %56 fn[64](%48, %55, )
            set_field %46.0 %56
            bool %57 false
            set_field %46.1 %57
            ret %56
        :$10 
            null %58
            type %59 type[34]
            cmp ne %60 %1 %59
            j_true %60 $15 $11
        :$11 
            null %61
            get_field %62 %0.0
            call_intrinsic %63 @eon.null_check(%62, )
            get_field %64 %62.0
            int %65 3
            shl %66 %64 %10
            call %67 fn[36](%66, )
            mov %68 %67
            int %69 0
            get_field %70 %0.0
            call_intrinsic %71 @eon.null_check(%70, )
            get_field %72 %70.0
            nop
            cmp sge %73 %69 %10
            j_true %73 $14 $12
        :$12 
            phi %74 [%70 $11], [%87 $13], 
            phi %75 [%67 $11], [%75 $13], 
            phi %76 [%69 $11], [%86 $13], 
            phi %77 [%0 $11], [%77 $13], 
            phi %78 [%6 $11], [%78 $13], 
            phi %79 [%58 $11], [%79 $13], 
            phi %80 [%8 $11], [%80 $13], 
            phi %81 [%59 $11], [%81 $13], 
            phi %82 [%68 $11], [%82 $13], 
            phi %83 [%72 $11], [%83 $13], 
            phi %84 [%1 $11], [%84 $13], 
            mov %85 %76
            incr %86 %76
            get_field %87 %77.0
            call_intrinsic %88 @eon.null_check(%87, )
            call_method %89 %87 fn[0](%85, )
            call_intrinsic %90 @eon.safe_cast(%4, )
            int %91 3
            shl %92 %85 %91
            set_mem %82[%92] %90
            j_always $13
        :$13 
            nop
            cmp sge %93 %86 %10
            j_true %93 $14 $12
        :$14 
            phi %94 [%84 $13], [%1 $11], 
            phi %95 [%83 $13], [%72 $11], 
            phi %96 [%79 $13], [%58 $11], 
            phi %97 [%78 $13], [%6 $11], 
            phi %98 [%75 $13], [%67 $11], 
            phi %99 [%86 $13], [%69 $11], 
            phi %100 [%87 $13], [%70 $11], 
            phi %101 [%81 $13], [%59 $11], 
            phi %102 [%80 $13], [%8 $11], 
            phi %103 [%82 $13], [%68 $11], 
            phi %104 [%77 $13], [%0 $11], 
            get_field %105 %104.0
            call_intrinsic %106 @eon.null_check(%105, )
            get_field %107 %105.0
            call %108 fn[67](%103, %107, )
            set_field %104.0 %108
            bool %109 false
            set_field %104.1 %109
            ret %108
        :$15 
            null %110
            ret %4
        :$16 
            unreachable
#276 = fn[314] fn(obj<hl.types.ArrayDyn>, dyn, ) -> i32
    [Values]
        %0 obj<hl.types.ArrayDyn>
        %1 dyn
        %2 obj<hl.types.ArrayBase>
        %3 bool
        %4 i32
        %5 i32
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            cmp ne %3 %1 %2
            j_true %3 $3 $2
        :$2
            int %4 0
            ret %3
        :$3
            call %5 fn[243](%0, %1, )
            ret %3
        :$4
            unreachable
#277 = fn[386] fn(obj<hl.types.ArrayObjIterator>, obj<hl.types.ArrayObj>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayObjIterator>
        %1 obj<hl.types.ArrayObj>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[323](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#278 = fn[387] fn(obj<hl.types.ArrayObjIterator>, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayObjIterator>
        %1 i32
        %2 obj<hl.types.ArrayObj>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.1
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#279 = fn[388] fn(obj<hl.types.ArrayObjIterator>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayObjIterator>
        %1 obj<hl.types.ArrayObj>
        %2 void
        %3 array<void>
        %4 i32
        %5 i32
        %6 i32
        %7 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.1
            get_field %4 %0.1
            mov %5 %4
            incr %6 %4
            set_field %0.1 %6
            get_array %7 %3[%5]
            ret %7
        :$2
            unreachable
#280 = fn[389] fn(obj<hl.types.ArrayObjKeyValueIterator>, obj<hl.types.ArrayObj>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayObjKeyValueIterator>
        %1 obj<hl.types.ArrayObj>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[326](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#281 = fn[241] fn(array<void>, ) -> obj<hl.types.ArrayObj>
    [Values]
        %0 array<void>
        %1 obj<hl.types.ArrayObj>
        %2 i32
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            set_field %1.1 %0
            array_size %2 %0
            set_field %1.0 %2
            ret %1
        :$2
            unreachable
#282 = fn[269] fn(obj<hl.types.ArrayObj>, ) -> void
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 i32
        %2 i32
        %3 type
        %4 array<void>
    [Code]
        :$0
            j_always $1
        :$1
            int %1 0
            set_field %0.0 %1
            int %2 0
            type %3 type[9]
            call %4 fn[240](%3, %2, )
            set_field %0.1 %4
            ret_void
        :$2
            unreachable
#283 = fn[68] fn(obj<hl.types.ArrayObj>, obj<hl.types.ArrayObj>, ) -> obj<hl.types.ArrayObj>
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  obj<hl.types.ArrayObj>
        %2  i32
        %3  void
        %4  i32
        %5  i32
        %6  type
        %7  array<void>
        %8  i32
        %9  array<void>
        %10 i32
        %11 i32
        %12 void
        %13 i32
        %14 array<void>
        %15 i32
        %16 i32
        %17 void
        %18 obj<hl.types.ArrayObj>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%1, )
            get_field %4 %1.0
            add %5 %2 %4
            type %6 type[9]
            call %7 fn[240](%6, %5, )
            int %8 0
            get_field %9 %0.1
            int %10 0
            get_field %11 %0.0
            call %12 fn[284](%7, %8, %9, %10, %11, )
            get_field %13 %0.0
            get_field %14 %1.1
            int %15 0
            get_field %16 %1.0
            call %17 fn[284](%7, %13, %14, %15, %16, )
            call %18 fn[241](%7, )
            ret %18
        :$2 
            unreachable
#284 = fn[69] fn(obj<hl.types.ArrayObj>, obj<String>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  obj<String>
        %2  obj<StringBuf>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  void
        %8  obj<String>
        %9  i32
        %10 obj<hl.types.ArrayObj>
        %11 obj<StringBuf>
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 bool
        %17 void
        %18 void
        %19 array<void>
        %20 void
        %21 dyn
        %22 void
        %23 obj<StringBuf>
        %24 i32
        %25 i32
        %26 dyn
        %27 obj<String>
        %28 void
        %29 obj<hl.types.ArrayObj>
        %30 array<void>
        %31 i32
        %32 i32
        %33 bool
        %34 void
        %35 obj<String>
        %36 i32
        %37 obj<hl.types.ArrayObj>
        %38 i32
        %39 obj<StringBuf>
        %40 void
        %41 obj<String>
        %42 array<void>
        %43 void
        %44 dyn
        %45 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[245](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%28 $4], [%3 $1], 
            phi %8 [%27 $4], [%1 $1], 
            phi %9 [%32 $4], [%4 $1], 
            phi %10 [%29 $4], [%0 $1], 
            phi %11 [%23 $4], [%2 $1], 
            phi %12 [%25 $4], [%5 $1], 
            mov %13 %9
            incr %14 %9
            int %15 0
            cmp sge %16 %15 %6
            j_true %16 $6 $3
        :$3 
            call_intrinsic %17 @eon.null_check(%11, )
            call %18 fn[246](%11, %8, )
            get_field %19 %10.1
            call_intrinsic %20 @eon.null_check(%11, )
            get_array %21 %19[%6]
            call %22 fn[246](%11, %21, )
            j_always $4
        :$4 
            phi %23 [%11 $6], [%11 $3], 
            phi %24 [%13 $6], [%13 $3], 
            phi %25 [%12 $6], [%12 $3], 
            phi %26 [%44 $6], [%21 $3], 
            phi %27 [%8 $6], [%8 $3], 
            phi %28 [%45 $6], [%22 $3], 
            phi %29 [%10 $6], [%10 $3], 
            phi %30 [%42 $6], [%19 $3], 
            phi %31 [%15 $6], [%15 $3], 
            phi %32 [%14 $6], [%14 $3], 
            nop
            cmp sge %33 %32 %25
            j_true %33 $5 $2
        :$5 
            phi %34 [%28 $4], [%3 $1], 
            phi %35 [%27 $4], [%1 $1], 
            phi %36 [%32 $4], [%4 $1], 
            phi %37 [%29 $4], [%0 $1], 
            phi %38 [%25 $4], [%5 $1], 
            phi %39 [%23 $4], [%2 $1], 
            call_intrinsic %40 @eon.null_check(%39, )
            call %41 fn[248](%39, )
            ret %41
        :$6 
            get_field %42 %10.1
            call_intrinsic %43 @eon.null_check(%11, )
            get_array %44 %42[%6]
            call %45 fn[246](%11, %44, )
            j_always $4
        :$7 
            unreachable
#285 = fn[70] fn(obj<hl.types.ArrayObj>, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 bool
    [Code]
        :$0
            j_always $1
        :$1
            bool %1 true
            ret %1
        :$2
            unreachable
#286 = fn[71] fn(obj<hl.types.ArrayObj>, ) -> dyn
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  i32
        %3  bool
        %4  dyn
        %5  i32
        %6  i32
        %7  array<void>
        %8  i32
        %9  dyn
        %10 array<void>
        %11 i32
        %12 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %2
            j_true %3 $3 $2
        :$2 
            null %4
            ret %3
        :$3 
            get_field %5 %0.0
            decr %6 %5
            set_field %0.0 %6
            get_field %7 %0.1
            get_field %8 %0.0
            get_array %9 %7[%8]
            get_field %10 %0.1
            get_field %11 %0.0
            null %12
            set_array %10[%11] %12
            ret %3
        :$4 
            unreachable
#287 = fn[72] fn(obj<hl.types.ArrayObj>, dyn, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  dyn
        %2  i32
        %3  array<void>
        %4  i32
        %5  bool
        %6  void
        %7  array<void>
        %8  i32
        %9  i32
        %10 i32
        %11 array<void>
        %12 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            get_field %3 %0.1
            array_size %4 %3
            cmp ne %5 %5 %2
            j_true %5 $4 $2
        :$2 
            call %6 fn[92](%0, %2, )
            j_always $3
        :$3 
            get_field %7 %0.1
            set_array %7[%2] %1
            get_field %8 %0.0
            ret %5
        :$4 
            get_field %9 %0.0
            incr %10 %5
            set_field %0.0 %5
            get_field %11 %0.1
            set_array %11[%2] %1
            get_field %12 %0.0
            ret %5
        :$5 
            unreachable
#288 = fn[73] fn(obj<hl.types.ArrayObj>, ) -> void
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  i32
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  i32
        %8  obj<hl.types.ArrayObj>
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 array<void>
        %17 dyn
        %18 array<void>
        %19 array<void>
        %20 dyn
        %21 array<void>
        %22 bool
        %23 i32
        %24 i32
        %25 i32
        %26 obj<hl.types.ArrayObj>
    [Code]
        :$0 
            j_always $1
        :$1 
            int %1 0
            get_field %2 %0.0
            int %3 1
            sshr %4 %2 %3
            nop
            cmp sge %5 %1 %4
            j_true %5 $4 $2
        :$2 
            phi %6 [%4 $1], [%6 $3], 
            phi %7 [%1 $1], [%11 $3], 
            phi %8 [%0 $1], [%8 $3], 
            phi %9 [%3 $1], [%10 $3], 
            mov %10 %7
            incr %11 %7
            get_field %12 %8.0
            int %13 1
            sub %14 %5 %13
            sub %15 %5 %10
            get_field %16 %8.1
            get_array %17 %16[%10]
            get_field %18 %8.1
            get_field %19 %8.1
            get_array %20 %19[%5]
            set_array %18[%10] %20
            get_field %21 %8.1
            set_array %21[%5] %17
            j_always $3
        :$3 
            nop
            cmp sge %22 %11 %6
            j_true %22 $4 $2
        :$4 
            phi %23 [%11 $3], [%1 $1], 
            phi %24 [%10 $3], [%3 $1], 
            phi %25 [%6 $3], [%4 $1], 
            phi %26 [%8 $3], [%0 $1], 
            ret_void
        :$5 
            unreachable
#289 = fn[74] fn(obj<hl.types.ArrayObj>, ) -> dyn
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  i32
        %3  bool
        %4  dyn
        %5  i32
        %6  i32
        %7  array<void>
        %8  i32
        %9  dyn
        %10 array<void>
        %11 i32
        %12 array<void>
        %13 i32
        %14 i32
        %15 void
        %16 array<void>
        %17 i32
        %18 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            int %2 0
            cmp ne %3 %1 %3
            j_true %3 $3 $2
        :$2 
            null %4
            ret %4
        :$3 
            get_field %5 %0.0
            decr %6 %5
            set_field %0.0 %6
            get_field %7 %0.1
            int %8 0
            get_array %9 %7[%8]
            get_field %10 %0.1
            int %11 0
            get_field %12 %0.1
            int %13 1
            get_field %14 %0.0
            call %15 fn[284](%10, %11, %12, %3, %14, )
            get_field %16 %0.1
            get_field %17 %0.0
            null %18
            set_array %16[%17] %18
            ret %9
        :$4 
            unreachable
#290 = fn[75] fn(obj<hl.types.ArrayObj>, i32, null<i32>, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  null<i32>
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 i32
        %13 obj<hl.types.ArrayObj>
        %14 null<i32>
        %15 i32
        %16 i32
        %17 null<i32>
        %18 i32
        %19 obj<hl.types.ArrayObj>
        %20 i32
        %21 i32
        %22 i32
        %23 bool
        %24 i32
        %25 i32
        %26 i32
        %27 null<i32>
        %28 obj<hl.types.ArrayObj>
        %29 obj<hl.types.ArrayObj>
        %30 void
        %31 i32
        %32 i32
        %33 i32
        %34 obj<hl.types.ArrayObj>
        %35 null<i32>
        %36 array<void>
        %37 type
        %38 array<void>
        %39 i32
        %40 void
        %41 obj<hl.types.ArrayObj>
        %42 i32
        %43 null<i32>
        %44 i32
        %45 obj<hl.types.ArrayObj>
        %46 i32
        %47 i32
        %48 bool
        %49 i32
        %50 i32
        %51 i32
        %52 bool
        %53 i32
        %54 obj<hl.types.ArrayObj>
        %55 null<i32>
        %56 i32
        %57 i32
        %58 i32
        %59 i32
        %60 i32
        %61 bool
        %62 i32
        %63 bool
        %64 obj<hl.types.ArrayObj>
        %65 i32
        %66 i32
        %67 null<i32>
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $12 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $12 $3
        :$3 
            int %10 0
            mov %11 %4
            j_not_null %2 $8 $4
        :$4 
            phi %12 [%65 $12], [%11 $3], 
            phi %13 [%64 $12], [%0 $3], 
            phi %14 [%67 $12], [%2 $3], 
            phi %15 [%66 $12], [%8 $3], 
            get_field %16 %13.0
            j_always $5
        :$5 
            phi %17 [%14 $4], [%43 $9], [%43 $11], 
            phi %18 [%16 $4], [%50 $9], [%46 $11], 
            phi %19 [%13 $4], [%45 $9], [%45 $11], 
            phi %20 [%12 $4], [%44 $9], [%44 $11], 
            sub %21 %18 %20
            int %22 0
            cmp sge %23 %21 %22
            j_true %23 $7 $6
        :$6 
            phi %24 [%59 $10], [%21 $5], 
            phi %25 [%53 $10], [%20 $5], 
            phi %26 [%60 $10], [%22 $5], 
            phi %27 [%55 $10], [%17 $5], 
            phi %28 [%54 $10], [%19 $5], 
            new %29
            call %30 fn[269](%29, )
            ret %29
        :$7 
            phi %31 [%59 $10], [%21 $5], 
            phi %32 [%53 $10], [%20 $5], 
            phi %33 [%60 $10], [%22 $5], 
            phi %34 [%54 $10], [%19 $5], 
            phi %35 [%55 $10], [%17 $5], 
            get_field %36 %34.1
            type %37 type[9]
            call %38 fn[240](%37, %31, )
            int %39 0
            call %40 fn[284](%38, %39, %9, %32, %31, )
            call %41 fn[241](%38, )
            ret %41
        :$8 
            phi %42 [%8 $3], [%66 $12], 
            phi %43 [%2 $3], [%67 $12], 
            phi %44 [%11 $3], [%65 $12], 
            phi %45 [%0 $3], [%64 $12], 
            call_intrinsic %46 @eon.safe_cast(%43, )
            int %47 0
            cmp sge %48 %46 %47
            j_true %48 $11 $9
        :$9 
            get_field %49 %45.0
            add %50 %46 %49
            get_field %51 %45.0
            cmp sge %52 %51 %50
            j_true %52 $5 $10
        :$10
            phi %53 [%44 $11], [%44 $9], 
            phi %54 [%45 $11], [%45 $9], 
            phi %55 [%43 $11], [%43 $9], 
            phi %56 [%62 $11], [%51 $9], 
            phi %57 [%46 $11], [%50 $9], 
            get_field %58 %54.0
            sub %59 %58 %53
            int %60 0
            cmp sge %61 %59 %60
            j_true %61 $7 $6
        :$11
            get_field %62 %45.0
            cmp sge %63 %62 %46
            j_true %63 $5 $10
        :$12
            phi %64 [%0 $2], [%0 $1], 
            phi %65 [%7 $2], [%1 $1], 
            phi %66 [%8 $2], [%3 $1], 
            phi %67 [%2 $2], [%2 $1], 
            j_not_null %67 $8 $4
        :$13
            unreachable
#291 = fn[76] fn(obj<hl.types.ArrayObj>, fn(dyn, dyn, ) -> i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 fn(dyn, dyn, ) -> i32
        %2 obj<hl.types.ArrayDyn>
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            call_intrinsic %2 @eon.safe_cast(%0, )
            call %3 fn[285](%2, %1, )
            ret_void
        :$2
            unreachable
#292 = fn[77] fn(obj<hl.types.ArrayObj>, i32, i32, ) -> obj<hl.types.ArrayBase>
    [Values]
        %0   obj<hl.types.ArrayObj>
        %1   i32
        %2   i32
        %3   i32
        %4   bool
        %5   obj<hl.types.ArrayObj>
        %6   void
        %7   i32
        %8   bool
        %9   i32
        %10  i32
        %11  i32
        %12  i32
        %13  bool
        %14  i32
        %15  i32
        %16  i32
        %17  bool
        %18  i32
        %19  i32
        %20  obj<hl.types.ArrayObj>
        %21  i32
        %22  i32
        %23  i32
        %24  i32
        %25  i32
        %26  i32
        %27  i32
        %28  i32
        %29  i32
        %30  obj<hl.types.ArrayObj>
        %31  array<void>
        %32  type
        %33  array<void>
        %34  i32
        %35  void
        %36  obj<hl.types.ArrayObj>
        %37  i32
        %38  i32
        %39  i32
        %40  void
        %41  i32
        %42  i32
        %43  i32
        %44  i32
        %45  bool
        %46  obj<hl.types.ArrayObj>
        %47  i32
        %48  void
        %49  i32
        %50  i32
        %51  i32
        %52  array<void>
        %53  obj<hl.types.ArrayObj>
        %54  type
        %55  array<void>
        %56  i32
        %57  i32
        %58  i32
        %59  dyn
        %60  i32
        %61  i32
        %62  bool
        %63  array<void>
        %64  i32
        %65  i32
        %66  i32
        %67  type
        %68  i32
        %69  obj<hl.types.ArrayObj>
        %70  i32
        %71  obj<hl.types.ArrayObj>
        %72  array<void>
        %73  void
        %74  obj<hl.types.ArrayObj>
        %75  i32
        %76  i32
        %77  i32
        %78  i32
        %79  i32
        %80  bool
        %81  i32
        %82  i32
        %83  i32
        %84  i32
        %85  bool
        %86  i32
        %87  i32
        %88  array<void>
        %89  type
        %90  array<void>
        %91  i32
        %92  void
        %93  obj<hl.types.ArrayObj>
        %94  i32
        %95  i32
        %96  i32
        %97  void
        %98  i32
        %99  i32
        %100 i32
        %101 i32
        %102 bool
        %103 i32
        %104 i32
        %105 i32
        %106 obj<hl.types.ArrayObj>
        %107 i32
        %108 bool
    [Code]
        :$0  
            j_always $1
        :$1  
            int %3 0
            cmp sge %4 %2 %3
            j_true %4 $3 $2
        :$2  
            new %5
            call %6 fn[269](%5, )
            ret %5
        :$3  
            int %7 0
            cmp sge %8 %1 %7
            j_true %8 $14 $4
        :$4  
            get_field %9 %0.0
            add %10 %4 %1
            mov %11 %4
            int %12 0
            cmp sge %13 %4 %12
            j_true %13 $14 $5
        :$5  
            int %14 0
            mov %15 %4
            get_field %16 %0.0
            cmp sge %17 %16 %15
            j_true %17 $11 $6
        :$6  
            phi %18 [%103 $14], [%15 $5], 
            phi %19 [%105 $14], [%2 $5], 
            phi %20 [%106 $14], [%0 $5], 
            phi %21 [%107 $14], [%16 $5], 
            int %22 0
            mov %23 %4
            int %24 0
            mov %25 %4
            j_always $7
        :$7  
            phi %26 [%77 $11], [%23 $6], [%77 $12], 
            phi %27 [%79 $11], [%21 $6], [%84 $12], 
            phi %28 [%76 $11], [%25 $6], [%83 $12], 
            phi %29 [%78 $11], [%24 $6], [%82 $12], 
            phi %30 [%74 $11], [%20 $6], [%74 $12], 
            get_field %31 %30.1
            type %32 type[9]
            call %33 fn[240](%32, %28, )
            int %34 0
            call %35 fn[284](%33, %4, %8, %26, %28, )
            call %36 fn[241](%33, )
            add %37 %26 %28
            get_field %38 %30.0
            sub %39 %38 %4
            call %40 fn[284](%8, %26, %8, %4, %39, )
            get_field %41 %30.0
            sub %42 %41 %28
            set_field %30.0 %42
            nop
            decr %43 %28
            int %44 0
            cmp slt %45 %43 %44
            j_true %45 $10 $8
        :$8  
            phi %46 [%36 $7], [%93 $13], [%46 $9], 
            phi %47 [%44 $7], [%101 $13], [%61 $9], 
            phi %48 [%40 $7], [%97 $13], [%48 $9], 
            phi %49 [%37 $7], [%94 $13], [%49 $9], 
            phi %50 [%43 $7], [%100 $13], [%60 $9], 
            phi %51 [%26 $7], [%77 $13], [%51 $9], 
            phi %52 [%33 $7], [%90 $13], [%52 $9], 
            phi %53 [%30 $7], [%74 $13], [%53 $9], 
            phi %54 [%32 $7], [%89 $13], [%54 $9], 
            phi %55 [%31 $7], [%88 $13], [%55 $9], 
            phi %56 [%39 $7], [%96 $13], [%56 $9], 
            get_field %57 %53.0
            add %58 %57 %50
            null %59
            set_array %8[%58] %59
            j_always $9
        :$9  
            nop
            decr %60 %50
            int %61 0
            cmp slt %62 %60 %61
            j_true %62 $10 $8
        :$10 
            phi %63 [%55 $9], [%31 $7], [%88 $13], 
            phi %64 [%51 $9], [%26 $7], [%77 $13], 
            phi %65 [%61 $9], [%44 $7], [%101 $13], 
            phi %66 [%56 $9], [%39 $7], [%96 $13], 
            phi %67 [%54 $9], [%32 $7], [%89 $13], 
            phi %68 [%60 $9], [%43 $7], [%100 $13], 
            phi %69 [%46 $9], [%36 $7], [%93 $13], 
            phi %70 [%49 $9], [%37 $7], [%94 $13], 
            phi %71 [%53 $9], [%30 $7], [%74 $13], 
            phi %72 [%52 $9], [%33 $7], [%90 $13], 
            phi %73 [%48 $9], [%40 $7], [%97 $13], 
            ret %69
        :$11 
            phi %74 [%0 $5], [%106 $14], 
            phi %75 [%16 $5], [%107 $14], 
            phi %76 [%2 $5], [%105 $14], 
            phi %77 [%15 $5], [%103 $14], 
            add %78 %77 %76
            get_field %79 %74.0
            cmp sge %80 %79 %4
            j_true %80 $7 $12
        :$12 
            get_field %81 %74.0
            sub %82 %4 %77
            mov %83 %4
            int %84 0
            cmp sge %85 %4 %84
            j_true %85 $7 $13
        :$13 
            int %86 0
            mov %87 %4
            get_field %88 %74.1
            type %89 type[9]
            call %90 fn[240](%89, %87, )
            int %91 0
            call %92 fn[284](%90, %4, %8, %77, %87, )
            call %93 fn[241](%90, )
            add %94 %77 %87
            get_field %95 %74.0
            sub %96 %95 %4
            call %97 fn[284](%8, %77, %8, %4, %96, )
            get_field %98 %74.0
            sub %99 %98 %87
            set_field %74.0 %99
            nop
            decr %100 %87
            int %101 0
            cmp slt %102 %100 %101
            j_true %102 $10 $8
        :$14 
            phi %103 [%1 $3], [%11 $4], 
            phi %104 [%7 $3], [%12 $4], 
            phi %105 [%2 $3], [%2 $4], 
            phi %106 [%0 $3], [%0 $4], 
            get_field %107 %106.0
            cmp sge %108 %107 %103
            j_true %108 $11 $6
        :$15 
            unreachable
#293 = fn[78] fn(obj<hl.types.ArrayObj>, ) -> obj<String>
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  obj<$Std>
        %2  i32
        %3  i32
        %4  bool
        %5  obj<String>
        %6  obj<$Std>
        %7  i32
        %8  i32
        %9  obj<StringBuf>
        %10 void
        %11 i32
        %12 void
        %13 void
        %14 i32
        %15 i32
        %16 bool
        %17 obj<StringBuf>
        %18 obj<$Std>
        %19 obj<hl.types.ArrayObj>
        %20 void
        %21 i32
        %22 i32
        %23 i32
        %24 i32
        %25 i32
        %26 bool
        %27 void
        %28 i32
        %29 void
        %30 i32
        %31 obj<StringBuf>
        %32 obj<$Std>
        %33 obj<hl.types.ArrayObj>
        %34 i32
        %35 void
        %36 i32
        %37 i32
        %38 array<void>
        %39 void
        %40 dyn
        %41 void
        %42 bool
        %43 obj<hl.types.ArrayObj>
        %44 i32
        %45 obj<$Std>
        %46 i32
        %47 void
        %48 obj<StringBuf>
        %49 void
        %50 void
        %51 i32
        %52 void
        %53 obj<$Std>
        %54 i32
        %55 i32
        %56 obj<String>
        %57 i32
        %58 obj<hl.types.ArrayObj>
        %59 obj<StringBuf>
        %60 void
        %61 obj<$Std>
        %62 i32
        %63 i32
        %64 i32
        %65 dyn
        %66 dyn
        %67 obj<haxe.Exception>
        %68 void
        %69 dyn
        %70 obj<$Std>
        %71 i32
        %72 i32
        %73 void
    [Code]
        :$0 
            j_always $1
        :$1 
            get_global %1 global[42]
            get_field %2 %1.6
            int %3 5
            cmp slt %4 %2 %4
            j_true %4 $3 $2
        :$2 
            get_global %5 global[43]
            ret %5
        :$3 
            get_global %6 global[42]
            get_field %7 %6.6
            incr %8 %7
            set_field %6.6 %8
            new %9
            call %10 fn[245](%9, )
            int %11 91
            call %12 fn[247](%9, %11, )
            invoke_intrinsic %13 @eon.begin_trap() cont $4 unwind $15
        :$4 
            int %14 0
            get_field %15 %0.0
            nop
            cmp sge %16 %14 %4
            j_true %16 $12 $5
        :$5 
            phi %17 [%9 $4], [%31 $11], 
            phi %18 [%6 $4], [%32 $11], 
            phi %19 [%0 $4], [%33 $11], 
            phi %20 [%12 $4], [%41 $11], 
            phi %21 [%14 $4], [%30 $11], 
            phi %22 [%15 $4], [%36 $11], 
            mov %23 %21
            incr %24 %21
            int %25 0
            cmp sge %26 %25 %23
            j_true %26 $8 $6
        :$6 
            invoke_intrinsic %27 @eon.null_check(%17, ) cont $7 unwind $15
        :$7 
            int %28 44
            invoke %29 fn[247](%17, %28, ) cont $8 unwind $15
        :$8 
            phi %30 [%24 $5], [%24 $7], 
            phi %31 [%17 $5], [%17 $7], 
            phi %32 [%18 $5], [%18 $7], 
            phi %33 [%19 $5], [%19 $7], 
            phi %34 [%25 $5], [%25 $7], 
            phi %35 [%20 $5], [%29 $7], 
            phi %36 [%22 $5], [%22 $7], 
            phi %37 [%23 $5], [%23 $7], 
            get_field %38 %33.1
            invoke_intrinsic %39 @eon.null_check(%31, ) cont $9 unwind $15
        :$9 
            get_array %40 %38[%37]
            invoke %41 fn[246](%31, %40, ) cont $10 unwind $15
        :$10
            j_always $11
        :$11
            nop
            cmp sge %42 %30 %4
            j_true %42 $12 $5
        :$12
            phi %43 [%33 $11], [%0 $4], 
            phi %44 [%36 $11], [%15 $4], 
            phi %45 [%32 $11], [%6 $4], 
            phi %46 [%30 $11], [%14 $4], 
            phi %47 [%41 $11], [%12 $4], 
            phi %48 [%31 $11], [%9 $4], 
            invoke_intrinsic %49 @eon.end_trap() cont $13 unwind $15
        :$13
            j_always $14
        :$14
            call_intrinsic %50 @eon.null_check(%48, )
            int %51 93
            call %52 fn[247](%48, %51, )
            get_global %53 global[42]
            get_field %54 %53.6
            decr %55 %54
            set_field %53.6 %55
            call %56 fn[248](%48, )
            ret %56
        :$15
            phi %57 [%37 $9], [%37 $8], [%23 $7], [%23 $6], 
            phi %58 [%33 $9], [%33 $8], [%19 $7], [%19 $6], 
            phi %59 [%31 $9], [%31 $8], [%17 $7], [%17 $6], 
            phi %60 [%41 $9], [%35 $8], [%29 $7], [%20 $6], 
            phi %61 [%32 $9], [%32 $8], [%18 $7], [%18 $6], 
            phi %62 [%30 $9], [%30 $8], [%24 $7], [%24 $6], 
            phi %63 [%36 $9], [%36 $8], [%22 $7], [%22 $6], 
            phi %64 [%34 $9], [%34 $8], [%25 $7], [%25 $6], 
            call_intrinsic %65 @eon.receive_exception()
            null %66
            call %67 fn[272](%65, )
            call_intrinsic %68 @eon.null_check(%67, )
            call_method %69 %67 fn[0]()
            get_global %70 global[42]
            get_field %71 %70.6
            decr %72 %71
            set_field %70.6 %72
            invoke_intrinsic %73 @eon.rethrow(%69, ) cont $16 unwind $16
        :$16
            unreachable
#294 = fn[79] fn(obj<hl.types.ArrayObj>, dyn, ) -> void
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  dyn
        %2  array<void>
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  void
        %8  array<void>
        %9  i32
        %10 array<void>
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 void
        %16 array<void>
        %17 i32
        %18 i32
        %19 i32
        %20 array<void>
        %21 i32
        %22 array<void>
        %23 i32
        %24 i32
        %25 i32
        %26 i32
        %27 void
        %28 array<void>
        %29 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.1
            get_field %3 %0.0
            array_size %4 %2
            cmp ne %5 %3 %5
            j_true %5 $4 $2
        :$2 
            get_field %6 %0.0
            call %7 fn[92](%0, %6, )
            j_always $3
        :$3 
            get_field %8 %0.1
            int %9 1
            get_field %10 %0.1
            int %11 0
            get_field %12 %0.0
            int %13 1
            sub %14 %12 %13
            call %15 fn[284](%8, %9, %10, %5, %14, )
            get_field %16 %0.1
            int %17 0
            set_array %16[%17] %1
            ret_void
        :$4 
            get_field %18 %0.0
            incr %19 %18
            set_field %0.0 %19
            get_field %20 %0.1
            int %21 1
            get_field %22 %0.1
            int %23 0
            get_field %24 %0.0
            int %25 1
            sub %26 %24 %25
            call %27 fn[284](%20, %21, %22, %5, %26, )
            get_field %28 %0.1
            int %29 0
            set_array %28[%29] %1
            ret_void
        :$5 
            unreachable
#295 = fn[80] fn(obj<hl.types.ArrayObj>, i32, dyn, ) -> void
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  dyn
        %3  i32
        %4  bool
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  bool
        %10 i32
        %11 i32
        %12 dyn
        %13 i32
        %14 obj<hl.types.ArrayObj>
        %15 i32
        %16 array<void>
        %17 i32
        %18 i32
        %19 bool
        %20 i32
        %21 obj<hl.types.ArrayObj>
        %22 dyn
        %23 array<void>
        %24 i32
        %25 i32
        %26 i32
        %27 void
        %28 array<void>
        %29 i32
        %30 i32
        %31 array<void>
        %32 i32
        %33 i32
        %34 i32
        %35 i32
        %36 void
        %37 array<void>
        %38 i32
        %39 i32
        %40 i32
        %41 dyn
        %42 array<void>
        %43 obj<hl.types.ArrayObj>
        %44 i32
        %45 i32
        %46 array<void>
        %47 i32
        %48 i32
        %49 array<void>
        %50 i32
        %51 i32
        %52 i32
        %53 i32
        %54 void
        %55 array<void>
        %56 i32
        %57 bool
        %58 i32
        %59 i32
        %60 array<void>
        %61 i32
        %62 i32
        %63 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            cmp sge %4 %1 %3
            j_true %4 $9 $2
        :$2 
            get_field %5 %0.0
            add %6 %4 %1
            mov %7 %4
            int %8 0
            cmp sge %9 %4 %8
            j_true %9 $8 $3
        :$3 
            int %10 0
            mov %11 %4
            j_always $4
        :$4 
            phi %12 [%2 $9], [%2 $3], [%2 $8], 
            phi %13 [%56 $9], [%8 $3], [%8 $8], 
            phi %14 [%0 $9], [%0 $3], [%0 $8], 
            phi %15 [%1 $9], [%11 $3], [%7 $8], 
            get_field %16 %14.1
            get_field %17 %14.0
            array_size %18 %16
            cmp ne %19 %4 %18
            j_true %19 $7 $5
        :$5 
            phi %20 [%15 $4], [%59 $10], 
            phi %21 [%14 $4], [%0 $10], 
            phi %22 [%12 $4], [%2 $10], 
            phi %23 [%16 $4], [%60 $10], 
            phi %24 [%18 $4], [%62 $10], 
            phi %25 [%17 $4], [%61 $10], 
            get_field %26 %21.0
            call %27 fn[92](%21, %4, )
            j_always $6
        :$6 
            get_field %28 %21.1
            int %29 1
            add %30 %20 %29
            get_field %31 %21.1
            get_field %32 %21.0
            sub %33 %9 %20
            int %34 1
            sub %35 %9 %34
            call %36 fn[284](%28, %4, %31, %20, %9, )
            get_field %37 %21.1
            set_array %37[%20] %22
            ret_void
        :$7 
            phi %38 [%18 $4], [%62 $10], 
            phi %39 [%15 $4], [%59 $10], 
            phi %40 [%17 $4], [%61 $10], 
            phi %41 [%12 $4], [%2 $10], 
            phi %42 [%16 $4], [%60 $10], 
            phi %43 [%14 $4], [%0 $10], 
            get_field %44 %43.0
            incr %45 %4
            set_field %43.0 %4
            get_field %46 %43.1
            int %47 1
            add %48 %39 %47
            get_field %49 %43.1
            get_field %50 %43.0
            sub %51 %9 %39
            int %52 1
            sub %53 %9 %52
            call %54 fn[284](%46, %4, %49, %39, %9, )
            get_field %55 %43.1
            set_array %55[%39] %41
            ret_void
        :$8 
            j_always $4
        :$9 
            get_field %56 %0.0
            cmp sge %57 %56 %1
            j_true %57 $4 $10
        :$10
            get_field %58 %0.0
            mov %59 %4
            get_field %60 %0.1
            get_field %61 %0.0
            array_size %62 %60
            cmp ne %63 %4 %62
            j_true %63 $7 $5
        :$11
            unreachable
#296 = fn[81] fn(obj<hl.types.ArrayObj>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 dyn
        %2 null<i32>
        %3 i32
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call %3 fn[83](%0, %1, %2, )
            int %4 -1
            cmp ne %5 %3 %5
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#297 = fn[82] fn(obj<hl.types.ArrayObj>, dyn, ) -> bool
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  dyn
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  bool
        %7  i32
        %8  i32
        %9  array<void>
        %10 array<void>
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 void
        %16 array<void>
        %17 i32
        %18 dyn
        %19 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            null %2
            call %3 fn[83](%0, %1, %2, )
            int %4 0
            cmp sge %5 %3 %4
            j_true %5 $3 $2
        :$2 
            bool %6 false
            ret %6
        :$3 
            get_field %7 %0.0
            decr %8 %7
            set_field %0.0 %8
            get_field %9 %0.1
            get_field %10 %0.1
            int %11 1
            add %12 %3 %11
            get_field %13 %0.0
            sub %14 %13 %3
            call %15 fn[284](%9, %3, %10, %12, %14, )
            get_field %16 %0.1
            get_field %17 %0.0
            null %18
            set_array %16[%17] %18
            bool %19 true
            ret %19
        :$4 
            unreachable
#298 = fn[83] fn(obj<hl.types.ArrayObj>, dyn, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  dyn
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  i32
        %8  i32
        %9  i32
        %10 bool
        %11 i32
        %12 i32
        %13 i32
        %14 array<void>
        %15 bool
        %16 array<void>
        %17 i32
        %18 null<i32>
        %19 obj<hl.types.ArrayObj>
        %20 dyn
        %21 i32
        %22 i32
        %23 dyn
        %24 bool
        %25 i32
        %26 bool
        %27 i32
        %28 i32
        %29 dyn
        %30 array<void>
        %31 obj<hl.types.ArrayObj>
        %32 null<i32>
        %33 i32
        %34 i32
        %35 i32
        %36 dyn
        %37 obj<hl.types.ArrayObj>
        %38 null<i32>
        %39 i32
        %40 i32
        %41 array<void>
        %42 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            call_intrinsic %3 @eon.safe_cast(%2, )
            int %4 0
            cmp sge %5 %3 %5
            j_true %5 $9 $2
        :$2 
            get_field %6 %0.0
            add %7 %3 %5
            mov %8 %7
            int %9 0
            cmp sge %10 %7 %5
            j_true %10 $9 $3
        :$3 
            int %11 0
            mov %12 %11
            get_field %13 %0.0
            get_field %14 %0.1
            nop
            cmp sge %15 %12 %13
            j_true %15 $8 $4
        :$4 
            phi %16 [%16 $7], [%41 $9], [%14 $3], 
            phi %17 [%17 $7], [%40 $9], [%13 $3], 
            phi %18 [%18 $7], [%38 $9], [%2 $3], 
            phi %19 [%19 $7], [%37 $9], [%0 $3], 
            phi %20 [%20 $7], [%36 $9], [%1 $3], 
            phi %21 [%25 $7], [%35 $9], [%12 $3], 
            phi %22 [%22 $7], [%39 $9], [%9 $3], 
            get_array %23 %16[%21]
            cmp ne %24 %23 %20
            j_true %24 $6 $5
        :$5 
            ret %21
        :$6 
            incr %25 %21
            j_always $7
        :$7 
            nop
            cmp sge %26 %25 %17
            j_true %26 $8 $4
        :$8 
            phi %27 [%35 $9], [%25 $7], [%12 $3], 
            phi %28 [%40 $9], [%17 $7], [%13 $3], 
            phi %29 [%36 $9], [%20 $7], [%1 $3], 
            phi %30 [%41 $9], [%16 $7], [%14 $3], 
            phi %31 [%37 $9], [%19 $7], [%0 $3], 
            phi %32 [%38 $9], [%18 $7], [%2 $3], 
            phi %33 [%39 $9], [%22 $7], [%9 $3], 
            int %34 -1
            ret %5
        :$9 
            phi %35 [%8 $2], [%3 $1], 
            phi %36 [%1 $2], [%1 $1], 
            phi %37 [%0 $2], [%0 $1], 
            phi %38 [%2 $2], [%2 $1], 
            phi %39 [%9 $2], [%4 $1], 
            get_field %40 %37.0
            get_field %41 %37.1
            nop
            cmp sge %42 %35 %40
            j_true %42 $8 $4
        :$10
            unreachable
#299 = fn[84] fn(obj<hl.types.ArrayObj>, i32, obj<hl.types.ArrayAccess>, i32, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  obj<hl.types.ArrayAccess>
        %3  i32
        %4  i32
        %5  obj<hl.types.ArrayObj>
        %6  i32
        %7  bool
        %8  i32
        %9  bool
        %10 i32
        %11 bool
        %12 i32
        %13 i32
        %14 bool
        %15 i32
        %16 void
        %17 i32
        %18 bool
        %19 obj<hl.types.ArrayObj>
        %20 i32
        %21 obj<hl.types.ArrayAccess>
        %22 i32
        %23 i32
        %24 i32
        %25 obj<hl.types.ArrayObj>
        %26 enum<haxe.io.Error>
        %27 dyn
        %28 void
        %29 array<void>
        %30 array<void>
        %31 void
    [Code]
        :$0 
            j_always $1
        :$1 
            call_intrinsic %5 @eon.safe_cast(%2, )
            int %6 0
            cmp slt %7 %1 %6
            j_true %7 $6 $2
        :$2 
            int %8 0
            cmp slt %9 %3 %8
            j_true %9 $6 $3
        :$3 
            int %10 0
            cmp slt %11 %4 %10
            j_true %11 $6 $4
        :$4 
            add %12 %1 %4
            get_field %13 %0.0
            cmp slt %14 %13 %7
            j_true %14 $6 $5
        :$5 
            add %15 %3 %4
            call_intrinsic %16 @eon.null_check(%5, )
            get_field %17 %5.0
            cmp sge %18 %17 %7
            j_true %18 $7 $6
        :$6 
            phi %19 [%5 $4], [%5 $1], [%5 $2], [%5 $5], [%5 $3], 
            phi %20 [%4 $4], [%4 $1], [%4 $2], [%4 $5], [%4 $3], 
            phi %21 [%2 $4], [%2 $1], [%2 $2], [%2 $5], [%2 $3], 
            phi %22 [%3 $4], [%3 $1], [%3 $2], [%3 $5], [%3 $3], 
            phi %23 [%1 $4], [%1 $1], [%1 $2], [%1 $5], [%1 $3], 
            phi %24 [%13 $4], [%6 $1], [%8 $2], [%17 $5], [%10 $3], 
            phi %25 [%0 $4], [%0 $1], [%0 $2], [%0 $5], [%0 $3], 
            get_global %26 global[28]
            call %27 fn[34](%26, )
            invoke_intrinsic %28 @eon.throw(%9, ) cont $8 unwind $8
        :$7 
            get_field %29 %0.1
            get_field %30 %5.1
            call %31 fn[284](%11, %1, %30, %3, %4, )
            ret_void
        :$8 
            unreachable
#300 = fn[85] fn(obj<hl.types.ArrayObj>, dyn, null<i32>, ) -> i32
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  dyn
        %2  null<i32>
        %3  i32
        %4  i32
        %5  bool
        %6  i32
        %7  null<i32>
        %8  obj<hl.types.ArrayObj>
        %9  dyn
        %10 i32
        %11 i32
        %12 i32
        %13 i32
        %14 i32
        %15 i32
        %16 obj<hl.types.ArrayObj>
        %17 i32
        %18 dyn
        %19 null<i32>
        %20 i32
        %21 bool
        %22 null<i32>
        %23 obj<hl.types.ArrayObj>
        %24 i32
        %25 i32
        %26 dyn
        %27 i32
        %28 array<void>
        %29 dyn
        %30 bool
        %31 i32
        %32 obj<hl.types.ArrayObj>
        %33 i32
        %34 i32
        %35 null<i32>
        %36 i32
        %37 dyn
        %38 i32
        %39 null<i32>
        %40 i32
        %41 i32
        %42 dyn
        %43 obj<hl.types.ArrayObj>
        %44 i32
        %45 bool
        %46 i32
        %47 i32
        %48 i32
        %49 bool
        %50 i32
        %51 i32
        %52 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            j_null %2 $12 $2
        :$2 
            call_intrinsic %4 @eon.safe_cast(%2, )
            j_always $3
        :$3 
            cmp slt %5 %4 %3
            j_true %5 $10 $4
        :$4 
            phi %6 [%3 $3], [%3 $12], 
            phi %7 [%2 $3], [%2 $12], 
            phi %8 [%0 $3], [%0 $12], 
            phi %9 [%1 $3], [%1 $12], 
            phi %10 [%4 $3], [%51 $12], 
            int %11 1
            sub %12 %6 %11
            mov %13 %5
            j_always $5
        :$5 
            phi %14 [%25 $8], [%44 $10], [%11 $4], 
            phi %15 [%31 $8], [%41 $10], [%13 $4], 
            phi %16 [%23 $8], [%43 $10], [%8 $4], 
            phi %17 [%27 $8], [%40 $10], [%6 $4], 
            phi %18 [%26 $8], [%42 $10], [%9 $4], 
            phi %19 [%22 $8], [%39 $10], [%7 $4], 
            nop
            int %20 0
            cmp slt %21 %15 %20
            j_true %21 $9 $6
        :$6 
            phi %22 [%19 $5], [%39 $11], 
            phi %23 [%16 $5], [%43 $11], 
            phi %24 [%15 $5], [%47 $11], 
            phi %25 [%20 $5], [%48 $11], 
            phi %26 [%18 $5], [%42 $11], 
            phi %27 [%17 $5], [%40 $11], 
            get_field %28 %23.1
            get_array %29 %28[%24]
            cmp ne %30 %29 %26
            j_true %30 $8 $7
        :$7 
            ret %24
        :$8 
            decr %31 %24
            j_always $5
        :$9 
            phi %32 [%16 $5], [%43 $11], 
            phi %33 [%20 $5], [%48 $11], 
            phi %34 [%17 $5], [%40 $11], 
            phi %35 [%19 $5], [%39 $11], 
            phi %36 [%15 $5], [%47 $11], 
            phi %37 [%18 $5], [%42 $11], 
            int %38 -1
            ret %5
        :$10
            phi %39 [%2 $3], [%2 $12], 
            phi %40 [%3 $3], [%3 $12], 
            phi %41 [%4 $3], [%51 $12], 
            phi %42 [%1 $3], [%1 $12], 
            phi %43 [%0 $3], [%0 $12], 
            int %44 0
            cmp sge %45 %41 %44
            j_true %45 $5 $11
        :$11
            add %46 %41 %40
            mov %47 %5
            nop
            int %48 0
            cmp slt %49 %47 %48
            j_true %49 $9 $6
        :$12
            int %50 1
            sub %51 %3 %5
            cmp slt %52 %51 %3
            j_true %52 $10 $4
        :$13
            unreachable
#301 = fn[86] fn(obj<hl.types.ArrayObj>, ) -> obj<hl.types.ArrayObj>
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  type
        %3  array<void>
        %4  i32
        %5  array<void>
        %6  i32
        %7  i32
        %8  void
        %9  obj<hl.types.ArrayObj>
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            type %2 type[9]
            call %3 fn[240](%2, %1, )
            int %4 0
            get_field %5 %0.1
            int %6 0
            get_field %7 %0.0
            call %8 fn[284](%3, %4, %5, %6, %7, )
            call %9 fn[241](%3, )
            ret %9
        :$2 
            unreachable
#302 = fn[87] fn(obj<hl.types.ArrayObj>, ) -> obj<haxe.iterators.ArrayIterator>
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 obj<hl.types.ArrayObjIterator>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[386](%1, %0, )
            ret %1
        :$2
            unreachable
#303 = fn[88] fn(obj<hl.types.ArrayObj>, ) -> obj<haxe.iterators.ArrayKeyValueIterator>
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 obj<hl.types.ArrayObjKeyValueIterator>
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            new %1
            call %2 fn[389](%1, %0, )
            ret %1
        :$2
            unreachable
#304 = fn[89] fn(obj<hl.types.ArrayObj>, fn(dyn, ) -> dyn, ) -> obj<hl.types.ArrayDyn>
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  fn(dyn, ) -> dyn
        %2  obj<hl.types.ArrayObj>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  i32
        %8  i32
        %9  i32
        %10 void
        %11 i32
        %12 i32
        %13 bool
        %14 void
        %15 fn(dyn, ) -> dyn
        %16 i32
        %17 obj<hl.types.ArrayObj>
        %18 i32
        %19 obj<hl.types.ArrayObj>
        %20 i32
        %21 i32
        %22 void
        %23 array<void>
        %24 array<void>
        %25 void
        %26 dyn
        %27 dyn
        %28 bool
        %29 obj<hl.types.ArrayObj>
        %30 i32
        %31 i32
        %32 void
        %33 fn(dyn, ) -> dyn
        %34 obj<hl.types.ArrayObj>
        %35 bool
        %36 ref<bool>
        %37 obj<hl.types.ArrayDyn>
        %38 i32
        %39 i32
        %40 bool
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[269](%2, )
            get_field %4 %0.0
            int %5 0
            cmp sge %6 %5 %4
            j_true %6 $6 $2
        :$2 
            get_field %7 %0.0
            int %8 1
            sub %9 %7 %8
            call %10 fn[92](%2, %9, )
            int %11 0
            get_field %12 %0.0
            nop
            cmp sge %13 %11 %12
            j_true %13 $5 $3
        :$3 
            phi %14 [%14 $4], [%3 $6], [%10 $2], 
            phi %15 [%15 $4], [%1 $6], [%1 $2], 
            phi %16 [%16 $4], [%39 $6], [%12 $2], 
            phi %17 [%17 $4], [%2 $6], [%2 $2], 
            phi %18 [%21 $4], [%38 $6], [%11 $2], 
            phi %19 [%19 $4], [%0 $6], [%0 $2], 
            mov %20 %18
            incr %21 %18
            call_intrinsic %22 @eon.null_check(%17, )
            get_field %23 %17.1
            get_field %24 %19.1
            call_intrinsic %25 @eon.null_check(%15, )
            get_array %26 %24[%6]
            call_closure %27 %15(%26, )
            set_array %23[%6] %27
            j_always $4
        :$4 
            nop
            cmp sge %28 %21 %16
            j_true %28 $5 $3
        :$5 
            phi %29 [%19 $4], [%0 $2], [%0 $6], 
            phi %30 [%16 $4], [%12 $2], [%39 $6], 
            phi %31 [%21 $4], [%11 $2], [%38 $6], 
            phi %32 [%14 $4], [%10 $2], [%3 $6], 
            phi %33 [%15 $4], [%1 $2], [%1 $6], 
            phi %34 [%17 $4], [%2 $2], [%2 $6], 
            bool %35 true
            ref %36 %35
            call %37 fn[343](%34, %36, )
            ret %37
        :$6 
            int %38 0
            get_field %39 %0.0
            nop
            cmp sge %40 %38 %39
            j_true %40 $5 $3
        :$7 
            unreachable
#305 = fn[90] fn(obj<hl.types.ArrayObj>, fn(dyn, ) -> bool, ) -> obj<hl.types.ArrayObj>
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  fn(dyn, ) -> bool
        %2  obj<hl.types.ArrayObj>
        %3  void
        %4  i32
        %5  i32
        %6  bool
        %7  fn(dyn, ) -> bool
        %8  i32
        %9  obj<hl.types.ArrayObj>
        %10 i32
        %11 void
        %12 obj<hl.types.ArrayObj>
        %13 i32
        %14 i32
        %15 array<void>
        %16 dyn
        %17 void
        %18 bool
        %19 void
        %20 i32
        %21 dyn
        %22 array<void>
        %23 i32
        %24 i32
        %25 obj<hl.types.ArrayObj>
        %26 bool
        %27 void
        %28 obj<hl.types.ArrayObj>
        %29 fn(dyn, ) -> bool
        %30 i32
        %31 bool
        %32 void
        %33 obj<hl.types.ArrayObj>
        %34 fn(dyn, ) -> bool
        %35 obj<hl.types.ArrayObj>
        %36 i32
        %37 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            new %2
            call %3 fn[269](%2, )
            int %4 0
            get_field %5 %0.0
            nop
            cmp sge %6 %4 %5
            j_true %6 $5 $2
        :$2 
            phi %7 [%29 $4], [%1 $1], 
            phi %8 [%23 $4], [%5 $1], 
            phi %9 [%25 $4], [%0 $1], 
            phi %10 [%30 $4], [%4 $1], 
            phi %11 [%27 $4], [%3 $1], 
            phi %12 [%28 $4], [%2 $1], 
            mov %13 %10
            incr %14 %10
            get_field %15 %9.1
            get_array %16 %15[%6]
            call_intrinsic %17 @eon.null_check(%7, )
            call_closure %18 %7(%16, )
            j_false %18 $6 $3
        :$3 
            call_intrinsic %19 @eon.null_check(%12, )
            call %20 fn[72](%12, %16, )
            j_always $4
        :$4 
            phi %21 [%16 $6], [%16 $3], 
            phi %22 [%15 $6], [%15 $3], 
            phi %23 [%8 $6], [%8 $3], 
            phi %24 [%13 $6], [%13 $3], 
            phi %25 [%9 $6], [%9 $3], 
            phi %26 [%18 $6], [%18 $3], 
            phi %27 [%11 $6], [%11 $3], 
            phi %28 [%12 $6], [%12 $3], 
            phi %29 [%7 $6], [%7 $3], 
            phi %30 [%14 $6], [%14 $3], 
            nop
            cmp sge %31 %30 %23
            j_true %31 $5 $2
        :$5 
            phi %32 [%27 $4], [%3 $1], 
            phi %33 [%28 $4], [%2 $1], 
            phi %34 [%29 $4], [%1 $1], 
            phi %35 [%25 $4], [%0 $1], 
            phi %36 [%30 $4], [%4 $1], 
            phi %37 [%23 $4], [%5 $1], 
            ret %33
        :$6 
            j_always $4
        :$7 
            unreachable
#306 = fn[91] fn(obj<hl.types.ArrayObj>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  i32
        %3  bool
        %4  i32
        %5  i32
        %6  void
        %7  obj<hl.types.ArrayObj>
        %8  i32
        %9  i32
        %10 i32
        %11 bool
        %12 i32
        %13 i32
        %14 bool
        %15 i32
        %16 obj<hl.types.ArrayObj>
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 array<void>
        %22 dyn
        %23 bool
        %24 i32
        %25 i32
        %26 obj<hl.types.ArrayObj>
        %27 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            cmp sge %3 %3 %1
            j_true %3 $4 $2
        :$2 
            int %4 1
            sub %5 %1 %4
            call %6 fn[92](%0, %3, )
            j_always $3
        :$3 
            phi %7 [%0 $4], [%0 $2], 
            phi %8 [%1 $4], [%1 $2], 
            phi %9 [%10 $4], [%5 $2], 
            ret_void
        :$4 
            get_field %10 %0.0
            cmp sge %11 %1 %3
            j_true %11 $3 $5
        :$5 
            get_field %12 %0.0
            mov %13 %1
            nop
            cmp sge %14 %3 %13
            j_true %14 $8 $6
        :$6 
            phi %15 [%1 $5], [%15 $7], 
            phi %16 [%0 $5], [%16 $7], 
            phi %17 [%13 $5], [%17 $7], 
            phi %18 [%12 $5], [%20 $7], 
            mov %19 %3
            incr %20 %3
            get_field %21 %16.1
            null %22
            set_array %21[%19] %22
            j_always $7
        :$7 
            nop
            cmp sge %23 %3 %17
            j_true %23 $8 $6
        :$8 
            phi %24 [%17 $7], [%13 $5], 
            phi %25 [%15 $7], [%1 $5], 
            phi %26 [%16 $7], [%0 $5], 
            phi %27 [%20 $7], [%12 $5], 
            set_field %26.0 %25
            ret_void
        :$9 
            unreachable
#307 = fn[92] fn(obj<hl.types.ArrayObj>, i32, ) -> void
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  i32
        %3  bool
        %4  obj<String>
        %5  i32
        %6  ref<i32>
        %7  bytes
        %8  obj<String>
        %9  obj<String>
        %10 dyn
        %11 void
        %12 i32
        %13 i32
        %14 array<void>
        %15 i32
        %16 bool
        %17 i32
        %18 i32
        %19 i32
        %20 i32
        %21 bool
        %22 i32
        %23 type
        %24 array<void>
        %25 i32
        %26 array<void>
        %27 i32
        %28 i32
        %29 void
        %30 type
        %31 array<void>
        %32 i32
        %33 array<void>
        %34 i32
        %35 i32
        %36 void
    [Code]
        :$0 
            j_always $1
        :$1 
            int %2 0
            cmp sge %3 %1 %2
            j_true %3 $3 $2
        :$2 
            get_global %4 global[31]
            mov %5 %1
            ref %6 %3
            call %7 fn[35](%3, %6, )
            call %8 fn[16](%7, %3, )
            call %9 fn[20](%4, %8, )
            call %10 fn[34](%9, )
            invoke_intrinsic %11 @eon.throw(%10, ) cont $8 unwind $8
        :$3 
            int %12 1
            add %13 %1 %12
            get_field %14 %0.1
            array_size %15 %14
            cmp sge %16 %15 %3
            j_true %16 $7 $4
        :$4 
            int %17 3
            mul %18 %15 %17
            int %19 1
            sshr %20 %18 %19
            cmp sge %21 %20 %3
            j_true %21 $6 $5
        :$5 
            mov %22 %3
            type %23 type[9]
            call %24 fn[240](%23, %22, )
            int %25 0
            get_field %26 %0.1
            int %27 0
            get_field %28 %0.0
            call %29 fn[284](%24, %25, %16, %27, %28, )
            set_field %0.1 %24
            set_field %0.0 %3
            ret_void
        :$6 
            type %30 type[9]
            call %31 fn[240](%30, %20, )
            int %32 0
            get_field %33 %0.1
            int %34 0
            get_field %35 %0.0
            call %36 fn[284](%31, %32, %16, %34, %35, )
            set_field %0.1 %31
            set_field %0.0 %3
            ret_void
        :$7 
            set_field %0.0 %3
            ret_void
        :$8 
            unreachable
#308 = fn[93] fn(obj<hl.types.ArrayObj>, i32, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 i32
        %2 i32
        %3 bool
        %4 dyn
        %5 array<void>
        %6 dyn
    [Code]
        :$0
            j_always $1
        :$1
            get_field %2 %0.0
            cmp slt %3 %1 %2
            j_true %3 $3 $2
        :$2
            null %4
            ret %3
        :$3
            get_field %5 %0.1
            get_array %6 %5[%1]
            ret %3
        :$4
            unreachable
#309 = fn[94] fn(obj<hl.types.ArrayObj>, i32, dyn, ) -> void
    [Values]
        %0  obj<hl.types.ArrayObj>
        %1  i32
        %2  dyn
        %3  i32
        %4  bool
        %5  void
        %6  array<void>
        %7  array<void>
        %8  type
        %9  dyn
        %10 array<void>
        %11 array<void>
        %12 type
        %13 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %3 %0.0
            cmp slt %4 %1 %4
            j_true %4 $3 $2
        :$2 
            call %5 fn[92](%0, %1, )
            get_field %6 %0.1
            get_field %7 %0.1
            call %8 fn[342](%7, )
            call %9 fn[335](%2, %8, )
            set_array %6[%1] %9
            ret_void
        :$3 
            get_field %10 %0.1
            get_field %11 %0.1
            call %12 fn[342](%11, )
            call %13 fn[335](%2, %12, )
            set_array %10[%1] %13
            ret_void
        :$4 
            unreachable
#310 = fn[95] fn(obj<hl.types.ArrayObj>, dyn, ) -> i32
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 dyn
        %2 i32
    [Code]
        :$0
            j_always $1
        :$1
            call %2 fn[72](%0, %1, )
            ret %2
        :$2
            unreachable
#311 = fn[96] fn(obj<hl.types.ArrayObj>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 dyn
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[71](%0, )
            ret %1
        :$2
            unreachable
#312 = fn[97] fn(obj<hl.types.ArrayObj>, ) -> dyn
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 dyn
    [Code]
        :$0
            j_always $1
        :$1
            call %1 fn[74](%0, )
            ret %1
        :$2
            unreachable
#313 = fn[98] fn(obj<hl.types.ArrayObj>, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 dyn
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            call %2 fn[79](%0, %1, )
            ret_void
        :$2
            unreachable
#314 = fn[99] fn(obj<hl.types.ArrayObj>, i32, dyn, ) -> void
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 i32
        %2 dyn
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            call %3 fn[80](%0, %1, %2, )
            ret_void
        :$2
            unreachable
#315 = fn[100] fn(obj<hl.types.ArrayObj>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 dyn
        %2 bool
    [Code]
        :$0
            j_always $1
        :$1
            call %2 fn[81](%0, %1, )
            ret %2
        :$2
            unreachable
#316 = fn[101] fn(obj<hl.types.ArrayObj>, dyn, ) -> bool
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 dyn
        %2 bool
    [Code]
        :$0
            j_always $1
        :$1
            call %2 fn[82](%0, %1, )
            ret %2
        :$2
            unreachable
#317 = fn[102] fn(obj<hl.types.ArrayObj>, fn(dyn, dyn, ) -> i32, ) -> void
    [Values]
        %0 obj<hl.types.ArrayObj>
        %1 fn(dyn, dyn, ) -> i32
        %2 void
    [Code]
        :$0
            j_always $1
        :$1
            call %2 fn[76](%0, %1, )
            ret_void
        :$2
            unreachable
#318 = fn[348] fn(obj<hl.types.BytesIterator_Float>, obj<hl.types.ArrayBytes_Float>, ) -> void
    [Values]
        %0 obj<hl.types.BytesIterator_Float>
        %1 obj<hl.types.ArrayBytes_Float>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[323](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#319 = fn[346] fn(obj<hl.types.BytesIterator_Float>, ) -> bool
    [Values]
        %0 obj<hl.types.BytesIterator_Float>
        %1 i32
        %2 obj<hl.types.ArrayBytes_Float>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.1
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#320 = fn[347] fn(obj<hl.types.BytesIterator_Float>, ) -> dyn
    [Values]
        %0  obj<hl.types.BytesIterator_Float>
        %1  obj<hl.types.ArrayBytes_Float>
        %2  void
        %3  bytes
        %4  i32
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  f64
        %10 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.1
            get_field %4 %0.1
            mov %5 %4
            incr %6 %4
            set_field %0.1 %6
            int %7 3
            shl %8 %5 %7
            get_mem %9 %3[%8]
            to_dyn %10 %9
            ret %10
        :$2 
            unreachable
#321 = fn[357] fn(obj<hl.types.BytesIterator_Int>, obj<hl.types.ArrayBytes_Int>, ) -> void
    [Values]
        %0 obj<hl.types.BytesIterator_Int>
        %1 obj<hl.types.ArrayBytes_Int>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[323](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#322 = fn[355] fn(obj<hl.types.BytesIterator_Int>, ) -> bool
    [Values]
        %0 obj<hl.types.BytesIterator_Int>
        %1 i32
        %2 obj<hl.types.ArrayBytes_Int>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.1
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#323 = fn[356] fn(obj<hl.types.BytesIterator_Int>, ) -> dyn
    [Values]
        %0  obj<hl.types.BytesIterator_Int>
        %1  obj<hl.types.ArrayBytes_Int>
        %2  void
        %3  bytes
        %4  i32
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  i32
        %10 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.1
            get_field %4 %0.1
            mov %5 %4
            incr %6 %4
            set_field %0.1 %6
            int %7 2
            shl %8 %5 %7
            get_mem %9 %3[%8]
            to_dyn %10 %9
            ret %10
        :$2 
            unreachable
#324 = fn[366] fn(obj<hl.types.BytesIterator_hl_F32>, obj<hl.types.ArrayBytes_hl_F32>, ) -> void
    [Values]
        %0 obj<hl.types.BytesIterator_hl_F32>
        %1 obj<hl.types.ArrayBytes_hl_F32>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[323](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#325 = fn[364] fn(obj<hl.types.BytesIterator_hl_F32>, ) -> bool
    [Values]
        %0 obj<hl.types.BytesIterator_hl_F32>
        %1 i32
        %2 obj<hl.types.ArrayBytes_hl_F32>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.1
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#326 = fn[365] fn(obj<hl.types.BytesIterator_hl_F32>, ) -> dyn
    [Values]
        %0  obj<hl.types.BytesIterator_hl_F32>
        %1  obj<hl.types.ArrayBytes_hl_F32>
        %2  void
        %3  bytes
        %4  i32
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  f32
        %10 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.1
            get_field %4 %0.1
            mov %5 %4
            incr %6 %4
            set_field %0.1 %6
            int %7 2
            shl %8 %5 %7
            get_mem %9 %3[%8]
            to_dyn %10 %9
            ret %10
        :$2 
            unreachable
#327 = fn[376] fn(obj<hl.types.BytesIterator_hl_UI16>, obj<hl.types.ArrayBytes_hl_UI16>, ) -> void
    [Values]
        %0 obj<hl.types.BytesIterator_hl_UI16>
        %1 obj<hl.types.ArrayBytes_hl_UI16>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[323](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#328 = fn[374] fn(obj<hl.types.BytesIterator_hl_UI16>, ) -> bool
    [Values]
        %0 obj<hl.types.BytesIterator_hl_UI16>
        %1 i32
        %2 obj<hl.types.ArrayBytes_hl_UI16>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.1
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#329 = fn[375] fn(obj<hl.types.BytesIterator_hl_UI16>, ) -> dyn
    [Values]
        %0  obj<hl.types.BytesIterator_hl_UI16>
        %1  obj<hl.types.ArrayBytes_hl_UI16>
        %2  void
        %3  bytes
        %4  i32
        %5  i32
        %6  i32
        %7  i32
        %8  i32
        %9  i32
        %10 dyn
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.1
            get_field %4 %0.1
            mov %5 %4
            incr %6 %4
            set_field %0.1 %6
            int %7 1
            shl %8 %5 %7
            get_i16 %9 %3[%8]
            to_dyn %10 %9
            ret %10
        :$2 
            unreachable
#330 = fn[351] fn(obj<hl.types.BytesKeyValueIterator_Float>, obj<hl.types.ArrayBytes_Float>, ) -> void
    [Values]
        %0 obj<hl.types.BytesKeyValueIterator_Float>
        %1 obj<hl.types.ArrayBytes_Float>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[326](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#331 = fn[349] fn(obj<hl.types.BytesKeyValueIterator_Float>, ) -> bool
    [Values]
        %0 obj<hl.types.BytesKeyValueIterator_Float>
        %1 i32
        %2 obj<hl.types.ArrayBytes_Float>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#332 = fn[350] fn(obj<hl.types.BytesKeyValueIterator_Float>, ) -> virtual(key: i32, value: f64, )
    [Values]
        %0  obj<hl.types.BytesKeyValueIterator_Float>
        %1  obj<hl.types.ArrayBytes_Float>
        %2  void
        %3  bytes
        %4  i32
        %5  i32
        %6  i32
        %7  f64
        %8  virtual(key: i32, value: f64, )
        %9  i32
        %10 i32
        %11 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.1
            get_field %4 %0.0
            int %5 3
            shl %6 %4 %5
            get_mem %7 %3[%6]
            new %8
            get_field %9 %0.0
            mov %10 %9
            incr %11 %9
            set_field %0.0 %11
            set_field %8.0 %10
            set_field %8.1 %7
            ret %8
        :$2 
            unreachable
#333 = fn[360] fn(obj<hl.types.BytesKeyValueIterator_Int>, obj<hl.types.ArrayBytes_Int>, ) -> void
    [Values]
        %0 obj<hl.types.BytesKeyValueIterator_Int>
        %1 obj<hl.types.ArrayBytes_Int>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[326](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#334 = fn[358] fn(obj<hl.types.BytesKeyValueIterator_Int>, ) -> bool
    [Values]
        %0 obj<hl.types.BytesKeyValueIterator_Int>
        %1 i32
        %2 obj<hl.types.ArrayBytes_Int>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#335 = fn[359] fn(obj<hl.types.BytesKeyValueIterator_Int>, ) -> virtual(key: i32, value: i32, )
    [Values]
        %0  obj<hl.types.BytesKeyValueIterator_Int>
        %1  obj<hl.types.ArrayBytes_Int>
        %2  void
        %3  bytes
        %4  i32
        %5  i32
        %6  i32
        %7  i32
        %8  virtual(key: i32, value: i32, )
        %9  i32
        %10 i32
        %11 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.1
            get_field %4 %0.0
            int %5 2
            shl %6 %4 %5
            get_mem %7 %3[%6]
            new %8
            get_field %9 %0.0
            mov %10 %9
            incr %11 %9
            set_field %0.0 %11
            set_field %8.0 %10
            set_field %8.1 %7
            ret %8
        :$2 
            unreachable
#336 = fn[369] fn(obj<hl.types.BytesKeyValueIterator_hl_F32>, obj<hl.types.ArrayBytes_hl_F32>, ) -> void
    [Values]
        %0 obj<hl.types.BytesKeyValueIterator_hl_F32>
        %1 obj<hl.types.ArrayBytes_hl_F32>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[326](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#337 = fn[367] fn(obj<hl.types.BytesKeyValueIterator_hl_F32>, ) -> bool
    [Values]
        %0 obj<hl.types.BytesKeyValueIterator_hl_F32>
        %1 i32
        %2 obj<hl.types.ArrayBytes_hl_F32>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#338 = fn[368] fn(obj<hl.types.BytesKeyValueIterator_hl_F32>, ) -> virtual(key: i32, value: f32, )
    [Values]
        %0  obj<hl.types.BytesKeyValueIterator_hl_F32>
        %1  obj<hl.types.ArrayBytes_hl_F32>
        %2  void
        %3  bytes
        %4  i32
        %5  i32
        %6  i32
        %7  f32
        %8  virtual(key: i32, value: f32, )
        %9  i32
        %10 i32
        %11 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.1
            get_field %4 %0.0
            int %5 2
            shl %6 %4 %5
            get_mem %7 %3[%6]
            new %8
            get_field %9 %0.0
            mov %10 %9
            incr %11 %9
            set_field %0.0 %11
            set_field %8.0 %10
            set_field %8.1 %7
            ret %8
        :$2 
            unreachable
#339 = fn[379] fn(obj<hl.types.BytesKeyValueIterator_hl_UI16>, obj<hl.types.ArrayBytes_hl_UI16>, ) -> void
    [Values]
        %0 obj<hl.types.BytesKeyValueIterator_hl_UI16>
        %1 obj<hl.types.ArrayBytes_hl_UI16>
        %2 dyn
        %3 obj<hl.types.ArrayDyn>
        %4 void
    [Code]
        :$0
            j_always $1
        :$1
            null %2
            call_intrinsic %3 @eon.safe_cast(%2, )
            call %4 fn[326](%0, %3, )
            set_field %0.2 %1
            ret_void
        :$2
            unreachable
#340 = fn[377] fn(obj<hl.types.BytesKeyValueIterator_hl_UI16>, ) -> bool
    [Values]
        %0 obj<hl.types.BytesKeyValueIterator_hl_UI16>
        %1 i32
        %2 obj<hl.types.ArrayBytes_hl_UI16>
        %3 void
        %4 i32
        %5 bool
        %6 bool
        %7 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_field %1 %0.0
            get_field %2 %0.2
            call_intrinsic %3 @eon.null_check(%2, )
            get_field %4 %2.0
            cmp slt %5 %1 %4
            j_true %5 $4 $2
        :$2
            bool %6 false
            j_always $3
        :$3
            ret %6
        :$4
            bool %7 true
            ret %7
        :$5
            unreachable
#341 = fn[378] fn(obj<hl.types.BytesKeyValueIterator_hl_UI16>, ) -> virtual(key: i32, value: u16, )
    [Values]
        %0  obj<hl.types.BytesKeyValueIterator_hl_UI16>
        %1  obj<hl.types.ArrayBytes_hl_UI16>
        %2  void
        %3  bytes
        %4  i32
        %5  i32
        %6  i32
        %7  i32
        %8  u16
        %9  virtual(key: i32, value: u16, )
        %10 i32
        %11 i32
        %12 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.2
            call_intrinsic %2 @eon.null_check(%1, )
            get_field %3 %1.1
            get_field %4 %0.0
            int %5 1
            shl %6 %4 %5
            get_i16 %7 %3[%6]
            to_int %8 %7
            new %9
            get_field %10 %0.0
            mov %11 %10
            incr %12 %10
            set_field %0.0 %12
            set_field %9.0 %11
            set_field %9.1 %8
            ret %9
        :$2 
            unreachable
#342 = fn[390] fn() -> void
    [Values]
    [Code]
        :$0
            j_always $1
        :$1
            ret_void
        :$2
            unreachable
#343 = fn[28] fn() -> void
    [Values]
        %0  obj<other.Vector3>
        %1  f64
        %2  f64
        %3  f64
        %4  void
        %5  obj<other.Vector3>
        %6  f64
        %7  f64
        %8  f64
        %9  void
        %10 void
        %11 i32
        %12 dyn
        %13 void
        %14 dyn
        %15 void
        %16 dyn
        %17 void
        %18 dyn
        %19 void
        %20 ref<i32>
        %21 void
        %22 dyn
        %23 void
        %24 enum<other.EnumValueTypeThing>
        %25 void
        %26 void
    [Code]
        :$0 
            j_always $1
        :$1 
            new %0
            float %1 1
            float %2 2
            float %3 3
            call %4 fn[407](%0, %1, %2, %3, )
            new %5
            float %6 3
            float %7 2
            float %8 1
            call %9 fn[407](%5, %6, %7, %8, )
            call %10 fn[391](%0, %5, )
            int %11 360
            to_dyn %12 %11
            call %13 fn[257](%12, )
            to_dyn %14 %11
            call %15 fn[257](%14, )
            to_dyn %16 %11
            call %17 fn[257](%16, )
            to_dyn %18 %11
            call %19 fn[257](%18, )
            ref %20 %11
            call %21 fn[408](%20, )
            to_dyn %22 %11
            call %23 fn[257](%22, )
            get_global %24 global[46]
            call %25 fn[409](%24, )
            call %26 fn[257](%24, )
            ret_void
        :$2 
            unreachable
#344 = fn[410] fn(i32, ) -> void
    [Values]
        %0 i32
    [Code]
        :$0
            j_always $1
        :$1
            ret_void
        :$2
            unreachable
#345 = fn[411] fn(null<i32>, ) -> void
    [Values]
        %0 null<i32>
        %1 i32
        %2 null<i32>
    [Code]
        :$0
            j_always $1
        :$1
            j_null %0 $3 $2
        :$2
            int %1 21
            to_dyn %2 %1
            ret_void
        :$3
            ret_void
        :$4
            unreachable
#346 = fn[412] fn(null<i32>, ) -> void
    [Values]
        %0 null<i32>
        %1 i32
        %2 null<i32>
    [Code]
        :$0
            j_always $1
        :$1
            j_null %0 $3 $2
        :$2
            int %1 420
            to_dyn %2 %1
            ret_void
        :$3
            ret_void
        :$4
            unreachable
#347 = fn[408] fn(ref<i32>, ) -> void
    [Values]
        %0 ref<i32>
        %1 i32
    [Code]
        :$0
            j_always $1
        :$1
            int %1 5
            set_ref %0 %1
            ret_void
        :$2
            unreachable
#348 = fn[409] fn(enum<other.EnumValueTypeThing>, ) -> void
    [Values]
        %0 enum<other.EnumValueTypeThing>
    [Code]
        :$0
            j_always $1
        :$1
            ret_void
        :$2
            unreachable
#349 = fn[413] fn(enum<other.EnumValueTypeThing>, ) -> void
    [Values]
        %0 enum<other.EnumValueTypeThing>
    [Code]
        :$0
            j_always $1
        :$1
            ret_void
        :$2
            unreachable
#350 = fn[414] fn(array<void>, ) -> void
    [Values]
        %0 array<void>
        %1 i32
        %2 dyn
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            array_size %1 %0
            to_dyn %2 %1
            call %3 fn[257](%2, )
            ret_void
        :$2
            unreachable
#351 = fn[415] fn(array<void>, ) -> void
    [Values]
        %0 array<void>
        %1 i32
        %2 dyn
        %3 void
    [Code]
        :$0
            j_always $1
        :$1
            array_size %1 %0
            to_dyn %2 %1
            call %3 fn[257](%2, )
            ret_void
        :$2
            unreachable
#352 = fn[398] fn(i32, i32, ) -> bool
    [Values]
        %0 i32
        %1 i32
        %2 bool
        %3 bool
        %4 bool
    [Code]
        :$0
            j_always $1
        :$1
            cmp sge %2 %0 %1
            j_true %2 $4 $2
        :$2
            bool %3 false
            j_always $3
        :$3
            ret %2
        :$4
            bool %4 true
            ret %2
        :$5
            unreachable
#353 = fn[399] fn(i32, i32, ) -> bool
    [Values]
        %0 i32
        %1 i32
        %2 obj<String>
        %3 void
        %4 bool
        %5 bool
        %6 bool
    [Code]
        :$0
            j_always $1
        :$1
            get_global %2 global[47]
            call %3 fn[257](%2, )
            cmp sge %4 %0 %1
            j_true %4 $4 $2
        :$2
            bool %5 false
            j_always $3
        :$3
            ret %4
        :$4
            bool %6 true
            ret %4
        :$5
            unreachable
#354 = fn[400] fn(i32, i32, ) -> bool
    [Values]
        %0 i32
        %1 i32
        %2 bool
        %3 bool
        %4 bool
    [Code]
        :$0
            j_always $1
        :$1
            cmp sge %2 %0 %1
            j_true %2 $4 $2
        :$2
            bool %3 false
            j_always $3
        :$3
            ret %2
        :$4
            bool %4 true
            ret %2
        :$5
            unreachable
#355 = fn[401] fn(f32, f32, ) -> bool
    [Values]
        %0 f32
        %1 f32
        %2 bool
        %3 bool
        %4 bool
        %5 bool
        %6 bool
    [Code]
        :$0
            j_always $1
        :$1
            cmp slt %2 %0 %1
            j_true %2 $4 $2
        :$2
            bool %3 false
            j_always $3
        :$3
            not %4 %2
            ret %2
        :$4
            bool %5 true
            not %6 %2
            ret %2
        :$5
            unreachable
#356 = fn[402] fn(f32, f32, ) -> bool
    [Values]
        %0 f32
        %1 f32
        %2 bool
        %3 bool
        %4 bool
    [Code]
        :$0
            j_always $1
        :$1
            cmp slt %2 %0 %1
            j_true %2 $4 $2
        :$2
            bool %3 false
            j_always $3
        :$3
            ret %2
        :$4
            bool %4 true
            ret %2
        :$5
            unreachable
#357 = fn[403] fn(f32, f32, ) -> bool
    [Values]
        %0 f32
        %1 f32
        %2 bool
        %3 bool
        %4 bool
    [Code]
        :$0
            j_always $1
        :$1
            cmp sge %2 %0 %1
            j_true %2 $4 $2
        :$2
            bool %3 false
            j_always $3
        :$3
            ret %2
        :$4
            bool %4 true
            ret %2
        :$5
            unreachable
#358 = fn[404] fn(f64, f64, ) -> bool
    [Values]
        %0 f64
        %1 f64
        %2 bool
        %3 bool
        %4 bool
        %5 bool
        %6 bool
    [Code]
        :$0
            j_always $1
        :$1
            cmp slt %2 %0 %1
            j_true %2 $4 $2
        :$2
            bool %3 false
            j_always $3
        :$3
            not %4 %2
            ret %2
        :$4
            bool %5 true
            not %6 %2
            ret %2
        :$5
            unreachable
#359 = fn[405] fn(f64, f64, ) -> bool
    [Values]
        %0 f64
        %1 f64
        %2 bool
        %3 bool
        %4 bool
    [Code]
        :$0
            j_always $1
        :$1
            cmp slt %2 %0 %1
            j_true %2 $4 $2
        :$2
            bool %3 false
            j_always $3
        :$3
            ret %2
        :$4
            bool %4 true
            ret %2
        :$5
            unreachable
#360 = fn[406] fn(f64, f64, ) -> bool
    [Values]
        %0 f64
        %1 f64
        %2 bool
        %3 bool
        %4 bool
    [Code]
        :$0
            j_always $1
        :$1
            cmp sge %2 %0 %1
            j_true %2 $4 $2
        :$2
            bool %3 false
            j_always $3
        :$3
            ret %2
        :$4
            bool %4 true
            ret %2
        :$5
            unreachable
#361 = fn[407] fn(obj<other.Vector3>, f64, f64, f64, ) -> void
    [Values]
        %0 obj<other.Vector3>
        %1 f64
        %2 f64
        %3 f64
    [Code]
        :$0
            j_always $1
        :$1
            set_field %0.0 %1
            set_field %0.1 %2
            set_field %0.2 %3
            ret_void
        :$2
            unreachable
#362 = fn[391] fn(obj<other.Vector3>, obj<other.Vector3>, ) -> void
    [Values]
        %0  obj<other.Vector3>
        %1  obj<other.Vector3>
        %2  f64
        %3  void
        %4  f64
        %5  f64
        %6  f64
        %7  f64
        %8  f64
        %9  f64
        %10 f64
        %11 f64
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %2 %0.0
            call_intrinsic %3 @eon.null_check(%1, )
            get_field %4 %1.0
            add %5 %2 %4
            set_field %0.0 %5
            get_field %6 %0.1
            get_field %7 %1.1
            add %8 %6 %7
            set_field %0.1 %8
            get_field %9 %0.2
            get_field %10 %1.2
            add %11 %9 %10
            set_field %0.2 %11
            ret_void
        :$2 
            unreachable
#363 = fn[392] fn(obj<other.Vector3>, obj<other.Vector3>, i32, ) -> void
    [Values]
        %0  obj<other.Vector3>
        %1  obj<other.Vector3>
        %2  i32
        %3  i32
        %4  bool
        %5  i32
        %6  obj<other.Vector3>
        %7  i32
        %8  obj<other.Vector3>
        %9  i32
        %10 f64
        %11 void
        %12 f64
        %13 f64
        %14 f64
        %15 f64
        %16 f64
        %17 f64
        %18 f64
        %19 f64
        %20 bool
        %21 obj<other.Vector3>
        %22 obj<other.Vector3>
        %23 i32
        %24 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            int %3 0
            nop
            cmp sge %4 %3 %2
            j_true %4 $4 $2
        :$2 
            phi %5 [%3 $1], [%9 $3], 
            phi %6 [%1 $1], [%6 $3], 
            phi %7 [%2 $1], [%7 $3], 
            phi %8 [%0 $1], [%8 $3], 
            incr %9 %5
            get_field %10 %8.0
            call_intrinsic %11 @eon.null_check(%6, )
            get_field %12 %6.0
            add %13 %10 %12
            set_field %8.0 %13
            get_field %14 %8.1
            get_field %15 %6.1
            add %16 %14 %15
            set_field %8.1 %16
            get_field %17 %8.2
            get_field %18 %6.2
            add %19 %17 %18
            set_field %8.2 %19
            j_always $3
        :$3 
            nop
            cmp sge %20 %9 %7
            j_true %20 $4 $2
        :$4 
            phi %21 [%8 $3], [%0 $1], 
            phi %22 [%6 $3], [%1 $1], 
            phi %23 [%7 $3], [%2 $1], 
            phi %24 [%9 $3], [%3 $1], 
            ret_void
        :$5 
            unreachable
#364 = fn[393] fn(obj<other.Vector3>, ) -> f64
    [Values]
        %0  obj<other.Vector3>
        %1  f64
        %2  i32
        %3  f64
        %4  f64
        %5  f64
        %6  f64
        %7  f64
        %8  f64
        %9  f64
        %10 f64
        %11 f64
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            to_int %2 %1
            switch %2 [$2, $2, $4, $3, ] $2
        :$2 
            get_field %3 %0.2
            float %4 21.4
            add %5 %3 %4
            ret %5
        :$3 
            get_field %6 %0.1
            float %7 420.3
            sdiv %8 %6 %7
            ret %8
        :$4 
            get_field %9 %0.0
            float %10 56.2
            mul %11 %9 %10
            ret %11
        :$5 
            unreachable
#365 = fn[394] fn(obj<other.Vector3>, ) -> f64
    [Values]
        %0  obj<other.Vector3>
        %1  f64
        %2  i32
        %3  f64
        %4  f64
        %5  f64
        %6  f64
        %7  i32
        %8  f64
        %9  obj<other.Vector3>
        %10 f64
        %11 f64
        %12 f64
        %13 f64
        %14 f64
        %15 f64
        %16 f64
    [Code]
        :$0 
            j_always $1
        :$1 
            get_field %1 %0.0
            to_int %2 %1
            switch %2 [$2, $2, $5, $4, ] $2
        :$2 
            get_field %3 %0.2
            float %4 21.4
            add %5 %3 %4
            j_always $3
        :$3 
            phi %6 [%4 $2], [%15 $5], 
            phi %7 [%2 $2], [%2 $5], 
            phi %8 [%1 $2], [%1 $5], 
            phi %9 [%0 $2], [%0 $5], 
            phi %10 [%5 $2], [%16 $5], 
            ret %10
        :$4 
            get_field %11 %0.1
            float %12 420.3
            sdiv %13 %11 %12
            ret %13
        :$5 
            get_field %14 %0.0
            float %15 56.2
            mul %16 %14 %15
            j_always $3
        :$6 
            unreachable
#366 = fn[395] fn(obj<other.Vector3>, obj<hl.types.ArrayBytes_Float>, ) -> f64
    [Values]
        %0  obj<other.Vector3>
        %1  obj<hl.types.ArrayBytes_Float>
        %2  i32
        %3  void
        %4  i32
        %5  bool
        %6  obj<other.Vector3>
        %7  i32
        %8  i32
        %9  obj<hl.types.ArrayBytes_Float>
        %10 void
        %11 i32
        %12 i32
        %13 i32
        %14 bool
        %15 f64
        %16 i32
        %17 i32
        %18 i32
        %19 obj<hl.types.ArrayBytes_Float>
        %20 i32
        %21 i32
        %22 obj<other.Vector3>
        %23 f64
        %24 bool
        %25 i32
        %26 obj<hl.types.ArrayBytes_Float>
        %27 obj<other.Vector3>
        %28 i32
        %29 f64
        %30 f64
        %31 i32
        %32 i32
        %33 i32
        %34 i32
        %35 obj<other.Vector3>
        %36 obj<hl.types.ArrayBytes_Float>
        %37 i32
        %38 i32
        %39 i32
        %40 f64
        %41 obj<other.Vector3>
        %42 i32
        %43 obj<hl.types.ArrayBytes_Float>
        %44 f64
        %45 bytes
        %46 i32
        %47 i32
        %48 f64
        %49 i32
    [Code]
        :$0 
            j_always $1
        :$1 
            int %2 0
            call_intrinsic %3 @eon.null_check(%1, )
            get_field %4 %1.0
            nop
            cmp sge %5 %2 %4
            j_true %5 $7 $2
        :$2 
            phi %6 [%22 $6], [%0 $1], 
            phi %7 [%20 $6], [%4 $1], 
            phi %8 [%17 $6], [%2 $1], 
            phi %9 [%19 $6], [%1 $1], 
            call_intrinsic %10 @eon.null_check(%9, )
            mov %11 %8
            incr %12 %8
            get_field %13 %9.0
            cmp ult %14 %11 %5
            j_true %14 $10 $3
        :$3 
            float %15 0
            j_always $4
        :$4 
            to_int %16 %15
            switch %16 [$5, $5, $9, $8, ] $5
        :$5 
            phi %17 [%12 $4], [%12 $10], 
            phi %18 [%16 $4], [%49 $10], 
            phi %19 [%9 $4], [%9 $10], 
            phi %20 [%7 $4], [%7 $10], 
            phi %21 [%13 $4], [%47 $10], 
            phi %22 [%6 $4], [%6 $10], 
            phi %23 [%15 $4], [%48 $10], 
            j_always $6
        :$6 
            nop
            cmp sge %24 %17 %20
            j_true %24 $7 $2
        :$7 
            phi %25 [%17 $6], [%2 $1], 
            phi %26 [%19 $6], [%1 $1], 
            phi %27 [%22 $6], [%0 $1], 
            phi %28 [%20 $6], [%4 $1], 
            float %29 21
            ret %29
        :$8 
            phi %30 [%48 $10], [%15 $4], 
            phi %31 [%7 $10], [%7 $4], 
            phi %32 [%12 $10], [%12 $4], 
            phi %33 [%47 $10], [%13 $4], 
            phi %34 [%49 $10], [%16 $4], 
            phi %35 [%6 $10], [%6 $4], 
            phi %36 [%9 $10], [%9 $4], 
            ret %30
        :$9 
            phi %37 [%47 $10], [%13 $4], 
            phi %38 [%49 $10], [%16 $4], 
            phi %39 [%12 $10], [%12 $4], 
            phi %40 [%48 $10], [%15 $4], 
            phi %41 [%6 $10], [%6 $4], 
            phi %42 [%7 $10], [%7 $4], 
            phi %43 [%9 $10], [%9 $4], 
            float %44 56.2
            ret %44
        :$10
            get_field %45 %9.1
            int %46 3
            shl %47 %11 %5
            get_mem %48 %45[%5]
            to_int %49 %48
            switch %49 [$5, $5, $9, $8, ] $5
        :$11
            unreachable
#367 = fn[396] fn(obj<other.Vector3>, obj<hl.types.ArrayBytes_Float>, ) -> f64
    [Values]
        %0  obj<other.Vector3>
        %1  obj<hl.types.ArrayBytes_Float>
        %2  void
        %3  i32
        %4  void
        %5  i32
        %6  bool
        %7  i32
        %8  i32
        %9  obj<hl.types.ArrayBytes_Float>
        %10 obj<other.Vector3>
        %11 i32
        %12 i32
        %13 i32
        %14 bool
        %15 f64
        %16 void
        %17 bool
        %18 obj<other.Vector3>
        %19 i32
        %20 obj<hl.types.ArrayBytes_Float>
        %21 i32
        %22 void
        %23 f64
        %24 dyn
        %25 obj<haxe.Exception>
        %26 void
        %27 f64
    [Code]
        :$0 
            j_always $1
        :$1 
            invoke_intrinsic %2 @eon.begin_trap() cont $2 unwind $12
        :$2 
            int %3 0
            invoke_intrinsic %4 @eon.null_check(%1, ) cont $3 unwind $12
        :$3 
            get_field %5 %1.0
            nop
            cmp sge %6 %3 %5
            j_true %6 $9 $4
        :$4 
            phi %7 [%5 $3], [%7 $8], 
            phi %8 [%3 $3], [%12 $8], 
            phi %9 [%1 $3], [%9 $8], 
            phi %10 [%0 $3], [%10 $8], 
            mov %11 %8
            incr %12 %8
            int %13 2
            cmp ne %14 %6 %13
            j_true %14 $7 $5
        :$5 
            float %15 21.1
            invoke_intrinsic %16 @eon.end_trap() cont $6 unwind $12
        :$6 
            ret %15
        :$7 
            j_always $8
        :$8 
            nop
            cmp sge %17 %12 %7
            j_true %17 $9 $4
        :$9 
            phi %18 [%10 $8], [%0 $3], 
            phi %19 [%7 $8], [%5 $3], 
            phi %20 [%9 $8], [%1 $3], 
            phi %21 [%12 $8], [%3 $3], 
            invoke_intrinsic %22 @eon.end_trap() cont $10 unwind $12
        :$10
            j_always $11
        :$11
            float %23 2.1
            ret %23
        :$12
            call_intrinsic %24 @eon.receive_exception()
            call %25 fn[272](%24, )
            call %26 fn[257](%25, )
            float %27 56.1
            ret %27
        :$13
            unreachable
#368 = fn[397] fn(obj<other.Vector3>, obj<hl.types.ArrayBytes_Float>, ) -> f64
    [Values]
        %0  obj<other.Vector3>
        %1  obj<hl.types.ArrayBytes_Float>
        %2  i32
        %3  void
        %4  i32
        %5  bool
        %6  obj<hl.types.ArrayBytes_Float>
        %7  i32
        %8  obj<other.Vector3>
        %9  i32
        %10 i32
        %11 i32
        %12 i32
        %13 bool
        %14 void
        %15 void
        %16 f64
        %17 bool
        %18 void
        %19 i32
        %20 i32
        %21 obj<other.Vector3>
        %22 i32
        %23 i32
        %24 obj<hl.types.ArrayBytes_Float>
        %25 bool
        %26 i32
        %27 i32
        %28 obj<other.Vector3>
        %29 obj<hl.types.ArrayBytes_Float>
        %30 f64
        %31 f64
        %32 bool
        %33 void
        %34 void
        %35 obj<hl.types.ArrayBytes_Float>
        %36 i32
        %37 i32
        %38 i32
        %39 i32
        %40 obj<other.Vector3>
        %41 obj<hl.types.ArrayBytes_Float>
        %42 i32
        %43 i32
        %44 i32
        %45 obj<other.Vector3>
        %46 i32
        %47 dyn
        %48 f64
    [Code]
        :$0 
            j_always $1
        :$1 
            int %2 0
            call_intrinsic %3 @eon.null_check(%1, )
            get_field %4 %1.0
            nop
            cmp sge %5 %2 %4
            j_true %5 $10 $2
        :$2 
            phi %6 [%24 $9], [%1 $1], 
            phi %7 [%19 $9], [%4 $1], 
            phi %8 [%21 $9], [%0 $1], 
            phi %9 [%20 $9], [%2 $1], 
            mov %10 %9
            incr %11 %9
            int %12 2
            cmp ne %13 %10 %5
            j_true %13 $17 $3
        :$3 
            invoke_intrinsic %14 @eon.begin_trap() cont $4 unwind $18
        :$4 
            invoke_intrinsic %15 @eon.null_check(%6, ) cont $5 unwind $18
        :$5 
            float %16 2
            invoke %17 fn[116](%6, %16, ) cont $6 unwind $18
        :$6 
            j_false %17 $11 $7
        :$7 
            invoke_intrinsic %18 @eon.end_trap() cont $8 unwind $18
        :$8 
            j_always $9
        :$9 
            phi %19 [%7 $8], [%37 $17], 
            phi %20 [%11 $8], [%36 $17], 
            phi %21 [%8 $8], [%40 $17], 
            phi %22 [%10 $8], [%38 $17], 
            phi %23 [%12 $8], [%39 $17], 
            phi %24 [%6 $8], [%35 $17], 
            nop
            cmp sge %25 %20 %19
            j_true %25 $10 $2
        :$10
            phi %26 [%11 $14], [%2 $1], [%20 $9], 
            phi %27 [%7 $14], [%4 $1], [%19 $9], 
            phi %28 [%8 $14], [%0 $1], [%21 $9], 
            phi %29 [%6 $14], [%1 $1], [%24 $9], 
            float %30 2.1
            ret %30
        :$11
            float %31 3
            invoke %32 fn[116](%6, %31, ) cont $12 unwind $18
        :$12
            j_false %32 $15 $13
        :$13
            invoke_intrinsic %33 @eon.end_trap() cont $14 unwind $18
        :$14
            j_always $10
        :$15
            invoke_intrinsic %34 @eon.end_trap() cont $16 unwind $18
        :$16
            j_always $17
        :$17
            phi %35 [%6 $16], [%6 $2], 
            phi %36 [%11 $16], [%11 $2], 
            phi %37 [%7 $16], [%7 $2], 
            phi %38 [%10 $16], [%10 $2], 
            phi %39 [%12 $16], [%12 $2], 
            phi %40 [%8 $16], [%8 $2], 
            j_always $9
        :$18
            phi %41 [%6 $4], [%6 $11], [%6 $5], 
            phi %42 [%7 $4], [%7 $11], [%7 $5], 
            phi %43 [%11 $4], [%11 $11], [%11 $5], 
            phi %44 [%10 $4], [%10 $11], [%10 $5], 
            phi %45 [%8 $4], [%8 $11], [%8 $5], 
            phi %46 [%12 $4], [%12 $11], [%12 $5], 
            call_intrinsic %47 @eon.receive_exception()
            float %48 56.1
            ret %48
        :$19
            unreachable
#369 = fn[416] fn() -> void
    [Values]
        %0   void
        %1   type
        %2   type
        %3   bytes
        %4   obj<hl.Class>
        %5   type
        %6   type
        %7   bytes
        %8   obj<hl.Class>
        %9   type
        %10  type
        %11  bytes
        %12  obj<hl.Class>
        %13  obj<hl.CoreType>
        %14  type
        %15  obj<String>
        %16  bytes
        %17  void
        %18  obj<hl.CoreType>
        %19  type
        %20  obj<String>
        %21  bytes
        %22  void
        %23  obj<hl.CoreEnum>
        %24  type
        %25  obj<String>
        %26  bytes
        %27  void
        %28  obj<hl.CoreType>
        %29  type
        %30  obj<String>
        %31  bytes
        %32  void
        %33  type
        %34  type
        %35  bytes
        %36  obj<hl.Class>
        %37  type
        %38  type
        %39  bytes
        %40  obj<hl.Class>
        %41  type
        %42  type
        %43  bytes
        %44  obj<hl.Class>
        %45  type
        %46  type
        %47  bytes
        %48  obj<hl.Class>
        %49  type
        %50  type
        %51  bytes
        %52  obj<hl.Class>
        %53  type
        %54  type
        %55  bytes
        %56  obj<hl.Class>
        %57  type
        %58  type
        %59  bytes
        %60  obj<hl.Class>
        %61  type
        %62  type
        %63  bytes
        %64  obj<hl.Class>
        %65  type
        %66  type
        %67  bytes
        %68  obj<hl.Class>
        %69  type
        %70  type
        %71  bytes
        %72  obj<hl.Class>
        %73  type
        %74  type
        %75  obj<hl.Enum>
        %76  array<void>
        %77  i32
        %78  dyn
        %79  enum<haxe.io.Error>
        %80  i32
        %81  dyn
        %82  enum<haxe.io.Error>
        %83  i32
        %84  dyn
        %85  enum<haxe.io.Error>
        %86  type
        %87  type
        %88  bytes
        %89  obj<hl.Class>
        %90  type
        %91  type
        %92  bytes
        %93  obj<hl.Class>
        %94  type
        %95  type
        %96  bytes
        %97  obj<hl.Class>
        %98  type
        %99  type
        %100 bytes
        %101 obj<hl.Class>
        %102 type
        %103 type
        %104 bytes
        %105 obj<hl.Class>
        %106 type
        %107 type
        %108 bytes
        %109 obj<hl.Class>
        %110 type
        %111 type
        %112 bytes
        %113 obj<hl.Class>
        %114 type
        %115 type
        %116 bytes
        %117 obj<hl.Class>
        %118 obj<hl.types.$ArrayBase>
        %119 type
        %120 obj<String>
        %121 bytes
        %122 void
        %123 type
        %124 type
        %125 bytes
        %126 obj<hl.Class>
        %127 type
        %128 type
        %129 bytes
        %130 obj<hl.Class>
        %131 type
        %132 type
        %133 bytes
        %134 obj<hl.Class>
        %135 obj<hl.types.$ArrayDyn>
        %136 type
        %137 obj<String>
        %138 bytes
        %139 void
        %140 type
        %141 type
        %142 bytes
        %143 obj<hl.Class>
        %144 type
        %145 type
        %146 bytes
        %147 obj<hl.Class>
        %148 type
        %149 type
        %150 bytes
        %151 obj<hl.Class>
        %152 type
        %153 type
        %154 bytes
        %155 obj<hl.Class>
        %156 type
        %157 type
        %158 bytes
        %159 obj<hl.Class>
        %160 type
        %161 type
        %162 bytes
        %163 obj<hl.Class>
        %164 type
        %165 type
        %166 bytes
        %167 obj<hl.Class>
        %168 type
        %169 type
        %170 bytes
        %171 obj<hl.Class>
        %172 type
        %173 type
        %174 bytes
        %175 obj<hl.Class>
        %176 type
        %177 type
        %178 bytes
        %179 obj<hl.Class>
        %180 type
        %181 type
        %182 bytes
        %183 obj<hl.Class>
        %184 type
        %185 type
        %186 obj<hl.Enum>
        %187 array<void>
        %188 i32
        %189 dyn
        %190 enum<other.EnumValueTypeThing>
        %191 i32
        %192 dyn
        %193 enum<other.EnumValueTypeThing>
        %194 type
        %195 type
        %196 bytes
        %197 obj<hl.Class>
        %198 type
        %199 type
        %200 bytes
        %201 obj<hl.Class>
        %202 abstract<hl_random>
        %203 obj<$Std>
        %204 bool
        %205 obj<$Sys>
        %206 i32
        %207 obj<$Std>
        %208 void
    [Code]
        :$0  
            j_always $1
        :$1  
            call %0 fn[260]()
            type %1 type[22]
            type %2 type[148]
            string %3 "Date"
            call %4 fn[262](%1, %2, %3, )
            type %5 type[74]
            type %6 type[434]
            string %7 "EntryPoint"
            call %8 fn[262](%5, %6, %7, )
            type %9 type[63]
            type %10 type[435]
            string %11 "Std"
            call %12 fn[262](%9, %10, %11, )
            new %13
            type %14 type[6]
            set_field %13.0 %14
            get_global %15 global[50]
            set_field %13.3 %15
            set_global global[49] %13
            string %16 "Float"
            call %17 fn[265](%16, %13, )
            new %18
            type %19 type[3]
            set_field %18.0 %19
            get_global %20 global[52]
            set_field %18.3 %20
            set_global global[51] %18
            string %21 "Int"
            call %22 fn[265](%21, %18, )
            new %23
            type %24 type[7]
            set_field %23.0 %24
            get_global %25 global[54]
            set_field %23.3 %25
            set_global global[53] %23
            string %26 "Bool"
            call %27 fn[265](%26, %23, )
            new %28
            type %29 type[9]
            set_field %28.0 %29
            get_global %30 global[56]
            set_field %28.3 %30
            set_global global[55] %28
            string %31 "Dynamic"
            call %32 fn[265](%31, %28, )
            type %33 type[16]
            type %34 type[13]
            string %35 "String"
            call %36 fn[262](%33, %34, %35, )
            type %37 type[36]
            type %38 type[162]
            string %39 "StringBuf"
            call %40 fn[262](%37, %38, %39, )
            type %41 type[37]
            type %42 type[168]
            string %43 "SysError"
            call %44 fn[262](%41, %42, %43, )
            type %45 type[78]
            type %46 type[436]
            string %47 "hl._Bytes.Bytes_Impl_"
            call %48 fn[262](%45, %46, %47, )
            type %49 type[80]
            type %50 type[437]
            string %51 "Sys"
            call %52 fn[262](%49, %50, %51, )
            type %53 type[82]
            type %54 type[438]
            string %55 "Type"
            call %56 fn[262](%53, %54, %55, )
            type %57 type[40]
            type %58 type[42]
            string %59 "haxe.Exception"
            call %60 fn[262](%57, %58, %59, )
            type %61 type[86]
            type %62 type[439]
            string %63 "haxe.NativeStackTrace"
            call %64 fn[262](%61, %62, %63, )
            type %65 type[44]
            type %66 type[171]
            string %67 "haxe.ValueException"
            call %68 fn[262](%65, %66, %67, )
            type %69 type[88]
            type %70 type[440]
            string %71 "haxe.ds.ArraySort"
            call %72 fn[262](%69, %70, %71, )
            type %73 type[49]
            type %74 type[50]
            call %75 fn[266](%73, %74, )
            get_field %76 %75.6
            int %77 0
            get_array %78 %76[%77]
            call_intrinsic %79 @eon.safe_cast(%78, )
            set_global global[62] %79
            int %80 1
            get_array %81 %76[%80]
            call_intrinsic %82 @eon.safe_cast(%81, )
            set_global global[63] %82
            int %83 2
            get_array %84 %76[%83]
            call_intrinsic %85 @eon.safe_cast(%84, )
            set_global global[28] %85
            type %86 type[45]
            type %87 type[179]
            string %88 "haxe.iterators.ArrayIterator"
            call %89 fn[262](%86, %87, %88, )
            type %90 type[46]
            type %91 type[183]
            string %92 "haxe.iterators.ArrayKeyValueIterator"
            call %93 fn[262](%90, %91, %92, )
            type %94 type[15]
            type %95 type[10]
            string %96 "hl.BaseType"
            call %97 fn[262](%94, %95, %96, )
            type %98 type[12]
            type %99 type[12]
            string %100 "Class"
            call %101 fn[262](%98, %99, %100, )
            type %102 type[39]
            type %103 type[47]
            string %104 "hl.Enum"
            call %105 fn[262](%102, %103, %104, )
            type %106 type[98]
            type %107 type[441]
            string %108 "hl._NativeArray.NativeArray_Impl_"
            call %109 fn[262](%106, %107, %108, )
            type %110 type[99]
            type %111 type[442]
            string %112 "hl._Type.Type_Impl_"
            call %113 fn[262](%110, %111, %112, )
            type %114 type[23]
            type %115 type[26]
            string %116 "hl.types.ArrayAccess"
            call %117 fn[262](%114, %115, %116, )
            new %118
            set_global global[12] %118
            type %119 type[26]
            set_field %118.0 %119
            get_global %120 global[66]
            set_field %118.3 %120
            string %121 "Array"
            call %122 fn[265](%121, %118, )
            type %123 type[35]
            type %124 type[32]
            string %125 "hl.types.ArrayBytes_hl_F32"
            call %126 fn[262](%123, %124, %125, )
            type %127 type[59]
            type %128 type[342]
            string %129 "hl.types.ArrayDynIterator"
            call %130 fn[262](%127, %128, %129, )
            type %131 type[60]
            type %132 type[346]
            string %133 "hl.types.ArrayDynKeyValueIterator"
            call %134 fn[262](%131, %132, %133, )
            new %135
            set_global global[67] %135
            type %136 type[90]
            set_field %135.0 %136
            get_global %137 global[68]
            set_field %135.3 %137
            string %138 "hl.types.ArrayDyn"
            call %139 fn[265](%138, %135, )
            type %140 type[61]
            type %141 type[372]
            string %142 "hl.types.ArrayObjIterator"
            call %143 fn[262](%140, %141, %142, )
            type %144 type[62]
            type %145 type[376]
            string %146 "hl.types.ArrayObjKeyValueIterator"
            call %147 fn[262](%144, %145, %146, )
            type %148 type[51]
            type %149 type[221]
            string %150 "hl.types.BytesIterator_Float"
            call %151 fn[262](%148, %149, %150, )
            type %152 type[53]
            type %153 type[254]
            string %154 "hl.types.BytesIterator_Int"
            call %155 fn[262](%152, %153, %154, )
            type %156 type[55]
            type %157 type[289]
            string %158 "hl.types.BytesIterator_hl_F32"
            call %159 fn[262](%156, %157, %158, )
            type %160 type[57]
            type %161 type[325]
            string %162 "hl.types.BytesIterator_hl_UI16"
            call %163 fn[262](%160, %161, %162, )
            type %164 type[52]
            type %165 type[223]
            string %166 "hl.types.BytesKeyValueIterator_Float"
            call %167 fn[262](%164, %165, %166, )
            type %168 type[54]
            type %169 type[256]
            string %170 "hl.types.BytesKeyValueIterator_Int"
            call %171 fn[262](%168, %169, %170, )
            type %172 type[56]
            type %173 type[291]
            string %174 "hl.types.BytesKeyValueIterator_hl_F32"
            call %175 fn[262](%172, %173, %174, )
            type %176 type[58]
            type %177 type[327]
            string %178 "hl.types.BytesKeyValueIterator_hl_UI16"
            call %179 fn[262](%176, %177, %178, )
            type %180 type[103]
            type %181 type[443]
            string %182 "hl.types._BytesMap.BytesMap_Impl_"
            call %183 fn[262](%180, %181, %182, )
            type %184 type[72]
            type %185 type[73]
            call %186 fn[266](%184, %185, )
            get_field %187 %186.6
            int %188 0
            get_array %189 %187[%188]
            call_intrinsic %190 @eon.safe_cast(%189, )
            set_global global[70] %190
            int %191 1
            get_array %192 %187[%191]
            call_intrinsic %193 @eon.safe_cast(%192, )
            set_global global[46] %193
            type %194 type[104]
            type %195 type[444]
            string %196 "other.OtherEntryPoint"
            call %197 fn[262](%194, %195, %196, )
            type %198 type[68]
            type %199 type[428]
            string %200 "other.Vector3"
            call %201 fn[262](%198, %199, %200, )
            call %202 fn[29]()
            get_global %203 global[42]
            set_field %203.5 %202
            call %204 fn[259]()
            get_global %205 global[58]
            set_field %205.5 %204
            int %206 0
            get_global %207 global[42]
            set_field %207.6 %206
            call %208 fn[27]()
            ret_void
        :$2  
            unreachable

