//
//
// This file is a part of Aleph
//
// https://github.com/nathanvoglsam/aleph
//
// MIT License
//
// Copyright (c) 2020 Aleph Engine
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

use raw::windows::win32::dxgi::DXGI_FORMAT;

#[derive(Copy, Clone, PartialOrd, PartialEq, Ord, Eq, Debug, Hash)]
pub enum Format {
    Unknown,
    R32G32B32A32Typeless,
    R32G32B32A32Float,
    R32G32B32A32Uint,
    R32G32B32A32Sint,
    R32G32B32Typeless,
    R32G32B32Float,
    R32G32B32Uint,
    R32G32B32Sint,
    R16G16B16A16Typeless,
    R16G16B16A16Float,
    R16G16B16A16Unorm,
    R16G16B16A16Uint,
    R16G16B16A16Snorm,
    R16G16B16A16Sint,
    R32G32Typeless,
    R32G32Float,
    R32G32Uint,
    R32G32Sint,
    R32G8X24Typeless,
    D32FloatS8X24Uint,
    R32FloatX8X24Typeless,
    X32TypelessG8X24Uint,
    R10G10B10A2Typeless,
    R10G10B10A2Unorm,
    R10G10B10A2Uint,
    R11G11B10Float,
    R8G8B8A8Typeless,
    R8G8B8A8Unorm,
    R8G8B8A8UnormSRGB,
    R8G8B8A8Uint,
    R8G8B8A8Snorm,
    R8G8B8A8Sint,
    R16G16Typeless,
    R16G16Float,
    R16G16Unorm,
    R16G16Uint,
    R16G16Snorm,
    R16G16Sint,
    R32Typeless,
    D32Float,
    R32Float,
    R32Uint,
    R32Sint,
    R24G8Typeless,
    D24UnormS8Uint,
    R24UnormX8Typeless,
    X24TypelessG8Uint,
    R8G8Typeless,
    R8G8Unorm,
    R8G8Uint,
    R8G8Snorm,
    R8G8Sint,
    R16Typeless,
    R16Float,
    D16Unorm,
    R16Unorm,
    R16Uint,
    R16Snorm,
    R16Sint,
    R8Typeless,
    R8Unorm,
    R8Uint,
    R8Snorm,
    R8Sint,
    A8Unorm,
    R1Unorm,
    R9G9B9E5SharedExp,
    R8G8UnormB8G8Unorm,
    G8R8UnormG8B8Unorm,
    BC1Typeless,
    BC1Unorm,
    BC1UnormSRGB,
    BC2Typeless,
    BC2Unorm,
    BC2UnormSRGB,
    BC3Typeless,
    BC3Unorm,
    BC3UnormSRGB,
    BC4Typeless,
    BC4Unorm,
    BC4Snorm,
    BC5Typeless,
    BC5Unorm,
    BC5Snorm,
    B5G6R5Unorm,
    B5G5R5A1Unorm,
    B8G8R8A8Unorm,
    B8G8R8X8Unorm,
    R10G10B10XrBiasA2Unorm,
    B8G8R8A8Typeless,
    B8G8R8A8UnormSRGB,
    B8G8R8X8Typeless,
    B8G8R8X8UnormSRGB,
    BC6HTypeless,
    BC6HUFloat16,
    BC6HSFloat16,
    BC7Typeless,
    BC7Unorm,
    BC7UnormSRGB,
    AYUV,
    Y410,
    Y416,
    NV12,
    P010,
    P016,
    Opaque420,
    YUY2,
    Y210,
    Y216,
    NV11,
    AI44,
    IA44,
    P8,
    A8P8,
    B4G4R4A4Unorm,
    P208,
    V208,
    V408,
    SamplerFeedbackMinMipOpaque,
    SamplerFeedbackMipRegionUsedOpaque,
}

impl Into<DXGI_FORMAT> for Format {
    fn into(self) -> DXGI_FORMAT {
        match self {
            Format::Unknown => DXGI_FORMAT::DXGI_FORMAT_UNKNOWN,
            Format::R32G32B32A32Typeless => DXGI_FORMAT::DXGI_FORMAT_R32G32B32A32_TYPELESS,
            Format::R32G32B32A32Float => DXGI_FORMAT::DXGI_FORMAT_R32G32B32A32_FLOAT,
            Format::R32G32B32A32Uint => DXGI_FORMAT::DXGI_FORMAT_R32G32B32A32_UINT,
            Format::R32G32B32A32Sint => DXGI_FORMAT::DXGI_FORMAT_R32G32B32A32_SINT,
            Format::R32G32B32Typeless => DXGI_FORMAT::DXGI_FORMAT_R32G32B32_TYPELESS,
            Format::R32G32B32Float => DXGI_FORMAT::DXGI_FORMAT_R32G32B32_FLOAT,
            Format::R32G32B32Uint => DXGI_FORMAT::DXGI_FORMAT_R32G32B32_UINT,
            Format::R32G32B32Sint => DXGI_FORMAT::DXGI_FORMAT_R32G32B32_SINT,
            Format::R16G16B16A16Typeless => DXGI_FORMAT::DXGI_FORMAT_R16G16B16A16_TYPELESS,
            Format::R16G16B16A16Float => DXGI_FORMAT::DXGI_FORMAT_R16G16B16A16_FLOAT,
            Format::R16G16B16A16Unorm => DXGI_FORMAT::DXGI_FORMAT_R16G16B16A16_UNORM,
            Format::R16G16B16A16Uint => DXGI_FORMAT::DXGI_FORMAT_R16G16B16A16_UINT,
            Format::R16G16B16A16Snorm => DXGI_FORMAT::DXGI_FORMAT_R16G16B16A16_SNORM,
            Format::R16G16B16A16Sint => DXGI_FORMAT::DXGI_FORMAT_R16G16B16A16_SINT,
            Format::R32G32Typeless => DXGI_FORMAT::DXGI_FORMAT_R32G32_TYPELESS,
            Format::R32G32Float => DXGI_FORMAT::DXGI_FORMAT_R32G32_FLOAT,
            Format::R32G32Uint => DXGI_FORMAT::DXGI_FORMAT_R32G32_UINT,
            Format::R32G32Sint => DXGI_FORMAT::DXGI_FORMAT_R32G32_SINT,
            Format::R32G8X24Typeless => DXGI_FORMAT::DXGI_FORMAT_R32G8X24_TYPELESS,
            Format::D32FloatS8X24Uint => DXGI_FORMAT::DXGI_FORMAT_D32_FLOAT_S8X24_UINT,
            Format::R32FloatX8X24Typeless => DXGI_FORMAT::DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,
            Format::X32TypelessG8X24Uint => DXGI_FORMAT::DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,
            Format::R10G10B10A2Typeless => DXGI_FORMAT::DXGI_FORMAT_R10G10B10A2_TYPELESS,
            Format::R10G10B10A2Unorm => DXGI_FORMAT::DXGI_FORMAT_R10G10B10A2_UNORM,
            Format::R10G10B10A2Uint => DXGI_FORMAT::DXGI_FORMAT_R10G10B10A2_UINT,
            Format::R11G11B10Float => DXGI_FORMAT::DXGI_FORMAT_R11G11B10_FLOAT,
            Format::R8G8B8A8Typeless => DXGI_FORMAT::DXGI_FORMAT_R8G8B8A8_TYPELESS,
            Format::R8G8B8A8Unorm => DXGI_FORMAT::DXGI_FORMAT_R8G8B8A8_UNORM,
            Format::R8G8B8A8UnormSRGB => DXGI_FORMAT::DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
            Format::R8G8B8A8Uint => DXGI_FORMAT::DXGI_FORMAT_R8G8B8A8_UINT,
            Format::R8G8B8A8Snorm => DXGI_FORMAT::DXGI_FORMAT_R8G8B8A8_SNORM,
            Format::R8G8B8A8Sint => DXGI_FORMAT::DXGI_FORMAT_R8G8B8A8_SINT,
            Format::R16G16Typeless => DXGI_FORMAT::DXGI_FORMAT_R16G16_TYPELESS,
            Format::R16G16Float => DXGI_FORMAT::DXGI_FORMAT_R16G16_FLOAT,
            Format::R16G16Unorm => DXGI_FORMAT::DXGI_FORMAT_R16G16_UNORM,
            Format::R16G16Uint => DXGI_FORMAT::DXGI_FORMAT_R16G16_UINT,
            Format::R16G16Snorm => DXGI_FORMAT::DXGI_FORMAT_R16G16_SNORM,
            Format::R16G16Sint => DXGI_FORMAT::DXGI_FORMAT_R16G16_SINT,
            Format::R32Typeless => DXGI_FORMAT::DXGI_FORMAT_R32_TYPELESS,
            Format::D32Float => DXGI_FORMAT::DXGI_FORMAT_D32_FLOAT,
            Format::R32Float => DXGI_FORMAT::DXGI_FORMAT_R32_FLOAT,
            Format::R32Uint => DXGI_FORMAT::DXGI_FORMAT_R32_UINT,
            Format::R32Sint => DXGI_FORMAT::DXGI_FORMAT_R32_SINT,
            Format::R24G8Typeless => DXGI_FORMAT::DXGI_FORMAT_R24G8_TYPELESS,
            Format::D24UnormS8Uint => DXGI_FORMAT::DXGI_FORMAT_D24_UNORM_S8_UINT,
            Format::R24UnormX8Typeless => DXGI_FORMAT::DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
            Format::X24TypelessG8Uint => DXGI_FORMAT::DXGI_FORMAT_X24_TYPELESS_G8_UINT,
            Format::R8G8Typeless => DXGI_FORMAT::DXGI_FORMAT_R8G8_TYPELESS,
            Format::R8G8Unorm => DXGI_FORMAT::DXGI_FORMAT_R8G8_UNORM,
            Format::R8G8Uint => DXGI_FORMAT::DXGI_FORMAT_R8G8_UINT,
            Format::R8G8Snorm => DXGI_FORMAT::DXGI_FORMAT_R8G8_SNORM,
            Format::R8G8Sint => DXGI_FORMAT::DXGI_FORMAT_R8G8_SINT,
            Format::R16Typeless => DXGI_FORMAT::DXGI_FORMAT_R16_TYPELESS,
            Format::R16Float => DXGI_FORMAT::DXGI_FORMAT_R16_FLOAT,
            Format::D16Unorm => DXGI_FORMAT::DXGI_FORMAT_D16_UNORM,
            Format::R16Unorm => DXGI_FORMAT::DXGI_FORMAT_R16_UNORM,
            Format::R16Uint => DXGI_FORMAT::DXGI_FORMAT_R16_UINT,
            Format::R16Snorm => DXGI_FORMAT::DXGI_FORMAT_R16_SNORM,
            Format::R16Sint => DXGI_FORMAT::DXGI_FORMAT_R16_SINT,
            Format::R8Typeless => DXGI_FORMAT::DXGI_FORMAT_R8_TYPELESS,
            Format::R8Unorm => DXGI_FORMAT::DXGI_FORMAT_R8_UNORM,
            Format::R8Uint => DXGI_FORMAT::DXGI_FORMAT_R8_UINT,
            Format::R8Snorm => DXGI_FORMAT::DXGI_FORMAT_R8_SNORM,
            Format::R8Sint => DXGI_FORMAT::DXGI_FORMAT_R8_SINT,
            Format::A8Unorm => DXGI_FORMAT::DXGI_FORMAT_A8_UNORM,
            Format::R1Unorm => DXGI_FORMAT::DXGI_FORMAT_R1_UNORM,
            Format::R9G9B9E5SharedExp => DXGI_FORMAT::DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
            Format::R8G8UnormB8G8Unorm => DXGI_FORMAT::DXGI_FORMAT_R8G8_B8G8_UNORM,
            Format::G8R8UnormG8B8Unorm => DXGI_FORMAT::DXGI_FORMAT_G8R8_G8B8_UNORM,
            Format::BC1Typeless => DXGI_FORMAT::DXGI_FORMAT_BC1_TYPELESS,
            Format::BC1Unorm => DXGI_FORMAT::DXGI_FORMAT_BC1_UNORM,
            Format::BC1UnormSRGB => DXGI_FORMAT::DXGI_FORMAT_BC1_UNORM_SRGB,
            Format::BC2Typeless => DXGI_FORMAT::DXGI_FORMAT_BC2_TYPELESS,
            Format::BC2Unorm => DXGI_FORMAT::DXGI_FORMAT_BC2_UNORM,
            Format::BC2UnormSRGB => DXGI_FORMAT::DXGI_FORMAT_BC2_UNORM_SRGB,
            Format::BC3Typeless => DXGI_FORMAT::DXGI_FORMAT_BC3_TYPELESS,
            Format::BC3Unorm => DXGI_FORMAT::DXGI_FORMAT_BC3_UNORM,
            Format::BC3UnormSRGB => DXGI_FORMAT::DXGI_FORMAT_BC3_UNORM_SRGB,
            Format::BC4Typeless => DXGI_FORMAT::DXGI_FORMAT_BC4_TYPELESS,
            Format::BC4Unorm => DXGI_FORMAT::DXGI_FORMAT_BC4_UNORM,
            Format::BC4Snorm => DXGI_FORMAT::DXGI_FORMAT_BC4_SNORM,
            Format::BC5Typeless => DXGI_FORMAT::DXGI_FORMAT_BC5_TYPELESS,
            Format::BC5Unorm => DXGI_FORMAT::DXGI_FORMAT_BC5_UNORM,
            Format::BC5Snorm => DXGI_FORMAT::DXGI_FORMAT_BC5_SNORM,
            Format::B5G6R5Unorm => DXGI_FORMAT::DXGI_FORMAT_B5G6R5_UNORM,
            Format::B5G5R5A1Unorm => DXGI_FORMAT::DXGI_FORMAT_B5G5R5A1_UNORM,
            Format::B8G8R8A8Unorm => DXGI_FORMAT::DXGI_FORMAT_B8G8R8A8_UNORM,
            Format::B8G8R8X8Unorm => DXGI_FORMAT::DXGI_FORMAT_B8G8R8X8_UNORM,
            Format::R10G10B10XrBiasA2Unorm => DXGI_FORMAT::DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
            Format::B8G8R8A8Typeless => DXGI_FORMAT::DXGI_FORMAT_B8G8R8A8_TYPELESS,
            Format::B8G8R8A8UnormSRGB => DXGI_FORMAT::DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
            Format::B8G8R8X8Typeless => DXGI_FORMAT::DXGI_FORMAT_B8G8R8X8_TYPELESS,
            Format::B8G8R8X8UnormSRGB => DXGI_FORMAT::DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,
            Format::BC6HTypeless => DXGI_FORMAT::DXGI_FORMAT_BC6H_TYPELESS,
            Format::BC6HUFloat16 => DXGI_FORMAT::DXGI_FORMAT_BC6H_UF16,
            Format::BC6HSFloat16 => DXGI_FORMAT::DXGI_FORMAT_BC6H_SF16,
            Format::BC7Typeless => DXGI_FORMAT::DXGI_FORMAT_BC7_TYPELESS,
            Format::BC7Unorm => DXGI_FORMAT::DXGI_FORMAT_BC7_UNORM,
            Format::BC7UnormSRGB => DXGI_FORMAT::DXGI_FORMAT_BC7_UNORM_SRGB,
            Format::AYUV => DXGI_FORMAT::DXGI_FORMAT_AYUV,
            Format::Y410 => DXGI_FORMAT::DXGI_FORMAT_Y410,
            Format::Y416 => DXGI_FORMAT::DXGI_FORMAT_Y416,
            Format::NV12 => DXGI_FORMAT::DXGI_FORMAT_NV12,
            Format::P010 => DXGI_FORMAT::DXGI_FORMAT_P010,
            Format::P016 => DXGI_FORMAT::DXGI_FORMAT_P016,
            Format::Opaque420 => DXGI_FORMAT::DXGI_FORMAT_420_OPAQUE,
            Format::YUY2 => DXGI_FORMAT::DXGI_FORMAT_YUY2,
            Format::Y210 => DXGI_FORMAT::DXGI_FORMAT_Y210,
            Format::Y216 => DXGI_FORMAT::DXGI_FORMAT_Y216,
            Format::NV11 => DXGI_FORMAT::DXGI_FORMAT_NV11,
            Format::AI44 => DXGI_FORMAT::DXGI_FORMAT_AI44,
            Format::IA44 => DXGI_FORMAT::DXGI_FORMAT_IA44,
            Format::P8 => DXGI_FORMAT::DXGI_FORMAT_P8,
            Format::A8P8 => DXGI_FORMAT::DXGI_FORMAT_A8P8,
            Format::B4G4R4A4Unorm => DXGI_FORMAT::DXGI_FORMAT_B4G4R4A4_UNORM,
            Format::P208 => DXGI_FORMAT::DXGI_FORMAT_P208,
            Format::V208 => DXGI_FORMAT::DXGI_FORMAT_V208,
            Format::V408 => DXGI_FORMAT::DXGI_FORMAT_V408,
            Format::SamplerFeedbackMinMipOpaque => {
                DXGI_FORMAT::DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE
            }
            Format::SamplerFeedbackMipRegionUsedOpaque => {
                DXGI_FORMAT::DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE
            }
        }
    }
}
