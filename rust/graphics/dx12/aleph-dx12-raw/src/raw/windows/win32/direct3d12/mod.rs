pub struct Apis {}
impl Apis {}
impl ::windows::RuntimeName for Apis {
    const NAME: &'static str = "Windows.Win32.Direct3D12.Apis";
}
#[link(name = "d3d11")]
extern "system" {
    pub fn D3D11On12CreateDevice(
        p_device: ::std::option::Option<::windows::IUnknown>,
        flags: u32,
        p_feature_levels: *const super::direct3d11::D3D_FEATURE_LEVEL,
        feature_levels: u32,
        pp_command_queues: *mut ::std::option::Option<::windows::IUnknown>,
        num_queues: u32,
        node_mask: u32,
        pp_device: *mut ::std::option::Option<super::direct3d11::ID3D11Device>,
        pp_immediate_context: *mut ::std::option::Option<super::direct3d11::ID3D11DeviceContext>,
        p_chosen_feature_level: *mut super::direct3d11::D3D_FEATURE_LEVEL,
    ) -> ::windows::ErrorCode;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D11_RESOURCE_FLAGS {
    pub bind_flags: u32,
    pub misc_flags: u32,
    pub cpu_access_flags: u32,
    pub structure_byte_stride: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D11_RESOURCE_FLAGS_abi(u32, u32, u32, u32);
impl D3D11_RESOURCE_FLAGS {}
unsafe impl ::windows::Abi for D3D11_RESOURCE_FLAGS {
    type Abi = D3D11_RESOURCE_FLAGS_abi;
}
impl ::std::default::Default for D3D11_RESOURCE_FLAGS {
    fn default() -> Self {
        Self {
            bind_flags: 0,
            misc_flags: 0,
            cpu_access_flags: 0,
            structure_byte_stride: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D11_RESOURCE_FLAGS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D11_RESOURCE_FLAGS")
            .field("bind_flags", &format_args!("{:?}", self.bind_flags))
            .field("misc_flags", &format_args!("{:?}", self.misc_flags))
            .field(
                "cpu_access_flags",
                &format_args!("{:?}", self.cpu_access_flags),
            )
            .field(
                "structure_byte_stride",
                &format_args!("{:?}", self.structure_byte_stride),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D11_RESOURCE_FLAGS {
    fn clone(&self) -> Self {
        Self {
            bind_flags: self.bind_flags,
            misc_flags: self.misc_flags,
            cpu_access_flags: self.cpu_access_flags,
            structure_byte_stride: self.structure_byte_stride,
        }
    }
}
impl ::std::cmp::PartialEq for D3D11_RESOURCE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.bind_flags == other.bind_flags
            && self.misc_flags == other.misc_flags
            && self.cpu_access_flags == other.cpu_access_flags
            && self.structure_byte_stride == other.structure_byte_stride
    }
}
impl ::std::cmp::Eq for D3D11_RESOURCE_FLAGS {}
impl ::std::marker::Copy for D3D11_RESOURCE_FLAGS {}
#[link(name = "d3d12")]
extern "system" {
    pub fn D3D12CreateDevice(
        p_adapter: ::std::option::Option<::windows::IUnknown>,
        minimum_feature_level: super::direct3d11::D3D_FEATURE_LEVEL,
        riid: *const ::windows::Guid,
        pp_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode;
}
#[link(name = "d3d12")]
extern "system" {
    pub fn D3D12CreateRootSignatureDeserializer(
        p_src_data: *mut ::std::ffi::c_void,
        src_data_size_in_bytes: usize,
        p_root_signature_deserializer_interface: *const ::windows::Guid,
        pp_root_signature_deserializer: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode;
}
#[link(name = "d3d12")]
extern "system" {
    pub fn D3D12CreateVersionedRootSignatureDeserializer(
        p_src_data: *mut ::std::ffi::c_void,
        src_data_size_in_bytes: usize,
        p_root_signature_deserializer_interface: *const ::windows::Guid,
        pp_root_signature_deserializer: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode;
}
#[link(name = "d3d12")]
extern "system" {
    pub fn D3D12EnableExperimentalFeatures(
        num_features: u32,
        p_ii_ds: *const ::windows::Guid,
        p_configuration_structs: *mut ::std::ffi::c_void,
        p_configuration_struct_sizes: *mut u32,
    ) -> ::windows::ErrorCode;
}
#[link(name = "d3d12")]
extern "system" {
    pub fn D3D12GetDebugInterface(
        riid: *const ::windows::Guid,
        ppv_debug: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_ROOT_PARAMETER_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_ROOT_PARAMETER_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_ROOT_PARAMETER_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_ROOT_PARAMETER_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_PARAMETER_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_PARAMETER_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_PARAMETER_TYPE {}
impl ::std::marker::Copy for D3D12_ROOT_PARAMETER_TYPE {}
impl D3D12_ROOT_PARAMETER_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE: Self = Self(0i32);
    pub const D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS: Self = Self(1i32);
    pub const D3D12_ROOT_PARAMETER_TYPE_CBV: Self = Self(2i32);
    pub const D3D12_ROOT_PARAMETER_TYPE_SRV: Self = Self(3i32);
    pub const D3D12_ROOT_PARAMETER_TYPE_UAV: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_ROOT_PARAMETER_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SHADER_VISIBILITY(pub i32);
impl ::std::convert::From<i32> for D3D12_SHADER_VISIBILITY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SHADER_VISIBILITY {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SHADER_VISIBILITY {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_VISIBILITY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_VISIBILITY {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_VISIBILITY {}
impl ::std::marker::Copy for D3D12_SHADER_VISIBILITY {}
impl D3D12_SHADER_VISIBILITY {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SHADER_VISIBILITY_ALL: Self = Self(0i32);
    pub const D3D12_SHADER_VISIBILITY_VERTEX: Self = Self(1i32);
    pub const D3D12_SHADER_VISIBILITY_HULL: Self = Self(2i32);
    pub const D3D12_SHADER_VISIBILITY_DOMAIN: Self = Self(3i32);
    pub const D3D12_SHADER_VISIBILITY_GEOMETRY: Self = Self(4i32);
    pub const D3D12_SHADER_VISIBILITY_PIXEL: Self = Self(5i32);
    pub const D3D12_SHADER_VISIBILITY_AMPLIFICATION: Self = Self(6i32);
    pub const D3D12_SHADER_VISIBILITY_MESH: Self = Self(7i32);
}
unsafe impl ::windows::Abi for D3D12_SHADER_VISIBILITY {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DESCRIPTOR_RANGE_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_DESCRIPTOR_RANGE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DESCRIPTOR_RANGE_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DESCRIPTOR_RANGE_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DESCRIPTOR_RANGE_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DESCRIPTOR_RANGE_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DESCRIPTOR_RANGE_TYPE {}
impl ::std::marker::Copy for D3D12_DESCRIPTOR_RANGE_TYPE {}
impl D3D12_DESCRIPTOR_RANGE_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DESCRIPTOR_RANGE_TYPE_SRV: Self = Self(0i32);
    pub const D3D12_DESCRIPTOR_RANGE_TYPE_UAV: Self = Self(1i32);
    pub const D3D12_DESCRIPTOR_RANGE_TYPE_CBV: Self = Self(2i32);
    pub const D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_DESCRIPTOR_RANGE_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DESCRIPTOR_RANGE {
    pub range_type: D3D12_DESCRIPTOR_RANGE_TYPE,
    pub num_descriptors: u32,
    pub base_shader_register: u32,
    pub register_space: u32,
    pub offset_in_descriptors_from_table_start: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DESCRIPTOR_RANGE_abi(D3D12_DESCRIPTOR_RANGE_TYPE, u32, u32, u32, u32);
impl D3D12_DESCRIPTOR_RANGE {}
unsafe impl ::windows::Abi for D3D12_DESCRIPTOR_RANGE {
    type Abi = D3D12_DESCRIPTOR_RANGE_abi;
}
impl ::std::default::Default for D3D12_DESCRIPTOR_RANGE {
    fn default() -> Self {
        Self {
            range_type: ::std::default::Default::default(),
            num_descriptors: 0,
            base_shader_register: 0,
            register_space: 0,
            offset_in_descriptors_from_table_start: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DESCRIPTOR_RANGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DESCRIPTOR_RANGE")
            .field("range_type", &format_args!("{:?}", self.range_type))
            .field(
                "num_descriptors",
                &format_args!("{:?}", self.num_descriptors),
            )
            .field(
                "base_shader_register",
                &format_args!("{:?}", self.base_shader_register),
            )
            .field("register_space", &format_args!("{:?}", self.register_space))
            .field(
                "offset_in_descriptors_from_table_start",
                &format_args!("{:?}", self.offset_in_descriptors_from_table_start),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DESCRIPTOR_RANGE {
    fn clone(&self) -> Self {
        Self {
            range_type: self.range_type,
            num_descriptors: self.num_descriptors,
            base_shader_register: self.base_shader_register,
            register_space: self.register_space,
            offset_in_descriptors_from_table_start: self.offset_in_descriptors_from_table_start,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DESCRIPTOR_RANGE {
    fn eq(&self, other: &Self) -> bool {
        self.range_type == other.range_type
            && self.num_descriptors == other.num_descriptors
            && self.base_shader_register == other.base_shader_register
            && self.register_space == other.register_space
            && self.offset_in_descriptors_from_table_start
                == other.offset_in_descriptors_from_table_start
    }
}
impl ::std::cmp::Eq for D3D12_DESCRIPTOR_RANGE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_ROOT_DESCRIPTOR_TABLE {
    pub num_descriptor_ranges: u32,
    pub p_descriptor_ranges: *mut D3D12_DESCRIPTOR_RANGE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_ROOT_DESCRIPTOR_TABLE_abi(u32, *mut D3D12_DESCRIPTOR_RANGE_abi);
impl D3D12_ROOT_DESCRIPTOR_TABLE {}
unsafe impl ::windows::Abi for D3D12_ROOT_DESCRIPTOR_TABLE {
    type Abi = D3D12_ROOT_DESCRIPTOR_TABLE_abi;
}
impl ::std::default::Default for D3D12_ROOT_DESCRIPTOR_TABLE {
    fn default() -> Self {
        Self {
            num_descriptor_ranges: 0,
            p_descriptor_ranges: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_DESCRIPTOR_TABLE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_ROOT_DESCRIPTOR_TABLE")
            .field(
                "num_descriptor_ranges",
                &format_args!("{:?}", self.num_descriptor_ranges),
            )
            .field(
                "p_descriptor_ranges",
                &format_args!("{:?}", self.p_descriptor_ranges),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_ROOT_DESCRIPTOR_TABLE {
    fn clone(&self) -> Self {
        Self {
            num_descriptor_ranges: self.num_descriptor_ranges,
            p_descriptor_ranges: <*mut D3D12_DESCRIPTOR_RANGE as std::clone::Clone>::clone(
                &self.p_descriptor_ranges,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_DESCRIPTOR_TABLE {
    fn eq(&self, other: &Self) -> bool {
        self.num_descriptor_ranges == other.num_descriptor_ranges
            && self.p_descriptor_ranges == other.p_descriptor_ranges
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_DESCRIPTOR_TABLE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_ROOT_CONSTANTS {
    pub shader_register: u32,
    pub register_space: u32,
    pub num32_bit_values: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_ROOT_CONSTANTS_abi(u32, u32, u32);
impl D3D12_ROOT_CONSTANTS {}
unsafe impl ::windows::Abi for D3D12_ROOT_CONSTANTS {
    type Abi = D3D12_ROOT_CONSTANTS_abi;
}
impl ::std::default::Default for D3D12_ROOT_CONSTANTS {
    fn default() -> Self {
        Self {
            shader_register: 0,
            register_space: 0,
            num32_bit_values: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_CONSTANTS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_ROOT_CONSTANTS")
            .field(
                "shader_register",
                &format_args!("{:?}", self.shader_register),
            )
            .field("register_space", &format_args!("{:?}", self.register_space))
            .field(
                "num32_bit_values",
                &format_args!("{:?}", self.num32_bit_values),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_ROOT_CONSTANTS {
    fn clone(&self) -> Self {
        Self {
            shader_register: self.shader_register,
            register_space: self.register_space,
            num32_bit_values: self.num32_bit_values,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_CONSTANTS {
    fn eq(&self, other: &Self) -> bool {
        self.shader_register == other.shader_register
            && self.register_space == other.register_space
            && self.num32_bit_values == other.num32_bit_values
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_CONSTANTS {}
impl ::std::marker::Copy for D3D12_ROOT_CONSTANTS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_ROOT_DESCRIPTOR {
    pub shader_register: u32,
    pub register_space: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_ROOT_DESCRIPTOR_abi(u32, u32);
impl D3D12_ROOT_DESCRIPTOR {}
unsafe impl ::windows::Abi for D3D12_ROOT_DESCRIPTOR {
    type Abi = D3D12_ROOT_DESCRIPTOR_abi;
}
impl ::std::default::Default for D3D12_ROOT_DESCRIPTOR {
    fn default() -> Self {
        Self {
            shader_register: 0,
            register_space: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_DESCRIPTOR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_ROOT_DESCRIPTOR")
            .field(
                "shader_register",
                &format_args!("{:?}", self.shader_register),
            )
            .field("register_space", &format_args!("{:?}", self.register_space))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_ROOT_DESCRIPTOR {
    fn clone(&self) -> Self {
        Self {
            shader_register: self.shader_register,
            register_space: self.register_space,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_DESCRIPTOR {
    fn eq(&self, other: &Self) -> bool {
        self.shader_register == other.shader_register && self.register_space == other.register_space
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_DESCRIPTOR {}
impl ::std::marker::Copy for D3D12_ROOT_DESCRIPTOR {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_ROOT_PARAMETER {
    pub parameter_type: D3D12_ROOT_PARAMETER_TYPE,
    pub anonymous: D3D12_ROOT_PARAMETER_0,
    pub shader_visibility: D3D12_SHADER_VISIBILITY,
}
impl D3D12_ROOT_PARAMETER {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_ROOT_PARAMETER_0 {
    pub descriptor_table: D3D12_ROOT_DESCRIPTOR_TABLE,
    pub constants: D3D12_ROOT_CONSTANTS,
    pub descriptor: D3D12_ROOT_DESCRIPTOR,
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_FILTER(pub i32);
impl ::std::convert::From<i32> for D3D12_FILTER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_FILTER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_FILTER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_FILTER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_FILTER {}
impl ::std::marker::Copy for D3D12_FILTER {}
impl D3D12_FILTER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_FILTER_MIN_MAG_MIP_POINT: Self = Self(0i32);
    pub const D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR: Self = Self(1i32);
    pub const D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT: Self = Self(4i32);
    pub const D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR: Self = Self(5i32);
    pub const D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT: Self = Self(16i32);
    pub const D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR: Self = Self(17i32);
    pub const D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT: Self = Self(20i32);
    pub const D3D12_FILTER_MIN_MAG_MIP_LINEAR: Self = Self(21i32);
    pub const D3D12_FILTER_ANISOTROPIC: Self = Self(85i32);
    pub const D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT: Self = Self(128i32);
    pub const D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR: Self = Self(129i32);
    pub const D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT: Self = Self(132i32);
    pub const D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR: Self = Self(133i32);
    pub const D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT: Self = Self(144i32);
    pub const D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR: Self = Self(145i32);
    pub const D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT: Self = Self(148i32);
    pub const D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR: Self = Self(149i32);
    pub const D3D12_FILTER_COMPARISON_ANISOTROPIC: Self = Self(213i32);
    pub const D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT: Self = Self(256i32);
    pub const D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR: Self = Self(257i32);
    pub const D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT: Self = Self(260i32);
    pub const D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR: Self = Self(261i32);
    pub const D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT: Self = Self(272i32);
    pub const D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR: Self = Self(273i32);
    pub const D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT: Self = Self(276i32);
    pub const D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR: Self = Self(277i32);
    pub const D3D12_FILTER_MINIMUM_ANISOTROPIC: Self = Self(341i32);
    pub const D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT: Self = Self(384i32);
    pub const D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR: Self = Self(385i32);
    pub const D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT: Self = Self(388i32);
    pub const D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR: Self = Self(389i32);
    pub const D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT: Self = Self(400i32);
    pub const D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR: Self = Self(401i32);
    pub const D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT: Self = Self(404i32);
    pub const D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR: Self = Self(405i32);
    pub const D3D12_FILTER_MAXIMUM_ANISOTROPIC: Self = Self(469i32);
}
unsafe impl ::windows::Abi for D3D12_FILTER {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_TEXTURE_ADDRESS_MODE(pub i32);
impl ::std::convert::From<i32> for D3D12_TEXTURE_ADDRESS_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_TEXTURE_ADDRESS_MODE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_TEXTURE_ADDRESS_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_TEXTURE_ADDRESS_MODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_TEXTURE_ADDRESS_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_TEXTURE_ADDRESS_MODE {}
impl ::std::marker::Copy for D3D12_TEXTURE_ADDRESS_MODE {}
impl D3D12_TEXTURE_ADDRESS_MODE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_TEXTURE_ADDRESS_MODE_WRAP: Self = Self(1i32);
    pub const D3D12_TEXTURE_ADDRESS_MODE_MIRROR: Self = Self(2i32);
    pub const D3D12_TEXTURE_ADDRESS_MODE_CLAMP: Self = Self(3i32);
    pub const D3D12_TEXTURE_ADDRESS_MODE_BORDER: Self = Self(4i32);
    pub const D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE: Self = Self(5i32);
}
unsafe impl ::windows::Abi for D3D12_TEXTURE_ADDRESS_MODE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_COMPARISON_FUNC(pub i32);
impl ::std::convert::From<i32> for D3D12_COMPARISON_FUNC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_COMPARISON_FUNC {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_COMPARISON_FUNC {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_COMPARISON_FUNC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_COMPARISON_FUNC {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_COMPARISON_FUNC {}
impl ::std::marker::Copy for D3D12_COMPARISON_FUNC {}
impl D3D12_COMPARISON_FUNC {
    #![allow(non_upper_case_globals)]
    pub const D3D12_COMPARISON_FUNC_NEVER: Self = Self(1i32);
    pub const D3D12_COMPARISON_FUNC_LESS: Self = Self(2i32);
    pub const D3D12_COMPARISON_FUNC_EQUAL: Self = Self(3i32);
    pub const D3D12_COMPARISON_FUNC_LESS_EQUAL: Self = Self(4i32);
    pub const D3D12_COMPARISON_FUNC_GREATER: Self = Self(5i32);
    pub const D3D12_COMPARISON_FUNC_NOT_EQUAL: Self = Self(6i32);
    pub const D3D12_COMPARISON_FUNC_GREATER_EQUAL: Self = Self(7i32);
    pub const D3D12_COMPARISON_FUNC_ALWAYS: Self = Self(8i32);
}
unsafe impl ::windows::Abi for D3D12_COMPARISON_FUNC {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_STATIC_BORDER_COLOR(pub i32);
impl ::std::convert::From<i32> for D3D12_STATIC_BORDER_COLOR {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_STATIC_BORDER_COLOR {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_STATIC_BORDER_COLOR {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_STATIC_BORDER_COLOR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_STATIC_BORDER_COLOR {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_STATIC_BORDER_COLOR {}
impl ::std::marker::Copy for D3D12_STATIC_BORDER_COLOR {}
impl D3D12_STATIC_BORDER_COLOR {
    #![allow(non_upper_case_globals)]
    pub const D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK: Self = Self(0i32);
    pub const D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK: Self = Self(1i32);
    pub const D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_STATIC_BORDER_COLOR {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_STATIC_SAMPLER_DESC {
    pub filter: D3D12_FILTER,
    pub addressu: D3D12_TEXTURE_ADDRESS_MODE,
    pub addressv: D3D12_TEXTURE_ADDRESS_MODE,
    pub addressw: D3D12_TEXTURE_ADDRESS_MODE,
    pub mip_lod_bias: f32,
    pub max_anisotropy: u32,
    pub comparison_func: D3D12_COMPARISON_FUNC,
    pub border_color: D3D12_STATIC_BORDER_COLOR,
    pub min_lod: f32,
    pub max_lod: f32,
    pub shader_register: u32,
    pub register_space: u32,
    pub shader_visibility: D3D12_SHADER_VISIBILITY,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_STATIC_SAMPLER_DESC_abi(
    D3D12_FILTER,
    D3D12_TEXTURE_ADDRESS_MODE,
    D3D12_TEXTURE_ADDRESS_MODE,
    D3D12_TEXTURE_ADDRESS_MODE,
    f32,
    u32,
    D3D12_COMPARISON_FUNC,
    D3D12_STATIC_BORDER_COLOR,
    f32,
    f32,
    u32,
    u32,
    D3D12_SHADER_VISIBILITY,
);
impl D3D12_STATIC_SAMPLER_DESC {}
unsafe impl ::windows::Abi for D3D12_STATIC_SAMPLER_DESC {
    type Abi = D3D12_STATIC_SAMPLER_DESC_abi;
}
impl ::std::default::Default for D3D12_STATIC_SAMPLER_DESC {
    fn default() -> Self {
        Self {
            filter: ::std::default::Default::default(),
            addressu: ::std::default::Default::default(),
            addressv: ::std::default::Default::default(),
            addressw: ::std::default::Default::default(),
            mip_lod_bias: 0.0,
            max_anisotropy: 0,
            comparison_func: ::std::default::Default::default(),
            border_color: ::std::default::Default::default(),
            min_lod: 0.0,
            max_lod: 0.0,
            shader_register: 0,
            register_space: 0,
            shader_visibility: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_STATIC_SAMPLER_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_STATIC_SAMPLER_DESC")
            .field("filter", &format_args!("{:?}", self.filter))
            .field("addressu", &format_args!("{:?}", self.addressu))
            .field("addressv", &format_args!("{:?}", self.addressv))
            .field("addressw", &format_args!("{:?}", self.addressw))
            .field("mip_lod_bias", &format_args!("{:?}", self.mip_lod_bias))
            .field("max_anisotropy", &format_args!("{:?}", self.max_anisotropy))
            .field(
                "comparison_func",
                &format_args!("{:?}", self.comparison_func),
            )
            .field("border_color", &format_args!("{:?}", self.border_color))
            .field("min_lod", &format_args!("{:?}", self.min_lod))
            .field("max_lod", &format_args!("{:?}", self.max_lod))
            .field(
                "shader_register",
                &format_args!("{:?}", self.shader_register),
            )
            .field("register_space", &format_args!("{:?}", self.register_space))
            .field(
                "shader_visibility",
                &format_args!("{:?}", self.shader_visibility),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_STATIC_SAMPLER_DESC {
    fn clone(&self) -> Self {
        Self {
            filter: self.filter,
            addressu: self.addressu,
            addressv: self.addressv,
            addressw: self.addressw,
            mip_lod_bias: self.mip_lod_bias,
            max_anisotropy: self.max_anisotropy,
            comparison_func: self.comparison_func,
            border_color: self.border_color,
            min_lod: self.min_lod,
            max_lod: self.max_lod,
            shader_register: self.shader_register,
            register_space: self.register_space,
            shader_visibility: self.shader_visibility,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_STATIC_SAMPLER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.filter == other.filter
            && self.addressu == other.addressu
            && self.addressv == other.addressv
            && self.addressw == other.addressw
            && self.mip_lod_bias == other.mip_lod_bias
            && self.max_anisotropy == other.max_anisotropy
            && self.comparison_func == other.comparison_func
            && self.border_color == other.border_color
            && self.min_lod == other.min_lod
            && self.max_lod == other.max_lod
            && self.shader_register == other.shader_register
            && self.register_space == other.register_space
            && self.shader_visibility == other.shader_visibility
    }
}
impl ::std::cmp::Eq for D3D12_STATIC_SAMPLER_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_ROOT_SIGNATURE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_ROOT_SIGNATURE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_ROOT_SIGNATURE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_ROOT_SIGNATURE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_SIGNATURE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_SIGNATURE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_SIGNATURE_FLAGS {}
impl ::std::marker::Copy for D3D12_ROOT_SIGNATURE_FLAGS {}
impl D3D12_ROOT_SIGNATURE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_ROOT_SIGNATURE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT: Self = Self(1i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS: Self = Self(2i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS: Self = Self(4i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS: Self = Self(8i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS: Self = Self(16i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS: Self = Self(32i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT: Self = Self(64i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE: Self = Self(128i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS: Self = Self(256i32);
    pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS: Self = Self(512i32);
}
unsafe impl ::windows::Abi for D3D12_ROOT_SIGNATURE_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_ROOT_SIGNATURE_DESC {
    pub num_parameters: u32,
    pub p_parameters: *mut D3D12_ROOT_PARAMETER,
    pub num_static_samplers: u32,
    pub p_static_samplers: *mut D3D12_STATIC_SAMPLER_DESC,
    pub flags: D3D12_ROOT_SIGNATURE_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_ROOT_SIGNATURE_DESC_abi(
    u32,
    *mut D3D12_ROOT_PARAMETER_abi,
    u32,
    *mut D3D12_STATIC_SAMPLER_DESC_abi,
    D3D12_ROOT_SIGNATURE_FLAGS,
);
impl D3D12_ROOT_SIGNATURE_DESC {}
unsafe impl ::windows::Abi for D3D12_ROOT_SIGNATURE_DESC {
    type Abi = D3D12_ROOT_SIGNATURE_DESC_abi;
}
impl ::std::default::Default for D3D12_ROOT_SIGNATURE_DESC {
    fn default() -> Self {
        Self {
            num_parameters: 0,
            p_parameters: ::std::ptr::null_mut(),
            num_static_samplers: 0,
            p_static_samplers: ::std::ptr::null_mut(),
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_SIGNATURE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_ROOT_SIGNATURE_DESC")
            .field("num_parameters", &format_args!("{:?}", self.num_parameters))
            .field("p_parameters", &format_args!("{:?}", self.p_parameters))
            .field(
                "num_static_samplers",
                &format_args!("{:?}", self.num_static_samplers),
            )
            .field(
                "p_static_samplers",
                &format_args!("{:?}", self.p_static_samplers),
            )
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_ROOT_SIGNATURE_DESC {
    fn clone(&self) -> Self {
        Self {
            num_parameters: self.num_parameters,
            p_parameters: <*mut D3D12_ROOT_PARAMETER as std::clone::Clone>::clone(
                &self.p_parameters,
            ),
            num_static_samplers: self.num_static_samplers,
            p_static_samplers: <*mut D3D12_STATIC_SAMPLER_DESC as std::clone::Clone>::clone(
                &self.p_static_samplers,
            ),
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_SIGNATURE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.num_parameters == other.num_parameters
            && self.p_parameters == other.p_parameters
            && self.num_static_samplers == other.num_static_samplers
            && self.p_static_samplers == other.p_static_samplers
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_SIGNATURE_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D_ROOT_SIGNATURE_VERSION(pub i32);
impl ::std::convert::From<i32> for D3D_ROOT_SIGNATURE_VERSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D_ROOT_SIGNATURE_VERSION {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D_ROOT_SIGNATURE_VERSION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D_ROOT_SIGNATURE_VERSION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D_ROOT_SIGNATURE_VERSION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D_ROOT_SIGNATURE_VERSION {}
impl ::std::marker::Copy for D3D_ROOT_SIGNATURE_VERSION {}
impl D3D_ROOT_SIGNATURE_VERSION {
    #![allow(non_upper_case_globals)]
    pub const D3D_ROOT_SIGNATURE_VERSION_1: Self = Self(1i32);
    pub const D3D_ROOT_SIGNATURE_VERSION_1_0: Self = Self(1i32);
    pub const D3D_ROOT_SIGNATURE_VERSION_1_1: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D_ROOT_SIGNATURE_VERSION {
    type Abi = Self;
}
#[link(name = "d3d12")]
extern "system" {
    pub fn D3D12SerializeRootSignature(
        p_root_signature: *const D3D12_ROOT_SIGNATURE_DESC,
        version: D3D_ROOT_SIGNATURE_VERSION,
        pp_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
        pp_error_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
    ) -> ::windows::ErrorCode;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DESCRIPTOR_RANGE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_DESCRIPTOR_RANGE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DESCRIPTOR_RANGE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DESCRIPTOR_RANGE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DESCRIPTOR_RANGE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DESCRIPTOR_RANGE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DESCRIPTOR_RANGE_FLAGS {}
impl ::std::marker::Copy for D3D12_DESCRIPTOR_RANGE_FLAGS {}
impl D3D12_DESCRIPTOR_RANGE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DESCRIPTOR_RANGE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE: Self = Self(1i32);
    pub const D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE: Self = Self(2i32);
    pub const D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE: Self = Self(4i32);
    pub const D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC: Self = Self(8i32);
    pub const D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS: Self =
        Self(65536i32);
}
unsafe impl ::windows::Abi for D3D12_DESCRIPTOR_RANGE_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DESCRIPTOR_RANGE1 {
    pub range_type: D3D12_DESCRIPTOR_RANGE_TYPE,
    pub num_descriptors: u32,
    pub base_shader_register: u32,
    pub register_space: u32,
    pub flags: D3D12_DESCRIPTOR_RANGE_FLAGS,
    pub offset_in_descriptors_from_table_start: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DESCRIPTOR_RANGE1_abi(
    D3D12_DESCRIPTOR_RANGE_TYPE,
    u32,
    u32,
    u32,
    D3D12_DESCRIPTOR_RANGE_FLAGS,
    u32,
);
impl D3D12_DESCRIPTOR_RANGE1 {}
unsafe impl ::windows::Abi for D3D12_DESCRIPTOR_RANGE1 {
    type Abi = D3D12_DESCRIPTOR_RANGE1_abi;
}
impl ::std::default::Default for D3D12_DESCRIPTOR_RANGE1 {
    fn default() -> Self {
        Self {
            range_type: ::std::default::Default::default(),
            num_descriptors: 0,
            base_shader_register: 0,
            register_space: 0,
            flags: ::std::default::Default::default(),
            offset_in_descriptors_from_table_start: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DESCRIPTOR_RANGE1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DESCRIPTOR_RANGE1")
            .field("range_type", &format_args!("{:?}", self.range_type))
            .field(
                "num_descriptors",
                &format_args!("{:?}", self.num_descriptors),
            )
            .field(
                "base_shader_register",
                &format_args!("{:?}", self.base_shader_register),
            )
            .field("register_space", &format_args!("{:?}", self.register_space))
            .field("flags", &format_args!("{:?}", self.flags))
            .field(
                "offset_in_descriptors_from_table_start",
                &format_args!("{:?}", self.offset_in_descriptors_from_table_start),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DESCRIPTOR_RANGE1 {
    fn clone(&self) -> Self {
        Self {
            range_type: self.range_type,
            num_descriptors: self.num_descriptors,
            base_shader_register: self.base_shader_register,
            register_space: self.register_space,
            flags: self.flags,
            offset_in_descriptors_from_table_start: self.offset_in_descriptors_from_table_start,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DESCRIPTOR_RANGE1 {
    fn eq(&self, other: &Self) -> bool {
        self.range_type == other.range_type
            && self.num_descriptors == other.num_descriptors
            && self.base_shader_register == other.base_shader_register
            && self.register_space == other.register_space
            && self.flags == other.flags
            && self.offset_in_descriptors_from_table_start
                == other.offset_in_descriptors_from_table_start
    }
}
impl ::std::cmp::Eq for D3D12_DESCRIPTOR_RANGE1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_ROOT_DESCRIPTOR_TABLE1 {
    pub num_descriptor_ranges: u32,
    pub p_descriptor_ranges: *mut D3D12_DESCRIPTOR_RANGE1,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_ROOT_DESCRIPTOR_TABLE1_abi(u32, *mut D3D12_DESCRIPTOR_RANGE1_abi);
impl D3D12_ROOT_DESCRIPTOR_TABLE1 {}
unsafe impl ::windows::Abi for D3D12_ROOT_DESCRIPTOR_TABLE1 {
    type Abi = D3D12_ROOT_DESCRIPTOR_TABLE1_abi;
}
impl ::std::default::Default for D3D12_ROOT_DESCRIPTOR_TABLE1 {
    fn default() -> Self {
        Self {
            num_descriptor_ranges: 0,
            p_descriptor_ranges: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_DESCRIPTOR_TABLE1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_ROOT_DESCRIPTOR_TABLE1")
            .field(
                "num_descriptor_ranges",
                &format_args!("{:?}", self.num_descriptor_ranges),
            )
            .field(
                "p_descriptor_ranges",
                &format_args!("{:?}", self.p_descriptor_ranges),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_ROOT_DESCRIPTOR_TABLE1 {
    fn clone(&self) -> Self {
        Self {
            num_descriptor_ranges: self.num_descriptor_ranges,
            p_descriptor_ranges: <*mut D3D12_DESCRIPTOR_RANGE1 as std::clone::Clone>::clone(
                &self.p_descriptor_ranges,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_DESCRIPTOR_TABLE1 {
    fn eq(&self, other: &Self) -> bool {
        self.num_descriptor_ranges == other.num_descriptor_ranges
            && self.p_descriptor_ranges == other.p_descriptor_ranges
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_DESCRIPTOR_TABLE1 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_ROOT_DESCRIPTOR_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_ROOT_DESCRIPTOR_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_ROOT_DESCRIPTOR_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_ROOT_DESCRIPTOR_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_DESCRIPTOR_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_DESCRIPTOR_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_DESCRIPTOR_FLAGS {}
impl ::std::marker::Copy for D3D12_ROOT_DESCRIPTOR_FLAGS {}
impl D3D12_ROOT_DESCRIPTOR_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_ROOT_DESCRIPTOR_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE: Self = Self(2i32);
    pub const D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE: Self = Self(4i32);
    pub const D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC: Self = Self(8i32);
}
unsafe impl ::windows::Abi for D3D12_ROOT_DESCRIPTOR_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_ROOT_DESCRIPTOR1 {
    pub shader_register: u32,
    pub register_space: u32,
    pub flags: D3D12_ROOT_DESCRIPTOR_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_ROOT_DESCRIPTOR1_abi(u32, u32, D3D12_ROOT_DESCRIPTOR_FLAGS);
impl D3D12_ROOT_DESCRIPTOR1 {}
unsafe impl ::windows::Abi for D3D12_ROOT_DESCRIPTOR1 {
    type Abi = D3D12_ROOT_DESCRIPTOR1_abi;
}
impl ::std::default::Default for D3D12_ROOT_DESCRIPTOR1 {
    fn default() -> Self {
        Self {
            shader_register: 0,
            register_space: 0,
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_DESCRIPTOR1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_ROOT_DESCRIPTOR1")
            .field(
                "shader_register",
                &format_args!("{:?}", self.shader_register),
            )
            .field("register_space", &format_args!("{:?}", self.register_space))
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_ROOT_DESCRIPTOR1 {
    fn clone(&self) -> Self {
        Self {
            shader_register: self.shader_register,
            register_space: self.register_space,
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_DESCRIPTOR1 {
    fn eq(&self, other: &Self) -> bool {
        self.shader_register == other.shader_register
            && self.register_space == other.register_space
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_DESCRIPTOR1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_ROOT_PARAMETER1 {
    pub parameter_type: D3D12_ROOT_PARAMETER_TYPE,
    pub anonymous: D3D12_ROOT_PARAMETER1_0,
    pub shader_visibility: D3D12_SHADER_VISIBILITY,
}
impl D3D12_ROOT_PARAMETER1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_ROOT_PARAMETER1_0 {
    pub descriptor_table: D3D12_ROOT_DESCRIPTOR_TABLE1,
    pub constants: D3D12_ROOT_CONSTANTS,
    pub descriptor: D3D12_ROOT_DESCRIPTOR1,
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_ROOT_SIGNATURE_DESC1 {
    pub num_parameters: u32,
    pub p_parameters: *mut D3D12_ROOT_PARAMETER1,
    pub num_static_samplers: u32,
    pub p_static_samplers: *mut D3D12_STATIC_SAMPLER_DESC,
    pub flags: D3D12_ROOT_SIGNATURE_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_ROOT_SIGNATURE_DESC1_abi(
    u32,
    *mut D3D12_ROOT_PARAMETER1_abi,
    u32,
    *mut D3D12_STATIC_SAMPLER_DESC_abi,
    D3D12_ROOT_SIGNATURE_FLAGS,
);
impl D3D12_ROOT_SIGNATURE_DESC1 {}
unsafe impl ::windows::Abi for D3D12_ROOT_SIGNATURE_DESC1 {
    type Abi = D3D12_ROOT_SIGNATURE_DESC1_abi;
}
impl ::std::default::Default for D3D12_ROOT_SIGNATURE_DESC1 {
    fn default() -> Self {
        Self {
            num_parameters: 0,
            p_parameters: ::std::ptr::null_mut(),
            num_static_samplers: 0,
            p_static_samplers: ::std::ptr::null_mut(),
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_ROOT_SIGNATURE_DESC1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_ROOT_SIGNATURE_DESC1")
            .field("num_parameters", &format_args!("{:?}", self.num_parameters))
            .field("p_parameters", &format_args!("{:?}", self.p_parameters))
            .field(
                "num_static_samplers",
                &format_args!("{:?}", self.num_static_samplers),
            )
            .field(
                "p_static_samplers",
                &format_args!("{:?}", self.p_static_samplers),
            )
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_ROOT_SIGNATURE_DESC1 {
    fn clone(&self) -> Self {
        Self {
            num_parameters: self.num_parameters,
            p_parameters: <*mut D3D12_ROOT_PARAMETER1 as std::clone::Clone>::clone(
                &self.p_parameters,
            ),
            num_static_samplers: self.num_static_samplers,
            p_static_samplers: <*mut D3D12_STATIC_SAMPLER_DESC as std::clone::Clone>::clone(
                &self.p_static_samplers,
            ),
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_ROOT_SIGNATURE_DESC1 {
    fn eq(&self, other: &Self) -> bool {
        self.num_parameters == other.num_parameters
            && self.p_parameters == other.p_parameters
            && self.num_static_samplers == other.num_static_samplers
            && self.p_static_samplers == other.p_static_samplers
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_ROOT_SIGNATURE_DESC1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC {
    pub version: D3D_ROOT_SIGNATURE_VERSION,
    pub anonymous: D3D12_VERSIONED_ROOT_SIGNATURE_DESC_0,
}
impl D3D12_VERSIONED_ROOT_SIGNATURE_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_VERSIONED_ROOT_SIGNATURE_DESC_0 {
    pub desc_1_0: D3D12_ROOT_SIGNATURE_DESC,
    pub desc_1_1: D3D12_ROOT_SIGNATURE_DESC1,
}
#[link(name = "d3d12")]
extern "system" {
    pub fn D3D12SerializeVersionedRootSignature(
        p_root_signature: *const D3D12_VERSIONED_ROOT_SIGNATURE_DESC,
        pp_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
        pp_error_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
    ) -> ::windows::ErrorCode;
}
pub const D3D12_16BIT_INDEX_STRIP_CUT_VALUE: u32 = 65535u32;
pub const D3D12_32BIT_INDEX_STRIP_CUT_VALUE: u32 = 4294967295u32;
pub const D3D12_8BIT_INDEX_STRIP_CUT_VALUE: u32 = 255u32;
pub const D3D12_ANISOTROPIC_FILTERING_BIT: u32 = 64u32;
pub const D3D12_APPEND_ALIGNED_ELEMENT: u32 = 4294967295u32;
pub const D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT: u32 = 9u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_COMMAND_LIST_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_COMMAND_LIST_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_COMMAND_LIST_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_COMMAND_LIST_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_COMMAND_LIST_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_COMMAND_LIST_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_COMMAND_LIST_TYPE {}
impl ::std::marker::Copy for D3D12_COMMAND_LIST_TYPE {}
impl D3D12_COMMAND_LIST_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_COMMAND_LIST_TYPE_DIRECT: Self = Self(0i32);
    pub const D3D12_COMMAND_LIST_TYPE_BUNDLE: Self = Self(1i32);
    pub const D3D12_COMMAND_LIST_TYPE_COMPUTE: Self = Self(2i32);
    pub const D3D12_COMMAND_LIST_TYPE_COPY: Self = Self(3i32);
    pub const D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE: Self = Self(4i32);
    pub const D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS: Self = Self(5i32);
    pub const D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE: Self = Self(6i32);
}
unsafe impl ::windows::Abi for D3D12_COMMAND_LIST_TYPE {
    type Abi = Self;
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Object(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Object {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Object {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Object {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Object {}
unsafe impl ::windows::Interface for ID3D12Object {
    type Vtable = ID3D12Object_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3305030287,
        31078,
        20117,
        [159, 148, 244, 49, 203, 86, 195, 184],
    );
}
#[repr(C)]
pub struct ID3D12Object_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Object {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
}
impl ::std::convert::From<ID3D12Object> for ::windows::IUnknown {
    fn from(value: ID3D12Object) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Object> for ::windows::IUnknown {
    fn from(value: &ID3D12Object) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Object {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Object {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DeviceChild(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DeviceChild {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DeviceChild {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DeviceChild {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DeviceChild {}
unsafe impl ::windows::Interface for ID3D12DeviceChild {
    type Vtable = ID3D12DeviceChild_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2422061387,
        40972,
        16704,
        [157, 245, 43, 100, 202, 158, 163, 87],
    );
}
#[repr(C)]
pub struct ID3D12DeviceChild_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12DeviceChild {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
}
impl ::std::convert::From<ID3D12DeviceChild> for ::windows::IUnknown {
    fn from(value: ID3D12DeviceChild) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DeviceChild> for ::windows::IUnknown {
    fn from(value: &ID3D12DeviceChild) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12DeviceChild {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12DeviceChild {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12DeviceChild> for ID3D12Object {
    fn from(value: ID3D12DeviceChild) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DeviceChild> for ID3D12Object {
    fn from(value: &ID3D12DeviceChild) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12DeviceChild {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12DeviceChild {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Pageable(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Pageable {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Pageable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Pageable {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Pageable {}
unsafe impl ::windows::Interface for ID3D12Pageable {
    type Vtable = ID3D12Pageable_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1676564731,
        4712,
        18485,
        [134, 218, 240, 8, 206, 98, 240, 214],
    );
}
#[repr(C)]
pub struct ID3D12Pageable_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Pageable {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
}
impl ::std::convert::From<ID3D12Pageable> for ::windows::IUnknown {
    fn from(value: ID3D12Pageable) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Pageable> for ::windows::IUnknown {
    fn from(value: &ID3D12Pageable) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Pageable {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Pageable {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Pageable> for ID3D12DeviceChild {
    fn from(value: ID3D12Pageable) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Pageable> for ID3D12DeviceChild {
    fn from(value: &ID3D12Pageable) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12Pageable {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12Pageable {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Pageable> for ID3D12Object {
    fn from(value: ID3D12Pageable) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Pageable> for ID3D12Object {
    fn from(value: &ID3D12Pageable) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Pageable {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Pageable {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12CommandAllocator(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12CommandAllocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12CommandAllocator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12CommandAllocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12CommandAllocator {}
unsafe impl ::windows::Interface for ID3D12CommandAllocator {
    type Vtable = ID3D12CommandAllocator_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1627578084,
        44889,
        19209,
        [185, 153, 180, 77, 115, 240, 155, 36],
    );
}
#[repr(C)]
pub struct ID3D12CommandAllocator_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12CommandAllocator {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn Reset(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12CommandAllocator> for ::windows::IUnknown {
    fn from(value: ID3D12CommandAllocator) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandAllocator> for ::windows::IUnknown {
    fn from(value: &ID3D12CommandAllocator) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12CommandAllocator
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12CommandAllocator
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandAllocator> for ID3D12Pageable {
    fn from(value: ID3D12CommandAllocator) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandAllocator> for ID3D12Pageable {
    fn from(value: &ID3D12CommandAllocator) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12CommandAllocator {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12CommandAllocator {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandAllocator> for ID3D12DeviceChild {
    fn from(value: ID3D12CommandAllocator) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandAllocator> for ID3D12DeviceChild {
    fn from(value: &ID3D12CommandAllocator) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12CommandAllocator {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12CommandAllocator
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandAllocator> for ID3D12Object {
    fn from(value: ID3D12CommandAllocator) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandAllocator> for ID3D12Object {
    fn from(value: &ID3D12CommandAllocator) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12CommandAllocator {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12CommandAllocator {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12PipelineState(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12PipelineState {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12PipelineState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12PipelineState {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12PipelineState {}
unsafe impl ::windows::Interface for ID3D12PipelineState {
    type Vtable = ID3D12PipelineState_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1985622259,
        63012,
        19567,
        [168, 40, 172, 233, 72, 98, 36, 69],
    );
}
#[repr(C)]
pub struct ID3D12PipelineState_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12PipelineState {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetCachedBlob(
        &self,
        pp_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), pp_blob)
    }
}
impl ::std::convert::From<ID3D12PipelineState> for ::windows::IUnknown {
    fn from(value: ID3D12PipelineState) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineState> for ::windows::IUnknown {
    fn from(value: &ID3D12PipelineState) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12PipelineState {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12PipelineState
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12PipelineState> for ID3D12Pageable {
    fn from(value: ID3D12PipelineState) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineState> for ID3D12Pageable {
    fn from(value: &ID3D12PipelineState) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12PipelineState {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12PipelineState {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12PipelineState> for ID3D12DeviceChild {
    fn from(value: ID3D12PipelineState) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineState> for ID3D12DeviceChild {
    fn from(value: &ID3D12PipelineState) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12PipelineState {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12PipelineState {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12PipelineState> for ID3D12Object {
    fn from(value: ID3D12PipelineState) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineState> for ID3D12Object {
    fn from(value: &ID3D12PipelineState) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12PipelineState {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12PipelineState {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RANGE {
    pub begin: usize,
    pub end: usize,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RANGE_abi(usize, usize);
impl D3D12_RANGE {}
unsafe impl ::windows::Abi for D3D12_RANGE {
    type Abi = D3D12_RANGE_abi;
}
impl ::std::default::Default for D3D12_RANGE {
    fn default() -> Self {
        Self { begin: 0, end: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_RANGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RANGE")
            .field("begin", &format_args!("{:?}", self.begin))
            .field("end", &format_args!("{:?}", self.end))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RANGE {
    fn clone(&self) -> Self {
        Self {
            begin: self.begin,
            end: self.end,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RANGE {
    fn eq(&self, other: &Self) -> bool {
        self.begin == other.begin && self.end == other.end
    }
}
impl ::std::cmp::Eq for D3D12_RANGE {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESOURCE_DIMENSION(pub i32);
impl ::std::convert::From<i32> for D3D12_RESOURCE_DIMENSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_DIMENSION {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESOURCE_DIMENSION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_DIMENSION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_DIMENSION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_DIMENSION {}
impl ::std::marker::Copy for D3D12_RESOURCE_DIMENSION {}
impl D3D12_RESOURCE_DIMENSION {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESOURCE_DIMENSION_UNKNOWN: Self = Self(0i32);
    pub const D3D12_RESOURCE_DIMENSION_BUFFER: Self = Self(1i32);
    pub const D3D12_RESOURCE_DIMENSION_TEXTURE1D: Self = Self(2i32);
    pub const D3D12_RESOURCE_DIMENSION_TEXTURE2D: Self = Self(3i32);
    pub const D3D12_RESOURCE_DIMENSION_TEXTURE3D: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_RESOURCE_DIMENSION {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_TEXTURE_LAYOUT(pub i32);
impl ::std::convert::From<i32> for D3D12_TEXTURE_LAYOUT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_TEXTURE_LAYOUT {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_TEXTURE_LAYOUT {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_TEXTURE_LAYOUT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_TEXTURE_LAYOUT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_TEXTURE_LAYOUT {}
impl ::std::marker::Copy for D3D12_TEXTURE_LAYOUT {}
impl D3D12_TEXTURE_LAYOUT {
    #![allow(non_upper_case_globals)]
    pub const D3D12_TEXTURE_LAYOUT_UNKNOWN: Self = Self(0i32);
    pub const D3D12_TEXTURE_LAYOUT_ROW_MAJOR: Self = Self(1i32);
    pub const D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE: Self = Self(2i32);
    pub const D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_TEXTURE_LAYOUT {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESOURCE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RESOURCE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESOURCE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_FLAGS {}
impl ::std::marker::Copy for D3D12_RESOURCE_FLAGS {}
impl D3D12_RESOURCE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESOURCE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET: Self = Self(1i32);
    pub const D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL: Self = Self(2i32);
    pub const D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS: Self = Self(4i32);
    pub const D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE: Self = Self(8i32);
    pub const D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER: Self = Self(16i32);
    pub const D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS: Self = Self(32i32);
    pub const D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY: Self = Self(64i32);
}
unsafe impl ::windows::Abi for D3D12_RESOURCE_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RESOURCE_DESC {
    pub dimension: D3D12_RESOURCE_DIMENSION,
    pub alignment: u64,
    pub width: u64,
    pub height: u32,
    pub depth_or_array_size: u16,
    pub mip_levels: u16,
    pub format: super::dxgi::DXGI_FORMAT,
    pub sample_desc: super::dxgi::DXGI_SAMPLE_DESC,
    pub layout: D3D12_TEXTURE_LAYOUT,
    pub flags: D3D12_RESOURCE_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RESOURCE_DESC_abi(
    D3D12_RESOURCE_DIMENSION,
    u64,
    u64,
    u32,
    u16,
    u16,
    super::dxgi::DXGI_FORMAT,
    super::dxgi::DXGI_SAMPLE_DESC_abi,
    D3D12_TEXTURE_LAYOUT,
    D3D12_RESOURCE_FLAGS,
);
impl D3D12_RESOURCE_DESC {}
unsafe impl ::windows::Abi for D3D12_RESOURCE_DESC {
    type Abi = D3D12_RESOURCE_DESC_abi;
}
impl ::std::default::Default for D3D12_RESOURCE_DESC {
    fn default() -> Self {
        Self {
            dimension: ::std::default::Default::default(),
            alignment: 0,
            width: 0,
            height: 0,
            depth_or_array_size: 0,
            mip_levels: 0,
            format: ::std::default::Default::default(),
            sample_desc: ::std::default::Default::default(),
            layout: ::std::default::Default::default(),
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RESOURCE_DESC")
            .field("dimension", &format_args!("{:?}", self.dimension))
            .field("alignment", &format_args!("{:?}", self.alignment))
            .field("width", &format_args!("{:?}", self.width))
            .field("height", &format_args!("{:?}", self.height))
            .field(
                "depth_or_array_size",
                &format_args!("{:?}", self.depth_or_array_size),
            )
            .field("mip_levels", &format_args!("{:?}", self.mip_levels))
            .field("format", &format_args!("{:?}", self.format))
            .field("sample_desc", &format_args!("{:?}", self.sample_desc))
            .field("layout", &format_args!("{:?}", self.layout))
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_DESC {
    fn clone(&self) -> Self {
        Self {
            dimension: self.dimension,
            alignment: self.alignment,
            width: self.width,
            height: self.height,
            depth_or_array_size: self.depth_or_array_size,
            mip_levels: self.mip_levels,
            format: self.format,
            sample_desc: <super::dxgi::DXGI_SAMPLE_DESC as std::clone::Clone>::clone(
                &self.sample_desc,
            ),
            layout: self.layout,
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.dimension == other.dimension
            && self.alignment == other.alignment
            && self.width == other.width
            && self.height == other.height
            && self.depth_or_array_size == other.depth_or_array_size
            && self.mip_levels == other.mip_levels
            && self.format == other.format
            && self.sample_desc == other.sample_desc
            && self.layout == other.layout
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_BOX {
    pub left: u32,
    pub top: u32,
    pub front: u32,
    pub right: u32,
    pub bottom: u32,
    pub back: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_BOX_abi(u32, u32, u32, u32, u32, u32);
impl D3D12_BOX {}
unsafe impl ::windows::Abi for D3D12_BOX {
    type Abi = D3D12_BOX_abi;
}
impl ::std::default::Default for D3D12_BOX {
    fn default() -> Self {
        Self {
            left: 0,
            top: 0,
            front: 0,
            right: 0,
            bottom: 0,
            back: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_BOX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_BOX")
            .field("left", &format_args!("{:?}", self.left))
            .field("top", &format_args!("{:?}", self.top))
            .field("front", &format_args!("{:?}", self.front))
            .field("right", &format_args!("{:?}", self.right))
            .field("bottom", &format_args!("{:?}", self.bottom))
            .field("back", &format_args!("{:?}", self.back))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_BOX {
    fn clone(&self) -> Self {
        Self {
            left: self.left,
            top: self.top,
            front: self.front,
            right: self.right,
            bottom: self.bottom,
            back: self.back,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_BOX {
    fn eq(&self, other: &Self) -> bool {
        self.left == other.left
            && self.top == other.top
            && self.front == other.front
            && self.right == other.right
            && self.bottom == other.bottom
            && self.back == other.back
    }
}
impl ::std::cmp::Eq for D3D12_BOX {}
impl ::std::marker::Copy for D3D12_BOX {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_HEAP_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_HEAP_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_HEAP_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_HEAP_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_HEAP_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_HEAP_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_HEAP_TYPE {}
impl ::std::marker::Copy for D3D12_HEAP_TYPE {}
impl D3D12_HEAP_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_HEAP_TYPE_DEFAULT: Self = Self(1i32);
    pub const D3D12_HEAP_TYPE_UPLOAD: Self = Self(2i32);
    pub const D3D12_HEAP_TYPE_READBACK: Self = Self(3i32);
    pub const D3D12_HEAP_TYPE_CUSTOM: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_HEAP_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_CPU_PAGE_PROPERTY(pub i32);
impl ::std::convert::From<i32> for D3D12_CPU_PAGE_PROPERTY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_CPU_PAGE_PROPERTY {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_CPU_PAGE_PROPERTY {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_CPU_PAGE_PROPERTY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_CPU_PAGE_PROPERTY {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_CPU_PAGE_PROPERTY {}
impl ::std::marker::Copy for D3D12_CPU_PAGE_PROPERTY {}
impl D3D12_CPU_PAGE_PROPERTY {
    #![allow(non_upper_case_globals)]
    pub const D3D12_CPU_PAGE_PROPERTY_UNKNOWN: Self = Self(0i32);
    pub const D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE: Self = Self(1i32);
    pub const D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE: Self = Self(2i32);
    pub const D3D12_CPU_PAGE_PROPERTY_WRITE_BACK: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_CPU_PAGE_PROPERTY {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_MEMORY_POOL(pub i32);
impl ::std::convert::From<i32> for D3D12_MEMORY_POOL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_MEMORY_POOL {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_MEMORY_POOL {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_MEMORY_POOL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_MEMORY_POOL {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_MEMORY_POOL {}
impl ::std::marker::Copy for D3D12_MEMORY_POOL {}
impl D3D12_MEMORY_POOL {
    #![allow(non_upper_case_globals)]
    pub const D3D12_MEMORY_POOL_UNKNOWN: Self = Self(0i32);
    pub const D3D12_MEMORY_POOL_L0: Self = Self(1i32);
    pub const D3D12_MEMORY_POOL_L1: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_MEMORY_POOL {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_HEAP_PROPERTIES {
    pub r#type: D3D12_HEAP_TYPE,
    pub cpu_page_property: D3D12_CPU_PAGE_PROPERTY,
    pub memory_pool_preference: D3D12_MEMORY_POOL,
    pub creation_node_mask: u32,
    pub visible_node_mask: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_HEAP_PROPERTIES_abi(
    D3D12_HEAP_TYPE,
    D3D12_CPU_PAGE_PROPERTY,
    D3D12_MEMORY_POOL,
    u32,
    u32,
);
impl D3D12_HEAP_PROPERTIES {}
unsafe impl ::windows::Abi for D3D12_HEAP_PROPERTIES {
    type Abi = D3D12_HEAP_PROPERTIES_abi;
}
impl ::std::default::Default for D3D12_HEAP_PROPERTIES {
    fn default() -> Self {
        Self {
            r#type: ::std::default::Default::default(),
            cpu_page_property: ::std::default::Default::default(),
            memory_pool_preference: ::std::default::Default::default(),
            creation_node_mask: 0,
            visible_node_mask: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_HEAP_PROPERTIES {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_HEAP_PROPERTIES")
            .field("type", &format_args!("{:?}", self.r#type))
            .field(
                "cpu_page_property",
                &format_args!("{:?}", self.cpu_page_property),
            )
            .field(
                "memory_pool_preference",
                &format_args!("{:?}", self.memory_pool_preference),
            )
            .field(
                "creation_node_mask",
                &format_args!("{:?}", self.creation_node_mask),
            )
            .field(
                "visible_node_mask",
                &format_args!("{:?}", self.visible_node_mask),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_HEAP_PROPERTIES {
    fn clone(&self) -> Self {
        Self {
            r#type: self.r#type,
            cpu_page_property: self.cpu_page_property,
            memory_pool_preference: self.memory_pool_preference,
            creation_node_mask: self.creation_node_mask,
            visible_node_mask: self.visible_node_mask,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_HEAP_PROPERTIES {
    fn eq(&self, other: &Self) -> bool {
        self.r#type == other.r#type
            && self.cpu_page_property == other.cpu_page_property
            && self.memory_pool_preference == other.memory_pool_preference
            && self.creation_node_mask == other.creation_node_mask
            && self.visible_node_mask == other.visible_node_mask
    }
}
impl ::std::cmp::Eq for D3D12_HEAP_PROPERTIES {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_HEAP_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_HEAP_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_HEAP_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_HEAP_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_HEAP_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_HEAP_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_HEAP_FLAGS {}
impl ::std::marker::Copy for D3D12_HEAP_FLAGS {}
impl D3D12_HEAP_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_HEAP_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_HEAP_FLAG_SHARED: Self = Self(1i32);
    pub const D3D12_HEAP_FLAG_DENY_BUFFERS: Self = Self(4i32);
    pub const D3D12_HEAP_FLAG_ALLOW_DISPLAY: Self = Self(8i32);
    pub const D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER: Self = Self(32i32);
    pub const D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES: Self = Self(64i32);
    pub const D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES: Self = Self(128i32);
    pub const D3D12_HEAP_FLAG_HARDWARE_PROTECTED: Self = Self(256i32);
    pub const D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH: Self = Self(512i32);
    pub const D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS: Self = Self(1024i32);
    pub const D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT: Self = Self(2048i32);
    pub const D3D12_HEAP_FLAG_CREATE_NOT_ZEROED: Self = Self(4096i32);
    pub const D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES: Self = Self(0i32);
    pub const D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS: Self = Self(192i32);
    pub const D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES: Self = Self(68i32);
    pub const D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES: Self = Self(132i32);
}
unsafe impl ::windows::Abi for D3D12_HEAP_FLAGS {
    type Abi = Self;
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Resource(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Resource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Resource {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Resource {}
unsafe impl ::windows::Interface for ID3D12Resource {
    type Vtable = ID3D12Resource_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1768178366,
        42798,
        16473,
        [188, 121, 91, 92, 152, 4, 15, 173],
    );
}
#[repr(C)]
pub struct ID3D12Resource_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        subresource: u32,
        p_read_range: *const D3D12_RANGE,
        pp_data: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        subresource: u32,
        p_written_range: *const D3D12_RANGE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut D3D12_RESOURCE_DESC),
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        dst_subresource: u32,
        p_dst_box: *const D3D12_BOX,
        p_src_data: *const ::std::ffi::c_void,
        src_row_pitch: u32,
        src_depth_pitch: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_data: *mut ::std::ffi::c_void,
        dst_row_pitch: u32,
        dst_depth_pitch: u32,
        src_subresource: u32,
        p_src_box: *const D3D12_BOX,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *mut D3D12_HEAP_PROPERTIES,
        p_heap_flags: *mut D3D12_HEAP_FLAGS,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Resource {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn Map(
        &self,
        subresource: u32,
        p_read_range: *const D3D12_RANGE,
        pp_data: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            subresource,
            p_read_range,
            pp_data,
        )
    }
    pub unsafe fn Unmap(&self, subresource: u32, p_written_range: *const D3D12_RANGE) {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            subresource,
            p_written_range,
        )
    }
    pub unsafe fn GetDesc(&self, result__: *mut D3D12_RESOURCE_DESC) {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn GetGPUVirtualAddress(&self) -> u64 {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self))
    }
    pub unsafe fn WriteToSubresource(
        &self,
        dst_subresource: u32,
        p_dst_box: *const D3D12_BOX,
        p_src_data: *const ::std::ffi::c_void,
        src_row_pitch: u32,
        src_depth_pitch: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            dst_subresource,
            p_dst_box,
            p_src_data,
            src_row_pitch,
            src_depth_pitch,
        )
    }
    pub unsafe fn ReadFromSubresource(
        &self,
        p_dst_data: *mut ::std::ffi::c_void,
        dst_row_pitch: u32,
        dst_depth_pitch: u32,
        src_subresource: u32,
        p_src_box: *const D3D12_BOX,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            p_dst_data,
            dst_row_pitch,
            dst_depth_pitch,
            src_subresource,
            p_src_box,
        )
    }
    pub unsafe fn GetHeapProperties(
        &self,
        p_heap_properties: *mut D3D12_HEAP_PROPERTIES,
        p_heap_flags: *mut D3D12_HEAP_FLAGS,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            p_heap_flags,
        )
    }
}
impl ::std::convert::From<ID3D12Resource> for ::windows::IUnknown {
    fn from(value: ID3D12Resource) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource> for ::windows::IUnknown {
    fn from(value: &ID3D12Resource) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Resource {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Resource {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource> for ID3D12Pageable {
    fn from(value: ID3D12Resource) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource> for ID3D12Pageable {
    fn from(value: &ID3D12Resource) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12Resource {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12Resource {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource> for ID3D12DeviceChild {
    fn from(value: ID3D12Resource) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource> for ID3D12DeviceChild {
    fn from(value: &ID3D12Resource) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12Resource {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12Resource {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource> for ID3D12Object {
    fn from(value: ID3D12Resource) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource> for ID3D12Object {
    fn from(value: &ID3D12Resource) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Resource {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Resource {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_TEXTURE_COPY_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_TEXTURE_COPY_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_TEXTURE_COPY_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_TEXTURE_COPY_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_TEXTURE_COPY_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_TEXTURE_COPY_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_TEXTURE_COPY_TYPE {}
impl ::std::marker::Copy for D3D12_TEXTURE_COPY_TYPE {}
impl D3D12_TEXTURE_COPY_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX: Self = Self(0i32);
    pub const D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_TEXTURE_COPY_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SUBRESOURCE_FOOTPRINT {
    pub format: super::dxgi::DXGI_FORMAT,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
    pub row_pitch: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SUBRESOURCE_FOOTPRINT_abi(super::dxgi::DXGI_FORMAT, u32, u32, u32, u32);
impl D3D12_SUBRESOURCE_FOOTPRINT {}
unsafe impl ::windows::Abi for D3D12_SUBRESOURCE_FOOTPRINT {
    type Abi = D3D12_SUBRESOURCE_FOOTPRINT_abi;
}
impl ::std::default::Default for D3D12_SUBRESOURCE_FOOTPRINT {
    fn default() -> Self {
        Self {
            format: ::std::default::Default::default(),
            width: 0,
            height: 0,
            depth: 0,
            row_pitch: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SUBRESOURCE_FOOTPRINT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SUBRESOURCE_FOOTPRINT")
            .field("format", &format_args!("{:?}", self.format))
            .field("width", &format_args!("{:?}", self.width))
            .field("height", &format_args!("{:?}", self.height))
            .field("depth", &format_args!("{:?}", self.depth))
            .field("row_pitch", &format_args!("{:?}", self.row_pitch))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SUBRESOURCE_FOOTPRINT {
    fn clone(&self) -> Self {
        Self {
            format: self.format,
            width: self.width,
            height: self.height,
            depth: self.depth,
            row_pitch: self.row_pitch,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SUBRESOURCE_FOOTPRINT {
    fn eq(&self, other: &Self) -> bool {
        self.format == other.format
            && self.width == other.width
            && self.height == other.height
            && self.depth == other.depth
            && self.row_pitch == other.row_pitch
    }
}
impl ::std::cmp::Eq for D3D12_SUBRESOURCE_FOOTPRINT {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
    pub offset: u64,
    pub footprint: D3D12_SUBRESOURCE_FOOTPRINT,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT_abi(u64, D3D12_SUBRESOURCE_FOOTPRINT_abi);
impl D3D12_PLACED_SUBRESOURCE_FOOTPRINT {}
unsafe impl ::windows::Abi for D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
    type Abi = D3D12_PLACED_SUBRESOURCE_FOOTPRINT_abi;
}
impl ::std::default::Default for D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
    fn default() -> Self {
        Self {
            offset: 0,
            footprint: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_PLACED_SUBRESOURCE_FOOTPRINT")
            .field("offset", &format_args!("{:?}", self.offset))
            .field("footprint", &format_args!("{:?}", self.footprint))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
    fn clone(&self) -> Self {
        Self {
            offset: self.offset,
            footprint: <D3D12_SUBRESOURCE_FOOTPRINT as std::clone::Clone>::clone(&self.footprint),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
    fn eq(&self, other: &Self) -> bool {
        self.offset == other.offset && self.footprint == other.footprint
    }
}
impl ::std::cmp::Eq for D3D12_PLACED_SUBRESOURCE_FOOTPRINT {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEXTURE_COPY_LOCATION {
    pub p_resource: ::std::option::Option<ID3D12Resource>,
    pub r#type: D3D12_TEXTURE_COPY_TYPE,
    pub anonymous: D3D12_TEXTURE_COPY_LOCATION_0,
}
impl D3D12_TEXTURE_COPY_LOCATION {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_TEXTURE_COPY_LOCATION_0 {
    pub placed_footprint: D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
    pub subresource_index: u32,
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TILED_RESOURCE_COORDINATE {
    pub x: u32,
    pub y: u32,
    pub z: u32,
    pub subresource: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TILED_RESOURCE_COORDINATE_abi(u32, u32, u32, u32);
impl D3D12_TILED_RESOURCE_COORDINATE {}
unsafe impl ::windows::Abi for D3D12_TILED_RESOURCE_COORDINATE {
    type Abi = D3D12_TILED_RESOURCE_COORDINATE_abi;
}
impl ::std::default::Default for D3D12_TILED_RESOURCE_COORDINATE {
    fn default() -> Self {
        Self {
            x: 0,
            y: 0,
            z: 0,
            subresource: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TILED_RESOURCE_COORDINATE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TILED_RESOURCE_COORDINATE")
            .field("x", &format_args!("{:?}", self.x))
            .field("y", &format_args!("{:?}", self.y))
            .field("z", &format_args!("{:?}", self.z))
            .field("subresource", &format_args!("{:?}", self.subresource))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TILED_RESOURCE_COORDINATE {
    fn clone(&self) -> Self {
        Self {
            x: self.x,
            y: self.y,
            z: self.z,
            subresource: self.subresource,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TILED_RESOURCE_COORDINATE {
    fn eq(&self, other: &Self) -> bool {
        self.x == other.x
            && self.y == other.y
            && self.z == other.z
            && self.subresource == other.subresource
    }
}
impl ::std::cmp::Eq for D3D12_TILED_RESOURCE_COORDINATE {}
impl ::std::marker::Copy for D3D12_TILED_RESOURCE_COORDINATE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TILE_REGION_SIZE {
    pub num_tiles: u32,
    pub use_box: ::windows::BOOL,
    pub width: u32,
    pub height: u16,
    pub depth: u16,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TILE_REGION_SIZE_abi(u32, ::windows::BOOL, u32, u16, u16);
impl D3D12_TILE_REGION_SIZE {}
unsafe impl ::windows::Abi for D3D12_TILE_REGION_SIZE {
    type Abi = D3D12_TILE_REGION_SIZE_abi;
}
impl ::std::default::Default for D3D12_TILE_REGION_SIZE {
    fn default() -> Self {
        Self {
            num_tiles: 0,
            use_box: ::std::default::Default::default(),
            width: 0,
            height: 0,
            depth: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TILE_REGION_SIZE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TILE_REGION_SIZE")
            .field("num_tiles", &format_args!("{:?}", self.num_tiles))
            .field("use_box", &format_args!("{:?}", self.use_box))
            .field("width", &format_args!("{:?}", self.width))
            .field("height", &format_args!("{:?}", self.height))
            .field("depth", &format_args!("{:?}", self.depth))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TILE_REGION_SIZE {
    fn clone(&self) -> Self {
        Self {
            num_tiles: self.num_tiles,
            use_box: <::windows::BOOL as std::clone::Clone>::clone(&self.use_box),
            width: self.width,
            height: self.height,
            depth: self.depth,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TILE_REGION_SIZE {
    fn eq(&self, other: &Self) -> bool {
        self.num_tiles == other.num_tiles
            && self.use_box == other.use_box
            && self.width == other.width
            && self.height == other.height
            && self.depth == other.depth
    }
}
impl ::std::cmp::Eq for D3D12_TILE_REGION_SIZE {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_TILE_COPY_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_TILE_COPY_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_TILE_COPY_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_TILE_COPY_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_TILE_COPY_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_TILE_COPY_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_TILE_COPY_FLAGS {}
impl ::std::marker::Copy for D3D12_TILE_COPY_FLAGS {}
impl D3D12_TILE_COPY_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_TILE_COPY_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_TILE_COPY_FLAG_NO_HAZARD: Self = Self(1i32);
    pub const D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE: Self = Self(2i32);
    pub const D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_TILE_COPY_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_VIEWPORT {
    pub top_leftx: f32,
    pub top_lefty: f32,
    pub width: f32,
    pub height: f32,
    pub min_depth: f32,
    pub max_depth: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_VIEWPORT_abi(f32, f32, f32, f32, f32, f32);
impl D3D12_VIEWPORT {}
unsafe impl ::windows::Abi for D3D12_VIEWPORT {
    type Abi = D3D12_VIEWPORT_abi;
}
impl ::std::default::Default for D3D12_VIEWPORT {
    fn default() -> Self {
        Self {
            top_leftx: 0.0,
            top_lefty: 0.0,
            width: 0.0,
            height: 0.0,
            min_depth: 0.0,
            max_depth: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_VIEWPORT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_VIEWPORT")
            .field("top_leftx", &format_args!("{:?}", self.top_leftx))
            .field("top_lefty", &format_args!("{:?}", self.top_lefty))
            .field("width", &format_args!("{:?}", self.width))
            .field("height", &format_args!("{:?}", self.height))
            .field("min_depth", &format_args!("{:?}", self.min_depth))
            .field("max_depth", &format_args!("{:?}", self.max_depth))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_VIEWPORT {
    fn clone(&self) -> Self {
        Self {
            top_leftx: self.top_leftx,
            top_lefty: self.top_lefty,
            width: self.width,
            height: self.height,
            min_depth: self.min_depth,
            max_depth: self.max_depth,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_VIEWPORT {
    fn eq(&self, other: &Self) -> bool {
        self.top_leftx == other.top_leftx
            && self.top_lefty == other.top_lefty
            && self.width == other.width
            && self.height == other.height
            && self.min_depth == other.min_depth
            && self.max_depth == other.max_depth
    }
}
impl ::std::cmp::Eq for D3D12_VIEWPORT {}
impl ::std::marker::Copy for D3D12_VIEWPORT {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESOURCE_BARRIER_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_RESOURCE_BARRIER_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_BARRIER_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESOURCE_BARRIER_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_BARRIER_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_BARRIER_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_BARRIER_TYPE {}
impl ::std::marker::Copy for D3D12_RESOURCE_BARRIER_TYPE {}
impl D3D12_RESOURCE_BARRIER_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESOURCE_BARRIER_TYPE_TRANSITION: Self = Self(0i32);
    pub const D3D12_RESOURCE_BARRIER_TYPE_ALIASING: Self = Self(1i32);
    pub const D3D12_RESOURCE_BARRIER_TYPE_UAV: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_RESOURCE_BARRIER_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESOURCE_BARRIER_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RESOURCE_BARRIER_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_BARRIER_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESOURCE_BARRIER_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_BARRIER_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_BARRIER_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_BARRIER_FLAGS {}
impl ::std::marker::Copy for D3D12_RESOURCE_BARRIER_FLAGS {}
impl D3D12_RESOURCE_BARRIER_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESOURCE_BARRIER_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY: Self = Self(1i32);
    pub const D3D12_RESOURCE_BARRIER_FLAG_END_ONLY: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_RESOURCE_BARRIER_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESOURCE_STATES(pub i32);
impl ::std::convert::From<i32> for D3D12_RESOURCE_STATES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_STATES {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESOURCE_STATES {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_STATES {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_STATES {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_STATES {}
impl ::std::marker::Copy for D3D12_RESOURCE_STATES {}
impl D3D12_RESOURCE_STATES {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESOURCE_STATE_COMMON: Self = Self(0i32);
    pub const D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER: Self = Self(1i32);
    pub const D3D12_RESOURCE_STATE_INDEX_BUFFER: Self = Self(2i32);
    pub const D3D12_RESOURCE_STATE_RENDER_TARGET: Self = Self(4i32);
    pub const D3D12_RESOURCE_STATE_UNORDERED_ACCESS: Self = Self(8i32);
    pub const D3D12_RESOURCE_STATE_DEPTH_WRITE: Self = Self(16i32);
    pub const D3D12_RESOURCE_STATE_DEPTH_READ: Self = Self(32i32);
    pub const D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE: Self = Self(64i32);
    pub const D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE: Self = Self(128i32);
    pub const D3D12_RESOURCE_STATE_STREAM_OUT: Self = Self(256i32);
    pub const D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT: Self = Self(512i32);
    pub const D3D12_RESOURCE_STATE_COPY_DEST: Self = Self(1024i32);
    pub const D3D12_RESOURCE_STATE_COPY_SOURCE: Self = Self(2048i32);
    pub const D3D12_RESOURCE_STATE_RESOLVE_DEST: Self = Self(4096i32);
    pub const D3D12_RESOURCE_STATE_RESOLVE_SOURCE: Self = Self(8192i32);
    pub const D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE: Self = Self(4194304i32);
    pub const D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE: Self = Self(16777216i32);
    pub const D3D12_RESOURCE_STATE_GENERIC_READ: Self = Self(2755i32);
    pub const D3D12_RESOURCE_STATE_PRESENT: Self = Self(0i32);
    pub const D3D12_RESOURCE_STATE_PREDICATION: Self = Self(512i32);
    pub const D3D12_RESOURCE_STATE_VIDEO_DECODE_READ: Self = Self(65536i32);
    pub const D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE: Self = Self(131072i32);
    pub const D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ: Self = Self(262144i32);
    pub const D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE: Self = Self(524288i32);
    pub const D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ: Self = Self(2097152i32);
    pub const D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE: Self = Self(8388608i32);
}
unsafe impl ::windows::Abi for D3D12_RESOURCE_STATES {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RESOURCE_TRANSITION_BARRIER {
    pub p_resource: ::std::option::Option<ID3D12Resource>,
    pub subresource: u32,
    pub state_before: D3D12_RESOURCE_STATES,
    pub state_after: D3D12_RESOURCE_STATES,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RESOURCE_TRANSITION_BARRIER_abi(
    ::windows::RawPtr,
    u32,
    D3D12_RESOURCE_STATES,
    D3D12_RESOURCE_STATES,
);
impl D3D12_RESOURCE_TRANSITION_BARRIER {}
unsafe impl ::windows::Abi for D3D12_RESOURCE_TRANSITION_BARRIER {
    type Abi = D3D12_RESOURCE_TRANSITION_BARRIER_abi;
}
impl ::std::default::Default for D3D12_RESOURCE_TRANSITION_BARRIER {
    fn default() -> Self {
        Self {
            p_resource: ::std::default::Default::default(),
            subresource: 0,
            state_before: ::std::default::Default::default(),
            state_after: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_TRANSITION_BARRIER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RESOURCE_TRANSITION_BARRIER")
            .field("p_resource", &format_args!("{:?}", self.p_resource))
            .field("subresource", &format_args!("{:?}", self.subresource))
            .field("state_before", &format_args!("{:?}", self.state_before))
            .field("state_after", &format_args!("{:?}", self.state_after))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_TRANSITION_BARRIER {
    fn clone(&self) -> Self {
        Self {
            p_resource: <::std::option::Option<ID3D12Resource> as std::clone::Clone>::clone(
                &self.p_resource,
            ),
            subresource: self.subresource,
            state_before: self.state_before,
            state_after: self.state_after,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_TRANSITION_BARRIER {
    fn eq(&self, other: &Self) -> bool {
        self.p_resource == other.p_resource
            && self.subresource == other.subresource
            && self.state_before == other.state_before
            && self.state_after == other.state_after
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_TRANSITION_BARRIER {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RESOURCE_ALIASING_BARRIER {
    pub p_resource_before: ::std::option::Option<ID3D12Resource>,
    pub p_resource_after: ::std::option::Option<ID3D12Resource>,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RESOURCE_ALIASING_BARRIER_abi(::windows::RawPtr, ::windows::RawPtr);
impl D3D12_RESOURCE_ALIASING_BARRIER {}
unsafe impl ::windows::Abi for D3D12_RESOURCE_ALIASING_BARRIER {
    type Abi = D3D12_RESOURCE_ALIASING_BARRIER_abi;
}
impl ::std::default::Default for D3D12_RESOURCE_ALIASING_BARRIER {
    fn default() -> Self {
        Self {
            p_resource_before: ::std::default::Default::default(),
            p_resource_after: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_ALIASING_BARRIER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RESOURCE_ALIASING_BARRIER")
            .field(
                "p_resource_before",
                &format_args!("{:?}", self.p_resource_before),
            )
            .field(
                "p_resource_after",
                &format_args!("{:?}", self.p_resource_after),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_ALIASING_BARRIER {
    fn clone(&self) -> Self {
        Self {
            p_resource_before: <::std::option::Option<ID3D12Resource> as std::clone::Clone>::clone(
                &self.p_resource_before,
            ),
            p_resource_after: <::std::option::Option<ID3D12Resource> as std::clone::Clone>::clone(
                &self.p_resource_after,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_ALIASING_BARRIER {
    fn eq(&self, other: &Self) -> bool {
        self.p_resource_before == other.p_resource_before
            && self.p_resource_after == other.p_resource_after
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_ALIASING_BARRIER {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RESOURCE_UAV_BARRIER {
    pub p_resource: ::std::option::Option<ID3D12Resource>,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RESOURCE_UAV_BARRIER_abi(::windows::RawPtr);
impl D3D12_RESOURCE_UAV_BARRIER {}
unsafe impl ::windows::Abi for D3D12_RESOURCE_UAV_BARRIER {
    type Abi = D3D12_RESOURCE_UAV_BARRIER_abi;
}
impl ::std::default::Default for D3D12_RESOURCE_UAV_BARRIER {
    fn default() -> Self {
        Self {
            p_resource: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_UAV_BARRIER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RESOURCE_UAV_BARRIER")
            .field("p_resource", &format_args!("{:?}", self.p_resource))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_UAV_BARRIER {
    fn clone(&self) -> Self {
        Self {
            p_resource: <::std::option::Option<ID3D12Resource> as std::clone::Clone>::clone(
                &self.p_resource,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_UAV_BARRIER {
    fn eq(&self, other: &Self) -> bool {
        self.p_resource == other.p_resource
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_UAV_BARRIER {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RESOURCE_BARRIER {
    pub r#type: D3D12_RESOURCE_BARRIER_TYPE,
    pub flags: D3D12_RESOURCE_BARRIER_FLAGS,
    pub anonymous: D3D12_RESOURCE_BARRIER_0,
}
impl D3D12_RESOURCE_BARRIER {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_RESOURCE_BARRIER_0 {
    pub transition: D3D12_RESOURCE_TRANSITION_BARRIER,
    pub aliasing: D3D12_RESOURCE_ALIASING_BARRIER,
    pub uav: D3D12_RESOURCE_UAV_BARRIER,
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DESCRIPTOR_HEAP_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_DESCRIPTOR_HEAP_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DESCRIPTOR_HEAP_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DESCRIPTOR_HEAP_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DESCRIPTOR_HEAP_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DESCRIPTOR_HEAP_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DESCRIPTOR_HEAP_TYPE {}
impl ::std::marker::Copy for D3D12_DESCRIPTOR_HEAP_TYPE {}
impl D3D12_DESCRIPTOR_HEAP_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV: Self = Self(0i32);
    pub const D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER: Self = Self(1i32);
    pub const D3D12_DESCRIPTOR_HEAP_TYPE_RTV: Self = Self(2i32);
    pub const D3D12_DESCRIPTOR_HEAP_TYPE_DSV: Self = Self(3i32);
    pub const D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_DESCRIPTOR_HEAP_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DESCRIPTOR_HEAP_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_DESCRIPTOR_HEAP_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DESCRIPTOR_HEAP_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DESCRIPTOR_HEAP_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DESCRIPTOR_HEAP_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DESCRIPTOR_HEAP_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DESCRIPTOR_HEAP_FLAGS {}
impl ::std::marker::Copy for D3D12_DESCRIPTOR_HEAP_FLAGS {}
impl D3D12_DESCRIPTOR_HEAP_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DESCRIPTOR_HEAP_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_DESCRIPTOR_HEAP_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DESCRIPTOR_HEAP_DESC {
    pub r#type: D3D12_DESCRIPTOR_HEAP_TYPE,
    pub num_descriptors: u32,
    pub flags: D3D12_DESCRIPTOR_HEAP_FLAGS,
    pub node_mask: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DESCRIPTOR_HEAP_DESC_abi(
    D3D12_DESCRIPTOR_HEAP_TYPE,
    u32,
    D3D12_DESCRIPTOR_HEAP_FLAGS,
    u32,
);
impl D3D12_DESCRIPTOR_HEAP_DESC {}
unsafe impl ::windows::Abi for D3D12_DESCRIPTOR_HEAP_DESC {
    type Abi = D3D12_DESCRIPTOR_HEAP_DESC_abi;
}
impl ::std::default::Default for D3D12_DESCRIPTOR_HEAP_DESC {
    fn default() -> Self {
        Self {
            r#type: ::std::default::Default::default(),
            num_descriptors: 0,
            flags: ::std::default::Default::default(),
            node_mask: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DESCRIPTOR_HEAP_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DESCRIPTOR_HEAP_DESC")
            .field("type", &format_args!("{:?}", self.r#type))
            .field(
                "num_descriptors",
                &format_args!("{:?}", self.num_descriptors),
            )
            .field("flags", &format_args!("{:?}", self.flags))
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DESCRIPTOR_HEAP_DESC {
    fn clone(&self) -> Self {
        Self {
            r#type: self.r#type,
            num_descriptors: self.num_descriptors,
            flags: self.flags,
            node_mask: self.node_mask,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DESCRIPTOR_HEAP_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.r#type == other.r#type
            && self.num_descriptors == other.num_descriptors
            && self.flags == other.flags
            && self.node_mask == other.node_mask
    }
}
impl ::std::cmp::Eq for D3D12_DESCRIPTOR_HEAP_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_CPU_DESCRIPTOR_HANDLE {
    pub ptr: usize,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_CPU_DESCRIPTOR_HANDLE_abi(usize);
impl D3D12_CPU_DESCRIPTOR_HANDLE {}
unsafe impl ::windows::Abi for D3D12_CPU_DESCRIPTOR_HANDLE {
    type Abi = D3D12_CPU_DESCRIPTOR_HANDLE_abi;
}
impl ::std::default::Default for D3D12_CPU_DESCRIPTOR_HANDLE {
    fn default() -> Self {
        Self { ptr: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_CPU_DESCRIPTOR_HANDLE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_CPU_DESCRIPTOR_HANDLE")
            .field("ptr", &format_args!("{:?}", self.ptr))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_CPU_DESCRIPTOR_HANDLE {
    fn clone(&self) -> Self {
        Self { ptr: self.ptr }
    }
}
impl ::std::cmp::PartialEq for D3D12_CPU_DESCRIPTOR_HANDLE {
    fn eq(&self, other: &Self) -> bool {
        self.ptr == other.ptr
    }
}
impl ::std::cmp::Eq for D3D12_CPU_DESCRIPTOR_HANDLE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_GPU_DESCRIPTOR_HANDLE {
    pub ptr: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_GPU_DESCRIPTOR_HANDLE_abi(u64);
impl D3D12_GPU_DESCRIPTOR_HANDLE {}
unsafe impl ::windows::Abi for D3D12_GPU_DESCRIPTOR_HANDLE {
    type Abi = D3D12_GPU_DESCRIPTOR_HANDLE_abi;
}
impl ::std::default::Default for D3D12_GPU_DESCRIPTOR_HANDLE {
    fn default() -> Self {
        Self { ptr: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_GPU_DESCRIPTOR_HANDLE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_GPU_DESCRIPTOR_HANDLE")
            .field("ptr", &format_args!("{:?}", self.ptr))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_GPU_DESCRIPTOR_HANDLE {
    fn clone(&self) -> Self {
        Self { ptr: self.ptr }
    }
}
impl ::std::cmp::PartialEq for D3D12_GPU_DESCRIPTOR_HANDLE {
    fn eq(&self, other: &Self) -> bool {
        self.ptr == other.ptr
    }
}
impl ::std::cmp::Eq for D3D12_GPU_DESCRIPTOR_HANDLE {}
impl ::std::marker::Copy for D3D12_GPU_DESCRIPTOR_HANDLE {}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DescriptorHeap(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DescriptorHeap {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DescriptorHeap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DescriptorHeap {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DescriptorHeap {}
unsafe impl ::windows::Interface for ID3D12DescriptorHeap {
    type Vtable = ID3D12DescriptorHeap_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2398832413,
        24940,
        20297,
        [144, 247, 18, 123, 183, 99, 250, 81],
    );
}
#[repr(C)]
pub struct ID3D12DescriptorHeap_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_DESCRIPTOR_HEAP_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
);
#[allow(non_snake_case)]
impl ID3D12DescriptorHeap {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetDesc(&self, result__: *mut D3D12_DESCRIPTOR_HEAP_DESC) {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn GetCPUDescriptorHandleForHeapStart(
        &self,
        result__: *mut D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn GetGPUDescriptorHandleForHeapStart(
        &self,
        result__: *mut D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), result__)
    }
}
impl ::std::convert::From<ID3D12DescriptorHeap> for ::windows::IUnknown {
    fn from(value: ID3D12DescriptorHeap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DescriptorHeap> for ::windows::IUnknown {
    fn from(value: &ID3D12DescriptorHeap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12DescriptorHeap {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DescriptorHeap
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12DescriptorHeap> for ID3D12Pageable {
    fn from(value: ID3D12DescriptorHeap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DescriptorHeap> for ID3D12Pageable {
    fn from(value: &ID3D12DescriptorHeap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12DescriptorHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12DescriptorHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12DescriptorHeap> for ID3D12DeviceChild {
    fn from(value: ID3D12DescriptorHeap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DescriptorHeap> for ID3D12DeviceChild {
    fn from(value: &ID3D12DescriptorHeap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12DescriptorHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12DescriptorHeap
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12DescriptorHeap> for ID3D12Object {
    fn from(value: ID3D12DescriptorHeap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DescriptorHeap> for ID3D12Object {
    fn from(value: &ID3D12DescriptorHeap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12DescriptorHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12DescriptorHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12RootSignature(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12RootSignature {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12RootSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12RootSignature {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12RootSignature {}
unsafe impl ::windows::Interface for ID3D12RootSignature {
    type Vtable = ID3D12RootSignature_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3309988710,
        29407,
        20200,
        [139, 229, 169, 70, 161, 66, 146, 20],
    );
}
#[repr(C)]
pub struct ID3D12RootSignature_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12RootSignature {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
}
impl ::std::convert::From<ID3D12RootSignature> for ::windows::IUnknown {
    fn from(value: ID3D12RootSignature) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12RootSignature> for ::windows::IUnknown {
    fn from(value: &ID3D12RootSignature) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12RootSignature {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12RootSignature
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12RootSignature> for ID3D12DeviceChild {
    fn from(value: ID3D12RootSignature) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12RootSignature> for ID3D12DeviceChild {
    fn from(value: &ID3D12RootSignature) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12RootSignature {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12RootSignature {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12RootSignature> for ID3D12Object {
    fn from(value: ID3D12RootSignature) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12RootSignature> for ID3D12Object {
    fn from(value: &ID3D12RootSignature) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12RootSignature {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12RootSignature {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_INDEX_BUFFER_VIEW {
    pub buffer_location: u64,
    pub size_in_bytes: u32,
    pub format: super::dxgi::DXGI_FORMAT,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_INDEX_BUFFER_VIEW_abi(u64, u32, super::dxgi::DXGI_FORMAT);
impl D3D12_INDEX_BUFFER_VIEW {}
unsafe impl ::windows::Abi for D3D12_INDEX_BUFFER_VIEW {
    type Abi = D3D12_INDEX_BUFFER_VIEW_abi;
}
impl ::std::default::Default for D3D12_INDEX_BUFFER_VIEW {
    fn default() -> Self {
        Self {
            buffer_location: 0,
            size_in_bytes: 0,
            format: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_INDEX_BUFFER_VIEW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_INDEX_BUFFER_VIEW")
            .field(
                "buffer_location",
                &format_args!("{:?}", self.buffer_location),
            )
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .field("format", &format_args!("{:?}", self.format))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_INDEX_BUFFER_VIEW {
    fn clone(&self) -> Self {
        Self {
            buffer_location: self.buffer_location,
            size_in_bytes: self.size_in_bytes,
            format: self.format,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_INDEX_BUFFER_VIEW {
    fn eq(&self, other: &Self) -> bool {
        self.buffer_location == other.buffer_location
            && self.size_in_bytes == other.size_in_bytes
            && self.format == other.format
    }
}
impl ::std::cmp::Eq for D3D12_INDEX_BUFFER_VIEW {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_VERTEX_BUFFER_VIEW {
    pub buffer_location: u64,
    pub size_in_bytes: u32,
    pub stride_in_bytes: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_VERTEX_BUFFER_VIEW_abi(u64, u32, u32);
impl D3D12_VERTEX_BUFFER_VIEW {}
unsafe impl ::windows::Abi for D3D12_VERTEX_BUFFER_VIEW {
    type Abi = D3D12_VERTEX_BUFFER_VIEW_abi;
}
impl ::std::default::Default for D3D12_VERTEX_BUFFER_VIEW {
    fn default() -> Self {
        Self {
            buffer_location: 0,
            size_in_bytes: 0,
            stride_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_VERTEX_BUFFER_VIEW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_VERTEX_BUFFER_VIEW")
            .field(
                "buffer_location",
                &format_args!("{:?}", self.buffer_location),
            )
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .field(
                "stride_in_bytes",
                &format_args!("{:?}", self.stride_in_bytes),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_VERTEX_BUFFER_VIEW {
    fn clone(&self) -> Self {
        Self {
            buffer_location: self.buffer_location,
            size_in_bytes: self.size_in_bytes,
            stride_in_bytes: self.stride_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_VERTEX_BUFFER_VIEW {
    fn eq(&self, other: &Self) -> bool {
        self.buffer_location == other.buffer_location
            && self.size_in_bytes == other.size_in_bytes
            && self.stride_in_bytes == other.stride_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_VERTEX_BUFFER_VIEW {}
impl ::std::marker::Copy for D3D12_VERTEX_BUFFER_VIEW {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_STREAM_OUTPUT_BUFFER_VIEW {
    pub buffer_location: u64,
    pub size_in_bytes: u64,
    pub buffer_filled_size_location: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_STREAM_OUTPUT_BUFFER_VIEW_abi(u64, u64, u64);
impl D3D12_STREAM_OUTPUT_BUFFER_VIEW {}
unsafe impl ::windows::Abi for D3D12_STREAM_OUTPUT_BUFFER_VIEW {
    type Abi = D3D12_STREAM_OUTPUT_BUFFER_VIEW_abi;
}
impl ::std::default::Default for D3D12_STREAM_OUTPUT_BUFFER_VIEW {
    fn default() -> Self {
        Self {
            buffer_location: 0,
            size_in_bytes: 0,
            buffer_filled_size_location: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_STREAM_OUTPUT_BUFFER_VIEW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_STREAM_OUTPUT_BUFFER_VIEW")
            .field(
                "buffer_location",
                &format_args!("{:?}", self.buffer_location),
            )
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .field(
                "buffer_filled_size_location",
                &format_args!("{:?}", self.buffer_filled_size_location),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_STREAM_OUTPUT_BUFFER_VIEW {
    fn clone(&self) -> Self {
        Self {
            buffer_location: self.buffer_location,
            size_in_bytes: self.size_in_bytes,
            buffer_filled_size_location: self.buffer_filled_size_location,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_STREAM_OUTPUT_BUFFER_VIEW {
    fn eq(&self, other: &Self) -> bool {
        self.buffer_location == other.buffer_location
            && self.size_in_bytes == other.size_in_bytes
            && self.buffer_filled_size_location == other.buffer_filled_size_location
    }
}
impl ::std::cmp::Eq for D3D12_STREAM_OUTPUT_BUFFER_VIEW {}
impl ::std::marker::Copy for D3D12_STREAM_OUTPUT_BUFFER_VIEW {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_CLEAR_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_CLEAR_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_CLEAR_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_CLEAR_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_CLEAR_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_CLEAR_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_CLEAR_FLAGS {}
impl ::std::marker::Copy for D3D12_CLEAR_FLAGS {}
impl D3D12_CLEAR_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_CLEAR_FLAG_DEPTH: Self = Self(1i32);
    pub const D3D12_CLEAR_FLAG_STENCIL: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_CLEAR_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DISCARD_REGION {
    pub num_rects: u32,
    pub p_rects: *mut super::display_devices::RECT,
    pub first_subresource: u32,
    pub num_subresources: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DISCARD_REGION_abi(u32, *mut super::display_devices::RECT_abi, u32, u32);
impl D3D12_DISCARD_REGION {}
unsafe impl ::windows::Abi for D3D12_DISCARD_REGION {
    type Abi = D3D12_DISCARD_REGION_abi;
}
impl ::std::default::Default for D3D12_DISCARD_REGION {
    fn default() -> Self {
        Self {
            num_rects: 0,
            p_rects: ::std::ptr::null_mut(),
            first_subresource: 0,
            num_subresources: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DISCARD_REGION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DISCARD_REGION")
            .field("num_rects", &format_args!("{:?}", self.num_rects))
            .field("p_rects", &format_args!("{:?}", self.p_rects))
            .field(
                "first_subresource",
                &format_args!("{:?}", self.first_subresource),
            )
            .field(
                "num_subresources",
                &format_args!("{:?}", self.num_subresources),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DISCARD_REGION {
    fn clone(&self) -> Self {
        Self {
            num_rects: self.num_rects,
            p_rects: <*mut super::display_devices::RECT as std::clone::Clone>::clone(&self.p_rects),
            first_subresource: self.first_subresource,
            num_subresources: self.num_subresources,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DISCARD_REGION {
    fn eq(&self, other: &Self) -> bool {
        self.num_rects == other.num_rects
            && self.p_rects == other.p_rects
            && self.first_subresource == other.first_subresource
            && self.num_subresources == other.num_subresources
    }
}
impl ::std::cmp::Eq for D3D12_DISCARD_REGION {}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12QueryHeap(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12QueryHeap {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12QueryHeap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12QueryHeap {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12QueryHeap {}
unsafe impl ::windows::Interface for ID3D12QueryHeap {
    type Vtable = ID3D12QueryHeap_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        227956910,
        60741,
        18078,
        [166, 29, 151, 14, 197, 131, 202, 180],
    );
}
#[repr(C)]
pub struct ID3D12QueryHeap_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12QueryHeap {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
}
impl ::std::convert::From<ID3D12QueryHeap> for ::windows::IUnknown {
    fn from(value: ID3D12QueryHeap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12QueryHeap> for ::windows::IUnknown {
    fn from(value: &ID3D12QueryHeap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12QueryHeap {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12QueryHeap {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12QueryHeap> for ID3D12Pageable {
    fn from(value: ID3D12QueryHeap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12QueryHeap> for ID3D12Pageable {
    fn from(value: &ID3D12QueryHeap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12QueryHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12QueryHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12QueryHeap> for ID3D12DeviceChild {
    fn from(value: ID3D12QueryHeap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12QueryHeap> for ID3D12DeviceChild {
    fn from(value: &ID3D12QueryHeap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12QueryHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12QueryHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12QueryHeap> for ID3D12Object {
    fn from(value: ID3D12QueryHeap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12QueryHeap> for ID3D12Object {
    fn from(value: &ID3D12QueryHeap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12QueryHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12QueryHeap {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_QUERY_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_QUERY_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_QUERY_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_QUERY_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_QUERY_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_QUERY_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_QUERY_TYPE {}
impl ::std::marker::Copy for D3D12_QUERY_TYPE {}
impl D3D12_QUERY_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_QUERY_TYPE_OCCLUSION: Self = Self(0i32);
    pub const D3D12_QUERY_TYPE_BINARY_OCCLUSION: Self = Self(1i32);
    pub const D3D12_QUERY_TYPE_TIMESTAMP: Self = Self(2i32);
    pub const D3D12_QUERY_TYPE_PIPELINE_STATISTICS: Self = Self(3i32);
    pub const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0: Self = Self(4i32);
    pub const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1: Self = Self(5i32);
    pub const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2: Self = Self(6i32);
    pub const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3: Self = Self(7i32);
    pub const D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS: Self = Self(8i32);
}
unsafe impl ::windows::Abi for D3D12_QUERY_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_PREDICATION_OP(pub i32);
impl ::std::convert::From<i32> for D3D12_PREDICATION_OP {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_PREDICATION_OP {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_PREDICATION_OP {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_PREDICATION_OP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_PREDICATION_OP {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_PREDICATION_OP {}
impl ::std::marker::Copy for D3D12_PREDICATION_OP {}
impl D3D12_PREDICATION_OP {
    #![allow(non_upper_case_globals)]
    pub const D3D12_PREDICATION_OP_EQUAL_ZERO: Self = Self(0i32);
    pub const D3D12_PREDICATION_OP_NOT_EQUAL_ZERO: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_PREDICATION_OP {
    type Abi = Self;
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12CommandSignature(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12CommandSignature {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12CommandSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12CommandSignature {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12CommandSignature {}
unsafe impl ::windows::Interface for ID3D12CommandSignature {
    type Vtable = ID3D12CommandSignature_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3278535036,
        60544,
        20234,
        [137, 133, 167, 178, 71, 80, 130, 209],
    );
}
#[repr(C)]
pub struct ID3D12CommandSignature_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12CommandSignature {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
}
impl ::std::convert::From<ID3D12CommandSignature> for ::windows::IUnknown {
    fn from(value: ID3D12CommandSignature) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandSignature> for ::windows::IUnknown {
    fn from(value: &ID3D12CommandSignature) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12CommandSignature
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12CommandSignature
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandSignature> for ID3D12Pageable {
    fn from(value: ID3D12CommandSignature) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandSignature> for ID3D12Pageable {
    fn from(value: &ID3D12CommandSignature) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12CommandSignature {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12CommandSignature {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandSignature> for ID3D12DeviceChild {
    fn from(value: ID3D12CommandSignature) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandSignature> for ID3D12DeviceChild {
    fn from(value: &ID3D12CommandSignature) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12CommandSignature {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12CommandSignature
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandSignature> for ID3D12Object {
    fn from(value: ID3D12CommandSignature) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandSignature> for ID3D12Object {
    fn from(value: &ID3D12CommandSignature) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12CommandSignature {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12CommandSignature {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12CommandList(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12CommandList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12CommandList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12CommandList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12CommandList {}
unsafe impl ::windows::Interface for ID3D12CommandList {
    type Vtable = ID3D12CommandList_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1897322780,
        59364,
        18382,
        [184, 198, 236, 129, 104, 244, 55, 229],
    );
}
#[repr(C)]
pub struct ID3D12CommandList_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_COMMAND_LIST_TYPE,
);
#[allow(non_snake_case)]
impl ID3D12CommandList {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetType(&self) -> D3D12_COMMAND_LIST_TYPE {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12CommandList> for ::windows::IUnknown {
    fn from(value: ID3D12CommandList) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandList> for ::windows::IUnknown {
    fn from(value: &ID3D12CommandList) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12CommandList {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12CommandList {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandList> for ID3D12DeviceChild {
    fn from(value: ID3D12CommandList) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandList> for ID3D12DeviceChild {
    fn from(value: &ID3D12CommandList) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12CommandList {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12CommandList {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandList> for ID3D12Object {
    fn from(value: ID3D12CommandList) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandList> for ID3D12Object {
    fn from(value: &ID3D12CommandList) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12CommandList {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12CommandList {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12GraphicsCommandList(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12GraphicsCommandList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12GraphicsCommandList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12GraphicsCommandList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12GraphicsCommandList {}
unsafe impl ::windows::Interface for ID3D12GraphicsCommandList {
    type Vtable = ID3D12GraphicsCommandList_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1528171791,
        44059,
        16773,
        [139, 168, 179, 174, 66, 165, 164, 85],
    );
}
#[repr(C)]
pub struct ID3D12GraphicsCommandList_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_COMMAND_LIST_TYPE,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        num_bytes: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        p_src_resource: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: ::windows::RawPtr,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_viewports: u32,
        p_viewports: *const D3D12_VIEWPORT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, blend_factor: *const f32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, stencil_ref: u32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_command_list: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: ::windows::RawPtr,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_view: *const D3D12_INDEX_BUFFER_VIEW),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_region: *const D3D12_DISCARD_REGION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: ::windows::RawPtr,
        aligned_destination_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_buffer: ::windows::RawPtr,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_command_signature: ::windows::RawPtr,
        max_command_count: u32,
        p_argument_buffer: ::windows::RawPtr,
        argument_buffer_offset: u64,
        p_count_buffer: ::windows::RawPtr,
        count_buffer_offset: u64,
    ),
);
#[allow(non_snake_case)]
impl ID3D12GraphicsCommandList {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetType(&self) -> D3D12_COMMAND_LIST_TYPE {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn Close(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn Reset<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_allocator: T0__,
        p_initial_state: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_allocator.into().abi(),
            p_initial_state.into().abi(),
        )
    }
    pub unsafe fn ClearState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn DrawInstanced(
        &self,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            vertex_count_per_instance,
            instance_count,
            start_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn DrawIndexedInstanced(
        &self,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            index_count_per_instance,
            instance_count,
            start_index_location,
            base_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn Dispatch(
        &self,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ) {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            thread_group_countx,
            thread_group_county,
            thread_group_countz,
        )
    }
    pub unsafe fn CopyBufferRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        num_bytes: u64,
    ) {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            num_bytes,
        )
    }
    pub unsafe fn CopyTextureRegion(
        &self,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ) {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            p_dst,
            dstx,
            dsty,
            dstz,
            p_src,
            p_src_box,
        )
    }
    pub unsafe fn CopyResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        p_src_resource: T1__,
    ) {
        (::windows::Interface::vtable(self).17)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            p_src_resource.into().abi(),
        )
    }
    pub unsafe fn CopyTiles<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: T3__,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_tile_region_start_coordinate,
            p_tile_region_size,
            p_buffer.into().abi(),
            buffer_start_offset_in_bytes,
            flags,
        )
    }
    pub unsafe fn ResolveSubresource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        p_src_resource: T2__,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            p_src_resource.into().abi(),
            src_subresource,
            format,
        )
    }
    pub unsafe fn IASetPrimitiveTopology(
        &self,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ) {
        (::windows::Interface::vtable(self).20)(::windows::Abi::abi(self), primitive_topology)
    }
    pub unsafe fn RSSetViewports(&self, num_viewports: u32, p_viewports: *const D3D12_VIEWPORT) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            num_viewports,
            p_viewports,
        )
    }
    pub unsafe fn RSSetScissorRects(
        &self,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), num_rects, p_rects)
    }
    pub unsafe fn OMSetBlendFactor(&self, blend_factor: *const f32) {
        (::windows::Interface::vtable(self).23)(::windows::Abi::abi(self), blend_factor)
    }
    pub unsafe fn OMSetStencilRef(&self, stencil_ref: u32) {
        (::windows::Interface::vtable(self).24)(::windows::Abi::abi(self), stencil_ref)
    }
    pub unsafe fn SetPipelineState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn ResourceBarrier(
        &self,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ) {
        (::windows::Interface::vtable(self).26)(::windows::Abi::abi(self), num_barriers, p_barriers)
    }
    pub unsafe fn ExecuteBundle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>,
    >(
        &self,
        p_command_list: T0__,
    ) {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_command_list.into().abi(),
        )
    }
    pub unsafe fn SetDescriptorHeaps<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12DescriptorHeap>>,
    >(
        &self,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: T1__,
    ) {
        (::windows::Interface::vtable(self).28)(
            ::windows::Abi::abi(self),
            num_descriptor_heaps,
            pp_descriptor_heaps.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetGraphicsRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetGraphicsRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).32)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).37)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).39)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).40)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn IASetIndexBuffer(&self, p_view: *const D3D12_INDEX_BUFFER_VIEW) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), p_view)
    }
    pub unsafe fn IASetVertexBuffers(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn SOSetTargets(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn OMSetRenderTargets(
        &self,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_render_target_descriptors,
            p_render_target_descriptors,
            rts_single_handle_to_descriptor_range,
            p_depth_stencil_descriptor,
        )
    }
    pub unsafe fn ClearDepthStencilView(
        &self,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            depth_stencil_view,
            clear_flags,
            depth,
            stencil,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearRenderTargetView(
        &self,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            render_target_view,
            color_rgba,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewUint<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewFloat<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn DiscardResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_region: *const D3D12_DISCARD_REGION,
    ) {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_region,
        )
    }
    pub unsafe fn BeginQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).52)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn EndQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn ResolveQueryData<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: T4__,
        aligned_destination_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            start_index,
            num_queries,
            p_destination_buffer.into().abi(),
            aligned_destination_buffer_offset,
        )
    }
    pub unsafe fn SetPredication<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_buffer: T0__,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ) {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_buffer.into().abi(),
            aligned_buffer_offset,
            operation,
        )
    }
    pub unsafe fn SetMarker(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).56)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn BeginEvent(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).57)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn EndEvent(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn ExecuteIndirect<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandSignature>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_command_signature: T0__,
        max_command_count: u32,
        p_argument_buffer: T2__,
        argument_buffer_offset: u64,
        p_count_buffer: T4__,
        count_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_command_signature.into().abi(),
            max_command_count,
            p_argument_buffer.into().abi(),
            argument_buffer_offset,
            p_count_buffer.into().abi(),
            count_buffer_offset,
        )
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList> for ::windows::IUnknown {
    fn from(value: ID3D12GraphicsCommandList) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList> for ::windows::IUnknown {
    fn from(value: &ID3D12GraphicsCommandList) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12GraphicsCommandList
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12GraphicsCommandList
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList> for ID3D12CommandList {
    fn from(value: ID3D12GraphicsCommandList) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList> for ID3D12CommandList {
    fn from(value: &ID3D12GraphicsCommandList) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for ID3D12GraphicsCommandList
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for &'a ID3D12GraphicsCommandList
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList> for ID3D12DeviceChild {
    fn from(value: ID3D12GraphicsCommandList) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList> for ID3D12DeviceChild {
    fn from(value: &ID3D12GraphicsCommandList) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for ID3D12GraphicsCommandList
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12GraphicsCommandList
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList> for ID3D12Object {
    fn from(value: ID3D12GraphicsCommandList) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList> for ID3D12Object {
    fn from(value: &ID3D12GraphicsCommandList) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12GraphicsCommandList {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for &'a ID3D12GraphicsCommandList
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_HEAP_DESC {
    pub size_in_bytes: u64,
    pub properties: D3D12_HEAP_PROPERTIES,
    pub alignment: u64,
    pub flags: D3D12_HEAP_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_HEAP_DESC_abi(u64, D3D12_HEAP_PROPERTIES_abi, u64, D3D12_HEAP_FLAGS);
impl D3D12_HEAP_DESC {}
unsafe impl ::windows::Abi for D3D12_HEAP_DESC {
    type Abi = D3D12_HEAP_DESC_abi;
}
impl ::std::default::Default for D3D12_HEAP_DESC {
    fn default() -> Self {
        Self {
            size_in_bytes: 0,
            properties: ::std::default::Default::default(),
            alignment: 0,
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_HEAP_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_HEAP_DESC")
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .field("properties", &format_args!("{:?}", self.properties))
            .field("alignment", &format_args!("{:?}", self.alignment))
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_HEAP_DESC {
    fn clone(&self) -> Self {
        Self {
            size_in_bytes: self.size_in_bytes,
            properties: <D3D12_HEAP_PROPERTIES as std::clone::Clone>::clone(&self.properties),
            alignment: self.alignment,
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_HEAP_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.size_in_bytes == other.size_in_bytes
            && self.properties == other.properties
            && self.alignment == other.alignment
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_HEAP_DESC {}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Heap(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Heap {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Heap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Heap {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Heap {}
unsafe impl ::windows::Interface for ID3D12Heap {
    type Vtable = ID3D12Heap_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1799038210,
        28241,
        17843,
        [144, 238, 152, 132, 38, 94, 141, 243],
    );
}
#[repr(C)]
pub struct ID3D12Heap_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut D3D12_HEAP_DESC),
);
#[allow(non_snake_case)]
impl ID3D12Heap {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetDesc(&self, result__: *mut D3D12_HEAP_DESC) {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), result__)
    }
}
impl ::std::convert::From<ID3D12Heap> for ::windows::IUnknown {
    fn from(value: ID3D12Heap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Heap> for ::windows::IUnknown {
    fn from(value: &ID3D12Heap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Heap {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Heap {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Heap> for ID3D12Pageable {
    fn from(value: ID3D12Heap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Heap> for ID3D12Pageable {
    fn from(value: &ID3D12Heap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12Heap {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12Heap {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Heap> for ID3D12DeviceChild {
    fn from(value: ID3D12Heap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Heap> for ID3D12DeviceChild {
    fn from(value: &ID3D12Heap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12Heap {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12Heap {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Heap> for ID3D12Object {
    fn from(value: ID3D12Heap) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Heap> for ID3D12Object {
    fn from(value: &ID3D12Heap) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Heap {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Heap {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_TILE_RANGE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_TILE_RANGE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_TILE_RANGE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_TILE_RANGE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_TILE_RANGE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_TILE_RANGE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_TILE_RANGE_FLAGS {}
impl ::std::marker::Copy for D3D12_TILE_RANGE_FLAGS {}
impl D3D12_TILE_RANGE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_TILE_RANGE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_TILE_RANGE_FLAG_NULL: Self = Self(1i32);
    pub const D3D12_TILE_RANGE_FLAG_SKIP: Self = Self(2i32);
    pub const D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_TILE_RANGE_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_TILE_MAPPING_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_TILE_MAPPING_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_TILE_MAPPING_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_TILE_MAPPING_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_TILE_MAPPING_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_TILE_MAPPING_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_TILE_MAPPING_FLAGS {}
impl ::std::marker::Copy for D3D12_TILE_MAPPING_FLAGS {}
impl D3D12_TILE_MAPPING_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_TILE_MAPPING_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_TILE_MAPPING_FLAG_NO_HAZARD: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_TILE_MAPPING_FLAGS {
    type Abi = Self;
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Fence(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Fence {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Fence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Fence {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Fence {}
unsafe impl ::windows::Interface for ID3D12Fence {
    type Vtable = ID3D12Fence_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        175455695,
        50392,
        19345,
        [173, 246, 190, 90, 96, 217, 90, 118],
    );
}
#[repr(C)]
pub struct ID3D12Fence_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        value: u64,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, value: u64) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Fence {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetCompletedValue(&self) -> u64 {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn SetEventOnCompletion(
        &self,
        value: u64,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self), value, h_event)
    }
    pub unsafe fn Signal(&self, value: u64) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), value)
    }
}
impl ::std::convert::From<ID3D12Fence> for ::windows::IUnknown {
    fn from(value: ID3D12Fence) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Fence> for ::windows::IUnknown {
    fn from(value: &ID3D12Fence) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Fence {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Fence {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Fence> for ID3D12Pageable {
    fn from(value: ID3D12Fence) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Fence> for ID3D12Pageable {
    fn from(value: &ID3D12Fence) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12Fence {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12Fence {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Fence> for ID3D12DeviceChild {
    fn from(value: ID3D12Fence) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Fence> for ID3D12DeviceChild {
    fn from(value: &ID3D12Fence) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12Fence {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12Fence {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Fence> for ID3D12Object {
    fn from(value: ID3D12Fence) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Fence> for ID3D12Object {
    fn from(value: &ID3D12Fence) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Fence {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Fence {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_COMMAND_QUEUE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_COMMAND_QUEUE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_COMMAND_QUEUE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_COMMAND_QUEUE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_COMMAND_QUEUE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_COMMAND_QUEUE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_COMMAND_QUEUE_FLAGS {}
impl ::std::marker::Copy for D3D12_COMMAND_QUEUE_FLAGS {}
impl D3D12_COMMAND_QUEUE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_COMMAND_QUEUE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_COMMAND_QUEUE_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_COMMAND_QUEUE_DESC {
    pub r#type: D3D12_COMMAND_LIST_TYPE,
    pub priority: i32,
    pub flags: D3D12_COMMAND_QUEUE_FLAGS,
    pub node_mask: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_COMMAND_QUEUE_DESC_abi(
    D3D12_COMMAND_LIST_TYPE,
    i32,
    D3D12_COMMAND_QUEUE_FLAGS,
    u32,
);
impl D3D12_COMMAND_QUEUE_DESC {}
unsafe impl ::windows::Abi for D3D12_COMMAND_QUEUE_DESC {
    type Abi = D3D12_COMMAND_QUEUE_DESC_abi;
}
impl ::std::default::Default for D3D12_COMMAND_QUEUE_DESC {
    fn default() -> Self {
        Self {
            r#type: ::std::default::Default::default(),
            priority: 0,
            flags: ::std::default::Default::default(),
            node_mask: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_COMMAND_QUEUE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_COMMAND_QUEUE_DESC")
            .field("type", &format_args!("{:?}", self.r#type))
            .field("priority", &format_args!("{:?}", self.priority))
            .field("flags", &format_args!("{:?}", self.flags))
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_COMMAND_QUEUE_DESC {
    fn clone(&self) -> Self {
        Self {
            r#type: self.r#type,
            priority: self.priority,
            flags: self.flags,
            node_mask: self.node_mask,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_COMMAND_QUEUE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.r#type == other.r#type
            && self.priority == other.priority
            && self.flags == other.flags
            && self.node_mask == other.node_mask
    }
}
impl ::std::cmp::Eq for D3D12_COMMAND_QUEUE_DESC {}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12CommandQueue(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12CommandQueue {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12CommandQueue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12CommandQueue {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12CommandQueue {}
unsafe impl ::windows::Interface for ID3D12CommandQueue {
    type Vtable = ID3D12CommandQueue_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        248017062,
        23934,
        19490,
        [140, 252, 91, 170, 224, 118, 22, 237],
    );
}
#[repr(C)]
pub struct ID3D12CommandQueue_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        num_resource_regions: u32,
        p_resource_region_start_coordinates: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_resource_region_sizes: *const D3D12_TILE_REGION_SIZE,
        p_heap: ::windows::RawPtr,
        num_ranges: u32,
        p_range_flags: *const D3D12_TILE_RANGE_FLAGS,
        p_heap_range_start_offsets: *const u32,
        p_range_tile_counts: *const u32,
        flags: D3D12_TILE_MAPPING_FLAGS,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        p_dst_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_src_resource: ::windows::RawPtr,
        p_src_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_region_size: *const D3D12_TILE_REGION_SIZE,
        flags: D3D12_TILE_MAPPING_FLAGS,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_command_lists: u32,
        pp_command_lists: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_fence: ::windows::RawPtr,
        value: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_fence: ::windows::RawPtr,
        value: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_frequency: *mut u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_gpu_timestamp: *mut u64,
        p_cpu_timestamp: *mut u64,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut D3D12_COMMAND_QUEUE_DESC),
);
#[allow(non_snake_case)]
impl ID3D12CommandQueue {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn UpdateTileMappings<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_resource: T0__,
        num_resource_regions: u32,
        p_resource_region_start_coordinates: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_resource_region_sizes: *const D3D12_TILE_REGION_SIZE,
        p_heap: T4__,
        num_ranges: u32,
        p_range_flags: *const D3D12_TILE_RANGE_FLAGS,
        p_heap_range_start_offsets: *const u32,
        p_range_tile_counts: *const u32,
        flags: D3D12_TILE_MAPPING_FLAGS,
    ) {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            num_resource_regions,
            p_resource_region_start_coordinates,
            p_resource_region_sizes,
            p_heap.into().abi(),
            num_ranges,
            p_range_flags,
            p_heap_range_start_offsets,
            p_range_tile_counts,
            flags,
        )
    }
    pub unsafe fn CopyTileMappings<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        p_dst_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_src_resource: T2__,
        p_src_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_region_size: *const D3D12_TILE_REGION_SIZE,
        flags: D3D12_TILE_MAPPING_FLAGS,
    ) {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            p_dst_region_start_coordinate,
            p_src_resource.into().abi(),
            p_src_region_start_coordinate,
            p_region_size,
            flags,
        )
    }
    pub unsafe fn ExecuteCommandLists<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>,
    >(
        &self,
        num_command_lists: u32,
        pp_command_lists: T1__,
    ) {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            num_command_lists,
            pp_command_lists.into().abi(),
        )
    }
    pub unsafe fn SetMarker(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn BeginEvent(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).12)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn EndEvent(&self) {
        (::windows::Interface::vtable(self).13)(::windows::Abi::abi(self))
    }
    pub unsafe fn Signal<'a, T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>>(
        &self,
        p_fence: T0__,
        value: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_fence.into().abi(),
            value,
        )
    }
    pub unsafe fn Wait<'a, T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>>(
        &self,
        p_fence: T0__,
        value: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            p_fence.into().abi(),
            value,
        )
    }
    pub unsafe fn GetTimestampFrequency(&self, p_frequency: *mut u64) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(::windows::Abi::abi(self), p_frequency)
    }
    pub unsafe fn GetClockCalibration(
        &self,
        p_gpu_timestamp: *mut u64,
        p_cpu_timestamp: *mut u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).17)(
            ::windows::Abi::abi(self),
            p_gpu_timestamp,
            p_cpu_timestamp,
        )
    }
    pub unsafe fn GetDesc(&self, result__: *mut D3D12_COMMAND_QUEUE_DESC) {
        (::windows::Interface::vtable(self).18)(::windows::Abi::abi(self), result__)
    }
}
impl ::std::convert::From<ID3D12CommandQueue> for ::windows::IUnknown {
    fn from(value: ID3D12CommandQueue) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandQueue> for ::windows::IUnknown {
    fn from(value: &ID3D12CommandQueue) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12CommandQueue {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12CommandQueue
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandQueue> for ID3D12Pageable {
    fn from(value: ID3D12CommandQueue) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandQueue> for ID3D12Pageable {
    fn from(value: &ID3D12CommandQueue) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12CommandQueue {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12CommandQueue {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandQueue> for ID3D12DeviceChild {
    fn from(value: ID3D12CommandQueue) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandQueue> for ID3D12DeviceChild {
    fn from(value: &ID3D12CommandQueue) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12CommandQueue {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12CommandQueue {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12CommandQueue> for ID3D12Object {
    fn from(value: ID3D12CommandQueue) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12CommandQueue> for ID3D12Object {
    fn from(value: &ID3D12CommandQueue) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12CommandQueue {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12CommandQueue {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_AUTO_BREADCRUMB_OP(pub i32);
impl ::std::convert::From<i32> for D3D12_AUTO_BREADCRUMB_OP {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_AUTO_BREADCRUMB_OP {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_AUTO_BREADCRUMB_OP {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_AUTO_BREADCRUMB_OP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_AUTO_BREADCRUMB_OP {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_AUTO_BREADCRUMB_OP {}
impl ::std::marker::Copy for D3D12_AUTO_BREADCRUMB_OP {}
impl D3D12_AUTO_BREADCRUMB_OP {
    #![allow(non_upper_case_globals)]
    pub const D3D12_AUTO_BREADCRUMB_OP_SETMARKER: Self = Self(0i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT: Self = Self(1i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_ENDEVENT: Self = Self(2i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED: Self = Self(3i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED: Self = Self(4i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT: Self = Self(5i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_DISPATCH: Self = Self(6i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION: Self = Self(7i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION: Self = Self(8i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE: Self = Self(9i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_COPYTILES: Self = Self(10i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE: Self = Self(11i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW: Self = Self(12i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW: Self = Self(13i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW: Self = Self(14i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER: Self = Self(15i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE: Self = Self(16i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_PRESENT: Self = Self(17i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA: Self = Self(18i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION: Self = Self(19i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION: Self = Self(20i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME: Self = Self(21i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES: Self = Self(22i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT: Self = Self(23i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64: Self = Self(24i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION: Self = Self(25i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE: Self = Self(26i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1: Self = Self(27i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION: Self = Self(28i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2: Self = Self(29i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1: Self = Self(30i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE: Self = Self(31i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO: Self =
        Self(32i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE: Self = Self(33i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS: Self = Self(34i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND: Self = Self(35i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND: Self = Self(36i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION: Self = Self(37i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP: Self = Self(38i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1: Self = Self(39i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND: Self = Self(40i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND: Self = Self(41i32);
    pub const D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH: Self = Self(42i32);
}
unsafe impl ::windows::Abi for D3D12_AUTO_BREADCRUMB_OP {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_AUTO_BREADCRUMB_NODE {
    pub p_command_list_debug_namea: *mut i8,
    pub p_command_list_debug_namew: *mut u16,
    pub p_command_queue_debug_namea: *mut i8,
    pub p_command_queue_debug_namew: *mut u16,
    pub p_command_list: ::std::option::Option<ID3D12GraphicsCommandList>,
    pub p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
    pub breadcrumb_count: u32,
    pub p_last_breadcrumb_value: *mut u32,
    pub p_command_history: *mut D3D12_AUTO_BREADCRUMB_OP,
    pub p_next: *mut D3D12_AUTO_BREADCRUMB_NODE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_AUTO_BREADCRUMB_NODE_abi(
    *mut i8,
    *mut u16,
    *mut i8,
    *mut u16,
    ::windows::RawPtr,
    ::windows::RawPtr,
    u32,
    *mut u32,
    *mut D3D12_AUTO_BREADCRUMB_OP,
    *mut D3D12_AUTO_BREADCRUMB_NODE_abi,
);
impl D3D12_AUTO_BREADCRUMB_NODE {}
unsafe impl ::windows::Abi for D3D12_AUTO_BREADCRUMB_NODE {
    type Abi = D3D12_AUTO_BREADCRUMB_NODE_abi;
}
impl ::std::default::Default for D3D12_AUTO_BREADCRUMB_NODE {
    fn default() -> Self {
        Self {
            p_command_list_debug_namea: ::std::ptr::null_mut(),
            p_command_list_debug_namew: ::std::ptr::null_mut(),
            p_command_queue_debug_namea: ::std::ptr::null_mut(),
            p_command_queue_debug_namew: ::std::ptr::null_mut(),
            p_command_list: ::std::default::Default::default(),
            p_command_queue: ::std::default::Default::default(),
            breadcrumb_count: 0,
            p_last_breadcrumb_value: ::std::ptr::null_mut(),
            p_command_history: ::std::ptr::null_mut(),
            p_next: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_AUTO_BREADCRUMB_NODE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_AUTO_BREADCRUMB_NODE")
            .field(
                "p_command_list_debug_namea",
                &format_args!("{:?}", self.p_command_list_debug_namea),
            )
            .field(
                "p_command_list_debug_namew",
                &format_args!("{:?}", self.p_command_list_debug_namew),
            )
            .field(
                "p_command_queue_debug_namea",
                &format_args!("{:?}", self.p_command_queue_debug_namea),
            )
            .field(
                "p_command_queue_debug_namew",
                &format_args!("{:?}", self.p_command_queue_debug_namew),
            )
            .field("p_command_list", &format_args!("{:?}", self.p_command_list))
            .field(
                "p_command_queue",
                &format_args!("{:?}", self.p_command_queue),
            )
            .field(
                "breadcrumb_count",
                &format_args!("{:?}", self.breadcrumb_count),
            )
            .field(
                "p_last_breadcrumb_value",
                &format_args!("{:?}", self.p_last_breadcrumb_value),
            )
            .field(
                "p_command_history",
                &format_args!("{:?}", self.p_command_history),
            )
            .field("p_next", &format_args!("{:?}", self.p_next))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_AUTO_BREADCRUMB_NODE {
    fn clone(&self) -> Self {
        Self {
            p_command_list_debug_namea: self.p_command_list_debug_namea,
            p_command_list_debug_namew: self.p_command_list_debug_namew,
            p_command_queue_debug_namea: self.p_command_queue_debug_namea,
            p_command_queue_debug_namew: self.p_command_queue_debug_namew,
            p_command_list:
                <::std::option::Option<ID3D12GraphicsCommandList> as std::clone::Clone>::clone(
                    &self.p_command_list,
                ),
            p_command_queue:
                <::std::option::Option<ID3D12CommandQueue> as std::clone::Clone>::clone(
                    &self.p_command_queue,
                ),
            breadcrumb_count: self.breadcrumb_count,
            p_last_breadcrumb_value: self.p_last_breadcrumb_value,
            p_command_history: self.p_command_history,
            p_next: <*mut D3D12_AUTO_BREADCRUMB_NODE as std::clone::Clone>::clone(&self.p_next),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_AUTO_BREADCRUMB_NODE {
    fn eq(&self, other: &Self) -> bool {
        self.p_command_list_debug_namea == other.p_command_list_debug_namea
            && self.p_command_list_debug_namew == other.p_command_list_debug_namew
            && self.p_command_queue_debug_namea == other.p_command_queue_debug_namea
            && self.p_command_queue_debug_namew == other.p_command_queue_debug_namew
            && self.p_command_list == other.p_command_list
            && self.p_command_queue == other.p_command_queue
            && self.breadcrumb_count == other.breadcrumb_count
            && self.p_last_breadcrumb_value == other.p_last_breadcrumb_value
            && self.p_command_history == other.p_command_history
            && self.p_next == other.p_next
    }
}
impl ::std::cmp::Eq for D3D12_AUTO_BREADCRUMB_NODE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DRED_BREADCRUMB_CONTEXT {
    pub breadcrumb_index: u32,
    pub p_context_string: *mut u16,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DRED_BREADCRUMB_CONTEXT_abi(u32, *mut u16);
impl D3D12_DRED_BREADCRUMB_CONTEXT {}
unsafe impl ::windows::Abi for D3D12_DRED_BREADCRUMB_CONTEXT {
    type Abi = D3D12_DRED_BREADCRUMB_CONTEXT_abi;
}
impl ::std::default::Default for D3D12_DRED_BREADCRUMB_CONTEXT {
    fn default() -> Self {
        Self {
            breadcrumb_index: 0,
            p_context_string: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DRED_BREADCRUMB_CONTEXT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DRED_BREADCRUMB_CONTEXT")
            .field(
                "breadcrumb_index",
                &format_args!("{:?}", self.breadcrumb_index),
            )
            .field(
                "p_context_string",
                &format_args!("{:?}", self.p_context_string),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DRED_BREADCRUMB_CONTEXT {
    fn clone(&self) -> Self {
        Self {
            breadcrumb_index: self.breadcrumb_index,
            p_context_string: self.p_context_string,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_BREADCRUMB_CONTEXT {
    fn eq(&self, other: &Self) -> bool {
        self.breadcrumb_index == other.breadcrumb_index
            && self.p_context_string == other.p_context_string
    }
}
impl ::std::cmp::Eq for D3D12_DRED_BREADCRUMB_CONTEXT {}
impl ::std::marker::Copy for D3D12_DRED_BREADCRUMB_CONTEXT {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_AUTO_BREADCRUMB_NODE1 {
    pub p_command_list_debug_namea: *mut i8,
    pub p_command_list_debug_namew: *mut u16,
    pub p_command_queue_debug_namea: *mut i8,
    pub p_command_queue_debug_namew: *mut u16,
    pub p_command_list: ::std::option::Option<ID3D12GraphicsCommandList>,
    pub p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
    pub breadcrumb_count: u32,
    pub p_last_breadcrumb_value: *mut u32,
    pub p_command_history: *mut D3D12_AUTO_BREADCRUMB_OP,
    pub p_next: *mut D3D12_AUTO_BREADCRUMB_NODE1,
    pub breadcrumb_contexts_count: u32,
    pub p_breadcrumb_contexts: *mut D3D12_DRED_BREADCRUMB_CONTEXT,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_AUTO_BREADCRUMB_NODE1_abi(
    *mut i8,
    *mut u16,
    *mut i8,
    *mut u16,
    ::windows::RawPtr,
    ::windows::RawPtr,
    u32,
    *mut u32,
    *mut D3D12_AUTO_BREADCRUMB_OP,
    *mut D3D12_AUTO_BREADCRUMB_NODE1_abi,
    u32,
    *mut D3D12_DRED_BREADCRUMB_CONTEXT_abi,
);
impl D3D12_AUTO_BREADCRUMB_NODE1 {}
unsafe impl ::windows::Abi for D3D12_AUTO_BREADCRUMB_NODE1 {
    type Abi = D3D12_AUTO_BREADCRUMB_NODE1_abi;
}
impl ::std::default::Default for D3D12_AUTO_BREADCRUMB_NODE1 {
    fn default() -> Self {
        Self {
            p_command_list_debug_namea: ::std::ptr::null_mut(),
            p_command_list_debug_namew: ::std::ptr::null_mut(),
            p_command_queue_debug_namea: ::std::ptr::null_mut(),
            p_command_queue_debug_namew: ::std::ptr::null_mut(),
            p_command_list: ::std::default::Default::default(),
            p_command_queue: ::std::default::Default::default(),
            breadcrumb_count: 0,
            p_last_breadcrumb_value: ::std::ptr::null_mut(),
            p_command_history: ::std::ptr::null_mut(),
            p_next: ::std::ptr::null_mut(),
            breadcrumb_contexts_count: 0,
            p_breadcrumb_contexts: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_AUTO_BREADCRUMB_NODE1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_AUTO_BREADCRUMB_NODE1")
            .field(
                "p_command_list_debug_namea",
                &format_args!("{:?}", self.p_command_list_debug_namea),
            )
            .field(
                "p_command_list_debug_namew",
                &format_args!("{:?}", self.p_command_list_debug_namew),
            )
            .field(
                "p_command_queue_debug_namea",
                &format_args!("{:?}", self.p_command_queue_debug_namea),
            )
            .field(
                "p_command_queue_debug_namew",
                &format_args!("{:?}", self.p_command_queue_debug_namew),
            )
            .field("p_command_list", &format_args!("{:?}", self.p_command_list))
            .field(
                "p_command_queue",
                &format_args!("{:?}", self.p_command_queue),
            )
            .field(
                "breadcrumb_count",
                &format_args!("{:?}", self.breadcrumb_count),
            )
            .field(
                "p_last_breadcrumb_value",
                &format_args!("{:?}", self.p_last_breadcrumb_value),
            )
            .field(
                "p_command_history",
                &format_args!("{:?}", self.p_command_history),
            )
            .field("p_next", &format_args!("{:?}", self.p_next))
            .field(
                "breadcrumb_contexts_count",
                &format_args!("{:?}", self.breadcrumb_contexts_count),
            )
            .field(
                "p_breadcrumb_contexts",
                &format_args!("{:?}", self.p_breadcrumb_contexts),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_AUTO_BREADCRUMB_NODE1 {
    fn clone(&self) -> Self {
        Self {
            p_command_list_debug_namea: self.p_command_list_debug_namea,
            p_command_list_debug_namew: self.p_command_list_debug_namew,
            p_command_queue_debug_namea: self.p_command_queue_debug_namea,
            p_command_queue_debug_namew: self.p_command_queue_debug_namew,
            p_command_list:
                <::std::option::Option<ID3D12GraphicsCommandList> as std::clone::Clone>::clone(
                    &self.p_command_list,
                ),
            p_command_queue:
                <::std::option::Option<ID3D12CommandQueue> as std::clone::Clone>::clone(
                    &self.p_command_queue,
                ),
            breadcrumb_count: self.breadcrumb_count,
            p_last_breadcrumb_value: self.p_last_breadcrumb_value,
            p_command_history: self.p_command_history,
            p_next: <*mut D3D12_AUTO_BREADCRUMB_NODE1 as std::clone::Clone>::clone(&self.p_next),
            breadcrumb_contexts_count: self.breadcrumb_contexts_count,
            p_breadcrumb_contexts: <*mut D3D12_DRED_BREADCRUMB_CONTEXT as std::clone::Clone>::clone(
                &self.p_breadcrumb_contexts,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_AUTO_BREADCRUMB_NODE1 {
    fn eq(&self, other: &Self) -> bool {
        self.p_command_list_debug_namea == other.p_command_list_debug_namea
            && self.p_command_list_debug_namew == other.p_command_list_debug_namew
            && self.p_command_queue_debug_namea == other.p_command_queue_debug_namea
            && self.p_command_queue_debug_namew == other.p_command_queue_debug_namew
            && self.p_command_list == other.p_command_list
            && self.p_command_queue == other.p_command_queue
            && self.breadcrumb_count == other.breadcrumb_count
            && self.p_last_breadcrumb_value == other.p_last_breadcrumb_value
            && self.p_command_history == other.p_command_history
            && self.p_next == other.p_next
            && self.breadcrumb_contexts_count == other.breadcrumb_contexts_count
            && self.p_breadcrumb_contexts == other.p_breadcrumb_contexts
    }
}
impl ::std::cmp::Eq for D3D12_AUTO_BREADCRUMB_NODE1 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_AXIS_SHADING_RATE(pub i32);
impl ::std::convert::From<i32> for D3D12_AXIS_SHADING_RATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_AXIS_SHADING_RATE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_AXIS_SHADING_RATE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_AXIS_SHADING_RATE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_AXIS_SHADING_RATE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_AXIS_SHADING_RATE {}
impl ::std::marker::Copy for D3D12_AXIS_SHADING_RATE {}
impl D3D12_AXIS_SHADING_RATE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_AXIS_SHADING_RATE_1X: Self = Self(0i32);
    pub const D3D12_AXIS_SHADING_RATE_2X: Self = Self(1i32);
    pub const D3D12_AXIS_SHADING_RATE_4X: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_AXIS_SHADING_RATE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_BACKGROUND_PROCESSING_MODE(pub i32);
impl ::std::convert::From<i32> for D3D12_BACKGROUND_PROCESSING_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_BACKGROUND_PROCESSING_MODE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_BACKGROUND_PROCESSING_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_BACKGROUND_PROCESSING_MODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_BACKGROUND_PROCESSING_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_BACKGROUND_PROCESSING_MODE {}
impl ::std::marker::Copy for D3D12_BACKGROUND_PROCESSING_MODE {}
impl D3D12_BACKGROUND_PROCESSING_MODE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED: Self = Self(0i32);
    pub const D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS: Self = Self(1i32);
    pub const D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK: Self = Self(2i32);
    pub const D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_BACKGROUND_PROCESSING_MODE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_BLEND(pub i32);
impl ::std::convert::From<i32> for D3D12_BLEND {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_BLEND {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_BLEND {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_BLEND {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_BLEND {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_BLEND {}
impl ::std::marker::Copy for D3D12_BLEND {}
impl D3D12_BLEND {
    #![allow(non_upper_case_globals)]
    pub const D3D12_BLEND_ZERO: Self = Self(1i32);
    pub const D3D12_BLEND_ONE: Self = Self(2i32);
    pub const D3D12_BLEND_SRC_COLOR: Self = Self(3i32);
    pub const D3D12_BLEND_INV_SRC_COLOR: Self = Self(4i32);
    pub const D3D12_BLEND_SRC_ALPHA: Self = Self(5i32);
    pub const D3D12_BLEND_INV_SRC_ALPHA: Self = Self(6i32);
    pub const D3D12_BLEND_DEST_ALPHA: Self = Self(7i32);
    pub const D3D12_BLEND_INV_DEST_ALPHA: Self = Self(8i32);
    pub const D3D12_BLEND_DEST_COLOR: Self = Self(9i32);
    pub const D3D12_BLEND_INV_DEST_COLOR: Self = Self(10i32);
    pub const D3D12_BLEND_SRC_ALPHA_SAT: Self = Self(11i32);
    pub const D3D12_BLEND_BLEND_FACTOR: Self = Self(14i32);
    pub const D3D12_BLEND_INV_BLEND_FACTOR: Self = Self(15i32);
    pub const D3D12_BLEND_SRC1_COLOR: Self = Self(16i32);
    pub const D3D12_BLEND_INV_SRC1_COLOR: Self = Self(17i32);
    pub const D3D12_BLEND_SRC1_ALPHA: Self = Self(18i32);
    pub const D3D12_BLEND_INV_SRC1_ALPHA: Self = Self(19i32);
}
unsafe impl ::windows::Abi for D3D12_BLEND {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_BLEND_OP(pub i32);
impl ::std::convert::From<i32> for D3D12_BLEND_OP {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_BLEND_OP {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_BLEND_OP {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_BLEND_OP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_BLEND_OP {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_BLEND_OP {}
impl ::std::marker::Copy for D3D12_BLEND_OP {}
impl D3D12_BLEND_OP {
    #![allow(non_upper_case_globals)]
    pub const D3D12_BLEND_OP_ADD: Self = Self(1i32);
    pub const D3D12_BLEND_OP_SUBTRACT: Self = Self(2i32);
    pub const D3D12_BLEND_OP_REV_SUBTRACT: Self = Self(3i32);
    pub const D3D12_BLEND_OP_MIN: Self = Self(4i32);
    pub const D3D12_BLEND_OP_MAX: Self = Self(5i32);
}
unsafe impl ::windows::Abi for D3D12_BLEND_OP {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_LOGIC_OP(pub i32);
impl ::std::convert::From<i32> for D3D12_LOGIC_OP {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_LOGIC_OP {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_LOGIC_OP {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_LOGIC_OP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_LOGIC_OP {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_LOGIC_OP {}
impl ::std::marker::Copy for D3D12_LOGIC_OP {}
impl D3D12_LOGIC_OP {
    #![allow(non_upper_case_globals)]
    pub const D3D12_LOGIC_OP_CLEAR: Self = Self(0i32);
    pub const D3D12_LOGIC_OP_SET: Self = Self(1i32);
    pub const D3D12_LOGIC_OP_COPY: Self = Self(2i32);
    pub const D3D12_LOGIC_OP_COPY_INVERTED: Self = Self(3i32);
    pub const D3D12_LOGIC_OP_NOOP: Self = Self(4i32);
    pub const D3D12_LOGIC_OP_INVERT: Self = Self(5i32);
    pub const D3D12_LOGIC_OP_AND: Self = Self(6i32);
    pub const D3D12_LOGIC_OP_NAND: Self = Self(7i32);
    pub const D3D12_LOGIC_OP_OR: Self = Self(8i32);
    pub const D3D12_LOGIC_OP_NOR: Self = Self(9i32);
    pub const D3D12_LOGIC_OP_XOR: Self = Self(10i32);
    pub const D3D12_LOGIC_OP_EQUIV: Self = Self(11i32);
    pub const D3D12_LOGIC_OP_AND_REVERSE: Self = Self(12i32);
    pub const D3D12_LOGIC_OP_AND_INVERTED: Self = Self(13i32);
    pub const D3D12_LOGIC_OP_OR_REVERSE: Self = Self(14i32);
    pub const D3D12_LOGIC_OP_OR_INVERTED: Self = Self(15i32);
}
unsafe impl ::windows::Abi for D3D12_LOGIC_OP {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RENDER_TARGET_BLEND_DESC {
    pub blend_enable: ::windows::BOOL,
    pub logic_op_enable: ::windows::BOOL,
    pub src_blend: D3D12_BLEND,
    pub dest_blend: D3D12_BLEND,
    pub blend_op: D3D12_BLEND_OP,
    pub src_blend_alpha: D3D12_BLEND,
    pub dest_blend_alpha: D3D12_BLEND,
    pub blend_op_alpha: D3D12_BLEND_OP,
    pub logic_op: D3D12_LOGIC_OP,
    pub render_target_write_mask: u8,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RENDER_TARGET_BLEND_DESC_abi(
    ::windows::BOOL,
    ::windows::BOOL,
    D3D12_BLEND,
    D3D12_BLEND,
    D3D12_BLEND_OP,
    D3D12_BLEND,
    D3D12_BLEND,
    D3D12_BLEND_OP,
    D3D12_LOGIC_OP,
    u8,
);
impl D3D12_RENDER_TARGET_BLEND_DESC {}
unsafe impl ::windows::Abi for D3D12_RENDER_TARGET_BLEND_DESC {
    type Abi = D3D12_RENDER_TARGET_BLEND_DESC_abi;
}
impl ::std::default::Default for D3D12_RENDER_TARGET_BLEND_DESC {
    fn default() -> Self {
        Self {
            blend_enable: ::std::default::Default::default(),
            logic_op_enable: ::std::default::Default::default(),
            src_blend: ::std::default::Default::default(),
            dest_blend: ::std::default::Default::default(),
            blend_op: ::std::default::Default::default(),
            src_blend_alpha: ::std::default::Default::default(),
            dest_blend_alpha: ::std::default::Default::default(),
            blend_op_alpha: ::std::default::Default::default(),
            logic_op: ::std::default::Default::default(),
            render_target_write_mask: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_TARGET_BLEND_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RENDER_TARGET_BLEND_DESC")
            .field("blend_enable", &format_args!("{:?}", self.blend_enable))
            .field(
                "logic_op_enable",
                &format_args!("{:?}", self.logic_op_enable),
            )
            .field("src_blend", &format_args!("{:?}", self.src_blend))
            .field("dest_blend", &format_args!("{:?}", self.dest_blend))
            .field("blend_op", &format_args!("{:?}", self.blend_op))
            .field(
                "src_blend_alpha",
                &format_args!("{:?}", self.src_blend_alpha),
            )
            .field(
                "dest_blend_alpha",
                &format_args!("{:?}", self.dest_blend_alpha),
            )
            .field("blend_op_alpha", &format_args!("{:?}", self.blend_op_alpha))
            .field("logic_op", &format_args!("{:?}", self.logic_op))
            .field(
                "render_target_write_mask",
                &format_args!("{:?}", self.render_target_write_mask),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RENDER_TARGET_BLEND_DESC {
    fn clone(&self) -> Self {
        Self {
            blend_enable: <::windows::BOOL as std::clone::Clone>::clone(&self.blend_enable),
            logic_op_enable: <::windows::BOOL as std::clone::Clone>::clone(&self.logic_op_enable),
            src_blend: self.src_blend,
            dest_blend: self.dest_blend,
            blend_op: self.blend_op,
            src_blend_alpha: self.src_blend_alpha,
            dest_blend_alpha: self.dest_blend_alpha,
            blend_op_alpha: self.blend_op_alpha,
            logic_op: self.logic_op,
            render_target_write_mask: self.render_target_write_mask,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_TARGET_BLEND_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.blend_enable == other.blend_enable
            && self.logic_op_enable == other.logic_op_enable
            && self.src_blend == other.src_blend
            && self.dest_blend == other.dest_blend
            && self.blend_op == other.blend_op
            && self.src_blend_alpha == other.src_blend_alpha
            && self.dest_blend_alpha == other.dest_blend_alpha
            && self.blend_op_alpha == other.blend_op_alpha
            && self.logic_op == other.logic_op
            && self.render_target_write_mask == other.render_target_write_mask
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_TARGET_BLEND_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_BLEND_DESC {
    pub alpha_to_coverage_enable: ::windows::BOOL,
    pub independent_blend_enable: ::windows::BOOL,
    pub render_target: [D3D12_RENDER_TARGET_BLEND_DESC; 8usize],
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_BLEND_DESC_abi(
    ::windows::BOOL,
    ::windows::BOOL,
    [D3D12_RENDER_TARGET_BLEND_DESC_abi; 8usize],
);
impl D3D12_BLEND_DESC {}
unsafe impl ::windows::Abi for D3D12_BLEND_DESC {
    type Abi = D3D12_BLEND_DESC_abi;
}
impl ::std::default::Default for D3D12_BLEND_DESC {
    fn default() -> Self {
        Self {
            alpha_to_coverage_enable: ::std::default::Default::default(),
            independent_blend_enable: ::std::default::Default::default(),
            render_target: [
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
            ],
        }
    }
}
impl ::std::fmt::Debug for D3D12_BLEND_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_BLEND_DESC")
            .field(
                "alpha_to_coverage_enable",
                &format_args!("{:?}", self.alpha_to_coverage_enable),
            )
            .field(
                "independent_blend_enable",
                &format_args!("{:?}", self.independent_blend_enable),
            )
            .field("render_target", &format_args!("{:?}", self.render_target))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_BLEND_DESC {
    fn clone(&self) -> Self {
        Self {
            alpha_to_coverage_enable: <::windows::BOOL as std::clone::Clone>::clone(
                &self.alpha_to_coverage_enable,
            ),
            independent_blend_enable: <::windows::BOOL as std::clone::Clone>::clone(
                &self.independent_blend_enable,
            ),
            render_target: <[D3D12_RENDER_TARGET_BLEND_DESC; 8usize] as std::clone::Clone>::clone(
                &self.render_target,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_BLEND_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.alpha_to_coverage_enable == other.alpha_to_coverage_enable
            && self.independent_blend_enable == other.independent_blend_enable
            && self.render_target == other.render_target
    }
}
impl ::std::cmp::Eq for D3D12_BLEND_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_BUFFER_RTV {
    pub first_element: u64,
    pub num_elements: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_BUFFER_RTV_abi(u64, u32);
impl D3D12_BUFFER_RTV {}
unsafe impl ::windows::Abi for D3D12_BUFFER_RTV {
    type Abi = D3D12_BUFFER_RTV_abi;
}
impl ::std::default::Default for D3D12_BUFFER_RTV {
    fn default() -> Self {
        Self {
            first_element: 0,
            num_elements: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_BUFFER_RTV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_BUFFER_RTV")
            .field("first_element", &format_args!("{:?}", self.first_element))
            .field("num_elements", &format_args!("{:?}", self.num_elements))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_BUFFER_RTV {
    fn clone(&self) -> Self {
        Self {
            first_element: self.first_element,
            num_elements: self.num_elements,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_BUFFER_RTV {
    fn eq(&self, other: &Self) -> bool {
        self.first_element == other.first_element && self.num_elements == other.num_elements
    }
}
impl ::std::cmp::Eq for D3D12_BUFFER_RTV {}
impl ::std::marker::Copy for D3D12_BUFFER_RTV {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_BUFFER_SRV_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_BUFFER_SRV_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_BUFFER_SRV_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_BUFFER_SRV_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_BUFFER_SRV_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_BUFFER_SRV_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_BUFFER_SRV_FLAGS {}
impl ::std::marker::Copy for D3D12_BUFFER_SRV_FLAGS {}
impl D3D12_BUFFER_SRV_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_BUFFER_SRV_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_BUFFER_SRV_FLAG_RAW: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_BUFFER_SRV_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_BUFFER_SRV {
    pub first_element: u64,
    pub num_elements: u32,
    pub structure_byte_stride: u32,
    pub flags: D3D12_BUFFER_SRV_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_BUFFER_SRV_abi(u64, u32, u32, D3D12_BUFFER_SRV_FLAGS);
impl D3D12_BUFFER_SRV {}
unsafe impl ::windows::Abi for D3D12_BUFFER_SRV {
    type Abi = D3D12_BUFFER_SRV_abi;
}
impl ::std::default::Default for D3D12_BUFFER_SRV {
    fn default() -> Self {
        Self {
            first_element: 0,
            num_elements: 0,
            structure_byte_stride: 0,
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_BUFFER_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_BUFFER_SRV")
            .field("first_element", &format_args!("{:?}", self.first_element))
            .field("num_elements", &format_args!("{:?}", self.num_elements))
            .field(
                "structure_byte_stride",
                &format_args!("{:?}", self.structure_byte_stride),
            )
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_BUFFER_SRV {
    fn clone(&self) -> Self {
        Self {
            first_element: self.first_element,
            num_elements: self.num_elements,
            structure_byte_stride: self.structure_byte_stride,
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_BUFFER_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.first_element == other.first_element
            && self.num_elements == other.num_elements
            && self.structure_byte_stride == other.structure_byte_stride
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_BUFFER_SRV {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_BUFFER_UAV_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_BUFFER_UAV_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_BUFFER_UAV_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_BUFFER_UAV_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_BUFFER_UAV_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_BUFFER_UAV_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_BUFFER_UAV_FLAGS {}
impl ::std::marker::Copy for D3D12_BUFFER_UAV_FLAGS {}
impl D3D12_BUFFER_UAV_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_BUFFER_UAV_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_BUFFER_UAV_FLAG_RAW: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_BUFFER_UAV_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_BUFFER_UAV {
    pub first_element: u64,
    pub num_elements: u32,
    pub structure_byte_stride: u32,
    pub counter_offset_in_bytes: u64,
    pub flags: D3D12_BUFFER_UAV_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_BUFFER_UAV_abi(u64, u32, u32, u64, D3D12_BUFFER_UAV_FLAGS);
impl D3D12_BUFFER_UAV {}
unsafe impl ::windows::Abi for D3D12_BUFFER_UAV {
    type Abi = D3D12_BUFFER_UAV_abi;
}
impl ::std::default::Default for D3D12_BUFFER_UAV {
    fn default() -> Self {
        Self {
            first_element: 0,
            num_elements: 0,
            structure_byte_stride: 0,
            counter_offset_in_bytes: 0,
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_BUFFER_UAV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_BUFFER_UAV")
            .field("first_element", &format_args!("{:?}", self.first_element))
            .field("num_elements", &format_args!("{:?}", self.num_elements))
            .field(
                "structure_byte_stride",
                &format_args!("{:?}", self.structure_byte_stride),
            )
            .field(
                "counter_offset_in_bytes",
                &format_args!("{:?}", self.counter_offset_in_bytes),
            )
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_BUFFER_UAV {
    fn clone(&self) -> Self {
        Self {
            first_element: self.first_element,
            num_elements: self.num_elements,
            structure_byte_stride: self.structure_byte_stride,
            counter_offset_in_bytes: self.counter_offset_in_bytes,
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_BUFFER_UAV {
    fn eq(&self, other: &Self) -> bool {
        self.first_element == other.first_element
            && self.num_elements == other.num_elements
            && self.structure_byte_stride == other.structure_byte_stride
            && self.counter_offset_in_bytes == other.counter_offset_in_bytes
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_BUFFER_UAV {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {}
impl ::std::marker::Copy for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {}
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL: Self = Self(0i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {}
impl ::std::marker::Copy for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {}
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE: Self = Self(1i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION: Self =
        Self(2i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE: Self =
        Self(4i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD: Self =
        Self(8i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY: Self =
        Self(16i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE: Self = Self(32i32);
}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_ELEMENTS_LAYOUT(pub i32);
impl ::std::convert::From<i32> for D3D12_ELEMENTS_LAYOUT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_ELEMENTS_LAYOUT {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_ELEMENTS_LAYOUT {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_ELEMENTS_LAYOUT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_ELEMENTS_LAYOUT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_ELEMENTS_LAYOUT {}
impl ::std::marker::Copy for D3D12_ELEMENTS_LAYOUT {}
impl D3D12_ELEMENTS_LAYOUT {
    #![allow(non_upper_case_globals)]
    pub const D3D12_ELEMENTS_LAYOUT_ARRAY: Self = Self(0i32);
    pub const D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_ELEMENTS_LAYOUT {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAYTRACING_GEOMETRY_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_RAYTRACING_GEOMETRY_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_GEOMETRY_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAYTRACING_GEOMETRY_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_GEOMETRY_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_GEOMETRY_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_GEOMETRY_TYPE {}
impl ::std::marker::Copy for D3D12_RAYTRACING_GEOMETRY_TYPE {}
impl D3D12_RAYTRACING_GEOMETRY_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES: Self = Self(0i32);
    pub const D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_GEOMETRY_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAYTRACING_GEOMETRY_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RAYTRACING_GEOMETRY_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_GEOMETRY_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAYTRACING_GEOMETRY_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_GEOMETRY_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_GEOMETRY_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_GEOMETRY_FLAGS {}
impl ::std::marker::Copy for D3D12_RAYTRACING_GEOMETRY_FLAGS {}
impl D3D12_RAYTRACING_GEOMETRY_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAYTRACING_GEOMETRY_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE: Self = Self(1i32);
    pub const D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_GEOMETRY_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {
    pub start_address: u64,
    pub stride_in_bytes: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE_abi(u64, u64);
impl D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {}
unsafe impl ::windows::Abi for D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {
    type Abi = D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE_abi;
}
impl ::std::default::Default for D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {
    fn default() -> Self {
        Self {
            start_address: 0,
            stride_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE")
            .field("start_address", &format_args!("{:?}", self.start_address))
            .field(
                "stride_in_bytes",
                &format_args!("{:?}", self.stride_in_bytes),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {
    fn clone(&self) -> Self {
        Self {
            start_address: self.start_address,
            stride_in_bytes: self.stride_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {
    fn eq(&self, other: &Self) -> bool {
        self.start_address == other.start_address && self.stride_in_bytes == other.stride_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {}
impl ::std::marker::Copy for D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {
    pub transform3x4: u64,
    pub index_format: super::dxgi::DXGI_FORMAT,
    pub vertex_format: super::dxgi::DXGI_FORMAT,
    pub index_count: u32,
    pub vertex_count: u32,
    pub index_buffer: u64,
    pub vertex_buffer: D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC_abi(
    u64,
    super::dxgi::DXGI_FORMAT,
    super::dxgi::DXGI_FORMAT,
    u32,
    u32,
    u64,
    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE_abi,
);
impl D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {
    type Abi = D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {
    fn default() -> Self {
        Self {
            transform3x4: 0,
            index_format: ::std::default::Default::default(),
            vertex_format: ::std::default::Default::default(),
            index_count: 0,
            vertex_count: 0,
            index_buffer: 0,
            vertex_buffer: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC")
            .field("transform3x4", &format_args!("{:?}", self.transform3x4))
            .field("index_format", &format_args!("{:?}", self.index_format))
            .field("vertex_format", &format_args!("{:?}", self.vertex_format))
            .field("index_count", &format_args!("{:?}", self.index_count))
            .field("vertex_count", &format_args!("{:?}", self.vertex_count))
            .field("index_buffer", &format_args!("{:?}", self.index_buffer))
            .field("vertex_buffer", &format_args!("{:?}", self.vertex_buffer))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {
    fn clone(&self) -> Self {
        Self {
            transform3x4: self.transform3x4,
            index_format: self.index_format,
            vertex_format: self.vertex_format,
            index_count: self.index_count,
            vertex_count: self.vertex_count,
            index_buffer: self.index_buffer,
            vertex_buffer: <D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE as std::clone::Clone>::clone(
                &self.vertex_buffer,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.transform3x4 == other.transform3x4
            && self.index_format == other.index_format
            && self.vertex_format == other.vertex_format
            && self.index_count == other.index_count
            && self.vertex_count == other.vertex_count
            && self.index_buffer == other.index_buffer
            && self.vertex_buffer == other.vertex_buffer
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {
    pub aabb_count: u64,
    pub aab_bs: D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC_abi(u64, D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE_abi);
impl D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {
    type Abi = D3D12_RAYTRACING_GEOMETRY_AABBS_DESC_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {
    fn default() -> Self {
        Self {
            aabb_count: 0,
            aab_bs: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_GEOMETRY_AABBS_DESC")
            .field("aabb_count", &format_args!("{:?}", self.aabb_count))
            .field("aab_bs", &format_args!("{:?}", self.aab_bs))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {
    fn clone(&self) -> Self {
        Self {
            aabb_count: self.aabb_count,
            aab_bs: <D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE as std::clone::Clone>::clone(
                &self.aab_bs,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.aabb_count == other.aabb_count && self.aab_bs == other.aab_bs
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_GEOMETRY_DESC {
    pub r#type: D3D12_RAYTRACING_GEOMETRY_TYPE,
    pub flags: D3D12_RAYTRACING_GEOMETRY_FLAGS,
    pub anonymous: D3D12_RAYTRACING_GEOMETRY_DESC_0,
}
impl D3D12_RAYTRACING_GEOMETRY_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_RAYTRACING_GEOMETRY_DESC_0 {
    pub triangles: D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC,
    pub aab_bs: D3D12_RAYTRACING_GEOMETRY_AABBS_DESC,
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS {
    pub r#type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE,
    pub flags: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS,
    pub num_descs: u32,
    pub descs_layout: D3D12_ELEMENTS_LAYOUT,
    pub anonymous: D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS_0,
}
impl D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS_0 {
    pub instance_descs: u64,
    pub p_geometry_descs: *mut D3D12_RAYTRACING_GEOMETRY_DESC,
    pub pp_geometry_descs: *mut *mut D3D12_RAYTRACING_GEOMETRY_DESC,
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {
    pub dest_acceleration_structure_data: u64,
    pub inputs: D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
    pub source_acceleration_structure_data: u64,
    pub scratch_acceleration_structure_data: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC_abi(
    u64,
    D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS_abi,
    u64,
    u64,
);
impl D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {}
unsafe impl ::windows::Abi for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {
    type Abi = D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC_abi;
}
impl ::std::default::Default for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {
    fn default() -> Self {
        Self {
            dest_acceleration_structure_data: 0,
            inputs: ::std::default::Default::default(),
            source_acceleration_structure_data: 0,
            scratch_acceleration_structure_data: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC")
            .field(
                "dest_acceleration_structure_data",
                &format_args!("{:?}", self.dest_acceleration_structure_data),
            )
            .field("inputs", &format_args!("{:?}", self.inputs))
            .field(
                "source_acceleration_structure_data",
                &format_args!("{:?}", self.source_acceleration_structure_data),
            )
            .field(
                "scratch_acceleration_structure_data",
                &format_args!("{:?}", self.scratch_acceleration_structure_data),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {
    fn clone(&self) -> Self {
        Self {
            dest_acceleration_structure_data: self.dest_acceleration_structure_data,
            inputs:
                <D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS as std::clone::Clone>::clone(
                    &self.inputs,
                ),
            source_acceleration_structure_data: self.source_acceleration_structure_data,
            scratch_acceleration_structure_data: self.scratch_acceleration_structure_data,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.dest_acceleration_structure_data == other.dest_acceleration_structure_data
            && self.inputs == other.inputs
            && self.source_acceleration_structure_data == other.source_acceleration_structure_data
            && self.scratch_acceleration_structure_data == other.scratch_acceleration_structure_data
    }
}
impl ::std::cmp::Eq for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER {
    pub r#type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE,
    pub num_descs: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER_abi(
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE,
    u32,
);
impl D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER {}
unsafe impl ::windows::Abi
    for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
{
    type Abi = D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER_abi;
}
impl ::std::default::Default
    for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
{
    fn default() -> Self {
        Self {
            r#type: ::std::default::Default::default(),
            num_descs: 0,
        }
    }
}
impl ::std::fmt::Debug
    for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
{
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER")
            .field("type", &format_args!("{:?}", self.r#type))
            .field("num_descs", &format_args!("{:?}", self.num_descs))
            .finish()
    }
}
impl ::std::clone::Clone
    for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
{
    fn clone(&self) -> Self {
        Self {
            r#type: self.r#type,
            num_descs: self.num_descs,
        }
    }
}
impl ::std::cmp::PartialEq
    for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
{
    fn eq(&self, other: &Self) -> bool {
        self.r#type == other.r#type && self.num_descs == other.num_descs
    }
}
impl ::std::cmp::Eq for D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_CACHED_PIPELINE_STATE {
    pub p_cached_blob: *mut ::std::ffi::c_void,
    pub cached_blob_size_in_bytes: usize,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_CACHED_PIPELINE_STATE_abi(*mut ::std::ffi::c_void, usize);
impl D3D12_CACHED_PIPELINE_STATE {}
unsafe impl ::windows::Abi for D3D12_CACHED_PIPELINE_STATE {
    type Abi = D3D12_CACHED_PIPELINE_STATE_abi;
}
impl ::std::default::Default for D3D12_CACHED_PIPELINE_STATE {
    fn default() -> Self {
        Self {
            p_cached_blob: ::std::ptr::null_mut(),
            cached_blob_size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_CACHED_PIPELINE_STATE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_CACHED_PIPELINE_STATE")
            .field("p_cached_blob", &format_args!("{:?}", self.p_cached_blob))
            .field(
                "cached_blob_size_in_bytes",
                &format_args!("{:?}", self.cached_blob_size_in_bytes),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_CACHED_PIPELINE_STATE {
    fn clone(&self) -> Self {
        Self {
            p_cached_blob: <*mut ::std::ffi::c_void as std::clone::Clone>::clone(
                &self.p_cached_blob,
            ),
            cached_blob_size_in_bytes: self.cached_blob_size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_CACHED_PIPELINE_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.p_cached_blob == other.p_cached_blob
            && self.cached_blob_size_in_bytes == other.cached_blob_size_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_CACHED_PIPELINE_STATE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEPTH_STENCIL_VALUE {
    pub depth: f32,
    pub stencil: u8,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEPTH_STENCIL_VALUE_abi(f32, u8);
impl D3D12_DEPTH_STENCIL_VALUE {}
unsafe impl ::windows::Abi for D3D12_DEPTH_STENCIL_VALUE {
    type Abi = D3D12_DEPTH_STENCIL_VALUE_abi;
}
impl ::std::default::Default for D3D12_DEPTH_STENCIL_VALUE {
    fn default() -> Self {
        Self {
            depth: 0.0,
            stencil: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEPTH_STENCIL_VALUE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEPTH_STENCIL_VALUE")
            .field("depth", &format_args!("{:?}", self.depth))
            .field("stencil", &format_args!("{:?}", self.stencil))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEPTH_STENCIL_VALUE {
    fn clone(&self) -> Self {
        Self {
            depth: self.depth,
            stencil: self.stencil,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEPTH_STENCIL_VALUE {
    fn eq(&self, other: &Self) -> bool {
        self.depth == other.depth && self.stencil == other.stencil
    }
}
impl ::std::cmp::Eq for D3D12_DEPTH_STENCIL_VALUE {}
impl ::std::marker::Copy for D3D12_DEPTH_STENCIL_VALUE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_CLEAR_VALUE {
    pub format: super::dxgi::DXGI_FORMAT,
    pub anonymous: D3D12_CLEAR_VALUE_0,
}
impl D3D12_CLEAR_VALUE {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_CLEAR_VALUE_0 {
    pub color: [f32; 4usize],
    pub depth_stencil: D3D12_DEPTH_STENCIL_VALUE,
}
pub const D3D12_CLIP_OR_CULL_DISTANCE_COUNT: u32 = 8u32;
pub const D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT: u32 = 2u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_COLOR_WRITE_ENABLE(pub i32);
impl ::std::convert::From<i32> for D3D12_COLOR_WRITE_ENABLE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_COLOR_WRITE_ENABLE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_COLOR_WRITE_ENABLE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_COLOR_WRITE_ENABLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_COLOR_WRITE_ENABLE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_COLOR_WRITE_ENABLE {}
impl ::std::marker::Copy for D3D12_COLOR_WRITE_ENABLE {}
impl D3D12_COLOR_WRITE_ENABLE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_COLOR_WRITE_ENABLE_RED: Self = Self(1i32);
    pub const D3D12_COLOR_WRITE_ENABLE_GREEN: Self = Self(2i32);
    pub const D3D12_COLOR_WRITE_ENABLE_BLUE: Self = Self(4i32);
    pub const D3D12_COLOR_WRITE_ENABLE_ALPHA: Self = Self(8i32);
    pub const D3D12_COLOR_WRITE_ENABLE_ALL: Self = Self(15i32);
}
unsafe impl ::windows::Abi for D3D12_COLOR_WRITE_ENABLE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_COMMAND_LIST_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_COMMAND_LIST_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_COMMAND_LIST_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_COMMAND_LIST_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_COMMAND_LIST_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_COMMAND_LIST_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_COMMAND_LIST_FLAGS {}
impl ::std::marker::Copy for D3D12_COMMAND_LIST_FLAGS {}
impl D3D12_COMMAND_LIST_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_COMMAND_LIST_FLAG_NONE: Self = Self(0i32);
}
unsafe impl ::windows::Abi for D3D12_COMMAND_LIST_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_COMMAND_LIST_SUPPORT_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_COMMAND_LIST_SUPPORT_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_COMMAND_LIST_SUPPORT_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_COMMAND_LIST_SUPPORT_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_COMMAND_LIST_SUPPORT_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_COMMAND_LIST_SUPPORT_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_COMMAND_LIST_SUPPORT_FLAGS {}
impl ::std::marker::Copy for D3D12_COMMAND_LIST_SUPPORT_FLAGS {}
impl D3D12_COMMAND_LIST_SUPPORT_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT: Self = Self(1i32);
    pub const D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE: Self = Self(2i32);
    pub const D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE: Self = Self(4i32);
    pub const D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY: Self = Self(8i32);
    pub const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE: Self = Self(16i32);
    pub const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS: Self = Self(32i32);
    pub const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE: Self = Self(64i32);
}
unsafe impl ::windows::Abi for D3D12_COMMAND_LIST_SUPPORT_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_COMMAND_POOL_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_COMMAND_POOL_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_COMMAND_POOL_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_COMMAND_POOL_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_COMMAND_POOL_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_COMMAND_POOL_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_COMMAND_POOL_FLAGS {}
impl ::std::marker::Copy for D3D12_COMMAND_POOL_FLAGS {}
impl D3D12_COMMAND_POOL_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_COMMAND_POOL_FLAG_NONE: Self = Self(0i32);
}
unsafe impl ::windows::Abi for D3D12_COMMAND_POOL_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_COMMAND_QUEUE_PRIORITY(pub i32);
impl ::std::convert::From<i32> for D3D12_COMMAND_QUEUE_PRIORITY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_COMMAND_QUEUE_PRIORITY {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_COMMAND_QUEUE_PRIORITY {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_COMMAND_QUEUE_PRIORITY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_COMMAND_QUEUE_PRIORITY {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_COMMAND_QUEUE_PRIORITY {}
impl ::std::marker::Copy for D3D12_COMMAND_QUEUE_PRIORITY {}
impl D3D12_COMMAND_QUEUE_PRIORITY {
    #![allow(non_upper_case_globals)]
    pub const D3D12_COMMAND_QUEUE_PRIORITY_NORMAL: Self = Self(0i32);
    pub const D3D12_COMMAND_QUEUE_PRIORITY_HIGH: Self = Self(100i32);
    pub const D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME: Self = Self(10000i32);
}
unsafe impl ::windows::Abi for D3D12_COMMAND_QUEUE_PRIORITY {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_COMMAND_RECORDER_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_COMMAND_RECORDER_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_COMMAND_RECORDER_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_COMMAND_RECORDER_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_COMMAND_RECORDER_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_COMMAND_RECORDER_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_COMMAND_RECORDER_FLAGS {}
impl ::std::marker::Copy for D3D12_COMMAND_RECORDER_FLAGS {}
impl D3D12_COMMAND_RECORDER_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_COMMAND_RECORDER_FLAG_NONE: Self = Self(0i32);
}
unsafe impl ::windows::Abi for D3D12_COMMAND_RECORDER_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_INDIRECT_ARGUMENT_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_INDIRECT_ARGUMENT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_INDIRECT_ARGUMENT_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_INDIRECT_ARGUMENT_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_INDIRECT_ARGUMENT_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_INDIRECT_ARGUMENT_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_INDIRECT_ARGUMENT_TYPE {}
impl ::std::marker::Copy for D3D12_INDIRECT_ARGUMENT_TYPE {}
impl D3D12_INDIRECT_ARGUMENT_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_DRAW: Self = Self(0i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED: Self = Self(1i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH: Self = Self(2i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW: Self = Self(3i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW: Self = Self(4i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT: Self = Self(5i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW: Self = Self(6i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW: Self = Self(7i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW: Self = Self(8i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS: Self = Self(9i32);
    pub const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH: Self = Self(10i32);
}
unsafe impl ::windows::Abi for D3D12_INDIRECT_ARGUMENT_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_INDIRECT_ARGUMENT_DESC {
    pub r#type: D3D12_INDIRECT_ARGUMENT_TYPE,
    pub anonymous: D3D12_INDIRECT_ARGUMENT_DESC_0,
}
impl D3D12_INDIRECT_ARGUMENT_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_INDIRECT_ARGUMENT_DESC_0 {
    pub vertex_buffer: D3D12_INDIRECT_ARGUMENT_DESC_0_1,
    pub constant: ::windows::NOT_YET_SUPPORTED_TYPE,
    pub constant_buffer_view: ::windows::NOT_YET_SUPPORTED_TYPE,
    pub shader_resource_view: ::windows::NOT_YET_SUPPORTED_TYPE,
    pub unordered_access_view: ::windows::NOT_YET_SUPPORTED_TYPE,
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_INDIRECT_ARGUMENT_DESC_0_1 {
    pub slot: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_INDIRECT_ARGUMENT_DESC_0_1_abi(u32);
impl D3D12_INDIRECT_ARGUMENT_DESC_0_1 {}
unsafe impl ::windows::Abi for D3D12_INDIRECT_ARGUMENT_DESC_0_1 {
    type Abi = D3D12_INDIRECT_ARGUMENT_DESC_0_1_abi;
}
impl ::std::default::Default for D3D12_INDIRECT_ARGUMENT_DESC_0_1 {
    fn default() -> Self {
        Self { slot: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_INDIRECT_ARGUMENT_DESC_0_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_INDIRECT_ARGUMENT_DESC_0_1")
            .field("slot", &format_args!("{:?}", self.slot))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_INDIRECT_ARGUMENT_DESC_0_1 {
    fn clone(&self) -> Self {
        Self { slot: self.slot }
    }
}
impl ::std::cmp::PartialEq for D3D12_INDIRECT_ARGUMENT_DESC_0_1 {
    fn eq(&self, other: &Self) -> bool {
        self.slot == other.slot
    }
}
impl ::std::cmp::Eq for D3D12_INDIRECT_ARGUMENT_DESC_0_1 {}
impl ::std::marker::Copy for D3D12_INDIRECT_ARGUMENT_DESC_0_1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_COMMAND_SIGNATURE_DESC {
    pub byte_stride: u32,
    pub num_argument_descs: u32,
    pub p_argument_descs: *mut D3D12_INDIRECT_ARGUMENT_DESC,
    pub node_mask: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_COMMAND_SIGNATURE_DESC_abi(u32, u32, *mut D3D12_INDIRECT_ARGUMENT_DESC_abi, u32);
impl D3D12_COMMAND_SIGNATURE_DESC {}
unsafe impl ::windows::Abi for D3D12_COMMAND_SIGNATURE_DESC {
    type Abi = D3D12_COMMAND_SIGNATURE_DESC_abi;
}
impl ::std::default::Default for D3D12_COMMAND_SIGNATURE_DESC {
    fn default() -> Self {
        Self {
            byte_stride: 0,
            num_argument_descs: 0,
            p_argument_descs: ::std::ptr::null_mut(),
            node_mask: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_COMMAND_SIGNATURE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_COMMAND_SIGNATURE_DESC")
            .field("byte_stride", &format_args!("{:?}", self.byte_stride))
            .field(
                "num_argument_descs",
                &format_args!("{:?}", self.num_argument_descs),
            )
            .field(
                "p_argument_descs",
                &format_args!("{:?}", self.p_argument_descs),
            )
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_COMMAND_SIGNATURE_DESC {
    fn clone(&self) -> Self {
        Self {
            byte_stride: self.byte_stride,
            num_argument_descs: self.num_argument_descs,
            p_argument_descs: <*mut D3D12_INDIRECT_ARGUMENT_DESC as std::clone::Clone>::clone(
                &self.p_argument_descs,
            ),
            node_mask: self.node_mask,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_COMMAND_SIGNATURE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.byte_stride == other.byte_stride
            && self.num_argument_descs == other.num_argument_descs
            && self.p_argument_descs == other.p_argument_descs
            && self.node_mask == other.node_mask
    }
}
impl ::std::cmp::Eq for D3D12_COMMAND_SIGNATURE_DESC {}
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT: u32 = 14u32;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS: u32 = 4u32;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT: u32 = 15u32;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT: u32 = 16u32;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT: u32 = 15u32;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST: u32 = 1u32;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT: u32 = 64u32;
pub const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST: u32 = 1u32;
pub const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT: u32 = 128u32;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST: u32 = 1u32;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT: u32 = 128u32;
pub const D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT: u32 = 16u32;
pub const D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST: u32 = 1u32;
pub const D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT: u32 = 16u32;
pub const D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT: u32 = 32u32;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_COUNT: u32 = 4096u32;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST: u32 = 3u32;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS: u32 = 3u32;
pub const D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX: u32 = 10u32;
pub const D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN: i32 = -10i32;
pub const D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE: i32 = -8i32;
pub const D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE: u32 = 7u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SHADER_BYTECODE {
    pub p_shader_bytecode: *mut ::std::ffi::c_void,
    pub bytecode_length: usize,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SHADER_BYTECODE_abi(*mut ::std::ffi::c_void, usize);
impl D3D12_SHADER_BYTECODE {}
unsafe impl ::windows::Abi for D3D12_SHADER_BYTECODE {
    type Abi = D3D12_SHADER_BYTECODE_abi;
}
impl ::std::default::Default for D3D12_SHADER_BYTECODE {
    fn default() -> Self {
        Self {
            p_shader_bytecode: ::std::ptr::null_mut(),
            bytecode_length: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_BYTECODE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SHADER_BYTECODE")
            .field(
                "p_shader_bytecode",
                &format_args!("{:?}", self.p_shader_bytecode),
            )
            .field(
                "bytecode_length",
                &format_args!("{:?}", self.bytecode_length),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SHADER_BYTECODE {
    fn clone(&self) -> Self {
        Self {
            p_shader_bytecode: <*mut ::std::ffi::c_void as std::clone::Clone>::clone(
                &self.p_shader_bytecode,
            ),
            bytecode_length: self.bytecode_length,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_BYTECODE {
    fn eq(&self, other: &Self) -> bool {
        self.p_shader_bytecode == other.p_shader_bytecode
            && self.bytecode_length == other.bytecode_length
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_BYTECODE {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_PIPELINE_STATE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_PIPELINE_STATE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_PIPELINE_STATE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_PIPELINE_STATE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_PIPELINE_STATE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_PIPELINE_STATE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_PIPELINE_STATE_FLAGS {}
impl ::std::marker::Copy for D3D12_PIPELINE_STATE_FLAGS {}
impl D3D12_PIPELINE_STATE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_PIPELINE_STATE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_PIPELINE_STATE_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_COMPUTE_PIPELINE_STATE_DESC {
    pub p_root_signature: ::std::option::Option<ID3D12RootSignature>,
    pub cs: D3D12_SHADER_BYTECODE,
    pub node_mask: u32,
    pub cached_pso: D3D12_CACHED_PIPELINE_STATE,
    pub flags: D3D12_PIPELINE_STATE_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_COMPUTE_PIPELINE_STATE_DESC_abi(
    ::windows::RawPtr,
    D3D12_SHADER_BYTECODE_abi,
    u32,
    D3D12_CACHED_PIPELINE_STATE_abi,
    D3D12_PIPELINE_STATE_FLAGS,
);
impl D3D12_COMPUTE_PIPELINE_STATE_DESC {}
unsafe impl ::windows::Abi for D3D12_COMPUTE_PIPELINE_STATE_DESC {
    type Abi = D3D12_COMPUTE_PIPELINE_STATE_DESC_abi;
}
impl ::std::default::Default for D3D12_COMPUTE_PIPELINE_STATE_DESC {
    fn default() -> Self {
        Self {
            p_root_signature: ::std::default::Default::default(),
            cs: ::std::default::Default::default(),
            node_mask: 0,
            cached_pso: ::std::default::Default::default(),
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_COMPUTE_PIPELINE_STATE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_COMPUTE_PIPELINE_STATE_DESC")
            .field(
                "p_root_signature",
                &format_args!("{:?}", self.p_root_signature),
            )
            .field("cs", &format_args!("{:?}", self.cs))
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .field("cached_pso", &format_args!("{:?}", self.cached_pso))
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_COMPUTE_PIPELINE_STATE_DESC {
    fn clone(&self) -> Self {
        Self {
            p_root_signature:
                <::std::option::Option<ID3D12RootSignature> as std::clone::Clone>::clone(
                    &self.p_root_signature,
                ),
            cs: <D3D12_SHADER_BYTECODE as std::clone::Clone>::clone(&self.cs),
            node_mask: self.node_mask,
            cached_pso: <D3D12_CACHED_PIPELINE_STATE as std::clone::Clone>::clone(&self.cached_pso),
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_COMPUTE_PIPELINE_STATE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.p_root_signature == other.p_root_signature
            && self.cs == other.cs
            && self.node_mask == other.node_mask
            && self.cached_pso == other.cached_pso
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_COMPUTE_PIPELINE_STATE_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_CONSERVATIVE_RASTERIZATION_MODE(pub i32);
impl ::std::convert::From<i32> for D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_CONSERVATIVE_RASTERIZATION_MODE {}
impl ::std::marker::Copy for D3D12_CONSERVATIVE_RASTERIZATION_MODE {}
impl D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF: Self = Self(0i32);
    pub const D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_CONSERVATIVE_RASTERIZATION_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_CONSERVATIVE_RASTERIZATION_TIER {}
impl ::std::marker::Copy for D3D12_CONSERVATIVE_RASTERIZATION_TIER {}
impl D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED: Self = Self(0i32);
    pub const D3D12_CONSERVATIVE_RASTERIZATION_TIER_1: Self = Self(1i32);
    pub const D3D12_CONSERVATIVE_RASTERIZATION_TIER_2: Self = Self(2i32);
    pub const D3D12_CONSERVATIVE_RASTERIZATION_TIER_3: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    type Abi = Self;
}
pub const D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT: u32 = 256u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_CONSTANT_BUFFER_VIEW_DESC {
    pub buffer_location: u64,
    pub size_in_bytes: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_CONSTANT_BUFFER_VIEW_DESC_abi(u64, u32);
impl D3D12_CONSTANT_BUFFER_VIEW_DESC {}
unsafe impl ::windows::Abi for D3D12_CONSTANT_BUFFER_VIEW_DESC {
    type Abi = D3D12_CONSTANT_BUFFER_VIEW_DESC_abi;
}
impl ::std::default::Default for D3D12_CONSTANT_BUFFER_VIEW_DESC {
    fn default() -> Self {
        Self {
            buffer_location: 0,
            size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_CONSTANT_BUFFER_VIEW_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_CONSTANT_BUFFER_VIEW_DESC")
            .field(
                "buffer_location",
                &format_args!("{:?}", self.buffer_location),
            )
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_CONSTANT_BUFFER_VIEW_DESC {
    fn clone(&self) -> Self {
        Self {
            buffer_location: self.buffer_location,
            size_in_bytes: self.size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_CONSTANT_BUFFER_VIEW_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.buffer_location == other.buffer_location && self.size_in_bytes == other.size_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_CONSTANT_BUFFER_VIEW_DESC {}
impl ::std::marker::Copy for D3D12_CONSTANT_BUFFER_VIEW_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_CROSS_NODE_SHARING_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_CROSS_NODE_SHARING_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_CROSS_NODE_SHARING_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_CROSS_NODE_SHARING_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_CROSS_NODE_SHARING_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_CROSS_NODE_SHARING_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_CROSS_NODE_SHARING_TIER {}
impl ::std::marker::Copy for D3D12_CROSS_NODE_SHARING_TIER {}
impl D3D12_CROSS_NODE_SHARING_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED: Self = Self(0i32);
    pub const D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED: Self = Self(1i32);
    pub const D3D12_CROSS_NODE_SHARING_TIER_1: Self = Self(2i32);
    pub const D3D12_CROSS_NODE_SHARING_TIER_2: Self = Self(3i32);
    pub const D3D12_CROSS_NODE_SHARING_TIER_3: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_CROSS_NODE_SHARING_TIER {
    type Abi = Self;
}
pub const D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 256u32;
pub const D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP: u32 = 64u32;
pub const D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 240u32;
pub const D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP: u32 = 68u32;
pub const D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 224u32;
pub const D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP: u32 = 72u32;
pub const D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 208u32;
pub const D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP: u32 = 76u32;
pub const D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 192u32;
pub const D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP: u32 = 84u32;
pub const D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 176u32;
pub const D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP: u32 = 92u32;
pub const D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 160u32;
pub const D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP: u32 = 100u32;
pub const D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 144u32;
pub const D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP: u32 = 112u32;
pub const D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 128u32;
pub const D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP: u32 = 128u32;
pub const D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 112u32;
pub const D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP: u32 = 144u32;
pub const D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 96u32;
pub const D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP: u32 = 168u32;
pub const D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 80u32;
pub const D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP: u32 = 204u32;
pub const D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 64u32;
pub const D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP: u32 = 256u32;
pub const D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 48u32;
pub const D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP: u32 = 340u32;
pub const D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 32u32;
pub const D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP: u32 = 512u32;
pub const D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD: u32 = 16u32;
pub const D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP: u32 = 768u32;
pub const D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION: u32 = 1u32;
pub const D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT: u32 = 256u32;
pub const D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP: u32 = 768u32;
pub const D3D12_CS_4_X_THREAD_GROUP_MAX_X: u32 = 768u32;
pub const D3D12_CS_4_X_THREAD_GROUP_MAX_Y: u32 = 768u32;
pub const D3D12_CS_4_X_UAV_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION: u32 = 65535u32;
pub const D3D12_CS_TGSM_REGISTER_COUNT: u32 = 8192u32;
pub const D3D12_CS_TGSM_REGISTER_READS_PER_INST: u32 = 1u32;
pub const D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS: u32 = 3u32;
pub const D3D12_CS_THREADGROUPID_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS: u32 = 3u32;
pub const D3D12_CS_THREADIDINGROUP_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_CS_THREADID_REGISTER_COMPONENTS: u32 = 3u32;
pub const D3D12_CS_THREADID_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP: u32 = 1024u32;
pub const D3D12_CS_THREAD_GROUP_MAX_X: u32 = 1024u32;
pub const D3D12_CS_THREAD_GROUP_MAX_Y: u32 = 1024u32;
pub const D3D12_CS_THREAD_GROUP_MAX_Z: u32 = 64u32;
pub const D3D12_CS_THREAD_GROUP_MIN_X: u32 = 1u32;
pub const D3D12_CS_THREAD_GROUP_MIN_Y: u32 = 1u32;
pub const D3D12_CS_THREAD_GROUP_MIN_Z: u32 = 1u32;
pub const D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL: u32 = 16384u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_CULL_MODE(pub i32);
impl ::std::convert::From<i32> for D3D12_CULL_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_CULL_MODE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_CULL_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_CULL_MODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_CULL_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_CULL_MODE {}
impl ::std::marker::Copy for D3D12_CULL_MODE {}
impl D3D12_CULL_MODE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_CULL_MODE_NONE: Self = Self(1i32);
    pub const D3D12_CULL_MODE_FRONT: Self = Self(2i32);
    pub const D3D12_CULL_MODE_BACK: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_CULL_MODE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE(pub i32);
impl ::std::convert::From<i32> for D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE {}
impl ::std::marker::Copy for D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE {}
impl D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE: Self = Self(0i32);
    pub const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY: Self = Self(1i32);
    pub const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION: Self = Self(2i32);
    pub const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION: Self = Self(3i32);
    pub const NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {
    pub shader_patch_mode: D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS_abi(
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE,
);
impl D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {}
unsafe impl ::windows::Abi for D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {
    type Abi = D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS_abi;
}
impl ::std::default::Default for D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {
    fn default() -> Self {
        Self {
            shader_patch_mode: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS")
            .field(
                "shader_patch_mode",
                &format_args!("{:?}", self.shader_patch_mode),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {
    fn clone(&self) -> Self {
        Self {
            shader_patch_mode: self.shader_patch_mode,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.shader_patch_mode == other.shader_patch_mode
    }
}
impl ::std::cmp::Eq for D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE {}
impl ::std::marker::Copy for D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE {}
impl D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS: Self = Self(0i32);
}
unsafe impl ::windows::Abi for D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS {}
impl ::std::marker::Copy for D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS {}
impl D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS : Self = Self (1i32) ;
    pub const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS : Self = Self (2i32) ;
    pub const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS : Self = Self (4i32) ;
    pub const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK: Self = Self(7i32);
}
unsafe impl ::windows::Abi for D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {
    pub max_messages_per_command_list: u32,
    pub default_shader_patch_mode: D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE,
    pub pipeline_state_create_flags: D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS_abi(
    u32,
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE,
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS,
);
impl D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {}
unsafe impl ::windows::Abi for D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {
    type Abi = D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS_abi;
}
impl ::std::default::Default for D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {
    fn default() -> Self {
        Self {
            max_messages_per_command_list: 0,
            default_shader_patch_mode: ::std::default::Default::default(),
            pipeline_state_create_flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS")
            .field(
                "max_messages_per_command_list",
                &format_args!("{:?}", self.max_messages_per_command_list),
            )
            .field(
                "default_shader_patch_mode",
                &format_args!("{:?}", self.default_shader_patch_mode),
            )
            .field(
                "pipeline_state_create_flags",
                &format_args!("{:?}", self.pipeline_state_create_flags),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {
    fn clone(&self) -> Self {
        Self {
            max_messages_per_command_list: self.max_messages_per_command_list,
            default_shader_patch_mode: self.default_shader_patch_mode,
            pipeline_state_create_flags: self.pipeline_state_create_flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.max_messages_per_command_list == other.max_messages_per_command_list
            && self.default_shader_patch_mode == other.default_shader_patch_mode
            && self.pipeline_state_create_flags == other.pipeline_state_create_flags
    }
}
impl ::std::cmp::Eq for D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {
    pub slowdown_factor: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR_abi(f32);
impl D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {}
unsafe impl ::windows::Abi for D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {
    type Abi = D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR_abi;
}
impl ::std::default::Default for D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {
    fn default() -> Self {
        Self {
            slowdown_factor: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR")
            .field(
                "slowdown_factor",
                &format_args!("{:?}", self.slowdown_factor),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {
    fn clone(&self) -> Self {
        Self {
            slowdown_factor: self.slowdown_factor,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {
    fn eq(&self, other: &Self) -> bool {
        self.slowdown_factor == other.slowdown_factor
    }
}
impl ::std::cmp::Eq for D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {}
impl ::std::marker::Copy for D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DEBUG_DEVICE_PARAMETER_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_DEBUG_DEVICE_PARAMETER_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DEBUG_DEVICE_PARAMETER_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DEBUG_DEVICE_PARAMETER_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DEBUG_DEVICE_PARAMETER_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DEBUG_DEVICE_PARAMETER_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DEBUG_DEVICE_PARAMETER_TYPE {}
impl ::std::marker::Copy for D3D12_DEBUG_DEVICE_PARAMETER_TYPE {}
impl D3D12_DEBUG_DEVICE_PARAMETER_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS: Self = Self(0i32);
    pub const D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS: Self = Self(1i32);
    pub const D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_DEBUG_DEVICE_PARAMETER_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DEBUG_FEATURE(pub i32);
impl ::std::convert::From<i32> for D3D12_DEBUG_FEATURE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DEBUG_FEATURE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DEBUG_FEATURE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DEBUG_FEATURE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DEBUG_FEATURE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DEBUG_FEATURE {}
impl ::std::marker::Copy for D3D12_DEBUG_FEATURE {}
impl D3D12_DEBUG_FEATURE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DEBUG_FEATURE_NONE: Self = Self(0i32);
    pub const D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS: Self = Self(1i32);
    pub const D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING: Self = Self(2i32);
    pub const D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION: Self = Self(4i32);
    pub const D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7: Self = Self(8i32);
}
unsafe impl ::windows::Abi for D3D12_DEBUG_FEATURE {
    type Abi = Self;
}
pub const D3D12_DEFAULT_BLEND_FACTOR_ALPHA: f32 = 1f32;
pub const D3D12_DEFAULT_BLEND_FACTOR_BLUE: f32 = 1f32;
pub const D3D12_DEFAULT_BLEND_FACTOR_GREEN: f32 = 1f32;
pub const D3D12_DEFAULT_BLEND_FACTOR_RED: f32 = 1f32;
pub const D3D12_DEFAULT_BORDER_COLOR_COMPONENT: f32 = 0f32;
pub const D3D12_DEFAULT_DEPTH_BIAS: i32 = 0i32;
pub const D3D12_DEFAULT_DEPTH_BIAS_CLAMP: f32 = 0f32;
pub const D3D12_DEFAULT_MAX_ANISOTROPY: u32 = 16u32;
pub const D3D12_DEFAULT_MIP_LOD_BIAS: f32 = 0f32;
pub const D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT: u32 = 4194304u32;
pub const D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX: u32 = 0u32;
pub const D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT: u32 = 65536u32;
pub const D3D12_DEFAULT_SAMPLE_MASK: u32 = 4294967295u32;
pub const D3D12_DEFAULT_SCISSOR_ENDX: u32 = 0u32;
pub const D3D12_DEFAULT_SCISSOR_ENDY: u32 = 0u32;
pub const D3D12_DEFAULT_SCISSOR_STARTX: u32 = 0u32;
pub const D3D12_DEFAULT_SCISSOR_STARTY: u32 = 0u32;
pub const D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING: u32 = 5768u32;
pub const D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS: f32 = 0f32;
pub const D3D12_DEFAULT_STENCIL_READ_MASK: u32 = 255u32;
pub const D3D12_DEFAULT_STENCIL_REFERENCE: u32 = 0u32;
pub const D3D12_DEFAULT_STENCIL_WRITE_MASK: u32 = 255u32;
pub const D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX: u32 = 0u32;
pub const D3D12_DEFAULT_VIEWPORT_HEIGHT: u32 = 0u32;
pub const D3D12_DEFAULT_VIEWPORT_MAX_DEPTH: f32 = 0f32;
pub const D3D12_DEFAULT_VIEWPORT_MIN_DEPTH: f32 = 0f32;
pub const D3D12_DEFAULT_VIEWPORT_TOPLEFTX: u32 = 0u32;
pub const D3D12_DEFAULT_VIEWPORT_TOPLEFTY: u32 = 0u32;
pub const D3D12_DEFAULT_VIEWPORT_WIDTH: u32 = 0u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_STENCIL_OP(pub i32);
impl ::std::convert::From<i32> for D3D12_STENCIL_OP {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_STENCIL_OP {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_STENCIL_OP {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_STENCIL_OP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_STENCIL_OP {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_STENCIL_OP {}
impl ::std::marker::Copy for D3D12_STENCIL_OP {}
impl D3D12_STENCIL_OP {
    #![allow(non_upper_case_globals)]
    pub const D3D12_STENCIL_OP_KEEP: Self = Self(1i32);
    pub const D3D12_STENCIL_OP_ZERO: Self = Self(2i32);
    pub const D3D12_STENCIL_OP_REPLACE: Self = Self(3i32);
    pub const D3D12_STENCIL_OP_INCR_SAT: Self = Self(4i32);
    pub const D3D12_STENCIL_OP_DECR_SAT: Self = Self(5i32);
    pub const D3D12_STENCIL_OP_INVERT: Self = Self(6i32);
    pub const D3D12_STENCIL_OP_INCR: Self = Self(7i32);
    pub const D3D12_STENCIL_OP_DECR: Self = Self(8i32);
}
unsafe impl ::windows::Abi for D3D12_STENCIL_OP {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEPTH_STENCILOP_DESC {
    pub stencil_fail_op: D3D12_STENCIL_OP,
    pub stencil_depth_fail_op: D3D12_STENCIL_OP,
    pub stencil_pass_op: D3D12_STENCIL_OP,
    pub stencil_func: D3D12_COMPARISON_FUNC,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEPTH_STENCILOP_DESC_abi(
    D3D12_STENCIL_OP,
    D3D12_STENCIL_OP,
    D3D12_STENCIL_OP,
    D3D12_COMPARISON_FUNC,
);
impl D3D12_DEPTH_STENCILOP_DESC {}
unsafe impl ::windows::Abi for D3D12_DEPTH_STENCILOP_DESC {
    type Abi = D3D12_DEPTH_STENCILOP_DESC_abi;
}
impl ::std::default::Default for D3D12_DEPTH_STENCILOP_DESC {
    fn default() -> Self {
        Self {
            stencil_fail_op: ::std::default::Default::default(),
            stencil_depth_fail_op: ::std::default::Default::default(),
            stencil_pass_op: ::std::default::Default::default(),
            stencil_func: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEPTH_STENCILOP_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEPTH_STENCILOP_DESC")
            .field(
                "stencil_fail_op",
                &format_args!("{:?}", self.stencil_fail_op),
            )
            .field(
                "stencil_depth_fail_op",
                &format_args!("{:?}", self.stencil_depth_fail_op),
            )
            .field(
                "stencil_pass_op",
                &format_args!("{:?}", self.stencil_pass_op),
            )
            .field("stencil_func", &format_args!("{:?}", self.stencil_func))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEPTH_STENCILOP_DESC {
    fn clone(&self) -> Self {
        Self {
            stencil_fail_op: self.stencil_fail_op,
            stencil_depth_fail_op: self.stencil_depth_fail_op,
            stencil_pass_op: self.stencil_pass_op,
            stencil_func: self.stencil_func,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEPTH_STENCILOP_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.stencil_fail_op == other.stencil_fail_op
            && self.stencil_depth_fail_op == other.stencil_depth_fail_op
            && self.stencil_pass_op == other.stencil_pass_op
            && self.stencil_func == other.stencil_func
    }
}
impl ::std::cmp::Eq for D3D12_DEPTH_STENCILOP_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DEPTH_WRITE_MASK(pub i32);
impl ::std::convert::From<i32> for D3D12_DEPTH_WRITE_MASK {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DEPTH_WRITE_MASK {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DEPTH_WRITE_MASK {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DEPTH_WRITE_MASK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DEPTH_WRITE_MASK {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DEPTH_WRITE_MASK {}
impl ::std::marker::Copy for D3D12_DEPTH_WRITE_MASK {}
impl D3D12_DEPTH_WRITE_MASK {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DEPTH_WRITE_MASK_ZERO: Self = Self(0i32);
    pub const D3D12_DEPTH_WRITE_MASK_ALL: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_DEPTH_WRITE_MASK {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEPTH_STENCIL_DESC {
    pub depth_enable: ::windows::BOOL,
    pub depth_write_mask: D3D12_DEPTH_WRITE_MASK,
    pub depth_func: D3D12_COMPARISON_FUNC,
    pub stencil_enable: ::windows::BOOL,
    pub stencil_read_mask: u8,
    pub stencil_write_mask: u8,
    pub front_face: D3D12_DEPTH_STENCILOP_DESC,
    pub back_face: D3D12_DEPTH_STENCILOP_DESC,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEPTH_STENCIL_DESC_abi(
    ::windows::BOOL,
    D3D12_DEPTH_WRITE_MASK,
    D3D12_COMPARISON_FUNC,
    ::windows::BOOL,
    u8,
    u8,
    D3D12_DEPTH_STENCILOP_DESC_abi,
    D3D12_DEPTH_STENCILOP_DESC_abi,
);
impl D3D12_DEPTH_STENCIL_DESC {}
unsafe impl ::windows::Abi for D3D12_DEPTH_STENCIL_DESC {
    type Abi = D3D12_DEPTH_STENCIL_DESC_abi;
}
impl ::std::default::Default for D3D12_DEPTH_STENCIL_DESC {
    fn default() -> Self {
        Self {
            depth_enable: ::std::default::Default::default(),
            depth_write_mask: ::std::default::Default::default(),
            depth_func: ::std::default::Default::default(),
            stencil_enable: ::std::default::Default::default(),
            stencil_read_mask: 0,
            stencil_write_mask: 0,
            front_face: ::std::default::Default::default(),
            back_face: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEPTH_STENCIL_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEPTH_STENCIL_DESC")
            .field("depth_enable", &format_args!("{:?}", self.depth_enable))
            .field(
                "depth_write_mask",
                &format_args!("{:?}", self.depth_write_mask),
            )
            .field("depth_func", &format_args!("{:?}", self.depth_func))
            .field("stencil_enable", &format_args!("{:?}", self.stencil_enable))
            .field(
                "stencil_read_mask",
                &format_args!("{:?}", self.stencil_read_mask),
            )
            .field(
                "stencil_write_mask",
                &format_args!("{:?}", self.stencil_write_mask),
            )
            .field("front_face", &format_args!("{:?}", self.front_face))
            .field("back_face", &format_args!("{:?}", self.back_face))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEPTH_STENCIL_DESC {
    fn clone(&self) -> Self {
        Self {
            depth_enable: <::windows::BOOL as std::clone::Clone>::clone(&self.depth_enable),
            depth_write_mask: self.depth_write_mask,
            depth_func: self.depth_func,
            stencil_enable: <::windows::BOOL as std::clone::Clone>::clone(&self.stencil_enable),
            stencil_read_mask: self.stencil_read_mask,
            stencil_write_mask: self.stencil_write_mask,
            front_face: <D3D12_DEPTH_STENCILOP_DESC as std::clone::Clone>::clone(&self.front_face),
            back_face: <D3D12_DEPTH_STENCILOP_DESC as std::clone::Clone>::clone(&self.back_face),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEPTH_STENCIL_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.depth_enable == other.depth_enable
            && self.depth_write_mask == other.depth_write_mask
            && self.depth_func == other.depth_func
            && self.stencil_enable == other.stencil_enable
            && self.stencil_read_mask == other.stencil_read_mask
            && self.stencil_write_mask == other.stencil_write_mask
            && self.front_face == other.front_face
            && self.back_face == other.back_face
    }
}
impl ::std::cmp::Eq for D3D12_DEPTH_STENCIL_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEPTH_STENCIL_DESC1 {
    pub depth_enable: ::windows::BOOL,
    pub depth_write_mask: D3D12_DEPTH_WRITE_MASK,
    pub depth_func: D3D12_COMPARISON_FUNC,
    pub stencil_enable: ::windows::BOOL,
    pub stencil_read_mask: u8,
    pub stencil_write_mask: u8,
    pub front_face: D3D12_DEPTH_STENCILOP_DESC,
    pub back_face: D3D12_DEPTH_STENCILOP_DESC,
    pub depth_bounds_test_enable: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEPTH_STENCIL_DESC1_abi(
    ::windows::BOOL,
    D3D12_DEPTH_WRITE_MASK,
    D3D12_COMPARISON_FUNC,
    ::windows::BOOL,
    u8,
    u8,
    D3D12_DEPTH_STENCILOP_DESC_abi,
    D3D12_DEPTH_STENCILOP_DESC_abi,
    ::windows::BOOL,
);
impl D3D12_DEPTH_STENCIL_DESC1 {}
unsafe impl ::windows::Abi for D3D12_DEPTH_STENCIL_DESC1 {
    type Abi = D3D12_DEPTH_STENCIL_DESC1_abi;
}
impl ::std::default::Default for D3D12_DEPTH_STENCIL_DESC1 {
    fn default() -> Self {
        Self {
            depth_enable: ::std::default::Default::default(),
            depth_write_mask: ::std::default::Default::default(),
            depth_func: ::std::default::Default::default(),
            stencil_enable: ::std::default::Default::default(),
            stencil_read_mask: 0,
            stencil_write_mask: 0,
            front_face: ::std::default::Default::default(),
            back_face: ::std::default::Default::default(),
            depth_bounds_test_enable: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEPTH_STENCIL_DESC1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEPTH_STENCIL_DESC1")
            .field("depth_enable", &format_args!("{:?}", self.depth_enable))
            .field(
                "depth_write_mask",
                &format_args!("{:?}", self.depth_write_mask),
            )
            .field("depth_func", &format_args!("{:?}", self.depth_func))
            .field("stencil_enable", &format_args!("{:?}", self.stencil_enable))
            .field(
                "stencil_read_mask",
                &format_args!("{:?}", self.stencil_read_mask),
            )
            .field(
                "stencil_write_mask",
                &format_args!("{:?}", self.stencil_write_mask),
            )
            .field("front_face", &format_args!("{:?}", self.front_face))
            .field("back_face", &format_args!("{:?}", self.back_face))
            .field(
                "depth_bounds_test_enable",
                &format_args!("{:?}", self.depth_bounds_test_enable),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEPTH_STENCIL_DESC1 {
    fn clone(&self) -> Self {
        Self {
            depth_enable: <::windows::BOOL as std::clone::Clone>::clone(&self.depth_enable),
            depth_write_mask: self.depth_write_mask,
            depth_func: self.depth_func,
            stencil_enable: <::windows::BOOL as std::clone::Clone>::clone(&self.stencil_enable),
            stencil_read_mask: self.stencil_read_mask,
            stencil_write_mask: self.stencil_write_mask,
            front_face: <D3D12_DEPTH_STENCILOP_DESC as std::clone::Clone>::clone(&self.front_face),
            back_face: <D3D12_DEPTH_STENCILOP_DESC as std::clone::Clone>::clone(&self.back_face),
            depth_bounds_test_enable: <::windows::BOOL as std::clone::Clone>::clone(
                &self.depth_bounds_test_enable,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEPTH_STENCIL_DESC1 {
    fn eq(&self, other: &Self) -> bool {
        self.depth_enable == other.depth_enable
            && self.depth_write_mask == other.depth_write_mask
            && self.depth_func == other.depth_func
            && self.stencil_enable == other.stencil_enable
            && self.stencil_read_mask == other.stencil_read_mask
            && self.stencil_write_mask == other.stencil_write_mask
            && self.front_face == other.front_face
            && self.back_face == other.back_face
            && self.depth_bounds_test_enable == other.depth_bounds_test_enable
    }
}
impl ::std::cmp::Eq for D3D12_DEPTH_STENCIL_DESC1 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DSV_DIMENSION(pub i32);
impl ::std::convert::From<i32> for D3D12_DSV_DIMENSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DSV_DIMENSION {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DSV_DIMENSION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DSV_DIMENSION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DSV_DIMENSION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DSV_DIMENSION {}
impl ::std::marker::Copy for D3D12_DSV_DIMENSION {}
impl D3D12_DSV_DIMENSION {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DSV_DIMENSION_UNKNOWN: Self = Self(0i32);
    pub const D3D12_DSV_DIMENSION_TEXTURE1D: Self = Self(1i32);
    pub const D3D12_DSV_DIMENSION_TEXTURE1DARRAY: Self = Self(2i32);
    pub const D3D12_DSV_DIMENSION_TEXTURE2D: Self = Self(3i32);
    pub const D3D12_DSV_DIMENSION_TEXTURE2DARRAY: Self = Self(4i32);
    pub const D3D12_DSV_DIMENSION_TEXTURE2DMS: Self = Self(5i32);
    pub const D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY: Self = Self(6i32);
}
unsafe impl ::windows::Abi for D3D12_DSV_DIMENSION {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DSV_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_DSV_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DSV_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DSV_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DSV_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DSV_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DSV_FLAGS {}
impl ::std::marker::Copy for D3D12_DSV_FLAGS {}
impl D3D12_DSV_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DSV_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_DSV_FLAG_READ_ONLY_DEPTH: Self = Self(1i32);
    pub const D3D12_DSV_FLAG_READ_ONLY_STENCIL: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_DSV_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX1D_DSV {
    pub mip_slice: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX1D_DSV_abi(u32);
impl D3D12_TEX1D_DSV {}
unsafe impl ::windows::Abi for D3D12_TEX1D_DSV {
    type Abi = D3D12_TEX1D_DSV_abi;
}
impl ::std::default::Default for D3D12_TEX1D_DSV {
    fn default() -> Self {
        Self { mip_slice: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_TEX1D_DSV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX1D_DSV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX1D_DSV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX1D_DSV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
    }
}
impl ::std::cmp::Eq for D3D12_TEX1D_DSV {}
impl ::std::marker::Copy for D3D12_TEX1D_DSV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX1D_ARRAY_DSV {
    pub mip_slice: u32,
    pub first_array_slice: u32,
    pub array_size: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX1D_ARRAY_DSV_abi(u32, u32, u32);
impl D3D12_TEX1D_ARRAY_DSV {}
unsafe impl ::windows::Abi for D3D12_TEX1D_ARRAY_DSV {
    type Abi = D3D12_TEX1D_ARRAY_DSV_abi;
}
impl ::std::default::Default for D3D12_TEX1D_ARRAY_DSV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            first_array_slice: 0,
            array_size: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX1D_ARRAY_DSV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX1D_ARRAY_DSV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX1D_ARRAY_DSV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX1D_ARRAY_DSV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
            && self.first_array_slice == other.first_array_slice
            && self.array_size == other.array_size
    }
}
impl ::std::cmp::Eq for D3D12_TEX1D_ARRAY_DSV {}
impl ::std::marker::Copy for D3D12_TEX1D_ARRAY_DSV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2D_DSV {
    pub mip_slice: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2D_DSV_abi(u32);
impl D3D12_TEX2D_DSV {}
unsafe impl ::windows::Abi for D3D12_TEX2D_DSV {
    type Abi = D3D12_TEX2D_DSV_abi;
}
impl ::std::default::Default for D3D12_TEX2D_DSV {
    fn default() -> Self {
        Self { mip_slice: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2D_DSV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2D_DSV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2D_DSV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2D_DSV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
    }
}
impl ::std::cmp::Eq for D3D12_TEX2D_DSV {}
impl ::std::marker::Copy for D3D12_TEX2D_DSV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2D_ARRAY_DSV {
    pub mip_slice: u32,
    pub first_array_slice: u32,
    pub array_size: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2D_ARRAY_DSV_abi(u32, u32, u32);
impl D3D12_TEX2D_ARRAY_DSV {}
unsafe impl ::windows::Abi for D3D12_TEX2D_ARRAY_DSV {
    type Abi = D3D12_TEX2D_ARRAY_DSV_abi;
}
impl ::std::default::Default for D3D12_TEX2D_ARRAY_DSV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            first_array_slice: 0,
            array_size: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2D_ARRAY_DSV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2D_ARRAY_DSV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2D_ARRAY_DSV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2D_ARRAY_DSV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
            && self.first_array_slice == other.first_array_slice
            && self.array_size == other.array_size
    }
}
impl ::std::cmp::Eq for D3D12_TEX2D_ARRAY_DSV {}
impl ::std::marker::Copy for D3D12_TEX2D_ARRAY_DSV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2DMS_DSV {
    pub unused_field_nothing_to_define: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2DMS_DSV_abi(u32);
impl D3D12_TEX2DMS_DSV {}
unsafe impl ::windows::Abi for D3D12_TEX2DMS_DSV {
    type Abi = D3D12_TEX2DMS_DSV_abi;
}
impl ::std::default::Default for D3D12_TEX2DMS_DSV {
    fn default() -> Self {
        Self {
            unused_field_nothing_to_define: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2DMS_DSV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2DMS_DSV")
            .field(
                "unused_field_nothing_to_define",
                &format_args!("{:?}", self.unused_field_nothing_to_define),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2DMS_DSV {
    fn clone(&self) -> Self {
        Self {
            unused_field_nothing_to_define: self.unused_field_nothing_to_define,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2DMS_DSV {
    fn eq(&self, other: &Self) -> bool {
        self.unused_field_nothing_to_define == other.unused_field_nothing_to_define
    }
}
impl ::std::cmp::Eq for D3D12_TEX2DMS_DSV {}
impl ::std::marker::Copy for D3D12_TEX2DMS_DSV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2DMS_ARRAY_DSV {
    pub first_array_slice: u32,
    pub array_size: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2DMS_ARRAY_DSV_abi(u32, u32);
impl D3D12_TEX2DMS_ARRAY_DSV {}
unsafe impl ::windows::Abi for D3D12_TEX2DMS_ARRAY_DSV {
    type Abi = D3D12_TEX2DMS_ARRAY_DSV_abi;
}
impl ::std::default::Default for D3D12_TEX2DMS_ARRAY_DSV {
    fn default() -> Self {
        Self {
            first_array_slice: 0,
            array_size: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2DMS_ARRAY_DSV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2DMS_ARRAY_DSV")
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2DMS_ARRAY_DSV {
    fn clone(&self) -> Self {
        Self {
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2DMS_ARRAY_DSV {
    fn eq(&self, other: &Self) -> bool {
        self.first_array_slice == other.first_array_slice && self.array_size == other.array_size
    }
}
impl ::std::cmp::Eq for D3D12_TEX2DMS_ARRAY_DSV {}
impl ::std::marker::Copy for D3D12_TEX2DMS_ARRAY_DSV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEPTH_STENCIL_VIEW_DESC {
    pub format: super::dxgi::DXGI_FORMAT,
    pub view_dimension: D3D12_DSV_DIMENSION,
    pub flags: D3D12_DSV_FLAGS,
    pub anonymous: D3D12_DEPTH_STENCIL_VIEW_DESC_0,
}
impl D3D12_DEPTH_STENCIL_VIEW_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_DEPTH_STENCIL_VIEW_DESC_0 {
    pub texture1d: D3D12_TEX1D_DSV,
    pub texture1d_array: D3D12_TEX1D_ARRAY_DSV,
    pub texture2d: D3D12_TEX2D_DSV,
    pub texture2d_array: D3D12_TEX2D_ARRAY_DSV,
    pub texture2dms: D3D12_TEX2DMS_DSV,
    pub texture2dms_array: D3D12_TEX2DMS_ARRAY_DSV,
}
pub const D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND: u32 = 4294967295u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DRED_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_DRED_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DRED_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DRED_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DRED_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DRED_FLAGS {}
impl ::std::marker::Copy for D3D12_DRED_FLAGS {}
impl D3D12_DRED_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DRED_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_DRED_FLAG_FORCE_ENABLE: Self = Self(1i32);
    pub const D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_DRED_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEVICE_REMOVED_EXTENDED_DATA {
    pub flags: D3D12_DRED_FLAGS,
    pub p_head_auto_breadcrumb_node: *mut D3D12_AUTO_BREADCRUMB_NODE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEVICE_REMOVED_EXTENDED_DATA_abi(
    D3D12_DRED_FLAGS,
    *mut D3D12_AUTO_BREADCRUMB_NODE_abi,
);
impl D3D12_DEVICE_REMOVED_EXTENDED_DATA {}
unsafe impl ::windows::Abi for D3D12_DEVICE_REMOVED_EXTENDED_DATA {
    type Abi = D3D12_DEVICE_REMOVED_EXTENDED_DATA_abi;
}
impl ::std::default::Default for D3D12_DEVICE_REMOVED_EXTENDED_DATA {
    fn default() -> Self {
        Self {
            flags: ::std::default::Default::default(),
            p_head_auto_breadcrumb_node: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEVICE_REMOVED_EXTENDED_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEVICE_REMOVED_EXTENDED_DATA")
            .field("flags", &format_args!("{:?}", self.flags))
            .field(
                "p_head_auto_breadcrumb_node",
                &format_args!("{:?}", self.p_head_auto_breadcrumb_node),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEVICE_REMOVED_EXTENDED_DATA {
    fn clone(&self) -> Self {
        Self {
            flags: self.flags,
            p_head_auto_breadcrumb_node:
                <*mut D3D12_AUTO_BREADCRUMB_NODE as std::clone::Clone>::clone(
                    &self.p_head_auto_breadcrumb_node,
                ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEVICE_REMOVED_EXTENDED_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.flags == other.flags
            && self.p_head_auto_breadcrumb_node == other.p_head_auto_breadcrumb_node
    }
}
impl ::std::cmp::Eq for D3D12_DEVICE_REMOVED_EXTENDED_DATA {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {
    pub p_head_auto_breadcrumb_node: *mut D3D12_AUTO_BREADCRUMB_NODE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT_abi(*mut D3D12_AUTO_BREADCRUMB_NODE_abi);
impl D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {}
unsafe impl ::windows::Abi for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {
    type Abi = D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT_abi;
}
impl ::std::default::Default for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {
    fn default() -> Self {
        Self {
            p_head_auto_breadcrumb_node: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT")
            .field(
                "p_head_auto_breadcrumb_node",
                &format_args!("{:?}", self.p_head_auto_breadcrumb_node),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {
    fn clone(&self) -> Self {
        Self {
            p_head_auto_breadcrumb_node:
                <*mut D3D12_AUTO_BREADCRUMB_NODE as std::clone::Clone>::clone(
                    &self.p_head_auto_breadcrumb_node,
                ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {
    fn eq(&self, other: &Self) -> bool {
        self.p_head_auto_breadcrumb_node == other.p_head_auto_breadcrumb_node
    }
}
impl ::std::cmp::Eq for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DRED_ALLOCATION_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_DRED_ALLOCATION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DRED_ALLOCATION_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DRED_ALLOCATION_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DRED_ALLOCATION_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_ALLOCATION_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DRED_ALLOCATION_TYPE {}
impl ::std::marker::Copy for D3D12_DRED_ALLOCATION_TYPE {}
impl D3D12_DRED_ALLOCATION_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE: Self = Self(19i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR: Self = Self(20i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE: Self = Self(21i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST: Self = Self(22i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_FENCE: Self = Self(23i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP: Self = Self(24i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_HEAP: Self = Self(25i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP: Self = Self(27i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE: Self = Self(28i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY: Self = Self(29i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER: Self = Self(30i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR: Self = Self(32i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_RESOURCE: Self = Self(34i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_PASS: Self = Self(35i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION: Self = Self(36i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY: Self = Self(37i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION: Self = Self(38i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP: Self = Self(39i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL: Self = Self(40i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER: Self = Self(41i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT: Self = Self(42i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_METACOMMAND: Self = Self(43i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP: Self = Self(44i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR: Self = Self(45i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP: Self = Self(46i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND: Self = Self(47i32);
    pub const D3D12_DRED_ALLOCATION_TYPE_INVALID: Self = Self(-1i32);
}
unsafe impl ::windows::Abi for D3D12_DRED_ALLOCATION_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DRED_ALLOCATION_NODE {
    pub object_namea: *mut i8,
    pub object_namew: *mut u16,
    pub allocation_type: D3D12_DRED_ALLOCATION_TYPE,
    pub p_next: *mut D3D12_DRED_ALLOCATION_NODE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DRED_ALLOCATION_NODE_abi(
    *mut i8,
    *mut u16,
    D3D12_DRED_ALLOCATION_TYPE,
    *mut D3D12_DRED_ALLOCATION_NODE_abi,
);
impl D3D12_DRED_ALLOCATION_NODE {}
unsafe impl ::windows::Abi for D3D12_DRED_ALLOCATION_NODE {
    type Abi = D3D12_DRED_ALLOCATION_NODE_abi;
}
impl ::std::default::Default for D3D12_DRED_ALLOCATION_NODE {
    fn default() -> Self {
        Self {
            object_namea: ::std::ptr::null_mut(),
            object_namew: ::std::ptr::null_mut(),
            allocation_type: ::std::default::Default::default(),
            p_next: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DRED_ALLOCATION_NODE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DRED_ALLOCATION_NODE")
            .field("object_namea", &format_args!("{:?}", self.object_namea))
            .field("object_namew", &format_args!("{:?}", self.object_namew))
            .field(
                "allocation_type",
                &format_args!("{:?}", self.allocation_type),
            )
            .field("p_next", &format_args!("{:?}", self.p_next))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DRED_ALLOCATION_NODE {
    fn clone(&self) -> Self {
        Self {
            object_namea: self.object_namea,
            object_namew: self.object_namew,
            allocation_type: self.allocation_type,
            p_next: <*mut D3D12_DRED_ALLOCATION_NODE as std::clone::Clone>::clone(&self.p_next),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_ALLOCATION_NODE {
    fn eq(&self, other: &Self) -> bool {
        self.object_namea == other.object_namea
            && self.object_namew == other.object_namew
            && self.allocation_type == other.allocation_type
            && self.p_next == other.p_next
    }
}
impl ::std::cmp::Eq for D3D12_DRED_ALLOCATION_NODE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DRED_PAGE_FAULT_OUTPUT {
    pub page_fault_va: u64,
    pub p_head_existing_allocation_node: *mut D3D12_DRED_ALLOCATION_NODE,
    pub p_head_recent_freed_allocation_node: *mut D3D12_DRED_ALLOCATION_NODE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DRED_PAGE_FAULT_OUTPUT_abi(
    u64,
    *mut D3D12_DRED_ALLOCATION_NODE_abi,
    *mut D3D12_DRED_ALLOCATION_NODE_abi,
);
impl D3D12_DRED_PAGE_FAULT_OUTPUT {}
unsafe impl ::windows::Abi for D3D12_DRED_PAGE_FAULT_OUTPUT {
    type Abi = D3D12_DRED_PAGE_FAULT_OUTPUT_abi;
}
impl ::std::default::Default for D3D12_DRED_PAGE_FAULT_OUTPUT {
    fn default() -> Self {
        Self {
            page_fault_va: 0,
            p_head_existing_allocation_node: ::std::ptr::null_mut(),
            p_head_recent_freed_allocation_node: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DRED_PAGE_FAULT_OUTPUT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DRED_PAGE_FAULT_OUTPUT")
            .field("page_fault_va", &format_args!("{:?}", self.page_fault_va))
            .field(
                "p_head_existing_allocation_node",
                &format_args!("{:?}", self.p_head_existing_allocation_node),
            )
            .field(
                "p_head_recent_freed_allocation_node",
                &format_args!("{:?}", self.p_head_recent_freed_allocation_node),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DRED_PAGE_FAULT_OUTPUT {
    fn clone(&self) -> Self {
        Self {
            page_fault_va: self.page_fault_va,
            p_head_existing_allocation_node:
                <*mut D3D12_DRED_ALLOCATION_NODE as std::clone::Clone>::clone(
                    &self.p_head_existing_allocation_node,
                ),
            p_head_recent_freed_allocation_node:
                <*mut D3D12_DRED_ALLOCATION_NODE as std::clone::Clone>::clone(
                    &self.p_head_recent_freed_allocation_node,
                ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_PAGE_FAULT_OUTPUT {
    fn eq(&self, other: &Self) -> bool {
        self.page_fault_va == other.page_fault_va
            && self.p_head_existing_allocation_node == other.p_head_existing_allocation_node
            && self.p_head_recent_freed_allocation_node == other.p_head_recent_freed_allocation_node
    }
}
impl ::std::cmp::Eq for D3D12_DRED_PAGE_FAULT_OUTPUT {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {
    pub device_removed_reason: ::windows::ErrorCode,
    pub auto_breadcrumbs_output: D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT,
    pub page_fault_output: D3D12_DRED_PAGE_FAULT_OUTPUT,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1_abi(
    ::windows::ErrorCode,
    D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT_abi,
    D3D12_DRED_PAGE_FAULT_OUTPUT_abi,
);
impl D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {}
unsafe impl ::windows::Abi for D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {
    type Abi = D3D12_DEVICE_REMOVED_EXTENDED_DATA1_abi;
}
impl ::std::default::Default for D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {
    fn default() -> Self {
        Self {
            device_removed_reason: ::std::default::Default::default(),
            auto_breadcrumbs_output: ::std::default::Default::default(),
            page_fault_output: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEVICE_REMOVED_EXTENDED_DATA1")
            .field(
                "device_removed_reason",
                &format_args!("{:?}", self.device_removed_reason),
            )
            .field(
                "auto_breadcrumbs_output",
                &format_args!("{:?}", self.auto_breadcrumbs_output),
            )
            .field(
                "page_fault_output",
                &format_args!("{:?}", self.page_fault_output),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {
    fn clone(&self) -> Self {
        Self {
            device_removed_reason: <::windows::ErrorCode as std::clone::Clone>::clone(
                &self.device_removed_reason,
            ),
            auto_breadcrumbs_output:
                <D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT as std::clone::Clone>::clone(
                    &self.auto_breadcrumbs_output,
                ),
            page_fault_output: <D3D12_DRED_PAGE_FAULT_OUTPUT as std::clone::Clone>::clone(
                &self.page_fault_output,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {
    fn eq(&self, other: &Self) -> bool {
        self.device_removed_reason == other.device_removed_reason
            && self.auto_breadcrumbs_output == other.auto_breadcrumbs_output
            && self.page_fault_output == other.page_fault_output
    }
}
impl ::std::cmp::Eq for D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {
    pub p_head_auto_breadcrumb_node: *mut D3D12_AUTO_BREADCRUMB_NODE1,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1_abi(*mut D3D12_AUTO_BREADCRUMB_NODE1_abi);
impl D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {}
unsafe impl ::windows::Abi for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {
    type Abi = D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1_abi;
}
impl ::std::default::Default for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {
    fn default() -> Self {
        Self {
            p_head_auto_breadcrumb_node: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1")
            .field(
                "p_head_auto_breadcrumb_node",
                &format_args!("{:?}", self.p_head_auto_breadcrumb_node),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {
    fn clone(&self) -> Self {
        Self {
            p_head_auto_breadcrumb_node:
                <*mut D3D12_AUTO_BREADCRUMB_NODE1 as std::clone::Clone>::clone(
                    &self.p_head_auto_breadcrumb_node,
                ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {
    fn eq(&self, other: &Self) -> bool {
        self.p_head_auto_breadcrumb_node == other.p_head_auto_breadcrumb_node
    }
}
impl ::std::cmp::Eq for D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DRED_ALLOCATION_NODE1 {
    pub object_namea: *mut i8,
    pub object_namew: *mut u16,
    pub allocation_type: D3D12_DRED_ALLOCATION_TYPE,
    pub p_next: *mut D3D12_DRED_ALLOCATION_NODE1,
    pub p_object: ::std::option::Option<::windows::IUnknown>,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DRED_ALLOCATION_NODE1_abi(
    *mut i8,
    *mut u16,
    D3D12_DRED_ALLOCATION_TYPE,
    *mut D3D12_DRED_ALLOCATION_NODE1_abi,
    ::windows::RawPtr,
);
impl D3D12_DRED_ALLOCATION_NODE1 {}
unsafe impl ::windows::Abi for D3D12_DRED_ALLOCATION_NODE1 {
    type Abi = D3D12_DRED_ALLOCATION_NODE1_abi;
}
impl ::std::default::Default for D3D12_DRED_ALLOCATION_NODE1 {
    fn default() -> Self {
        Self {
            object_namea: ::std::ptr::null_mut(),
            object_namew: ::std::ptr::null_mut(),
            allocation_type: ::std::default::Default::default(),
            p_next: ::std::ptr::null_mut(),
            p_object: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DRED_ALLOCATION_NODE1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DRED_ALLOCATION_NODE1")
            .field("object_namea", &format_args!("{:?}", self.object_namea))
            .field("object_namew", &format_args!("{:?}", self.object_namew))
            .field(
                "allocation_type",
                &format_args!("{:?}", self.allocation_type),
            )
            .field("p_next", &format_args!("{:?}", self.p_next))
            .field("p_object", &format_args!("{:?}", self.p_object))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DRED_ALLOCATION_NODE1 {
    fn clone(&self) -> Self {
        Self {
            object_namea: self.object_namea,
            object_namew: self.object_namew,
            allocation_type: self.allocation_type,
            p_next: <*mut D3D12_DRED_ALLOCATION_NODE1 as std::clone::Clone>::clone(&self.p_next),
            p_object: <::std::option::Option<::windows::IUnknown> as std::clone::Clone>::clone(
                &self.p_object,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_ALLOCATION_NODE1 {
    fn eq(&self, other: &Self) -> bool {
        self.object_namea == other.object_namea
            && self.object_namew == other.object_namew
            && self.allocation_type == other.allocation_type
            && self.p_next == other.p_next
            && self.p_object == other.p_object
    }
}
impl ::std::cmp::Eq for D3D12_DRED_ALLOCATION_NODE1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DRED_PAGE_FAULT_OUTPUT1 {
    pub page_fault_va: u64,
    pub p_head_existing_allocation_node: *mut D3D12_DRED_ALLOCATION_NODE1,
    pub p_head_recent_freed_allocation_node: *mut D3D12_DRED_ALLOCATION_NODE1,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DRED_PAGE_FAULT_OUTPUT1_abi(
    u64,
    *mut D3D12_DRED_ALLOCATION_NODE1_abi,
    *mut D3D12_DRED_ALLOCATION_NODE1_abi,
);
impl D3D12_DRED_PAGE_FAULT_OUTPUT1 {}
unsafe impl ::windows::Abi for D3D12_DRED_PAGE_FAULT_OUTPUT1 {
    type Abi = D3D12_DRED_PAGE_FAULT_OUTPUT1_abi;
}
impl ::std::default::Default for D3D12_DRED_PAGE_FAULT_OUTPUT1 {
    fn default() -> Self {
        Self {
            page_fault_va: 0,
            p_head_existing_allocation_node: ::std::ptr::null_mut(),
            p_head_recent_freed_allocation_node: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DRED_PAGE_FAULT_OUTPUT1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DRED_PAGE_FAULT_OUTPUT1")
            .field("page_fault_va", &format_args!("{:?}", self.page_fault_va))
            .field(
                "p_head_existing_allocation_node",
                &format_args!("{:?}", self.p_head_existing_allocation_node),
            )
            .field(
                "p_head_recent_freed_allocation_node",
                &format_args!("{:?}", self.p_head_recent_freed_allocation_node),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DRED_PAGE_FAULT_OUTPUT1 {
    fn clone(&self) -> Self {
        Self {
            page_fault_va: self.page_fault_va,
            p_head_existing_allocation_node:
                <*mut D3D12_DRED_ALLOCATION_NODE1 as std::clone::Clone>::clone(
                    &self.p_head_existing_allocation_node,
                ),
            p_head_recent_freed_allocation_node:
                <*mut D3D12_DRED_ALLOCATION_NODE1 as std::clone::Clone>::clone(
                    &self.p_head_recent_freed_allocation_node,
                ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_PAGE_FAULT_OUTPUT1 {
    fn eq(&self, other: &Self) -> bool {
        self.page_fault_va == other.page_fault_va
            && self.p_head_existing_allocation_node == other.p_head_existing_allocation_node
            && self.p_head_recent_freed_allocation_node == other.p_head_recent_freed_allocation_node
    }
}
impl ::std::cmp::Eq for D3D12_DRED_PAGE_FAULT_OUTPUT1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {
    pub device_removed_reason: ::windows::ErrorCode,
    pub auto_breadcrumbs_output: D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1,
    pub page_fault_output: D3D12_DRED_PAGE_FAULT_OUTPUT1,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DEVICE_REMOVED_EXTENDED_DATA2_abi(
    ::windows::ErrorCode,
    D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1_abi,
    D3D12_DRED_PAGE_FAULT_OUTPUT1_abi,
);
impl D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {}
unsafe impl ::windows::Abi for D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {
    type Abi = D3D12_DEVICE_REMOVED_EXTENDED_DATA2_abi;
}
impl ::std::default::Default for D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {
    fn default() -> Self {
        Self {
            device_removed_reason: ::std::default::Default::default(),
            auto_breadcrumbs_output: ::std::default::Default::default(),
            page_fault_output: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DEVICE_REMOVED_EXTENDED_DATA2")
            .field(
                "device_removed_reason",
                &format_args!("{:?}", self.device_removed_reason),
            )
            .field(
                "auto_breadcrumbs_output",
                &format_args!("{:?}", self.auto_breadcrumbs_output),
            )
            .field(
                "page_fault_output",
                &format_args!("{:?}", self.page_fault_output),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {
    fn clone(&self) -> Self {
        Self {
            device_removed_reason: <::windows::ErrorCode as std::clone::Clone>::clone(
                &self.device_removed_reason,
            ),
            auto_breadcrumbs_output:
                <D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 as std::clone::Clone>::clone(
                    &self.auto_breadcrumbs_output,
                ),
            page_fault_output: <D3D12_DRED_PAGE_FAULT_OUTPUT1 as std::clone::Clone>::clone(
                &self.page_fault_output,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {
    fn eq(&self, other: &Self) -> bool {
        self.device_removed_reason == other.device_removed_reason
            && self.auto_breadcrumbs_output == other.auto_breadcrumbs_output
            && self.page_fault_output == other.page_fault_output
    }
}
impl ::std::cmp::Eq for D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DISPATCH_ARGUMENTS {
    pub thread_group_countx: u32,
    pub thread_group_county: u32,
    pub thread_group_countz: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DISPATCH_ARGUMENTS_abi(u32, u32, u32);
impl D3D12_DISPATCH_ARGUMENTS {}
unsafe impl ::windows::Abi for D3D12_DISPATCH_ARGUMENTS {
    type Abi = D3D12_DISPATCH_ARGUMENTS_abi;
}
impl ::std::default::Default for D3D12_DISPATCH_ARGUMENTS {
    fn default() -> Self {
        Self {
            thread_group_countx: 0,
            thread_group_county: 0,
            thread_group_countz: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DISPATCH_ARGUMENTS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DISPATCH_ARGUMENTS")
            .field(
                "thread_group_countx",
                &format_args!("{:?}", self.thread_group_countx),
            )
            .field(
                "thread_group_county",
                &format_args!("{:?}", self.thread_group_county),
            )
            .field(
                "thread_group_countz",
                &format_args!("{:?}", self.thread_group_countz),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DISPATCH_ARGUMENTS {
    fn clone(&self) -> Self {
        Self {
            thread_group_countx: self.thread_group_countx,
            thread_group_county: self.thread_group_county,
            thread_group_countz: self.thread_group_countz,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DISPATCH_ARGUMENTS {
    fn eq(&self, other: &Self) -> bool {
        self.thread_group_countx == other.thread_group_countx
            && self.thread_group_county == other.thread_group_county
            && self.thread_group_countz == other.thread_group_countz
    }
}
impl ::std::cmp::Eq for D3D12_DISPATCH_ARGUMENTS {}
impl ::std::marker::Copy for D3D12_DISPATCH_ARGUMENTS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DISPATCH_MESH_ARGUMENTS {
    pub thread_group_countx: u32,
    pub thread_group_county: u32,
    pub thread_group_countz: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DISPATCH_MESH_ARGUMENTS_abi(u32, u32, u32);
impl D3D12_DISPATCH_MESH_ARGUMENTS {}
unsafe impl ::windows::Abi for D3D12_DISPATCH_MESH_ARGUMENTS {
    type Abi = D3D12_DISPATCH_MESH_ARGUMENTS_abi;
}
impl ::std::default::Default for D3D12_DISPATCH_MESH_ARGUMENTS {
    fn default() -> Self {
        Self {
            thread_group_countx: 0,
            thread_group_county: 0,
            thread_group_countz: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DISPATCH_MESH_ARGUMENTS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DISPATCH_MESH_ARGUMENTS")
            .field(
                "thread_group_countx",
                &format_args!("{:?}", self.thread_group_countx),
            )
            .field(
                "thread_group_county",
                &format_args!("{:?}", self.thread_group_county),
            )
            .field(
                "thread_group_countz",
                &format_args!("{:?}", self.thread_group_countz),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DISPATCH_MESH_ARGUMENTS {
    fn clone(&self) -> Self {
        Self {
            thread_group_countx: self.thread_group_countx,
            thread_group_county: self.thread_group_county,
            thread_group_countz: self.thread_group_countz,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DISPATCH_MESH_ARGUMENTS {
    fn eq(&self, other: &Self) -> bool {
        self.thread_group_countx == other.thread_group_countx
            && self.thread_group_county == other.thread_group_county
            && self.thread_group_countz == other.thread_group_countz
    }
}
impl ::std::cmp::Eq for D3D12_DISPATCH_MESH_ARGUMENTS {}
impl ::std::marker::Copy for D3D12_DISPATCH_MESH_ARGUMENTS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE {
    pub start_address: u64,
    pub size_in_bytes: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_abi(u64, u64);
impl D3D12_GPU_VIRTUAL_ADDRESS_RANGE {}
unsafe impl ::windows::Abi for D3D12_GPU_VIRTUAL_ADDRESS_RANGE {
    type Abi = D3D12_GPU_VIRTUAL_ADDRESS_RANGE_abi;
}
impl ::std::default::Default for D3D12_GPU_VIRTUAL_ADDRESS_RANGE {
    fn default() -> Self {
        Self {
            start_address: 0,
            size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_GPU_VIRTUAL_ADDRESS_RANGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_GPU_VIRTUAL_ADDRESS_RANGE")
            .field("start_address", &format_args!("{:?}", self.start_address))
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_GPU_VIRTUAL_ADDRESS_RANGE {
    fn clone(&self) -> Self {
        Self {
            start_address: self.start_address,
            size_in_bytes: self.size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_GPU_VIRTUAL_ADDRESS_RANGE {
    fn eq(&self, other: &Self) -> bool {
        self.start_address == other.start_address && self.size_in_bytes == other.size_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_GPU_VIRTUAL_ADDRESS_RANGE {}
impl ::std::marker::Copy for D3D12_GPU_VIRTUAL_ADDRESS_RANGE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {
    pub start_address: u64,
    pub size_in_bytes: u64,
    pub stride_in_bytes: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE_abi(u64, u64, u64);
impl D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {}
unsafe impl ::windows::Abi for D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {
    type Abi = D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE_abi;
}
impl ::std::default::Default for D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {
    fn default() -> Self {
        Self {
            start_address: 0,
            size_in_bytes: 0,
            stride_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE")
            .field("start_address", &format_args!("{:?}", self.start_address))
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .field(
                "stride_in_bytes",
                &format_args!("{:?}", self.stride_in_bytes),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {
    fn clone(&self) -> Self {
        Self {
            start_address: self.start_address,
            size_in_bytes: self.size_in_bytes,
            stride_in_bytes: self.stride_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {
    fn eq(&self, other: &Self) -> bool {
        self.start_address == other.start_address
            && self.size_in_bytes == other.size_in_bytes
            && self.stride_in_bytes == other.stride_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {}
impl ::std::marker::Copy for D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DISPATCH_RAYS_DESC {
    pub ray_generation_shader_record: D3D12_GPU_VIRTUAL_ADDRESS_RANGE,
    pub miss_shader_table: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
    pub hit_group_table: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
    pub callable_shader_table: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DISPATCH_RAYS_DESC_abi(
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_abi,
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE_abi,
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE_abi,
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE_abi,
    u32,
    u32,
    u32,
);
impl D3D12_DISPATCH_RAYS_DESC {}
unsafe impl ::windows::Abi for D3D12_DISPATCH_RAYS_DESC {
    type Abi = D3D12_DISPATCH_RAYS_DESC_abi;
}
impl ::std::default::Default for D3D12_DISPATCH_RAYS_DESC {
    fn default() -> Self {
        Self {
            ray_generation_shader_record: ::std::default::Default::default(),
            miss_shader_table: ::std::default::Default::default(),
            hit_group_table: ::std::default::Default::default(),
            callable_shader_table: ::std::default::Default::default(),
            width: 0,
            height: 0,
            depth: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DISPATCH_RAYS_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DISPATCH_RAYS_DESC")
            .field(
                "ray_generation_shader_record",
                &format_args!("{:?}", self.ray_generation_shader_record),
            )
            .field(
                "miss_shader_table",
                &format_args!("{:?}", self.miss_shader_table),
            )
            .field(
                "hit_group_table",
                &format_args!("{:?}", self.hit_group_table),
            )
            .field(
                "callable_shader_table",
                &format_args!("{:?}", self.callable_shader_table),
            )
            .field("width", &format_args!("{:?}", self.width))
            .field("height", &format_args!("{:?}", self.height))
            .field("depth", &format_args!("{:?}", self.depth))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DISPATCH_RAYS_DESC {
    fn clone(&self) -> Self {
        Self {
            ray_generation_shader_record:
                <D3D12_GPU_VIRTUAL_ADDRESS_RANGE as std::clone::Clone>::clone(
                    &self.ray_generation_shader_record,
                ),
            miss_shader_table:
                <D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE as std::clone::Clone>::clone(
                    &self.miss_shader_table,
                ),
            hit_group_table:
                <D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE as std::clone::Clone>::clone(
                    &self.hit_group_table,
                ),
            callable_shader_table:
                <D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE as std::clone::Clone>::clone(
                    &self.callable_shader_table,
                ),
            width: self.width,
            height: self.height,
            depth: self.depth,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DISPATCH_RAYS_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.ray_generation_shader_record == other.ray_generation_shader_record
            && self.miss_shader_table == other.miss_shader_table
            && self.hit_group_table == other.hit_group_table
            && self.callable_shader_table == other.callable_shader_table
            && self.width == other.width
            && self.height == other.height
            && self.depth == other.depth
    }
}
impl ::std::cmp::Eq for D3D12_DISPATCH_RAYS_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DRAW_ARGUMENTS {
    pub vertex_count_per_instance: u32,
    pub instance_count: u32,
    pub start_vertex_location: u32,
    pub start_instance_location: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DRAW_ARGUMENTS_abi(u32, u32, u32, u32);
impl D3D12_DRAW_ARGUMENTS {}
unsafe impl ::windows::Abi for D3D12_DRAW_ARGUMENTS {
    type Abi = D3D12_DRAW_ARGUMENTS_abi;
}
impl ::std::default::Default for D3D12_DRAW_ARGUMENTS {
    fn default() -> Self {
        Self {
            vertex_count_per_instance: 0,
            instance_count: 0,
            start_vertex_location: 0,
            start_instance_location: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DRAW_ARGUMENTS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DRAW_ARGUMENTS")
            .field(
                "vertex_count_per_instance",
                &format_args!("{:?}", self.vertex_count_per_instance),
            )
            .field("instance_count", &format_args!("{:?}", self.instance_count))
            .field(
                "start_vertex_location",
                &format_args!("{:?}", self.start_vertex_location),
            )
            .field(
                "start_instance_location",
                &format_args!("{:?}", self.start_instance_location),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DRAW_ARGUMENTS {
    fn clone(&self) -> Self {
        Self {
            vertex_count_per_instance: self.vertex_count_per_instance,
            instance_count: self.instance_count,
            start_vertex_location: self.start_vertex_location,
            start_instance_location: self.start_instance_location,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DRAW_ARGUMENTS {
    fn eq(&self, other: &Self) -> bool {
        self.vertex_count_per_instance == other.vertex_count_per_instance
            && self.instance_count == other.instance_count
            && self.start_vertex_location == other.start_vertex_location
            && self.start_instance_location == other.start_instance_location
    }
}
impl ::std::cmp::Eq for D3D12_DRAW_ARGUMENTS {}
impl ::std::marker::Copy for D3D12_DRAW_ARGUMENTS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DRAW_INDEXED_ARGUMENTS {
    pub index_count_per_instance: u32,
    pub instance_count: u32,
    pub start_index_location: u32,
    pub base_vertex_location: i32,
    pub start_instance_location: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DRAW_INDEXED_ARGUMENTS_abi(u32, u32, u32, i32, u32);
impl D3D12_DRAW_INDEXED_ARGUMENTS {}
unsafe impl ::windows::Abi for D3D12_DRAW_INDEXED_ARGUMENTS {
    type Abi = D3D12_DRAW_INDEXED_ARGUMENTS_abi;
}
impl ::std::default::Default for D3D12_DRAW_INDEXED_ARGUMENTS {
    fn default() -> Self {
        Self {
            index_count_per_instance: 0,
            instance_count: 0,
            start_index_location: 0,
            base_vertex_location: 0,
            start_instance_location: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_DRAW_INDEXED_ARGUMENTS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DRAW_INDEXED_ARGUMENTS")
            .field(
                "index_count_per_instance",
                &format_args!("{:?}", self.index_count_per_instance),
            )
            .field("instance_count", &format_args!("{:?}", self.instance_count))
            .field(
                "start_index_location",
                &format_args!("{:?}", self.start_index_location),
            )
            .field(
                "base_vertex_location",
                &format_args!("{:?}", self.base_vertex_location),
            )
            .field(
                "start_instance_location",
                &format_args!("{:?}", self.start_instance_location),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DRAW_INDEXED_ARGUMENTS {
    fn clone(&self) -> Self {
        Self {
            index_count_per_instance: self.index_count_per_instance,
            instance_count: self.instance_count,
            start_index_location: self.start_index_location,
            base_vertex_location: self.base_vertex_location,
            start_instance_location: self.start_instance_location,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DRAW_INDEXED_ARGUMENTS {
    fn eq(&self, other: &Self) -> bool {
        self.index_count_per_instance == other.index_count_per_instance
            && self.instance_count == other.instance_count
            && self.start_index_location == other.start_index_location
            && self.base_vertex_location == other.base_vertex_location
            && self.start_instance_location == other.start_instance_location
    }
}
impl ::std::cmp::Eq for D3D12_DRAW_INDEXED_ARGUMENTS {}
impl ::std::marker::Copy for D3D12_DRAW_INDEXED_ARGUMENTS {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DRED_ENABLEMENT(pub i32);
impl ::std::convert::From<i32> for D3D12_DRED_ENABLEMENT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DRED_ENABLEMENT {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DRED_ENABLEMENT {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DRED_ENABLEMENT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_ENABLEMENT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DRED_ENABLEMENT {}
impl ::std::marker::Copy for D3D12_DRED_ENABLEMENT {}
impl D3D12_DRED_ENABLEMENT {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED: Self = Self(0i32);
    pub const D3D12_DRED_ENABLEMENT_FORCED_OFF: Self = Self(1i32);
    pub const D3D12_DRED_ENABLEMENT_FORCED_ON: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_DRED_ENABLEMENT {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DRED_VERSION(pub i32);
impl ::std::convert::From<i32> for D3D12_DRED_VERSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DRED_VERSION {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DRED_VERSION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DRED_VERSION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DRED_VERSION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DRED_VERSION {}
impl ::std::marker::Copy for D3D12_DRED_VERSION {}
impl D3D12_DRED_VERSION {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DRED_VERSION_1_0: Self = Self(1i32);
    pub const D3D12_DRED_VERSION_1_1: Self = Self(2i32);
    pub const D3D12_DRED_VERSION_1_2: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_DRED_VERSION {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS(pub i32);
impl ::std::convert::From<i32> for D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {}
impl ::std::marker::Copy for D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {}
impl D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE: Self = Self(0i32);
    pub const D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE: Self = Self(1i32);
    pub const D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED: Self = Self(2i32);
    pub const D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION: Self = Self(3i32);
    pub const D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
    type Abi = Self;
}
pub const D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END: u32 = 4294967287u32;
pub const D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START: u32 = 4294967280u32;
pub const D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS: u32 = 3968u32;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT: u32 = 32u32;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS: u32 = 3u32;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT: u32 = 32u32;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_DS_OUTPUT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_DS_OUTPUT_REGISTER_COUNT: u32 = 32u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_EXPORT_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_EXPORT_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_EXPORT_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_EXPORT_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_EXPORT_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_EXPORT_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_EXPORT_FLAGS {}
impl ::std::marker::Copy for D3D12_EXPORT_FLAGS {}
impl D3D12_EXPORT_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_EXPORT_FLAG_NONE: Self = Self(0i32);
}
unsafe impl ::windows::Abi for D3D12_EXPORT_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_EXPORT_DESC {
    pub name: *mut u16,
    pub export_to_rename: *mut u16,
    pub flags: D3D12_EXPORT_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_EXPORT_DESC_abi(*mut u16, *mut u16, D3D12_EXPORT_FLAGS);
impl D3D12_EXPORT_DESC {}
unsafe impl ::windows::Abi for D3D12_EXPORT_DESC {
    type Abi = D3D12_EXPORT_DESC_abi;
}
impl ::std::default::Default for D3D12_EXPORT_DESC {
    fn default() -> Self {
        Self {
            name: ::std::ptr::null_mut(),
            export_to_rename: ::std::ptr::null_mut(),
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_EXPORT_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_EXPORT_DESC")
            .field("name", &format_args!("{:?}", self.name))
            .field(
                "export_to_rename",
                &format_args!("{:?}", self.export_to_rename),
            )
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_EXPORT_DESC {
    fn clone(&self) -> Self {
        Self {
            name: self.name,
            export_to_rename: self.export_to_rename,
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_EXPORT_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.name == other.name
            && self.export_to_rename == other.export_to_rename
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_EXPORT_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DXIL_LIBRARY_DESC {
    pub dxil_library: D3D12_SHADER_BYTECODE,
    pub num_exports: u32,
    pub p_exports: *mut D3D12_EXPORT_DESC,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DXIL_LIBRARY_DESC_abi(D3D12_SHADER_BYTECODE_abi, u32, *mut D3D12_EXPORT_DESC_abi);
impl D3D12_DXIL_LIBRARY_DESC {}
unsafe impl ::windows::Abi for D3D12_DXIL_LIBRARY_DESC {
    type Abi = D3D12_DXIL_LIBRARY_DESC_abi;
}
impl ::std::default::Default for D3D12_DXIL_LIBRARY_DESC {
    fn default() -> Self {
        Self {
            dxil_library: ::std::default::Default::default(),
            num_exports: 0,
            p_exports: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DXIL_LIBRARY_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DXIL_LIBRARY_DESC")
            .field("dxil_library", &format_args!("{:?}", self.dxil_library))
            .field("num_exports", &format_args!("{:?}", self.num_exports))
            .field("p_exports", &format_args!("{:?}", self.p_exports))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DXIL_LIBRARY_DESC {
    fn clone(&self) -> Self {
        Self {
            dxil_library: <D3D12_SHADER_BYTECODE as std::clone::Clone>::clone(&self.dxil_library),
            num_exports: self.num_exports,
            p_exports: <*mut D3D12_EXPORT_DESC as std::clone::Clone>::clone(&self.p_exports),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DXIL_LIBRARY_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.dxil_library == other.dxil_library
            && self.num_exports == other.num_exports
            && self.p_exports == other.p_exports
    }
}
impl ::std::cmp::Eq for D3D12_DXIL_LIBRARY_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    pub subobject_to_associate: *mut u16,
    pub num_exports: u32,
    pub p_exports: *mut *mut u16,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION_abi(*mut u16, u32, *mut *mut u16);
impl D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {}
unsafe impl ::windows::Abi for D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    type Abi = D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION_abi;
}
impl ::std::default::Default for D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    fn default() -> Self {
        Self {
            subobject_to_associate: ::std::ptr::null_mut(),
            num_exports: 0,
            p_exports: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION")
            .field(
                "subobject_to_associate",
                &format_args!("{:?}", self.subobject_to_associate),
            )
            .field("num_exports", &format_args!("{:?}", self.num_exports))
            .field("p_exports", &format_args!("{:?}", self.p_exports))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    fn clone(&self) -> Self {
        Self {
            subobject_to_associate: self.subobject_to_associate,
            num_exports: self.num_exports,
            p_exports: self.p_exports,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    fn eq(&self, other: &Self) -> bool {
        self.subobject_to_associate == other.subobject_to_associate
            && self.num_exports == other.num_exports
            && self.p_exports == other.p_exports
    }
}
impl ::std::cmp::Eq for D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {}
impl ::std::marker::Copy for D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12StateObject(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12StateObject {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12StateObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12StateObject {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12StateObject {}
unsafe impl ::windows::Interface for ID3D12StateObject {
    type Vtable = ID3D12StateObject_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1191274819,
        64680,
        17812,
        [147, 234, 175, 37, 139, 85, 52, 109],
    );
}
#[repr(C)]
pub struct ID3D12StateObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12StateObject {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
}
impl ::std::convert::From<ID3D12StateObject> for ::windows::IUnknown {
    fn from(value: ID3D12StateObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12StateObject> for ::windows::IUnknown {
    fn from(value: &ID3D12StateObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12StateObject {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12StateObject {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12StateObject> for ID3D12Pageable {
    fn from(value: ID3D12StateObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12StateObject> for ID3D12Pageable {
    fn from(value: &ID3D12StateObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12StateObject {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12StateObject {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12StateObject> for ID3D12DeviceChild {
    fn from(value: ID3D12StateObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12StateObject> for ID3D12DeviceChild {
    fn from(value: &ID3D12StateObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12StateObject {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12StateObject {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12StateObject> for ID3D12Object {
    fn from(value: ID3D12StateObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12StateObject> for ID3D12Object {
    fn from(value: &ID3D12StateObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12StateObject {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12StateObject {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_EXISTING_COLLECTION_DESC {
    pub p_existing_collection: ::std::option::Option<ID3D12StateObject>,
    pub num_exports: u32,
    pub p_exports: *mut D3D12_EXPORT_DESC,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_EXISTING_COLLECTION_DESC_abi(::windows::RawPtr, u32, *mut D3D12_EXPORT_DESC_abi);
impl D3D12_EXISTING_COLLECTION_DESC {}
unsafe impl ::windows::Abi for D3D12_EXISTING_COLLECTION_DESC {
    type Abi = D3D12_EXISTING_COLLECTION_DESC_abi;
}
impl ::std::default::Default for D3D12_EXISTING_COLLECTION_DESC {
    fn default() -> Self {
        Self {
            p_existing_collection: ::std::default::Default::default(),
            num_exports: 0,
            p_exports: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_EXISTING_COLLECTION_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_EXISTING_COLLECTION_DESC")
            .field(
                "p_existing_collection",
                &format_args!("{:?}", self.p_existing_collection),
            )
            .field("num_exports", &format_args!("{:?}", self.num_exports))
            .field("p_exports", &format_args!("{:?}", self.p_exports))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_EXISTING_COLLECTION_DESC {
    fn clone(&self) -> Self {
        Self {
            p_existing_collection:
                <::std::option::Option<ID3D12StateObject> as std::clone::Clone>::clone(
                    &self.p_existing_collection,
                ),
            num_exports: self.num_exports,
            p_exports: <*mut D3D12_EXPORT_DESC as std::clone::Clone>::clone(&self.p_exports),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_EXISTING_COLLECTION_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.p_existing_collection == other.p_existing_collection
            && self.num_exports == other.num_exports
            && self.p_exports == other.p_exports
    }
}
impl ::std::cmp::Eq for D3D12_EXISTING_COLLECTION_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_FEATURE(pub i32);
impl ::std::convert::From<i32> for D3D12_FEATURE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_FEATURE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_FEATURE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE {}
impl ::std::marker::Copy for D3D12_FEATURE {}
impl D3D12_FEATURE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_FEATURE_D3D12_OPTIONS: Self = Self(0i32);
    pub const D3D12_FEATURE_ARCHITECTURE: Self = Self(1i32);
    pub const D3D12_FEATURE_FEATURE_LEVELS: Self = Self(2i32);
    pub const D3D12_FEATURE_FORMAT_SUPPORT: Self = Self(3i32);
    pub const D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS: Self = Self(4i32);
    pub const D3D12_FEATURE_FORMAT_INFO: Self = Self(5i32);
    pub const D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT: Self = Self(6i32);
    pub const D3D12_FEATURE_SHADER_MODEL: Self = Self(7i32);
    pub const D3D12_FEATURE_D3D12_OPTIONS1: Self = Self(8i32);
    pub const D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT: Self = Self(10i32);
    pub const D3D12_FEATURE_ROOT_SIGNATURE: Self = Self(12i32);
    pub const D3D12_FEATURE_ARCHITECTURE1: Self = Self(16i32);
    pub const D3D12_FEATURE_D3D12_OPTIONS2: Self = Self(18i32);
    pub const D3D12_FEATURE_SHADER_CACHE: Self = Self(19i32);
    pub const D3D12_FEATURE_COMMAND_QUEUE_PRIORITY: Self = Self(20i32);
    pub const D3D12_FEATURE_D3D12_OPTIONS3: Self = Self(21i32);
    pub const D3D12_FEATURE_EXISTING_HEAPS: Self = Self(22i32);
    pub const D3D12_FEATURE_D3D12_OPTIONS4: Self = Self(23i32);
    pub const D3D12_FEATURE_SERIALIZATION: Self = Self(24i32);
    pub const D3D12_FEATURE_CROSS_NODE: Self = Self(25i32);
    pub const D3D12_FEATURE_D3D12_OPTIONS5: Self = Self(27i32);
    pub const D3D12_FEATURE_D3D12_OPTIONS6: Self = Self(30i32);
    pub const D3D12_FEATURE_QUERY_META_COMMAND: Self = Self(31i32);
    pub const D3D12_FEATURE_D3D12_OPTIONS7: Self = Self(32i32);
    pub const D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT: Self = Self(33i32);
    pub const D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES: Self = Self(34i32);
}
unsafe impl ::windows::Abi for D3D12_FEATURE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_ARCHITECTURE {
    pub node_index: u32,
    pub tile_based_renderer: ::windows::BOOL,
    pub uma: ::windows::BOOL,
    pub cache_coherent_uma: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_ARCHITECTURE_abi(
    u32,
    ::windows::BOOL,
    ::windows::BOOL,
    ::windows::BOOL,
);
impl D3D12_FEATURE_DATA_ARCHITECTURE {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_ARCHITECTURE {
    type Abi = D3D12_FEATURE_DATA_ARCHITECTURE_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_ARCHITECTURE {
    fn default() -> Self {
        Self {
            node_index: 0,
            tile_based_renderer: ::std::default::Default::default(),
            uma: ::std::default::Default::default(),
            cache_coherent_uma: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_ARCHITECTURE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_ARCHITECTURE")
            .field("node_index", &format_args!("{:?}", self.node_index))
            .field(
                "tile_based_renderer",
                &format_args!("{:?}", self.tile_based_renderer),
            )
            .field("uma", &format_args!("{:?}", self.uma))
            .field(
                "cache_coherent_uma",
                &format_args!("{:?}", self.cache_coherent_uma),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_ARCHITECTURE {
    fn clone(&self) -> Self {
        Self {
            node_index: self.node_index,
            tile_based_renderer: <::windows::BOOL as std::clone::Clone>::clone(
                &self.tile_based_renderer,
            ),
            uma: <::windows::BOOL as std::clone::Clone>::clone(&self.uma),
            cache_coherent_uma: <::windows::BOOL as std::clone::Clone>::clone(
                &self.cache_coherent_uma,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_ARCHITECTURE {
    fn eq(&self, other: &Self) -> bool {
        self.node_index == other.node_index
            && self.tile_based_renderer == other.tile_based_renderer
            && self.uma == other.uma
            && self.cache_coherent_uma == other.cache_coherent_uma
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_ARCHITECTURE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_ARCHITECTURE1 {
    pub node_index: u32,
    pub tile_based_renderer: ::windows::BOOL,
    pub uma: ::windows::BOOL,
    pub cache_coherent_uma: ::windows::BOOL,
    pub isolated_mmu: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_ARCHITECTURE1_abi(
    u32,
    ::windows::BOOL,
    ::windows::BOOL,
    ::windows::BOOL,
    ::windows::BOOL,
);
impl D3D12_FEATURE_DATA_ARCHITECTURE1 {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_ARCHITECTURE1 {
    type Abi = D3D12_FEATURE_DATA_ARCHITECTURE1_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_ARCHITECTURE1 {
    fn default() -> Self {
        Self {
            node_index: 0,
            tile_based_renderer: ::std::default::Default::default(),
            uma: ::std::default::Default::default(),
            cache_coherent_uma: ::std::default::Default::default(),
            isolated_mmu: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_ARCHITECTURE1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_ARCHITECTURE1")
            .field("node_index", &format_args!("{:?}", self.node_index))
            .field(
                "tile_based_renderer",
                &format_args!("{:?}", self.tile_based_renderer),
            )
            .field("uma", &format_args!("{:?}", self.uma))
            .field(
                "cache_coherent_uma",
                &format_args!("{:?}", self.cache_coherent_uma),
            )
            .field("isolated_mmu", &format_args!("{:?}", self.isolated_mmu))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_ARCHITECTURE1 {
    fn clone(&self) -> Self {
        Self {
            node_index: self.node_index,
            tile_based_renderer: <::windows::BOOL as std::clone::Clone>::clone(
                &self.tile_based_renderer,
            ),
            uma: <::windows::BOOL as std::clone::Clone>::clone(&self.uma),
            cache_coherent_uma: <::windows::BOOL as std::clone::Clone>::clone(
                &self.cache_coherent_uma,
            ),
            isolated_mmu: <::windows::BOOL as std::clone::Clone>::clone(&self.isolated_mmu),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_ARCHITECTURE1 {
    fn eq(&self, other: &Self) -> bool {
        self.node_index == other.node_index
            && self.tile_based_renderer == other.tile_based_renderer
            && self.uma == other.uma
            && self.cache_coherent_uma == other.cache_coherent_uma
            && self.isolated_mmu == other.isolated_mmu
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_ARCHITECTURE1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {
    pub command_list_type: D3D12_COMMAND_LIST_TYPE,
    pub priority: u32,
    pub priority_for_type_is_supported: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY_abi(
    D3D12_COMMAND_LIST_TYPE,
    u32,
    ::windows::BOOL,
);
impl D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {
    type Abi = D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {
    fn default() -> Self {
        Self {
            command_list_type: ::std::default::Default::default(),
            priority: 0,
            priority_for_type_is_supported: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY")
            .field(
                "command_list_type",
                &format_args!("{:?}", self.command_list_type),
            )
            .field("priority", &format_args!("{:?}", self.priority))
            .field(
                "priority_for_type_is_supported",
                &format_args!("{:?}", self.priority_for_type_is_supported),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {
    fn clone(&self) -> Self {
        Self {
            command_list_type: self.command_list_type,
            priority: self.priority,
            priority_for_type_is_supported: <::windows::BOOL as std::clone::Clone>::clone(
                &self.priority_for_type_is_supported,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {
    fn eq(&self, other: &Self) -> bool {
        self.command_list_type == other.command_list_type
            && self.priority == other.priority
            && self.priority_for_type_is_supported == other.priority_for_type_is_supported
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_CROSS_NODE {
    pub sharing_tier: D3D12_CROSS_NODE_SHARING_TIER,
    pub atomic_shader_instructions: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_CROSS_NODE_abi(D3D12_CROSS_NODE_SHARING_TIER, ::windows::BOOL);
impl D3D12_FEATURE_DATA_CROSS_NODE {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_CROSS_NODE {
    type Abi = D3D12_FEATURE_DATA_CROSS_NODE_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_CROSS_NODE {
    fn default() -> Self {
        Self {
            sharing_tier: ::std::default::Default::default(),
            atomic_shader_instructions: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_CROSS_NODE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_CROSS_NODE")
            .field("sharing_tier", &format_args!("{:?}", self.sharing_tier))
            .field(
                "atomic_shader_instructions",
                &format_args!("{:?}", self.atomic_shader_instructions),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_CROSS_NODE {
    fn clone(&self) -> Self {
        Self {
            sharing_tier: self.sharing_tier,
            atomic_shader_instructions: <::windows::BOOL as std::clone::Clone>::clone(
                &self.atomic_shader_instructions,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_CROSS_NODE {
    fn eq(&self, other: &Self) -> bool {
        self.sharing_tier == other.sharing_tier
            && self.atomic_shader_instructions == other.atomic_shader_instructions
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_CROSS_NODE {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SHADER_MIN_PRECISION_SUPPORT(pub i32);
impl ::std::convert::From<i32> for D3D12_SHADER_MIN_PRECISION_SUPPORT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SHADER_MIN_PRECISION_SUPPORT {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SHADER_MIN_PRECISION_SUPPORT {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_MIN_PRECISION_SUPPORT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_MIN_PRECISION_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_MIN_PRECISION_SUPPORT {}
impl ::std::marker::Copy for D3D12_SHADER_MIN_PRECISION_SUPPORT {}
impl D3D12_SHADER_MIN_PRECISION_SUPPORT {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE: Self = Self(0i32);
    pub const D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT: Self = Self(1i32);
    pub const D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_SHADER_MIN_PRECISION_SUPPORT {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_TILED_RESOURCES_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_TILED_RESOURCES_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_TILED_RESOURCES_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_TILED_RESOURCES_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_TILED_RESOURCES_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_TILED_RESOURCES_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_TILED_RESOURCES_TIER {}
impl ::std::marker::Copy for D3D12_TILED_RESOURCES_TIER {}
impl D3D12_TILED_RESOURCES_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED: Self = Self(0i32);
    pub const D3D12_TILED_RESOURCES_TIER_1: Self = Self(1i32);
    pub const D3D12_TILED_RESOURCES_TIER_2: Self = Self(2i32);
    pub const D3D12_TILED_RESOURCES_TIER_3: Self = Self(3i32);
    pub const D3D12_TILED_RESOURCES_TIER_4: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_TILED_RESOURCES_TIER {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESOURCE_BINDING_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_RESOURCE_BINDING_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_BINDING_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESOURCE_BINDING_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_BINDING_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_BINDING_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_BINDING_TIER {}
impl ::std::marker::Copy for D3D12_RESOURCE_BINDING_TIER {}
impl D3D12_RESOURCE_BINDING_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESOURCE_BINDING_TIER_1: Self = Self(1i32);
    pub const D3D12_RESOURCE_BINDING_TIER_2: Self = Self(2i32);
    pub const D3D12_RESOURCE_BINDING_TIER_3: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_RESOURCE_BINDING_TIER {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESOURCE_HEAP_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_RESOURCE_HEAP_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_HEAP_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESOURCE_HEAP_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_HEAP_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_HEAP_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_HEAP_TIER {}
impl ::std::marker::Copy for D3D12_RESOURCE_HEAP_TIER {}
impl D3D12_RESOURCE_HEAP_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESOURCE_HEAP_TIER_1: Self = Self(1i32);
    pub const D3D12_RESOURCE_HEAP_TIER_2: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_RESOURCE_HEAP_TIER {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS {
    pub double_precision_float_shader_ops: ::windows::BOOL,
    pub output_merger_logic_op: ::windows::BOOL,
    pub min_precision_support: D3D12_SHADER_MIN_PRECISION_SUPPORT,
    pub tiled_resources_tier: D3D12_TILED_RESOURCES_TIER,
    pub resource_binding_tier: D3D12_RESOURCE_BINDING_TIER,
    pub ps_specified_stencil_ref_supported: ::windows::BOOL,
    pub typed_uav_load_additional_formats: ::windows::BOOL,
    pub ro_vs_supported: ::windows::BOOL,
    pub conservative_rasterization_tier: D3D12_CONSERVATIVE_RASTERIZATION_TIER,
    pub max_gpu_virtual_address_bits_per_resource: u32,
    pub standard_swizzle64kb_supported: ::windows::BOOL,
    pub cross_node_sharing_tier: D3D12_CROSS_NODE_SHARING_TIER,
    pub cross_adapter_row_major_texture_supported: ::windows::BOOL,
    pub vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation:
        ::windows::BOOL,
    pub resource_heap_tier: D3D12_RESOURCE_HEAP_TIER,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS_abi(
    ::windows::BOOL,
    ::windows::BOOL,
    D3D12_SHADER_MIN_PRECISION_SUPPORT,
    D3D12_TILED_RESOURCES_TIER,
    D3D12_RESOURCE_BINDING_TIER,
    ::windows::BOOL,
    ::windows::BOOL,
    ::windows::BOOL,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER,
    u32,
    ::windows::BOOL,
    D3D12_CROSS_NODE_SHARING_TIER,
    ::windows::BOOL,
    ::windows::BOOL,
    D3D12_RESOURCE_HEAP_TIER,
);
impl D3D12_FEATURE_DATA_D3D12_OPTIONS {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_D3D12_OPTIONS {
    type Abi = D3D12_FEATURE_DATA_D3D12_OPTIONS_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_D3D12_OPTIONS {
    fn default() -> Self {
        Self { double_precision_float_shader_ops : :: std :: default :: Default :: default () , output_merger_logic_op : :: std :: default :: Default :: default () , min_precision_support : :: std :: default :: Default :: default () , tiled_resources_tier : :: std :: default :: Default :: default () , resource_binding_tier : :: std :: default :: Default :: default () , ps_specified_stencil_ref_supported : :: std :: default :: Default :: default () , typed_uav_load_additional_formats : :: std :: default :: Default :: default () , ro_vs_supported : :: std :: default :: Default :: default () , conservative_rasterization_tier : :: std :: default :: Default :: default () , max_gpu_virtual_address_bits_per_resource : 0 , standard_swizzle64kb_supported : :: std :: default :: Default :: default () , cross_node_sharing_tier : :: std :: default :: Default :: default () , cross_adapter_row_major_texture_supported : :: std :: default :: Default :: default () , vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation : :: std :: default :: Default :: default () , resource_heap_tier : :: std :: default :: Default :: default () }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_D3D12_OPTIONS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt . debug_struct ("D3D12_FEATURE_DATA_D3D12_OPTIONS") . field ("double_precision_float_shader_ops" , & format_args ! ("{:?}" , self . double_precision_float_shader_ops)) . field ("output_merger_logic_op" , & format_args ! ("{:?}" , self . output_merger_logic_op)) . field ("min_precision_support" , & format_args ! ("{:?}" , self . min_precision_support)) . field ("tiled_resources_tier" , & format_args ! ("{:?}" , self . tiled_resources_tier)) . field ("resource_binding_tier" , & format_args ! ("{:?}" , self . resource_binding_tier)) . field ("ps_specified_stencil_ref_supported" , & format_args ! ("{:?}" , self . ps_specified_stencil_ref_supported)) . field ("typed_uav_load_additional_formats" , & format_args ! ("{:?}" , self . typed_uav_load_additional_formats)) . field ("ro_vs_supported" , & format_args ! ("{:?}" , self . ro_vs_supported)) . field ("conservative_rasterization_tier" , & format_args ! ("{:?}" , self . conservative_rasterization_tier)) . field ("max_gpu_virtual_address_bits_per_resource" , & format_args ! ("{:?}" , self . max_gpu_virtual_address_bits_per_resource)) . field ("standard_swizzle64kb_supported" , & format_args ! ("{:?}" , self . standard_swizzle64kb_supported)) . field ("cross_node_sharing_tier" , & format_args ! ("{:?}" , self . cross_node_sharing_tier)) . field ("cross_adapter_row_major_texture_supported" , & format_args ! ("{:?}" , self . cross_adapter_row_major_texture_supported)) . field ("vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation" , & format_args ! ("{:?}" , self . vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation)) . field ("resource_heap_tier" , & format_args ! ("{:?}" , self . resource_heap_tier)) . finish ()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_D3D12_OPTIONS {
    fn clone(&self) -> Self {
        Self { double_precision_float_shader_ops : < :: windows :: BOOL as std :: clone :: Clone > :: clone (& self . double_precision_float_shader_ops) , output_merger_logic_op : < :: windows :: BOOL as std :: clone :: Clone > :: clone (& self . output_merger_logic_op) , min_precision_support : self . min_precision_support , tiled_resources_tier : self . tiled_resources_tier , resource_binding_tier : self . resource_binding_tier , ps_specified_stencil_ref_supported : < :: windows :: BOOL as std :: clone :: Clone > :: clone (& self . ps_specified_stencil_ref_supported) , typed_uav_load_additional_formats : < :: windows :: BOOL as std :: clone :: Clone > :: clone (& self . typed_uav_load_additional_formats) , ro_vs_supported : < :: windows :: BOOL as std :: clone :: Clone > :: clone (& self . ro_vs_supported) , conservative_rasterization_tier : self . conservative_rasterization_tier , max_gpu_virtual_address_bits_per_resource : self . max_gpu_virtual_address_bits_per_resource , standard_swizzle64kb_supported : < :: windows :: BOOL as std :: clone :: Clone > :: clone (& self . standard_swizzle64kb_supported) , cross_node_sharing_tier : self . cross_node_sharing_tier , cross_adapter_row_major_texture_supported : < :: windows :: BOOL as std :: clone :: Clone > :: clone (& self . cross_adapter_row_major_texture_supported) , vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation : < :: windows :: BOOL as std :: clone :: Clone > :: clone (& self . vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation) , resource_heap_tier : self . resource_heap_tier }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_D3D12_OPTIONS {
    fn eq(&self, other: &Self) -> bool {
        self . double_precision_float_shader_ops == other . double_precision_float_shader_ops && self . output_merger_logic_op == other . output_merger_logic_op && self . min_precision_support == other . min_precision_support && self . tiled_resources_tier == other . tiled_resources_tier && self . resource_binding_tier == other . resource_binding_tier && self . ps_specified_stencil_ref_supported == other . ps_specified_stencil_ref_supported && self . typed_uav_load_additional_formats == other . typed_uav_load_additional_formats && self . ro_vs_supported == other . ro_vs_supported && self . conservative_rasterization_tier == other . conservative_rasterization_tier && self . max_gpu_virtual_address_bits_per_resource == other . max_gpu_virtual_address_bits_per_resource && self . standard_swizzle64kb_supported == other . standard_swizzle64kb_supported && self . cross_node_sharing_tier == other . cross_node_sharing_tier && self . cross_adapter_row_major_texture_supported == other . cross_adapter_row_major_texture_supported && self . vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation == other . vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation && self . resource_heap_tier == other . resource_heap_tier
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_D3D12_OPTIONS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
    pub wave_ops: ::windows::BOOL,
    pub wave_lane_count_min: u32,
    pub wave_lane_count_max: u32,
    pub total_lane_count: u32,
    pub expanded_compute_resource_states: ::windows::BOOL,
    pub int64_shader_ops: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS1_abi(
    ::windows::BOOL,
    u32,
    u32,
    u32,
    ::windows::BOOL,
    ::windows::BOOL,
);
impl D3D12_FEATURE_DATA_D3D12_OPTIONS1 {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
    type Abi = D3D12_FEATURE_DATA_D3D12_OPTIONS1_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
    fn default() -> Self {
        Self {
            wave_ops: ::std::default::Default::default(),
            wave_lane_count_min: 0,
            wave_lane_count_max: 0,
            total_lane_count: 0,
            expanded_compute_resource_states: ::std::default::Default::default(),
            int64_shader_ops: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_D3D12_OPTIONS1")
            .field("wave_ops", &format_args!("{:?}", self.wave_ops))
            .field(
                "wave_lane_count_min",
                &format_args!("{:?}", self.wave_lane_count_min),
            )
            .field(
                "wave_lane_count_max",
                &format_args!("{:?}", self.wave_lane_count_max),
            )
            .field(
                "total_lane_count",
                &format_args!("{:?}", self.total_lane_count),
            )
            .field(
                "expanded_compute_resource_states",
                &format_args!("{:?}", self.expanded_compute_resource_states),
            )
            .field(
                "int64_shader_ops",
                &format_args!("{:?}", self.int64_shader_ops),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
    fn clone(&self) -> Self {
        Self {
            wave_ops: <::windows::BOOL as std::clone::Clone>::clone(&self.wave_ops),
            wave_lane_count_min: self.wave_lane_count_min,
            wave_lane_count_max: self.wave_lane_count_max,
            total_lane_count: self.total_lane_count,
            expanded_compute_resource_states: <::windows::BOOL as std::clone::Clone>::clone(
                &self.expanded_compute_resource_states,
            ),
            int64_shader_ops: <::windows::BOOL as std::clone::Clone>::clone(&self.int64_shader_ops),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
    fn eq(&self, other: &Self) -> bool {
        self.wave_ops == other.wave_ops
            && self.wave_lane_count_min == other.wave_lane_count_min
            && self.wave_lane_count_max == other.wave_lane_count_max
            && self.total_lane_count == other.total_lane_count
            && self.expanded_compute_resource_states == other.expanded_compute_resource_states
            && self.int64_shader_ops == other.int64_shader_ops
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_D3D12_OPTIONS1 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {}
impl ::std::marker::Copy for D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {}
impl D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED: Self = Self(0i32);
    pub const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1: Self = Self(1i32);
    pub const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS2 {
    pub depth_bounds_test_supported: ::windows::BOOL,
    pub programmable_sample_positions_tier: D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS2_abi(
    ::windows::BOOL,
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER,
);
impl D3D12_FEATURE_DATA_D3D12_OPTIONS2 {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_D3D12_OPTIONS2 {
    type Abi = D3D12_FEATURE_DATA_D3D12_OPTIONS2_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_D3D12_OPTIONS2 {
    fn default() -> Self {
        Self {
            depth_bounds_test_supported: ::std::default::Default::default(),
            programmable_sample_positions_tier: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_D3D12_OPTIONS2 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_D3D12_OPTIONS2")
            .field(
                "depth_bounds_test_supported",
                &format_args!("{:?}", self.depth_bounds_test_supported),
            )
            .field(
                "programmable_sample_positions_tier",
                &format_args!("{:?}", self.programmable_sample_positions_tier),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_D3D12_OPTIONS2 {
    fn clone(&self) -> Self {
        Self {
            depth_bounds_test_supported: <::windows::BOOL as std::clone::Clone>::clone(
                &self.depth_bounds_test_supported,
            ),
            programmable_sample_positions_tier: self.programmable_sample_positions_tier,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_D3D12_OPTIONS2 {
    fn eq(&self, other: &Self) -> bool {
        self.depth_bounds_test_supported == other.depth_bounds_test_supported
            && self.programmable_sample_positions_tier == other.programmable_sample_positions_tier
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_D3D12_OPTIONS2 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_VIEW_INSTANCING_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_VIEW_INSTANCING_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_VIEW_INSTANCING_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_VIEW_INSTANCING_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_VIEW_INSTANCING_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_VIEW_INSTANCING_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_VIEW_INSTANCING_TIER {}
impl ::std::marker::Copy for D3D12_VIEW_INSTANCING_TIER {}
impl D3D12_VIEW_INSTANCING_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED: Self = Self(0i32);
    pub const D3D12_VIEW_INSTANCING_TIER_1: Self = Self(1i32);
    pub const D3D12_VIEW_INSTANCING_TIER_2: Self = Self(2i32);
    pub const D3D12_VIEW_INSTANCING_TIER_3: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_VIEW_INSTANCING_TIER {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS3 {
    pub copy_queue_timestamp_queries_supported: ::windows::BOOL,
    pub casting_fully_typed_format_supported: ::windows::BOOL,
    pub write_buffer_immediate_support_flags: D3D12_COMMAND_LIST_SUPPORT_FLAGS,
    pub view_instancing_tier: D3D12_VIEW_INSTANCING_TIER,
    pub barycentrics_supported: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS3_abi(
    ::windows::BOOL,
    ::windows::BOOL,
    D3D12_COMMAND_LIST_SUPPORT_FLAGS,
    D3D12_VIEW_INSTANCING_TIER,
    ::windows::BOOL,
);
impl D3D12_FEATURE_DATA_D3D12_OPTIONS3 {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_D3D12_OPTIONS3 {
    type Abi = D3D12_FEATURE_DATA_D3D12_OPTIONS3_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_D3D12_OPTIONS3 {
    fn default() -> Self {
        Self {
            copy_queue_timestamp_queries_supported: ::std::default::Default::default(),
            casting_fully_typed_format_supported: ::std::default::Default::default(),
            write_buffer_immediate_support_flags: ::std::default::Default::default(),
            view_instancing_tier: ::std::default::Default::default(),
            barycentrics_supported: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_D3D12_OPTIONS3 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_D3D12_OPTIONS3")
            .field(
                "copy_queue_timestamp_queries_supported",
                &format_args!("{:?}", self.copy_queue_timestamp_queries_supported),
            )
            .field(
                "casting_fully_typed_format_supported",
                &format_args!("{:?}", self.casting_fully_typed_format_supported),
            )
            .field(
                "write_buffer_immediate_support_flags",
                &format_args!("{:?}", self.write_buffer_immediate_support_flags),
            )
            .field(
                "view_instancing_tier",
                &format_args!("{:?}", self.view_instancing_tier),
            )
            .field(
                "barycentrics_supported",
                &format_args!("{:?}", self.barycentrics_supported),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_D3D12_OPTIONS3 {
    fn clone(&self) -> Self {
        Self {
            copy_queue_timestamp_queries_supported: <::windows::BOOL as std::clone::Clone>::clone(
                &self.copy_queue_timestamp_queries_supported,
            ),
            casting_fully_typed_format_supported: <::windows::BOOL as std::clone::Clone>::clone(
                &self.casting_fully_typed_format_supported,
            ),
            write_buffer_immediate_support_flags: self.write_buffer_immediate_support_flags,
            view_instancing_tier: self.view_instancing_tier,
            barycentrics_supported: <::windows::BOOL as std::clone::Clone>::clone(
                &self.barycentrics_supported,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_D3D12_OPTIONS3 {
    fn eq(&self, other: &Self) -> bool {
        self.copy_queue_timestamp_queries_supported == other.copy_queue_timestamp_queries_supported
            && self.casting_fully_typed_format_supported
                == other.casting_fully_typed_format_supported
            && self.write_buffer_immediate_support_flags
                == other.write_buffer_immediate_support_flags
            && self.view_instancing_tier == other.view_instancing_tier
            && self.barycentrics_supported == other.barycentrics_supported
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_D3D12_OPTIONS3 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {}
impl ::std::marker::Copy for D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {}
impl D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0: Self = Self(0i32);
    pub const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1: Self = Self(1i32);
    pub const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS4 {
    pub msaa64kb_aligned_texture_supported: ::windows::BOOL,
    pub shared_resource_compatibility_tier: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER,
    pub native16_bit_shader_ops_supported: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS4_abi(
    ::windows::BOOL,
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER,
    ::windows::BOOL,
);
impl D3D12_FEATURE_DATA_D3D12_OPTIONS4 {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_D3D12_OPTIONS4 {
    type Abi = D3D12_FEATURE_DATA_D3D12_OPTIONS4_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_D3D12_OPTIONS4 {
    fn default() -> Self {
        Self {
            msaa64kb_aligned_texture_supported: ::std::default::Default::default(),
            shared_resource_compatibility_tier: ::std::default::Default::default(),
            native16_bit_shader_ops_supported: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_D3D12_OPTIONS4 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_D3D12_OPTIONS4")
            .field(
                "msaa64kb_aligned_texture_supported",
                &format_args!("{:?}", self.msaa64kb_aligned_texture_supported),
            )
            .field(
                "shared_resource_compatibility_tier",
                &format_args!("{:?}", self.shared_resource_compatibility_tier),
            )
            .field(
                "native16_bit_shader_ops_supported",
                &format_args!("{:?}", self.native16_bit_shader_ops_supported),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_D3D12_OPTIONS4 {
    fn clone(&self) -> Self {
        Self {
            msaa64kb_aligned_texture_supported: <::windows::BOOL as std::clone::Clone>::clone(
                &self.msaa64kb_aligned_texture_supported,
            ),
            shared_resource_compatibility_tier: self.shared_resource_compatibility_tier,
            native16_bit_shader_ops_supported: <::windows::BOOL as std::clone::Clone>::clone(
                &self.native16_bit_shader_ops_supported,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_D3D12_OPTIONS4 {
    fn eq(&self, other: &Self) -> bool {
        self.msaa64kb_aligned_texture_supported == other.msaa64kb_aligned_texture_supported
            && self.shared_resource_compatibility_tier == other.shared_resource_compatibility_tier
            && self.native16_bit_shader_ops_supported == other.native16_bit_shader_ops_supported
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_D3D12_OPTIONS4 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RENDER_PASS_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_RENDER_PASS_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RENDER_PASS_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RENDER_PASS_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_PASS_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_PASS_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_PASS_TIER {}
impl ::std::marker::Copy for D3D12_RENDER_PASS_TIER {}
impl D3D12_RENDER_PASS_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RENDER_PASS_TIER_0: Self = Self(0i32);
    pub const D3D12_RENDER_PASS_TIER_1: Self = Self(1i32);
    pub const D3D12_RENDER_PASS_TIER_2: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_RENDER_PASS_TIER {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAYTRACING_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_RAYTRACING_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAYTRACING_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_TIER {}
impl ::std::marker::Copy for D3D12_RAYTRACING_TIER {}
impl D3D12_RAYTRACING_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAYTRACING_TIER_NOT_SUPPORTED: Self = Self(0i32);
    pub const D3D12_RAYTRACING_TIER_1_0: Self = Self(10i32);
    pub const D3D12_RAYTRACING_TIER_1_1: Self = Self(11i32);
}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_TIER {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS5 {
    pub srv_only_tiled_resource_tier3: ::windows::BOOL,
    pub render_passes_tier: D3D12_RENDER_PASS_TIER,
    pub raytracing_tier: D3D12_RAYTRACING_TIER,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS5_abi(
    ::windows::BOOL,
    D3D12_RENDER_PASS_TIER,
    D3D12_RAYTRACING_TIER,
);
impl D3D12_FEATURE_DATA_D3D12_OPTIONS5 {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_D3D12_OPTIONS5 {
    type Abi = D3D12_FEATURE_DATA_D3D12_OPTIONS5_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_D3D12_OPTIONS5 {
    fn default() -> Self {
        Self {
            srv_only_tiled_resource_tier3: ::std::default::Default::default(),
            render_passes_tier: ::std::default::Default::default(),
            raytracing_tier: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_D3D12_OPTIONS5 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_D3D12_OPTIONS5")
            .field(
                "srv_only_tiled_resource_tier3",
                &format_args!("{:?}", self.srv_only_tiled_resource_tier3),
            )
            .field(
                "render_passes_tier",
                &format_args!("{:?}", self.render_passes_tier),
            )
            .field(
                "raytracing_tier",
                &format_args!("{:?}", self.raytracing_tier),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_D3D12_OPTIONS5 {
    fn clone(&self) -> Self {
        Self {
            srv_only_tiled_resource_tier3: <::windows::BOOL as std::clone::Clone>::clone(
                &self.srv_only_tiled_resource_tier3,
            ),
            render_passes_tier: self.render_passes_tier,
            raytracing_tier: self.raytracing_tier,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_D3D12_OPTIONS5 {
    fn eq(&self, other: &Self) -> bool {
        self.srv_only_tiled_resource_tier3 == other.srv_only_tiled_resource_tier3
            && self.render_passes_tier == other.render_passes_tier
            && self.raytracing_tier == other.raytracing_tier
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_D3D12_OPTIONS5 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_VARIABLE_SHADING_RATE_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_VARIABLE_SHADING_RATE_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_VARIABLE_SHADING_RATE_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_VARIABLE_SHADING_RATE_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_VARIABLE_SHADING_RATE_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_VARIABLE_SHADING_RATE_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_VARIABLE_SHADING_RATE_TIER {}
impl ::std::marker::Copy for D3D12_VARIABLE_SHADING_RATE_TIER {}
impl D3D12_VARIABLE_SHADING_RATE_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED: Self = Self(0i32);
    pub const D3D12_VARIABLE_SHADING_RATE_TIER_1: Self = Self(1i32);
    pub const D3D12_VARIABLE_SHADING_RATE_TIER_2: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_VARIABLE_SHADING_RATE_TIER {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS6 {
    pub additional_shading_rates_supported: ::windows::BOOL,
    pub per_primitive_shading_rate_supported_with_viewport_indexing: ::windows::BOOL,
    pub variable_shading_rate_tier: D3D12_VARIABLE_SHADING_RATE_TIER,
    pub shading_rate_image_tile_size: u32,
    pub background_processing_supported: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS6_abi(
    ::windows::BOOL,
    ::windows::BOOL,
    D3D12_VARIABLE_SHADING_RATE_TIER,
    u32,
    ::windows::BOOL,
);
impl D3D12_FEATURE_DATA_D3D12_OPTIONS6 {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_D3D12_OPTIONS6 {
    type Abi = D3D12_FEATURE_DATA_D3D12_OPTIONS6_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_D3D12_OPTIONS6 {
    fn default() -> Self {
        Self {
            additional_shading_rates_supported: ::std::default::Default::default(),
            per_primitive_shading_rate_supported_with_viewport_indexing:
                ::std::default::Default::default(),
            variable_shading_rate_tier: ::std::default::Default::default(),
            shading_rate_image_tile_size: 0,
            background_processing_supported: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_D3D12_OPTIONS6 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_D3D12_OPTIONS6")
            .field(
                "additional_shading_rates_supported",
                &format_args!("{:?}", self.additional_shading_rates_supported),
            )
            .field(
                "per_primitive_shading_rate_supported_with_viewport_indexing",
                &format_args!(
                    "{:?}",
                    self.per_primitive_shading_rate_supported_with_viewport_indexing
                ),
            )
            .field(
                "variable_shading_rate_tier",
                &format_args!("{:?}", self.variable_shading_rate_tier),
            )
            .field(
                "shading_rate_image_tile_size",
                &format_args!("{:?}", self.shading_rate_image_tile_size),
            )
            .field(
                "background_processing_supported",
                &format_args!("{:?}", self.background_processing_supported),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_D3D12_OPTIONS6 {
    fn clone(&self) -> Self {
        Self {
            additional_shading_rates_supported: <::windows::BOOL as std::clone::Clone>::clone(
                &self.additional_shading_rates_supported,
            ),
            per_primitive_shading_rate_supported_with_viewport_indexing:
                <::windows::BOOL as std::clone::Clone>::clone(
                    &self.per_primitive_shading_rate_supported_with_viewport_indexing,
                ),
            variable_shading_rate_tier: self.variable_shading_rate_tier,
            shading_rate_image_tile_size: self.shading_rate_image_tile_size,
            background_processing_supported: <::windows::BOOL as std::clone::Clone>::clone(
                &self.background_processing_supported,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_D3D12_OPTIONS6 {
    fn eq(&self, other: &Self) -> bool {
        self.additional_shading_rates_supported == other.additional_shading_rates_supported
            && self.per_primitive_shading_rate_supported_with_viewport_indexing
                == other.per_primitive_shading_rate_supported_with_viewport_indexing
            && self.variable_shading_rate_tier == other.variable_shading_rate_tier
            && self.shading_rate_image_tile_size == other.shading_rate_image_tile_size
            && self.background_processing_supported == other.background_processing_supported
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_D3D12_OPTIONS6 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_MESH_SHADER_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_MESH_SHADER_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_MESH_SHADER_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_MESH_SHADER_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_MESH_SHADER_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_MESH_SHADER_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_MESH_SHADER_TIER {}
impl ::std::marker::Copy for D3D12_MESH_SHADER_TIER {}
impl D3D12_MESH_SHADER_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_MESH_SHADER_TIER_NOT_SUPPORTED: Self = Self(0i32);
    pub const D3D12_MESH_SHADER_TIER_1: Self = Self(10i32);
}
unsafe impl ::windows::Abi for D3D12_MESH_SHADER_TIER {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SAMPLER_FEEDBACK_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_SAMPLER_FEEDBACK_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SAMPLER_FEEDBACK_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SAMPLER_FEEDBACK_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SAMPLER_FEEDBACK_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SAMPLER_FEEDBACK_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SAMPLER_FEEDBACK_TIER {}
impl ::std::marker::Copy for D3D12_SAMPLER_FEEDBACK_TIER {}
impl D3D12_SAMPLER_FEEDBACK_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED: Self = Self(0i32);
    pub const D3D12_SAMPLER_FEEDBACK_TIER_0_9: Self = Self(90i32);
    pub const D3D12_SAMPLER_FEEDBACK_TIER_1_0: Self = Self(100i32);
}
unsafe impl ::windows::Abi for D3D12_SAMPLER_FEEDBACK_TIER {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS7 {
    pub mesh_shader_tier: D3D12_MESH_SHADER_TIER,
    pub sampler_feedback_tier: D3D12_SAMPLER_FEEDBACK_TIER,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS7_abi(
    D3D12_MESH_SHADER_TIER,
    D3D12_SAMPLER_FEEDBACK_TIER,
);
impl D3D12_FEATURE_DATA_D3D12_OPTIONS7 {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_D3D12_OPTIONS7 {
    type Abi = D3D12_FEATURE_DATA_D3D12_OPTIONS7_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_D3D12_OPTIONS7 {
    fn default() -> Self {
        Self {
            mesh_shader_tier: ::std::default::Default::default(),
            sampler_feedback_tier: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_D3D12_OPTIONS7 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_D3D12_OPTIONS7")
            .field(
                "mesh_shader_tier",
                &format_args!("{:?}", self.mesh_shader_tier),
            )
            .field(
                "sampler_feedback_tier",
                &format_args!("{:?}", self.sampler_feedback_tier),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_D3D12_OPTIONS7 {
    fn clone(&self) -> Self {
        Self {
            mesh_shader_tier: self.mesh_shader_tier,
            sampler_feedback_tier: self.sampler_feedback_tier,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_D3D12_OPTIONS7 {
    fn eq(&self, other: &Self) -> bool {
        self.mesh_shader_tier == other.mesh_shader_tier
            && self.sampler_feedback_tier == other.sampler_feedback_tier
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_D3D12_OPTIONS7 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_EXISTING_HEAPS {
    pub supported: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_EXISTING_HEAPS_abi(::windows::BOOL);
impl D3D12_FEATURE_DATA_EXISTING_HEAPS {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_EXISTING_HEAPS {
    type Abi = D3D12_FEATURE_DATA_EXISTING_HEAPS_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_EXISTING_HEAPS {
    fn default() -> Self {
        Self {
            supported: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_EXISTING_HEAPS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_EXISTING_HEAPS")
            .field("supported", &format_args!("{:?}", self.supported))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_EXISTING_HEAPS {
    fn clone(&self) -> Self {
        Self {
            supported: <::windows::BOOL as std::clone::Clone>::clone(&self.supported),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_EXISTING_HEAPS {
    fn eq(&self, other: &Self) -> bool {
        self.supported == other.supported
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_EXISTING_HEAPS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_FEATURE_LEVELS {
    pub num_feature_levels: u32,
    pub p_feature_levels_requested: *mut super::direct3d11::D3D_FEATURE_LEVEL,
    pub max_supported_feature_level: super::direct3d11::D3D_FEATURE_LEVEL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_FEATURE_LEVELS_abi(
    u32,
    *mut super::direct3d11::D3D_FEATURE_LEVEL,
    super::direct3d11::D3D_FEATURE_LEVEL,
);
impl D3D12_FEATURE_DATA_FEATURE_LEVELS {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_FEATURE_LEVELS {
    type Abi = D3D12_FEATURE_DATA_FEATURE_LEVELS_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_FEATURE_LEVELS {
    fn default() -> Self {
        Self {
            num_feature_levels: 0,
            p_feature_levels_requested: ::std::ptr::null_mut(),
            max_supported_feature_level: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_FEATURE_LEVELS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_FEATURE_LEVELS")
            .field(
                "num_feature_levels",
                &format_args!("{:?}", self.num_feature_levels),
            )
            .field(
                "p_feature_levels_requested",
                &format_args!("{:?}", self.p_feature_levels_requested),
            )
            .field(
                "max_supported_feature_level",
                &format_args!("{:?}", self.max_supported_feature_level),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_FEATURE_LEVELS {
    fn clone(&self) -> Self {
        Self {
            num_feature_levels: self.num_feature_levels,
            p_feature_levels_requested: self.p_feature_levels_requested,
            max_supported_feature_level: self.max_supported_feature_level,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_FEATURE_LEVELS {
    fn eq(&self, other: &Self) -> bool {
        self.num_feature_levels == other.num_feature_levels
            && self.p_feature_levels_requested == other.p_feature_levels_requested
            && self.max_supported_feature_level == other.max_supported_feature_level
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_FEATURE_LEVELS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_FORMAT_INFO {
    pub format: super::dxgi::DXGI_FORMAT,
    pub plane_count: u8,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_FORMAT_INFO_abi(super::dxgi::DXGI_FORMAT, u8);
impl D3D12_FEATURE_DATA_FORMAT_INFO {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_FORMAT_INFO {
    type Abi = D3D12_FEATURE_DATA_FORMAT_INFO_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_FORMAT_INFO {
    fn default() -> Self {
        Self {
            format: ::std::default::Default::default(),
            plane_count: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_FORMAT_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_FORMAT_INFO")
            .field("format", &format_args!("{:?}", self.format))
            .field("plane_count", &format_args!("{:?}", self.plane_count))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_FORMAT_INFO {
    fn clone(&self) -> Self {
        Self {
            format: self.format,
            plane_count: self.plane_count,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_FORMAT_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.format == other.format && self.plane_count == other.plane_count
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_FORMAT_INFO {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_FORMAT_SUPPORT1(pub i32);
impl ::std::convert::From<i32> for D3D12_FORMAT_SUPPORT1 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_FORMAT_SUPPORT1 {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_FORMAT_SUPPORT1 {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_FORMAT_SUPPORT1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_FORMAT_SUPPORT1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_FORMAT_SUPPORT1 {}
impl ::std::marker::Copy for D3D12_FORMAT_SUPPORT1 {}
impl D3D12_FORMAT_SUPPORT1 {
    #![allow(non_upper_case_globals)]
    pub const D3D12_FORMAT_SUPPORT1_NONE: Self = Self(0i32);
    pub const D3D12_FORMAT_SUPPORT1_BUFFER: Self = Self(1i32);
    pub const D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER: Self = Self(2i32);
    pub const D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER: Self = Self(4i32);
    pub const D3D12_FORMAT_SUPPORT1_SO_BUFFER: Self = Self(8i32);
    pub const D3D12_FORMAT_SUPPORT1_TEXTURE1D: Self = Self(16i32);
    pub const D3D12_FORMAT_SUPPORT1_TEXTURE2D: Self = Self(32i32);
    pub const D3D12_FORMAT_SUPPORT1_TEXTURE3D: Self = Self(64i32);
    pub const D3D12_FORMAT_SUPPORT1_TEXTURECUBE: Self = Self(128i32);
    pub const D3D12_FORMAT_SUPPORT1_SHADER_LOAD: Self = Self(256i32);
    pub const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE: Self = Self(512i32);
    pub const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON: Self = Self(1024i32);
    pub const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT: Self = Self(2048i32);
    pub const D3D12_FORMAT_SUPPORT1_MIP: Self = Self(4096i32);
    pub const D3D12_FORMAT_SUPPORT1_RENDER_TARGET: Self = Self(16384i32);
    pub const D3D12_FORMAT_SUPPORT1_BLENDABLE: Self = Self(32768i32);
    pub const D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL: Self = Self(65536i32);
    pub const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE: Self = Self(262144i32);
    pub const D3D12_FORMAT_SUPPORT1_DISPLAY: Self = Self(524288i32);
    pub const D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT: Self = Self(1048576i32);
    pub const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET: Self = Self(2097152i32);
    pub const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD: Self = Self(4194304i32);
    pub const D3D12_FORMAT_SUPPORT1_SHADER_GATHER: Self = Self(8388608i32);
    pub const D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST: Self = Self(16777216i32);
    pub const D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW: Self = Self(33554432i32);
    pub const D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON: Self = Self(67108864i32);
    pub const D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT: Self = Self(134217728i32);
    pub const D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT: Self = Self(268435456i32);
    pub const D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT: Self = Self(536870912i32);
    pub const D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER: Self = Self(1073741824i32);
}
unsafe impl ::windows::Abi for D3D12_FORMAT_SUPPORT1 {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_FORMAT_SUPPORT2(pub i32);
impl ::std::convert::From<i32> for D3D12_FORMAT_SUPPORT2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_FORMAT_SUPPORT2 {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_FORMAT_SUPPORT2 {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_FORMAT_SUPPORT2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_FORMAT_SUPPORT2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_FORMAT_SUPPORT2 {}
impl ::std::marker::Copy for D3D12_FORMAT_SUPPORT2 {}
impl D3D12_FORMAT_SUPPORT2 {
    #![allow(non_upper_case_globals)]
    pub const D3D12_FORMAT_SUPPORT2_NONE: Self = Self(0i32);
    pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD: Self = Self(1i32);
    pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS: Self = Self(2i32);
    pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE: Self = Self(4i32);
    pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE: Self = Self(8i32);
    pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX: Self = Self(16i32);
    pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX: Self = Self(32i32);
    pub const D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD: Self = Self(64i32);
    pub const D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE: Self = Self(128i32);
    pub const D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP: Self = Self(256i32);
    pub const D3D12_FORMAT_SUPPORT2_TILED: Self = Self(512i32);
    pub const D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY: Self = Self(16384i32);
    pub const D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK: Self = Self(32768i32);
}
unsafe impl ::windows::Abi for D3D12_FORMAT_SUPPORT2 {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_FORMAT_SUPPORT {
    pub format: super::dxgi::DXGI_FORMAT,
    pub support1: D3D12_FORMAT_SUPPORT1,
    pub support2: D3D12_FORMAT_SUPPORT2,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_FORMAT_SUPPORT_abi(
    super::dxgi::DXGI_FORMAT,
    D3D12_FORMAT_SUPPORT1,
    D3D12_FORMAT_SUPPORT2,
);
impl D3D12_FEATURE_DATA_FORMAT_SUPPORT {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_FORMAT_SUPPORT {
    type Abi = D3D12_FEATURE_DATA_FORMAT_SUPPORT_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_FORMAT_SUPPORT {
    fn default() -> Self {
        Self {
            format: ::std::default::Default::default(),
            support1: ::std::default::Default::default(),
            support2: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_FORMAT_SUPPORT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_FORMAT_SUPPORT")
            .field("format", &format_args!("{:?}", self.format))
            .field("support1", &format_args!("{:?}", self.support1))
            .field("support2", &format_args!("{:?}", self.support2))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_FORMAT_SUPPORT {
    fn clone(&self) -> Self {
        Self {
            format: self.format,
            support1: self.support1,
            support2: self.support2,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_FORMAT_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.format == other.format
            && self.support1 == other.support1
            && self.support2 == other.support2
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_FORMAT_SUPPORT {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    pub max_gpu_virtual_address_bits_per_resource: u32,
    pub max_gpu_virtual_address_bits_per_process: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT_abi(u32, u32);
impl D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    type Abi = D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    fn default() -> Self {
        Self {
            max_gpu_virtual_address_bits_per_resource: 0,
            max_gpu_virtual_address_bits_per_process: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT")
            .field(
                "max_gpu_virtual_address_bits_per_resource",
                &format_args!("{:?}", self.max_gpu_virtual_address_bits_per_resource),
            )
            .field(
                "max_gpu_virtual_address_bits_per_process",
                &format_args!("{:?}", self.max_gpu_virtual_address_bits_per_process),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    fn clone(&self) -> Self {
        Self {
            max_gpu_virtual_address_bits_per_resource: self
                .max_gpu_virtual_address_bits_per_resource,
            max_gpu_virtual_address_bits_per_process: self.max_gpu_virtual_address_bits_per_process,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.max_gpu_virtual_address_bits_per_resource
            == other.max_gpu_virtual_address_bits_per_resource
            && self.max_gpu_virtual_address_bits_per_process
                == other.max_gpu_virtual_address_bits_per_process
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {}
impl ::std::marker::Copy for D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {}
impl ::std::marker::Copy for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {}
impl D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
    pub format: super::dxgi::DXGI_FORMAT,
    pub sample_count: u32,
    pub flags: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS,
    pub num_quality_levels: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS_abi(
    super::dxgi::DXGI_FORMAT,
    u32,
    D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS,
    u32,
);
impl D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
    type Abi = D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
    fn default() -> Self {
        Self {
            format: ::std::default::Default::default(),
            sample_count: 0,
            flags: ::std::default::Default::default(),
            num_quality_levels: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS")
            .field("format", &format_args!("{:?}", self.format))
            .field("sample_count", &format_args!("{:?}", self.sample_count))
            .field("flags", &format_args!("{:?}", self.flags))
            .field(
                "num_quality_levels",
                &format_args!("{:?}", self.num_quality_levels),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
    fn clone(&self) -> Self {
        Self {
            format: self.format,
            sample_count: self.sample_count,
            flags: self.flags,
            num_quality_levels: self.num_quality_levels,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
    fn eq(&self, other: &Self) -> bool {
        self.format == other.format
            && self.sample_count == other.sample_count
            && self.flags == other.flags
            && self.num_quality_levels == other.num_quality_levels
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {}
impl ::std::marker::Copy for D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {}
impl D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {
    pub node_index: u32,
    pub support: D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT_abi(
    u32,
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS,
);
impl D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {
    type Abi = D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {
    fn default() -> Self {
        Self {
            node_index: 0,
            support: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT")
            .field("node_index", &format_args!("{:?}", self.node_index))
            .field("support", &format_args!("{:?}", self.support))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {
    fn clone(&self) -> Self {
        Self {
            node_index: self.node_index,
            support: self.support,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.node_index == other.node_index && self.support == other.support
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {
    pub node_index: u32,
    pub count: u32,
    pub p_types: *mut ::windows::Guid,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES_abi(u32, u32, *mut ::windows::Guid);
impl D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {
    type Abi = D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {
    fn default() -> Self {
        Self {
            node_index: 0,
            count: 0,
            p_types: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES")
            .field("node_index", &format_args!("{:?}", self.node_index))
            .field("count", &format_args!("{:?}", self.count))
            .field("p_types", &format_args!("{:?}", self.p_types))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {
    fn clone(&self) -> Self {
        Self {
            node_index: self.node_index,
            count: self.count,
            p_types: <*mut ::windows::Guid as std::clone::Clone>::clone(&self.p_types),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {
    fn eq(&self, other: &Self) -> bool {
        self.node_index == other.node_index
            && self.count == other.count
            && self.p_types == other.p_types
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {
    pub node_index: u32,
    pub count: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT_abi(u32, u32);
impl D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {
    type Abi = D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {
    fn default() -> Self {
        Self {
            node_index: 0,
            count: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT")
            .field("node_index", &format_args!("{:?}", self.node_index))
            .field("count", &format_args!("{:?}", self.count))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {
    fn clone(&self) -> Self {
        Self {
            node_index: self.node_index,
            count: self.count,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {
    fn eq(&self, other: &Self) -> bool {
        self.node_index == other.node_index && self.count == other.count
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {}
impl ::std::marker::Copy for D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_QUERY_META_COMMAND {
    pub command_id: ::windows::Guid,
    pub node_mask: u32,
    pub p_query_input_data: *mut ::std::ffi::c_void,
    pub query_input_data_size_in_bytes: usize,
    pub p_query_output_data: *mut ::std::ffi::c_void,
    pub query_output_data_size_in_bytes: usize,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_QUERY_META_COMMAND_abi(
    ::windows::Guid,
    u32,
    *mut ::std::ffi::c_void,
    usize,
    *mut ::std::ffi::c_void,
    usize,
);
impl D3D12_FEATURE_DATA_QUERY_META_COMMAND {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_QUERY_META_COMMAND {
    type Abi = D3D12_FEATURE_DATA_QUERY_META_COMMAND_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_QUERY_META_COMMAND {
    fn default() -> Self {
        Self {
            command_id: ::windows::Guid::zeroed(),
            node_mask: 0,
            p_query_input_data: ::std::ptr::null_mut(),
            query_input_data_size_in_bytes: 0,
            p_query_output_data: ::std::ptr::null_mut(),
            query_output_data_size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_QUERY_META_COMMAND {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_QUERY_META_COMMAND")
            .field("command_id", &format_args!("{:?}", self.command_id))
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .field(
                "p_query_input_data",
                &format_args!("{:?}", self.p_query_input_data),
            )
            .field(
                "query_input_data_size_in_bytes",
                &format_args!("{:?}", self.query_input_data_size_in_bytes),
            )
            .field(
                "p_query_output_data",
                &format_args!("{:?}", self.p_query_output_data),
            )
            .field(
                "query_output_data_size_in_bytes",
                &format_args!("{:?}", self.query_output_data_size_in_bytes),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_QUERY_META_COMMAND {
    fn clone(&self) -> Self {
        Self {
            command_id: <::windows::Guid as std::clone::Clone>::clone(&self.command_id),
            node_mask: self.node_mask,
            p_query_input_data: <*mut ::std::ffi::c_void as std::clone::Clone>::clone(
                &self.p_query_input_data,
            ),
            query_input_data_size_in_bytes: self.query_input_data_size_in_bytes,
            p_query_output_data: <*mut ::std::ffi::c_void as std::clone::Clone>::clone(
                &self.p_query_output_data,
            ),
            query_output_data_size_in_bytes: self.query_output_data_size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_QUERY_META_COMMAND {
    fn eq(&self, other: &Self) -> bool {
        self.command_id == other.command_id
            && self.node_mask == other.node_mask
            && self.p_query_input_data == other.p_query_input_data
            && self.query_input_data_size_in_bytes == other.query_input_data_size_in_bytes
            && self.p_query_output_data == other.p_query_output_data
            && self.query_output_data_size_in_bytes == other.query_output_data_size_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_QUERY_META_COMMAND {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_ROOT_SIGNATURE {
    pub highest_version: D3D_ROOT_SIGNATURE_VERSION,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_ROOT_SIGNATURE_abi(D3D_ROOT_SIGNATURE_VERSION);
impl D3D12_FEATURE_DATA_ROOT_SIGNATURE {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_ROOT_SIGNATURE {
    type Abi = D3D12_FEATURE_DATA_ROOT_SIGNATURE_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_ROOT_SIGNATURE {
    fn default() -> Self {
        Self {
            highest_version: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_ROOT_SIGNATURE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_ROOT_SIGNATURE")
            .field(
                "highest_version",
                &format_args!("{:?}", self.highest_version),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_ROOT_SIGNATURE {
    fn clone(&self) -> Self {
        Self {
            highest_version: self.highest_version,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_ROOT_SIGNATURE {
    fn eq(&self, other: &Self) -> bool {
        self.highest_version == other.highest_version
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_ROOT_SIGNATURE {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_HEAP_SERIALIZATION_TIER(pub i32);
impl ::std::convert::From<i32> for D3D12_HEAP_SERIALIZATION_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_HEAP_SERIALIZATION_TIER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_HEAP_SERIALIZATION_TIER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_HEAP_SERIALIZATION_TIER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_HEAP_SERIALIZATION_TIER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_HEAP_SERIALIZATION_TIER {}
impl ::std::marker::Copy for D3D12_HEAP_SERIALIZATION_TIER {}
impl D3D12_HEAP_SERIALIZATION_TIER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_HEAP_SERIALIZATION_TIER_0: Self = Self(0i32);
    pub const D3D12_HEAP_SERIALIZATION_TIER_10: Self = Self(10i32);
}
unsafe impl ::windows::Abi for D3D12_HEAP_SERIALIZATION_TIER {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_SERIALIZATION {
    pub node_index: u32,
    pub heap_serialization_tier: D3D12_HEAP_SERIALIZATION_TIER,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_SERIALIZATION_abi(u32, D3D12_HEAP_SERIALIZATION_TIER);
impl D3D12_FEATURE_DATA_SERIALIZATION {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_SERIALIZATION {
    type Abi = D3D12_FEATURE_DATA_SERIALIZATION_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_SERIALIZATION {
    fn default() -> Self {
        Self {
            node_index: 0,
            heap_serialization_tier: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_SERIALIZATION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_SERIALIZATION")
            .field("node_index", &format_args!("{:?}", self.node_index))
            .field(
                "heap_serialization_tier",
                &format_args!("{:?}", self.heap_serialization_tier),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_SERIALIZATION {
    fn clone(&self) -> Self {
        Self {
            node_index: self.node_index,
            heap_serialization_tier: self.heap_serialization_tier,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_SERIALIZATION {
    fn eq(&self, other: &Self) -> bool {
        self.node_index == other.node_index
            && self.heap_serialization_tier == other.heap_serialization_tier
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_SERIALIZATION {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SHADER_CACHE_SUPPORT_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_SHADER_CACHE_SUPPORT_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SHADER_CACHE_SUPPORT_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SHADER_CACHE_SUPPORT_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_CACHE_SUPPORT_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_CACHE_SUPPORT_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_CACHE_SUPPORT_FLAGS {}
impl ::std::marker::Copy for D3D12_SHADER_CACHE_SUPPORT_FLAGS {}
impl D3D12_SHADER_CACHE_SUPPORT_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SHADER_CACHE_SUPPORT_NONE: Self = Self(0i32);
    pub const D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO: Self = Self(1i32);
    pub const D3D12_SHADER_CACHE_SUPPORT_LIBRARY: Self = Self(2i32);
    pub const D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE: Self = Self(4i32);
    pub const D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE: Self = Self(8i32);
}
unsafe impl ::windows::Abi for D3D12_SHADER_CACHE_SUPPORT_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_SHADER_CACHE {
    pub support_flags: D3D12_SHADER_CACHE_SUPPORT_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_SHADER_CACHE_abi(D3D12_SHADER_CACHE_SUPPORT_FLAGS);
impl D3D12_FEATURE_DATA_SHADER_CACHE {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_SHADER_CACHE {
    type Abi = D3D12_FEATURE_DATA_SHADER_CACHE_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_SHADER_CACHE {
    fn default() -> Self {
        Self {
            support_flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_SHADER_CACHE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_SHADER_CACHE")
            .field("support_flags", &format_args!("{:?}", self.support_flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_SHADER_CACHE {
    fn clone(&self) -> Self {
        Self {
            support_flags: self.support_flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_SHADER_CACHE {
    fn eq(&self, other: &Self) -> bool {
        self.support_flags == other.support_flags
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_SHADER_CACHE {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D_SHADER_MODEL(pub i32);
impl ::std::convert::From<i32> for D3D_SHADER_MODEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D_SHADER_MODEL {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D_SHADER_MODEL {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D_SHADER_MODEL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D_SHADER_MODEL {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D_SHADER_MODEL {}
impl ::std::marker::Copy for D3D_SHADER_MODEL {}
impl D3D_SHADER_MODEL {
    #![allow(non_upper_case_globals)]
    pub const D3D_SHADER_MODEL_5_1: Self = Self(81i32);
    pub const D3D_SHADER_MODEL_6_0: Self = Self(96i32);
    pub const D3D_SHADER_MODEL_6_1: Self = Self(97i32);
    pub const D3D_SHADER_MODEL_6_2: Self = Self(98i32);
    pub const D3D_SHADER_MODEL_6_3: Self = Self(99i32);
    pub const D3D_SHADER_MODEL_6_4: Self = Self(100i32);
    pub const D3D_SHADER_MODEL_6_5: Self = Self(101i32);
    pub const D3D_SHADER_MODEL_6_6: Self = Self(102i32);
}
unsafe impl ::windows::Abi for D3D_SHADER_MODEL {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FEATURE_DATA_SHADER_MODEL {
    pub highest_shader_model: D3D_SHADER_MODEL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FEATURE_DATA_SHADER_MODEL_abi(D3D_SHADER_MODEL);
impl D3D12_FEATURE_DATA_SHADER_MODEL {}
unsafe impl ::windows::Abi for D3D12_FEATURE_DATA_SHADER_MODEL {
    type Abi = D3D12_FEATURE_DATA_SHADER_MODEL_abi;
}
impl ::std::default::Default for D3D12_FEATURE_DATA_SHADER_MODEL {
    fn default() -> Self {
        Self {
            highest_shader_model: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FEATURE_DATA_SHADER_MODEL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_SHADER_MODEL")
            .field(
                "highest_shader_model",
                &format_args!("{:?}", self.highest_shader_model),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FEATURE_DATA_SHADER_MODEL {
    fn clone(&self) -> Self {
        Self {
            highest_shader_model: self.highest_shader_model,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FEATURE_DATA_SHADER_MODEL {
    fn eq(&self, other: &Self) -> bool {
        self.highest_shader_model == other.highest_shader_model
    }
}
impl ::std::cmp::Eq for D3D12_FEATURE_DATA_SHADER_MODEL {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_FENCE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_FENCE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_FENCE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_FENCE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_FENCE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_FENCE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_FENCE_FLAGS {}
impl ::std::marker::Copy for D3D12_FENCE_FLAGS {}
impl D3D12_FENCE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_FENCE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_FENCE_FLAG_SHARED: Self = Self(1i32);
    pub const D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER: Self = Self(2i32);
    pub const D3D12_FENCE_FLAG_NON_MONITORED: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_FENCE_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_FILL_MODE(pub i32);
impl ::std::convert::From<i32> for D3D12_FILL_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_FILL_MODE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_FILL_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_FILL_MODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_FILL_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_FILL_MODE {}
impl ::std::marker::Copy for D3D12_FILL_MODE {}
impl D3D12_FILL_MODE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_FILL_MODE_WIREFRAME: Self = Self(2i32);
    pub const D3D12_FILL_MODE_SOLID: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_FILL_MODE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_FILTER_REDUCTION_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_FILTER_REDUCTION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_FILTER_REDUCTION_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_FILTER_REDUCTION_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_FILTER_REDUCTION_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_FILTER_REDUCTION_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_FILTER_REDUCTION_TYPE {}
impl ::std::marker::Copy for D3D12_FILTER_REDUCTION_TYPE {}
impl D3D12_FILTER_REDUCTION_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_FILTER_REDUCTION_TYPE_STANDARD: Self = Self(0i32);
    pub const D3D12_FILTER_REDUCTION_TYPE_COMPARISON: Self = Self(1i32);
    pub const D3D12_FILTER_REDUCTION_TYPE_MINIMUM: Self = Self(2i32);
    pub const D3D12_FILTER_REDUCTION_TYPE_MAXIMUM: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_FILTER_REDUCTION_TYPE {
    type Abi = Self;
}
pub const D3D12_FILTER_REDUCTION_TYPE_MASK: u32 = 3u32;
pub const D3D12_FILTER_REDUCTION_TYPE_SHIFT: u32 = 7u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_FILTER_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_FILTER_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_FILTER_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_FILTER_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_FILTER_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_FILTER_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_FILTER_TYPE {}
impl ::std::marker::Copy for D3D12_FILTER_TYPE {}
impl D3D12_FILTER_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_FILTER_TYPE_POINT: Self = Self(0i32);
    pub const D3D12_FILTER_TYPE_LINEAR: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_FILTER_TYPE {
    type Abi = Self;
}
pub const D3D12_FILTER_TYPE_MASK: u32 = 3u32;
pub const D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP: f32 = 0.6f32;
pub const D3D12_FLOAT32_MAX: f32 = 340282350000000000000000000000000000000f32;
pub const D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP: f32 = 0.6f32;
pub const D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR: f32 = 2.4f32;
pub const D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR: f32 = 1f32;
pub const D3D12_FLOAT_TO_SRGB_OFFSET: f32 = 0.055f32;
pub const D3D12_FLOAT_TO_SRGB_SCALE_1: f32 = 12.92f32;
pub const D3D12_FLOAT_TO_SRGB_SCALE_2: f32 = 1.055f32;
pub const D3D12_FLOAT_TO_SRGB_THRESHOLD: f32 = 0.0031308f32;
pub const D3D12_FTOI_INSTRUCTION_MAX_INPUT: f32 = 2147483600f32;
pub const D3D12_FTOI_INSTRUCTION_MIN_INPUT: f32 = -2147483600f32;
pub const D3D12_FTOU_INSTRUCTION_MAX_INPUT: f32 = 4294967300f32;
pub const D3D12_FTOU_INSTRUCTION_MIN_INPUT: f32 = 0f32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_FUNCTION_DESC {
    pub version: u32,
    pub creator: *mut i8,
    pub flags: u32,
    pub constant_buffers: u32,
    pub bound_resources: u32,
    pub instruction_count: u32,
    pub temp_register_count: u32,
    pub temp_array_count: u32,
    pub def_count: u32,
    pub dcl_count: u32,
    pub texture_normal_instructions: u32,
    pub texture_load_instructions: u32,
    pub texture_comp_instructions: u32,
    pub texture_bias_instructions: u32,
    pub texture_gradient_instructions: u32,
    pub float_instruction_count: u32,
    pub int_instruction_count: u32,
    pub uint_instruction_count: u32,
    pub static_flow_control_count: u32,
    pub dynamic_flow_control_count: u32,
    pub macro_instruction_count: u32,
    pub array_instruction_count: u32,
    pub mov_instruction_count: u32,
    pub movc_instruction_count: u32,
    pub conversion_instruction_count: u32,
    pub bitwise_instruction_count: u32,
    pub min_feature_level: super::direct3d11::D3D_FEATURE_LEVEL,
    pub required_feature_flags: u64,
    pub name: *mut i8,
    pub function_parameter_count: i32,
    pub has_return: ::windows::BOOL,
    pub has10_level9_vertex_shader: ::windows::BOOL,
    pub has10_level9_pixel_shader: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_FUNCTION_DESC_abi(
    u32,
    *mut i8,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    super::direct3d11::D3D_FEATURE_LEVEL,
    u64,
    *mut i8,
    i32,
    ::windows::BOOL,
    ::windows::BOOL,
    ::windows::BOOL,
);
impl D3D12_FUNCTION_DESC {}
unsafe impl ::windows::Abi for D3D12_FUNCTION_DESC {
    type Abi = D3D12_FUNCTION_DESC_abi;
}
impl ::std::default::Default for D3D12_FUNCTION_DESC {
    fn default() -> Self {
        Self {
            version: 0,
            creator: ::std::ptr::null_mut(),
            flags: 0,
            constant_buffers: 0,
            bound_resources: 0,
            instruction_count: 0,
            temp_register_count: 0,
            temp_array_count: 0,
            def_count: 0,
            dcl_count: 0,
            texture_normal_instructions: 0,
            texture_load_instructions: 0,
            texture_comp_instructions: 0,
            texture_bias_instructions: 0,
            texture_gradient_instructions: 0,
            float_instruction_count: 0,
            int_instruction_count: 0,
            uint_instruction_count: 0,
            static_flow_control_count: 0,
            dynamic_flow_control_count: 0,
            macro_instruction_count: 0,
            array_instruction_count: 0,
            mov_instruction_count: 0,
            movc_instruction_count: 0,
            conversion_instruction_count: 0,
            bitwise_instruction_count: 0,
            min_feature_level: ::std::default::Default::default(),
            required_feature_flags: 0,
            name: ::std::ptr::null_mut(),
            function_parameter_count: 0,
            has_return: ::std::default::Default::default(),
            has10_level9_vertex_shader: ::std::default::Default::default(),
            has10_level9_pixel_shader: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_FUNCTION_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_FUNCTION_DESC")
            .field("version", &format_args!("{:?}", self.version))
            .field("creator", &format_args!("{:?}", self.creator))
            .field("flags", &format_args!("{:?}", self.flags))
            .field(
                "constant_buffers",
                &format_args!("{:?}", self.constant_buffers),
            )
            .field(
                "bound_resources",
                &format_args!("{:?}", self.bound_resources),
            )
            .field(
                "instruction_count",
                &format_args!("{:?}", self.instruction_count),
            )
            .field(
                "temp_register_count",
                &format_args!("{:?}", self.temp_register_count),
            )
            .field(
                "temp_array_count",
                &format_args!("{:?}", self.temp_array_count),
            )
            .field("def_count", &format_args!("{:?}", self.def_count))
            .field("dcl_count", &format_args!("{:?}", self.dcl_count))
            .field(
                "texture_normal_instructions",
                &format_args!("{:?}", self.texture_normal_instructions),
            )
            .field(
                "texture_load_instructions",
                &format_args!("{:?}", self.texture_load_instructions),
            )
            .field(
                "texture_comp_instructions",
                &format_args!("{:?}", self.texture_comp_instructions),
            )
            .field(
                "texture_bias_instructions",
                &format_args!("{:?}", self.texture_bias_instructions),
            )
            .field(
                "texture_gradient_instructions",
                &format_args!("{:?}", self.texture_gradient_instructions),
            )
            .field(
                "float_instruction_count",
                &format_args!("{:?}", self.float_instruction_count),
            )
            .field(
                "int_instruction_count",
                &format_args!("{:?}", self.int_instruction_count),
            )
            .field(
                "uint_instruction_count",
                &format_args!("{:?}", self.uint_instruction_count),
            )
            .field(
                "static_flow_control_count",
                &format_args!("{:?}", self.static_flow_control_count),
            )
            .field(
                "dynamic_flow_control_count",
                &format_args!("{:?}", self.dynamic_flow_control_count),
            )
            .field(
                "macro_instruction_count",
                &format_args!("{:?}", self.macro_instruction_count),
            )
            .field(
                "array_instruction_count",
                &format_args!("{:?}", self.array_instruction_count),
            )
            .field(
                "mov_instruction_count",
                &format_args!("{:?}", self.mov_instruction_count),
            )
            .field(
                "movc_instruction_count",
                &format_args!("{:?}", self.movc_instruction_count),
            )
            .field(
                "conversion_instruction_count",
                &format_args!("{:?}", self.conversion_instruction_count),
            )
            .field(
                "bitwise_instruction_count",
                &format_args!("{:?}", self.bitwise_instruction_count),
            )
            .field(
                "min_feature_level",
                &format_args!("{:?}", self.min_feature_level),
            )
            .field(
                "required_feature_flags",
                &format_args!("{:?}", self.required_feature_flags),
            )
            .field("name", &format_args!("{:?}", self.name))
            .field(
                "function_parameter_count",
                &format_args!("{:?}", self.function_parameter_count),
            )
            .field("has_return", &format_args!("{:?}", self.has_return))
            .field(
                "has10_level9_vertex_shader",
                &format_args!("{:?}", self.has10_level9_vertex_shader),
            )
            .field(
                "has10_level9_pixel_shader",
                &format_args!("{:?}", self.has10_level9_pixel_shader),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_FUNCTION_DESC {
    fn clone(&self) -> Self {
        Self {
            version: self.version,
            creator: self.creator,
            flags: self.flags,
            constant_buffers: self.constant_buffers,
            bound_resources: self.bound_resources,
            instruction_count: self.instruction_count,
            temp_register_count: self.temp_register_count,
            temp_array_count: self.temp_array_count,
            def_count: self.def_count,
            dcl_count: self.dcl_count,
            texture_normal_instructions: self.texture_normal_instructions,
            texture_load_instructions: self.texture_load_instructions,
            texture_comp_instructions: self.texture_comp_instructions,
            texture_bias_instructions: self.texture_bias_instructions,
            texture_gradient_instructions: self.texture_gradient_instructions,
            float_instruction_count: self.float_instruction_count,
            int_instruction_count: self.int_instruction_count,
            uint_instruction_count: self.uint_instruction_count,
            static_flow_control_count: self.static_flow_control_count,
            dynamic_flow_control_count: self.dynamic_flow_control_count,
            macro_instruction_count: self.macro_instruction_count,
            array_instruction_count: self.array_instruction_count,
            mov_instruction_count: self.mov_instruction_count,
            movc_instruction_count: self.movc_instruction_count,
            conversion_instruction_count: self.conversion_instruction_count,
            bitwise_instruction_count: self.bitwise_instruction_count,
            min_feature_level: self.min_feature_level,
            required_feature_flags: self.required_feature_flags,
            name: self.name,
            function_parameter_count: self.function_parameter_count,
            has_return: <::windows::BOOL as std::clone::Clone>::clone(&self.has_return),
            has10_level9_vertex_shader: <::windows::BOOL as std::clone::Clone>::clone(
                &self.has10_level9_vertex_shader,
            ),
            has10_level9_pixel_shader: <::windows::BOOL as std::clone::Clone>::clone(
                &self.has10_level9_pixel_shader,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_FUNCTION_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.version == other.version
            && self.creator == other.creator
            && self.flags == other.flags
            && self.constant_buffers == other.constant_buffers
            && self.bound_resources == other.bound_resources
            && self.instruction_count == other.instruction_count
            && self.temp_register_count == other.temp_register_count
            && self.temp_array_count == other.temp_array_count
            && self.def_count == other.def_count
            && self.dcl_count == other.dcl_count
            && self.texture_normal_instructions == other.texture_normal_instructions
            && self.texture_load_instructions == other.texture_load_instructions
            && self.texture_comp_instructions == other.texture_comp_instructions
            && self.texture_bias_instructions == other.texture_bias_instructions
            && self.texture_gradient_instructions == other.texture_gradient_instructions
            && self.float_instruction_count == other.float_instruction_count
            && self.int_instruction_count == other.int_instruction_count
            && self.uint_instruction_count == other.uint_instruction_count
            && self.static_flow_control_count == other.static_flow_control_count
            && self.dynamic_flow_control_count == other.dynamic_flow_control_count
            && self.macro_instruction_count == other.macro_instruction_count
            && self.array_instruction_count == other.array_instruction_count
            && self.mov_instruction_count == other.mov_instruction_count
            && self.movc_instruction_count == other.movc_instruction_count
            && self.conversion_instruction_count == other.conversion_instruction_count
            && self.bitwise_instruction_count == other.bitwise_instruction_count
            && self.min_feature_level == other.min_feature_level
            && self.required_feature_flags == other.required_feature_flags
            && self.name == other.name
            && self.function_parameter_count == other.function_parameter_count
            && self.has_return == other.has_return
            && self.has10_level9_vertex_shader == other.has10_level9_vertex_shader
            && self.has10_level9_pixel_shader == other.has10_level9_pixel_shader
    }
}
impl ::std::cmp::Eq for D3D12_FUNCTION_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_GLOBAL_ROOT_SIGNATURE {
    pub p_global_root_signature: ::std::option::Option<ID3D12RootSignature>,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_GLOBAL_ROOT_SIGNATURE_abi(::windows::RawPtr);
impl D3D12_GLOBAL_ROOT_SIGNATURE {}
unsafe impl ::windows::Abi for D3D12_GLOBAL_ROOT_SIGNATURE {
    type Abi = D3D12_GLOBAL_ROOT_SIGNATURE_abi;
}
impl ::std::default::Default for D3D12_GLOBAL_ROOT_SIGNATURE {
    fn default() -> Self {
        Self {
            p_global_root_signature: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_GLOBAL_ROOT_SIGNATURE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_GLOBAL_ROOT_SIGNATURE")
            .field(
                "p_global_root_signature",
                &format_args!("{:?}", self.p_global_root_signature),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_GLOBAL_ROOT_SIGNATURE {
    fn clone(&self) -> Self {
        Self {
            p_global_root_signature:
                <::std::option::Option<ID3D12RootSignature> as std::clone::Clone>::clone(
                    &self.p_global_root_signature,
                ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_GLOBAL_ROOT_SIGNATURE {
    fn eq(&self, other: &Self) -> bool {
        self.p_global_root_signature == other.p_global_root_signature
    }
}
impl ::std::cmp::Eq for D3D12_GLOBAL_ROOT_SIGNATURE {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_GPU_BASED_VALIDATION_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_GPU_BASED_VALIDATION_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_GPU_BASED_VALIDATION_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_GPU_BASED_VALIDATION_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_GPU_BASED_VALIDATION_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_GPU_BASED_VALIDATION_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_GPU_BASED_VALIDATION_FLAGS {}
impl ::std::marker::Copy for D3D12_GPU_BASED_VALIDATION_FLAGS {}
impl D3D12_GPU_BASED_VALIDATION_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_GPU_BASED_VALIDATION_FLAGS_NONE: Self = Self(0i32);
    pub const D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_GPU_BASED_VALIDATION_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SO_DECLARATION_ENTRY {
    pub stream: u32,
    pub semantic_name: *mut i8,
    pub semantic_index: u32,
    pub start_component: u8,
    pub component_count: u8,
    pub output_slot: u8,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SO_DECLARATION_ENTRY_abi(u32, *mut i8, u32, u8, u8, u8);
impl D3D12_SO_DECLARATION_ENTRY {}
unsafe impl ::windows::Abi for D3D12_SO_DECLARATION_ENTRY {
    type Abi = D3D12_SO_DECLARATION_ENTRY_abi;
}
impl ::std::default::Default for D3D12_SO_DECLARATION_ENTRY {
    fn default() -> Self {
        Self {
            stream: 0,
            semantic_name: ::std::ptr::null_mut(),
            semantic_index: 0,
            start_component: 0,
            component_count: 0,
            output_slot: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SO_DECLARATION_ENTRY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SO_DECLARATION_ENTRY")
            .field("stream", &format_args!("{:?}", self.stream))
            .field("semantic_name", &format_args!("{:?}", self.semantic_name))
            .field("semantic_index", &format_args!("{:?}", self.semantic_index))
            .field(
                "start_component",
                &format_args!("{:?}", self.start_component),
            )
            .field(
                "component_count",
                &format_args!("{:?}", self.component_count),
            )
            .field("output_slot", &format_args!("{:?}", self.output_slot))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SO_DECLARATION_ENTRY {
    fn clone(&self) -> Self {
        Self {
            stream: self.stream,
            semantic_name: self.semantic_name,
            semantic_index: self.semantic_index,
            start_component: self.start_component,
            component_count: self.component_count,
            output_slot: self.output_slot,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SO_DECLARATION_ENTRY {
    fn eq(&self, other: &Self) -> bool {
        self.stream == other.stream
            && self.semantic_name == other.semantic_name
            && self.semantic_index == other.semantic_index
            && self.start_component == other.start_component
            && self.component_count == other.component_count
            && self.output_slot == other.output_slot
    }
}
impl ::std::cmp::Eq for D3D12_SO_DECLARATION_ENTRY {}
impl ::std::marker::Copy for D3D12_SO_DECLARATION_ENTRY {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_STREAM_OUTPUT_DESC {
    pub p_so_declaration: *mut D3D12_SO_DECLARATION_ENTRY,
    pub num_entries: u32,
    pub p_buffer_strides: *mut u32,
    pub num_strides: u32,
    pub rasterized_stream: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_STREAM_OUTPUT_DESC_abi(
    *mut D3D12_SO_DECLARATION_ENTRY_abi,
    u32,
    *mut u32,
    u32,
    u32,
);
impl D3D12_STREAM_OUTPUT_DESC {}
unsafe impl ::windows::Abi for D3D12_STREAM_OUTPUT_DESC {
    type Abi = D3D12_STREAM_OUTPUT_DESC_abi;
}
impl ::std::default::Default for D3D12_STREAM_OUTPUT_DESC {
    fn default() -> Self {
        Self {
            p_so_declaration: ::std::ptr::null_mut(),
            num_entries: 0,
            p_buffer_strides: ::std::ptr::null_mut(),
            num_strides: 0,
            rasterized_stream: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_STREAM_OUTPUT_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_STREAM_OUTPUT_DESC")
            .field(
                "p_so_declaration",
                &format_args!("{:?}", self.p_so_declaration),
            )
            .field("num_entries", &format_args!("{:?}", self.num_entries))
            .field(
                "p_buffer_strides",
                &format_args!("{:?}", self.p_buffer_strides),
            )
            .field("num_strides", &format_args!("{:?}", self.num_strides))
            .field(
                "rasterized_stream",
                &format_args!("{:?}", self.rasterized_stream),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_STREAM_OUTPUT_DESC {
    fn clone(&self) -> Self {
        Self {
            p_so_declaration: <*mut D3D12_SO_DECLARATION_ENTRY as std::clone::Clone>::clone(
                &self.p_so_declaration,
            ),
            num_entries: self.num_entries,
            p_buffer_strides: self.p_buffer_strides,
            num_strides: self.num_strides,
            rasterized_stream: self.rasterized_stream,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_STREAM_OUTPUT_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.p_so_declaration == other.p_so_declaration
            && self.num_entries == other.num_entries
            && self.p_buffer_strides == other.p_buffer_strides
            && self.num_strides == other.num_strides
            && self.rasterized_stream == other.rasterized_stream
    }
}
impl ::std::cmp::Eq for D3D12_STREAM_OUTPUT_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RASTERIZER_DESC {
    pub fill_mode: D3D12_FILL_MODE,
    pub cull_mode: D3D12_CULL_MODE,
    pub front_counter_clockwise: ::windows::BOOL,
    pub depth_bias: i32,
    pub depth_bias_clamp: f32,
    pub slope_scaled_depth_bias: f32,
    pub depth_clip_enable: ::windows::BOOL,
    pub multisample_enable: ::windows::BOOL,
    pub antialiased_line_enable: ::windows::BOOL,
    pub forced_sample_count: u32,
    pub conservative_raster: D3D12_CONSERVATIVE_RASTERIZATION_MODE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RASTERIZER_DESC_abi(
    D3D12_FILL_MODE,
    D3D12_CULL_MODE,
    ::windows::BOOL,
    i32,
    f32,
    f32,
    ::windows::BOOL,
    ::windows::BOOL,
    ::windows::BOOL,
    u32,
    D3D12_CONSERVATIVE_RASTERIZATION_MODE,
);
impl D3D12_RASTERIZER_DESC {}
unsafe impl ::windows::Abi for D3D12_RASTERIZER_DESC {
    type Abi = D3D12_RASTERIZER_DESC_abi;
}
impl ::std::default::Default for D3D12_RASTERIZER_DESC {
    fn default() -> Self {
        Self {
            fill_mode: ::std::default::Default::default(),
            cull_mode: ::std::default::Default::default(),
            front_counter_clockwise: ::std::default::Default::default(),
            depth_bias: 0,
            depth_bias_clamp: 0.0,
            slope_scaled_depth_bias: 0.0,
            depth_clip_enable: ::std::default::Default::default(),
            multisample_enable: ::std::default::Default::default(),
            antialiased_line_enable: ::std::default::Default::default(),
            forced_sample_count: 0,
            conservative_raster: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RASTERIZER_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RASTERIZER_DESC")
            .field("fill_mode", &format_args!("{:?}", self.fill_mode))
            .field("cull_mode", &format_args!("{:?}", self.cull_mode))
            .field(
                "front_counter_clockwise",
                &format_args!("{:?}", self.front_counter_clockwise),
            )
            .field("depth_bias", &format_args!("{:?}", self.depth_bias))
            .field(
                "depth_bias_clamp",
                &format_args!("{:?}", self.depth_bias_clamp),
            )
            .field(
                "slope_scaled_depth_bias",
                &format_args!("{:?}", self.slope_scaled_depth_bias),
            )
            .field(
                "depth_clip_enable",
                &format_args!("{:?}", self.depth_clip_enable),
            )
            .field(
                "multisample_enable",
                &format_args!("{:?}", self.multisample_enable),
            )
            .field(
                "antialiased_line_enable",
                &format_args!("{:?}", self.antialiased_line_enable),
            )
            .field(
                "forced_sample_count",
                &format_args!("{:?}", self.forced_sample_count),
            )
            .field(
                "conservative_raster",
                &format_args!("{:?}", self.conservative_raster),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RASTERIZER_DESC {
    fn clone(&self) -> Self {
        Self {
            fill_mode: self.fill_mode,
            cull_mode: self.cull_mode,
            front_counter_clockwise: <::windows::BOOL as std::clone::Clone>::clone(
                &self.front_counter_clockwise,
            ),
            depth_bias: self.depth_bias,
            depth_bias_clamp: self.depth_bias_clamp,
            slope_scaled_depth_bias: self.slope_scaled_depth_bias,
            depth_clip_enable: <::windows::BOOL as std::clone::Clone>::clone(
                &self.depth_clip_enable,
            ),
            multisample_enable: <::windows::BOOL as std::clone::Clone>::clone(
                &self.multisample_enable,
            ),
            antialiased_line_enable: <::windows::BOOL as std::clone::Clone>::clone(
                &self.antialiased_line_enable,
            ),
            forced_sample_count: self.forced_sample_count,
            conservative_raster: self.conservative_raster,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RASTERIZER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.fill_mode == other.fill_mode
            && self.cull_mode == other.cull_mode
            && self.front_counter_clockwise == other.front_counter_clockwise
            && self.depth_bias == other.depth_bias
            && self.depth_bias_clamp == other.depth_bias_clamp
            && self.slope_scaled_depth_bias == other.slope_scaled_depth_bias
            && self.depth_clip_enable == other.depth_clip_enable
            && self.multisample_enable == other.multisample_enable
            && self.antialiased_line_enable == other.antialiased_line_enable
            && self.forced_sample_count == other.forced_sample_count
            && self.conservative_raster == other.conservative_raster
    }
}
impl ::std::cmp::Eq for D3D12_RASTERIZER_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_INPUT_CLASSIFICATION(pub i32);
impl ::std::convert::From<i32> for D3D12_INPUT_CLASSIFICATION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_INPUT_CLASSIFICATION {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_INPUT_CLASSIFICATION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_INPUT_CLASSIFICATION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_INPUT_CLASSIFICATION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_INPUT_CLASSIFICATION {}
impl ::std::marker::Copy for D3D12_INPUT_CLASSIFICATION {}
impl D3D12_INPUT_CLASSIFICATION {
    #![allow(non_upper_case_globals)]
    pub const D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA: Self = Self(0i32);
    pub const D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_INPUT_CLASSIFICATION {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_INPUT_ELEMENT_DESC {
    pub semantic_name: *mut i8,
    pub semantic_index: u32,
    pub format: super::dxgi::DXGI_FORMAT,
    pub input_slot: u32,
    pub aligned_byte_offset: u32,
    pub input_slot_class: D3D12_INPUT_CLASSIFICATION,
    pub instance_data_step_rate: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_INPUT_ELEMENT_DESC_abi(
    *mut i8,
    u32,
    super::dxgi::DXGI_FORMAT,
    u32,
    u32,
    D3D12_INPUT_CLASSIFICATION,
    u32,
);
impl D3D12_INPUT_ELEMENT_DESC {}
unsafe impl ::windows::Abi for D3D12_INPUT_ELEMENT_DESC {
    type Abi = D3D12_INPUT_ELEMENT_DESC_abi;
}
impl ::std::default::Default for D3D12_INPUT_ELEMENT_DESC {
    fn default() -> Self {
        Self {
            semantic_name: ::std::ptr::null_mut(),
            semantic_index: 0,
            format: ::std::default::Default::default(),
            input_slot: 0,
            aligned_byte_offset: 0,
            input_slot_class: ::std::default::Default::default(),
            instance_data_step_rate: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_INPUT_ELEMENT_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_INPUT_ELEMENT_DESC")
            .field("semantic_name", &format_args!("{:?}", self.semantic_name))
            .field("semantic_index", &format_args!("{:?}", self.semantic_index))
            .field("format", &format_args!("{:?}", self.format))
            .field("input_slot", &format_args!("{:?}", self.input_slot))
            .field(
                "aligned_byte_offset",
                &format_args!("{:?}", self.aligned_byte_offset),
            )
            .field(
                "input_slot_class",
                &format_args!("{:?}", self.input_slot_class),
            )
            .field(
                "instance_data_step_rate",
                &format_args!("{:?}", self.instance_data_step_rate),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_INPUT_ELEMENT_DESC {
    fn clone(&self) -> Self {
        Self {
            semantic_name: self.semantic_name,
            semantic_index: self.semantic_index,
            format: self.format,
            input_slot: self.input_slot,
            aligned_byte_offset: self.aligned_byte_offset,
            input_slot_class: self.input_slot_class,
            instance_data_step_rate: self.instance_data_step_rate,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_INPUT_ELEMENT_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.semantic_name == other.semantic_name
            && self.semantic_index == other.semantic_index
            && self.format == other.format
            && self.input_slot == other.input_slot
            && self.aligned_byte_offset == other.aligned_byte_offset
            && self.input_slot_class == other.input_slot_class
            && self.instance_data_step_rate == other.instance_data_step_rate
    }
}
impl ::std::cmp::Eq for D3D12_INPUT_ELEMENT_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_INPUT_LAYOUT_DESC {
    pub p_input_element_descs: *mut D3D12_INPUT_ELEMENT_DESC,
    pub num_elements: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_INPUT_LAYOUT_DESC_abi(*mut D3D12_INPUT_ELEMENT_DESC_abi, u32);
impl D3D12_INPUT_LAYOUT_DESC {}
unsafe impl ::windows::Abi for D3D12_INPUT_LAYOUT_DESC {
    type Abi = D3D12_INPUT_LAYOUT_DESC_abi;
}
impl ::std::default::Default for D3D12_INPUT_LAYOUT_DESC {
    fn default() -> Self {
        Self {
            p_input_element_descs: ::std::ptr::null_mut(),
            num_elements: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_INPUT_LAYOUT_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_INPUT_LAYOUT_DESC")
            .field(
                "p_input_element_descs",
                &format_args!("{:?}", self.p_input_element_descs),
            )
            .field("num_elements", &format_args!("{:?}", self.num_elements))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_INPUT_LAYOUT_DESC {
    fn clone(&self) -> Self {
        Self {
            p_input_element_descs: <*mut D3D12_INPUT_ELEMENT_DESC as std::clone::Clone>::clone(
                &self.p_input_element_descs,
            ),
            num_elements: self.num_elements,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_INPUT_LAYOUT_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.p_input_element_descs == other.p_input_element_descs
            && self.num_elements == other.num_elements
    }
}
impl ::std::cmp::Eq for D3D12_INPUT_LAYOUT_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_INDEX_BUFFER_STRIP_CUT_VALUE(pub i32);
impl ::std::convert::From<i32> for D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {}
impl ::std::marker::Copy for D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {}
impl D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED: Self = Self(0i32);
    pub const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF: Self = Self(1i32);
    pub const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_PRIMITIVE_TOPOLOGY_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_PRIMITIVE_TOPOLOGY_TYPE {}
impl ::std::marker::Copy for D3D12_PRIMITIVE_TOPOLOGY_TYPE {}
impl D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED: Self = Self(0i32);
    pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT: Self = Self(1i32);
    pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE: Self = Self(2i32);
    pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE: Self = Self(3i32);
    pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_GRAPHICS_PIPELINE_STATE_DESC {
    pub p_root_signature: ::std::option::Option<ID3D12RootSignature>,
    pub vs: D3D12_SHADER_BYTECODE,
    pub ps: D3D12_SHADER_BYTECODE,
    pub ds: D3D12_SHADER_BYTECODE,
    pub hs: D3D12_SHADER_BYTECODE,
    pub gs: D3D12_SHADER_BYTECODE,
    pub stream_output: D3D12_STREAM_OUTPUT_DESC,
    pub blend_state: D3D12_BLEND_DESC,
    pub sample_mask: u32,
    pub rasterizer_state: D3D12_RASTERIZER_DESC,
    pub depth_stencil_state: D3D12_DEPTH_STENCIL_DESC,
    pub input_layout: D3D12_INPUT_LAYOUT_DESC,
    pub ib_strip_cut_value: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE,
    pub primitive_topology_type: D3D12_PRIMITIVE_TOPOLOGY_TYPE,
    pub num_render_targets: u32,
    pub rtv_formats: [super::dxgi::DXGI_FORMAT; 8usize],
    pub dsv_format: super::dxgi::DXGI_FORMAT,
    pub sample_desc: super::dxgi::DXGI_SAMPLE_DESC,
    pub node_mask: u32,
    pub cached_pso: D3D12_CACHED_PIPELINE_STATE,
    pub flags: D3D12_PIPELINE_STATE_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_GRAPHICS_PIPELINE_STATE_DESC_abi(
    ::windows::RawPtr,
    D3D12_SHADER_BYTECODE_abi,
    D3D12_SHADER_BYTECODE_abi,
    D3D12_SHADER_BYTECODE_abi,
    D3D12_SHADER_BYTECODE_abi,
    D3D12_SHADER_BYTECODE_abi,
    D3D12_STREAM_OUTPUT_DESC_abi,
    D3D12_BLEND_DESC_abi,
    u32,
    D3D12_RASTERIZER_DESC_abi,
    D3D12_DEPTH_STENCIL_DESC_abi,
    D3D12_INPUT_LAYOUT_DESC_abi,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE,
    u32,
    [super::dxgi::DXGI_FORMAT; 8usize],
    super::dxgi::DXGI_FORMAT,
    super::dxgi::DXGI_SAMPLE_DESC_abi,
    u32,
    D3D12_CACHED_PIPELINE_STATE_abi,
    D3D12_PIPELINE_STATE_FLAGS,
);
impl D3D12_GRAPHICS_PIPELINE_STATE_DESC {}
unsafe impl ::windows::Abi for D3D12_GRAPHICS_PIPELINE_STATE_DESC {
    type Abi = D3D12_GRAPHICS_PIPELINE_STATE_DESC_abi;
}
impl ::std::default::Default for D3D12_GRAPHICS_PIPELINE_STATE_DESC {
    fn default() -> Self {
        Self {
            p_root_signature: ::std::default::Default::default(),
            vs: ::std::default::Default::default(),
            ps: ::std::default::Default::default(),
            ds: ::std::default::Default::default(),
            hs: ::std::default::Default::default(),
            gs: ::std::default::Default::default(),
            stream_output: ::std::default::Default::default(),
            blend_state: ::std::default::Default::default(),
            sample_mask: 0,
            rasterizer_state: ::std::default::Default::default(),
            depth_stencil_state: ::std::default::Default::default(),
            input_layout: ::std::default::Default::default(),
            ib_strip_cut_value: ::std::default::Default::default(),
            primitive_topology_type: ::std::default::Default::default(),
            num_render_targets: 0,
            rtv_formats: [
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
            ],
            dsv_format: ::std::default::Default::default(),
            sample_desc: ::std::default::Default::default(),
            node_mask: 0,
            cached_pso: ::std::default::Default::default(),
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_GRAPHICS_PIPELINE_STATE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_GRAPHICS_PIPELINE_STATE_DESC")
            .field(
                "p_root_signature",
                &format_args!("{:?}", self.p_root_signature),
            )
            .field("vs", &format_args!("{:?}", self.vs))
            .field("ps", &format_args!("{:?}", self.ps))
            .field("ds", &format_args!("{:?}", self.ds))
            .field("hs", &format_args!("{:?}", self.hs))
            .field("gs", &format_args!("{:?}", self.gs))
            .field("stream_output", &format_args!("{:?}", self.stream_output))
            .field("blend_state", &format_args!("{:?}", self.blend_state))
            .field("sample_mask", &format_args!("{:?}", self.sample_mask))
            .field(
                "rasterizer_state",
                &format_args!("{:?}", self.rasterizer_state),
            )
            .field(
                "depth_stencil_state",
                &format_args!("{:?}", self.depth_stencil_state),
            )
            .field("input_layout", &format_args!("{:?}", self.input_layout))
            .field(
                "ib_strip_cut_value",
                &format_args!("{:?}", self.ib_strip_cut_value),
            )
            .field(
                "primitive_topology_type",
                &format_args!("{:?}", self.primitive_topology_type),
            )
            .field(
                "num_render_targets",
                &format_args!("{:?}", self.num_render_targets),
            )
            .field("rtv_formats", &format_args!("{:?}", self.rtv_formats))
            .field("dsv_format", &format_args!("{:?}", self.dsv_format))
            .field("sample_desc", &format_args!("{:?}", self.sample_desc))
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .field("cached_pso", &format_args!("{:?}", self.cached_pso))
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_GRAPHICS_PIPELINE_STATE_DESC {
    fn clone(&self) -> Self {
        Self {
            p_root_signature:
                <::std::option::Option<ID3D12RootSignature> as std::clone::Clone>::clone(
                    &self.p_root_signature,
                ),
            vs: <D3D12_SHADER_BYTECODE as std::clone::Clone>::clone(&self.vs),
            ps: <D3D12_SHADER_BYTECODE as std::clone::Clone>::clone(&self.ps),
            ds: <D3D12_SHADER_BYTECODE as std::clone::Clone>::clone(&self.ds),
            hs: <D3D12_SHADER_BYTECODE as std::clone::Clone>::clone(&self.hs),
            gs: <D3D12_SHADER_BYTECODE as std::clone::Clone>::clone(&self.gs),
            stream_output: <D3D12_STREAM_OUTPUT_DESC as std::clone::Clone>::clone(
                &self.stream_output,
            ),
            blend_state: <D3D12_BLEND_DESC as std::clone::Clone>::clone(&self.blend_state),
            sample_mask: self.sample_mask,
            rasterizer_state: <D3D12_RASTERIZER_DESC as std::clone::Clone>::clone(
                &self.rasterizer_state,
            ),
            depth_stencil_state: <D3D12_DEPTH_STENCIL_DESC as std::clone::Clone>::clone(
                &self.depth_stencil_state,
            ),
            input_layout: <D3D12_INPUT_LAYOUT_DESC as std::clone::Clone>::clone(&self.input_layout),
            ib_strip_cut_value: self.ib_strip_cut_value,
            primitive_topology_type: self.primitive_topology_type,
            num_render_targets: self.num_render_targets,
            rtv_formats: <[super::dxgi::DXGI_FORMAT; 8usize] as std::clone::Clone>::clone(
                &self.rtv_formats,
            ),
            dsv_format: self.dsv_format,
            sample_desc: <super::dxgi::DXGI_SAMPLE_DESC as std::clone::Clone>::clone(
                &self.sample_desc,
            ),
            node_mask: self.node_mask,
            cached_pso: <D3D12_CACHED_PIPELINE_STATE as std::clone::Clone>::clone(&self.cached_pso),
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_GRAPHICS_PIPELINE_STATE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.p_root_signature == other.p_root_signature
            && self.vs == other.vs
            && self.ps == other.ps
            && self.ds == other.ds
            && self.hs == other.hs
            && self.gs == other.gs
            && self.stream_output == other.stream_output
            && self.blend_state == other.blend_state
            && self.sample_mask == other.sample_mask
            && self.rasterizer_state == other.rasterizer_state
            && self.depth_stencil_state == other.depth_stencil_state
            && self.input_layout == other.input_layout
            && self.ib_strip_cut_value == other.ib_strip_cut_value
            && self.primitive_topology_type == other.primitive_topology_type
            && self.num_render_targets == other.num_render_targets
            && self.rtv_formats == other.rtv_formats
            && self.dsv_format == other.dsv_format
            && self.sample_desc == other.sample_desc
            && self.node_mask == other.node_mask
            && self.cached_pso == other.cached_pso
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_GRAPHICS_PIPELINE_STATE_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_GRAPHICS_STATES(pub i32);
impl ::std::convert::From<i32> for D3D12_GRAPHICS_STATES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_GRAPHICS_STATES {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_GRAPHICS_STATES {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_GRAPHICS_STATES {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_GRAPHICS_STATES {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_GRAPHICS_STATES {}
impl ::std::marker::Copy for D3D12_GRAPHICS_STATES {}
impl D3D12_GRAPHICS_STATES {
    #![allow(non_upper_case_globals)]
    pub const D3D12_GRAPHICS_STATE_NONE: Self = Self(0i32);
    pub const D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS: Self = Self(1i32);
    pub const D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER: Self = Self(2i32);
    pub const D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY: Self = Self(4i32);
    pub const D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP: Self = Self(8i32);
    pub const D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE: Self = Self(16i32);
    pub const D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE: Self = Self(32i32);
    pub const D3D12_GRAPHICS_STATE_RS_VIEWPORTS: Self = Self(64i32);
    pub const D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS: Self = Self(128i32);
    pub const D3D12_GRAPHICS_STATE_PREDICATION: Self = Self(256i32);
    pub const D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS: Self = Self(512i32);
    pub const D3D12_GRAPHICS_STATE_OM_STENCIL_REF: Self = Self(1024i32);
    pub const D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR: Self = Self(2048i32);
    pub const D3D12_GRAPHICS_STATE_PIPELINE_STATE: Self = Self(4096i32);
    pub const D3D12_GRAPHICS_STATE_SO_TARGETS: Self = Self(8192i32);
    pub const D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS: Self = Self(16384i32);
    pub const D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS: Self = Self(32768i32);
    pub const D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK: Self = Self(65536i32);
}
unsafe impl ::windows::Abi for D3D12_GRAPHICS_STATES {
    type Abi = Self;
}
pub const D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST: u32 = 2u32;
pub const D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS: u32 = 1u32;
pub const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_GS_INPUT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_GS_INPUT_REGISTER_COUNT: u32 = 32u32;
pub const D3D12_GS_INPUT_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_GS_INPUT_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_GS_INPUT_REGISTER_VERTICES: u32 = 32u32;
pub const D3D12_GS_MAX_INSTANCE_COUNT: u32 = 32u32;
pub const D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES: u32 = 1024u32;
pub const D3D12_GS_OUTPUT_ELEMENTS: u32 = 32u32;
pub const D3D12_GS_OUTPUT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_GS_OUTPUT_REGISTER_COUNT: u32 = 32u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_HIT_GROUP_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_HIT_GROUP_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_HIT_GROUP_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_HIT_GROUP_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_HIT_GROUP_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_HIT_GROUP_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_HIT_GROUP_TYPE {}
impl ::std::marker::Copy for D3D12_HIT_GROUP_TYPE {}
impl D3D12_HIT_GROUP_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_HIT_GROUP_TYPE_TRIANGLES: Self = Self(0i32);
    pub const D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_HIT_GROUP_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_HIT_GROUP_DESC {
    pub hit_group_export: *mut u16,
    pub r#type: D3D12_HIT_GROUP_TYPE,
    pub any_hit_shader_import: *mut u16,
    pub closest_hit_shader_import: *mut u16,
    pub intersection_shader_import: *mut u16,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_HIT_GROUP_DESC_abi(*mut u16, D3D12_HIT_GROUP_TYPE, *mut u16, *mut u16, *mut u16);
impl D3D12_HIT_GROUP_DESC {}
unsafe impl ::windows::Abi for D3D12_HIT_GROUP_DESC {
    type Abi = D3D12_HIT_GROUP_DESC_abi;
}
impl ::std::default::Default for D3D12_HIT_GROUP_DESC {
    fn default() -> Self {
        Self {
            hit_group_export: ::std::ptr::null_mut(),
            r#type: ::std::default::Default::default(),
            any_hit_shader_import: ::std::ptr::null_mut(),
            closest_hit_shader_import: ::std::ptr::null_mut(),
            intersection_shader_import: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_HIT_GROUP_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_HIT_GROUP_DESC")
            .field(
                "hit_group_export",
                &format_args!("{:?}", self.hit_group_export),
            )
            .field("type", &format_args!("{:?}", self.r#type))
            .field(
                "any_hit_shader_import",
                &format_args!("{:?}", self.any_hit_shader_import),
            )
            .field(
                "closest_hit_shader_import",
                &format_args!("{:?}", self.closest_hit_shader_import),
            )
            .field(
                "intersection_shader_import",
                &format_args!("{:?}", self.intersection_shader_import),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_HIT_GROUP_DESC {
    fn clone(&self) -> Self {
        Self {
            hit_group_export: self.hit_group_export,
            r#type: self.r#type,
            any_hit_shader_import: self.any_hit_shader_import,
            closest_hit_shader_import: self.closest_hit_shader_import,
            intersection_shader_import: self.intersection_shader_import,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_HIT_GROUP_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.hit_group_export == other.hit_group_export
            && self.r#type == other.r#type
            && self.any_hit_shader_import == other.any_hit_shader_import
            && self.closest_hit_shader_import == other.closest_hit_shader_import
            && self.intersection_shader_import == other.intersection_shader_import
    }
}
impl ::std::cmp::Eq for D3D12_HIT_GROUP_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_HIT_KIND(pub i32);
impl ::std::convert::From<i32> for D3D12_HIT_KIND {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_HIT_KIND {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_HIT_KIND {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_HIT_KIND {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_HIT_KIND {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_HIT_KIND {}
impl ::std::marker::Copy for D3D12_HIT_KIND {}
impl D3D12_HIT_KIND {
    #![allow(non_upper_case_globals)]
    pub const D3D12_HIT_KIND_TRIANGLE_FRONT_FACE: Self = Self(254i32);
    pub const D3D12_HIT_KIND_TRIANGLE_BACK_FACE: Self = Self(255i32);
}
unsafe impl ::windows::Abi for D3D12_HIT_KIND {
    type Abi = Self;
}
pub const D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT: u32 = 32u32;
pub const D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT: u32 = 32u32;
pub const D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND: u32 = 4294967295u32;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND: u32 = 4294967295u32;
pub const D3D12_HS_MAXTESSFACTOR_LOWER_BOUND: f32 = 1f32;
pub const D3D12_HS_MAXTESSFACTOR_UPPER_BOUND: f32 = 64f32;
pub const D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS: u32 = 3968u32;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT: u32 = 32u32;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS: u32 = 128u32;
pub const D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES: u32 = 0u32;
pub const D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY: u32 = 0u32;
pub const D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES: u32 = 0u32;
pub const D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT: u32 = 1u32;
pub const D3D12_IA_INSTANCE_ID_BIT_COUNT: u32 = 32u32;
pub const D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT: u32 = 32u32;
pub const D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT: u32 = 32u32;
pub const D3D12_IA_PRIMITIVE_ID_BIT_COUNT: u32 = 32u32;
pub const D3D12_IA_VERTEX_ID_BIT_COUNT: u32 = 32u32;
pub const D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT: u32 = 32u32;
pub const D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS: u32 = 128u32;
pub const D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT: u32 = 32u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_MESSAGE_CATEGORY(pub i32);
impl ::std::convert::From<i32> for D3D12_MESSAGE_CATEGORY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_MESSAGE_CATEGORY {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_MESSAGE_CATEGORY {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_MESSAGE_CATEGORY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_MESSAGE_CATEGORY {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_MESSAGE_CATEGORY {}
impl ::std::marker::Copy for D3D12_MESSAGE_CATEGORY {}
impl D3D12_MESSAGE_CATEGORY {
    #![allow(non_upper_case_globals)]
    pub const D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED: Self = Self(0i32);
    pub const D3D12_MESSAGE_CATEGORY_MISCELLANEOUS: Self = Self(1i32);
    pub const D3D12_MESSAGE_CATEGORY_INITIALIZATION: Self = Self(2i32);
    pub const D3D12_MESSAGE_CATEGORY_CLEANUP: Self = Self(3i32);
    pub const D3D12_MESSAGE_CATEGORY_COMPILATION: Self = Self(4i32);
    pub const D3D12_MESSAGE_CATEGORY_STATE_CREATION: Self = Self(5i32);
    pub const D3D12_MESSAGE_CATEGORY_STATE_SETTING: Self = Self(6i32);
    pub const D3D12_MESSAGE_CATEGORY_STATE_GETTING: Self = Self(7i32);
    pub const D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION: Self = Self(8i32);
    pub const D3D12_MESSAGE_CATEGORY_EXECUTION: Self = Self(9i32);
    pub const D3D12_MESSAGE_CATEGORY_SHADER: Self = Self(10i32);
}
unsafe impl ::windows::Abi for D3D12_MESSAGE_CATEGORY {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_MESSAGE_SEVERITY(pub i32);
impl ::std::convert::From<i32> for D3D12_MESSAGE_SEVERITY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_MESSAGE_SEVERITY {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_MESSAGE_SEVERITY {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_MESSAGE_SEVERITY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_MESSAGE_SEVERITY {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_MESSAGE_SEVERITY {}
impl ::std::marker::Copy for D3D12_MESSAGE_SEVERITY {}
impl D3D12_MESSAGE_SEVERITY {
    #![allow(non_upper_case_globals)]
    pub const D3D12_MESSAGE_SEVERITY_CORRUPTION: Self = Self(0i32);
    pub const D3D12_MESSAGE_SEVERITY_ERROR: Self = Self(1i32);
    pub const D3D12_MESSAGE_SEVERITY_WARNING: Self = Self(2i32);
    pub const D3D12_MESSAGE_SEVERITY_INFO: Self = Self(3i32);
    pub const D3D12_MESSAGE_SEVERITY_MESSAGE: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_MESSAGE_SEVERITY {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_MESSAGE_ID(pub i32);
impl ::std::convert::From<i32> for D3D12_MESSAGE_ID {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_MESSAGE_ID {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_MESSAGE_ID {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_MESSAGE_ID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_MESSAGE_ID {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_MESSAGE_ID {}
impl ::std::marker::Copy for D3D12_MESSAGE_ID {}
impl D3D12_MESSAGE_ID {
    #![allow(non_upper_case_globals)]
    pub const D3D12_MESSAGE_ID_UNKNOWN: Self = Self(0i32);
    pub const D3D12_MESSAGE_ID_STRING_FROM_APPLICATION: Self = Self(1i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_THIS: Self = Self(2i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1: Self = Self(3i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2: Self = Self(4i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3: Self = Self(5i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4: Self = Self(6i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5: Self = Self(7i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6: Self = Self(8i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7: Self = Self(9i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8: Self = Self(10i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9: Self = Self(11i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10: Self = Self(12i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11: Self = Self(13i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12: Self = Self(14i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13: Self = Self(15i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14: Self = Self(16i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15: Self = Self(17i32);
    pub const D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING: Self = Self(18i32);
    pub const D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY: Self = Self(19i32);
    pub const D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA: Self = Self(20i32);
    pub const D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA: Self = Self(21i32);
    pub const D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS: Self = Self(24i32);
    pub const D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY: Self = Self(25i32);
    pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT: Self = Self(26i32);
    pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC: Self = Self(27i32);
    pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT: Self = Self(28i32);
    pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE: Self = Self(29i32);
    pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE: Self = Self(30i32);
    pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS: Self = Self(31i32);
    pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE: Self = Self(32i32);
    pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT: Self = Self(35i32);
    pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT: Self = Self(36i32);
    pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC: Self = Self(37i32);
    pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT: Self = Self(38i32);
    pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE: Self = Self(39i32);
    pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE: Self = Self(40i32);
    pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS: Self = Self(41i32);
    pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE: Self = Self(42i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT: Self = Self(45i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC: Self = Self(46i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT: Self = Self(47i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS: Self = Self(48i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE: Self = Self(49i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY: Self = Self(52i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS: Self = Self(53i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT: Self = Self(54i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT: Self = Self(55i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT: Self = Self(56i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS: Self = Self(57i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH: Self = Self(58i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE: Self = Self(59i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE: Self = Self(60i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT: Self = Self(61i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC: Self = Self(62i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE: Self = Self(63i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC: Self = Self(64i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT: Self = Self(65i32);
    pub const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY: Self = Self(66i32);
    pub const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE: Self = Self(67i32);
    pub const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE: Self = Self(68i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY: Self = Self(69i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE: Self = Self(70i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE: Self = Self(71i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY: Self = Self(72i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE: Self =
        Self(73i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE: Self =
        Self(74i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES: Self =
        Self(75i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED: Self =
        Self(76i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED: Self =
        Self(79i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT: Self =
        Self(80i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT: Self =
        Self(81i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT: Self =
        Self(82i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT : Self = Self (83i32) ;
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION: Self =
        Self(84i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT: Self =
        Self(85i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE:
        Self = Self(86i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC: Self =
        Self(87i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH: Self =
        Self(88i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS: Self =
        Self(89i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX: Self =
        Self(90i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE: Self =
        Self(91i32);
    pub const D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY: Self = Self(92i32);
    pub const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE: Self = Self(93i32);
    pub const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE: Self = Self(94i32);
    pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE: Self = Self(95i32);
    pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE: Self = Self(96i32);
    pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP: Self = Self(97i32);
    pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS: Self =
        Self(98i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK: Self = Self(100i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC: Self = Self(101i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP: Self =
        Self(102i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP: Self =
        Self(103i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP: Self =
        Self(104i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC: Self =
        Self(105i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP: Self =
        Self(106i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP: Self =
        Self(107i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP: Self =
        Self(108i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC: Self =
        Self(109i32);
    pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND: Self = Self(111i32);
    pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND: Self = Self(112i32);
    pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP: Self = Self(113i32);
    pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA: Self = Self(114i32);
    pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA: Self = Self(115i32);
    pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA: Self = Self(116i32);
    pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK: Self = Self(117i32);
    pub const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID: Self = Self(135i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET: Self = Self(200i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH: Self = Self(201i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET: Self = Self(202i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL: Self =
        Self(209i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL: Self = Self(210i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET: Self = Self(211i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID: Self = Self(212i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL: Self = Self(213i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY: Self = Self(219i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED: Self = Self(221i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED: Self = Self(222i32);
    pub const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT: Self = Self(232i32);
    pub const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT: Self = Self(233i32);
    pub const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT: Self = Self(234i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC: Self = Self(239i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC:
        Self = Self(240i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH: Self = Self(245i32);
    pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT: Self = Self(253i32);
    pub const D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY: Self = Self(255i32);
    pub const D3D12_MESSAGE_ID_LIVE_DEVICE: Self = Self(274i32);
    pub const D3D12_MESSAGE_ID_LIVE_SWAPCHAIN: Self = Self(275i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS: Self = Self(276i32);
    pub const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE: Self = Self(277i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE: Self = Self(278i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER:
        Self = Self(280i32);
    pub const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE: Self = Self(283i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM: Self =
        Self(284i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES: Self =
        Self(285i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES: Self =
        Self(286i32);
    pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES: Self =
        Self(287i32);
    pub const D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY: Self = Self(289i32);
    pub const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE: Self = Self(290i32);
    pub const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE: Self = Self(291i32);
    pub const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE: Self = Self(292i32);
    pub const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY: Self = Self(294i32);
    pub const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE: Self = Self(295i32);
    pub const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE: Self = Self(296i32);
    pub const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE: Self = Self(297i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED: Self = Self(310i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE: Self = Self(318i32);
    pub const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY: Self = Self(321i32);
    pub const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE: Self = Self(322i32);
    pub const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE: Self = Self(323i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED: Self =
        Self(331i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED: Self =
        Self(332i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED: Self =
        Self(333i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED: Self =
        Self(334i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED : Self = Self (335i32) ;
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED: Self =
        Self(336i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED: Self =
        Self(337i32);
    pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE: Self = Self(340i32);
    pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC: Self = Self(341i32);
    pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT: Self = Self(342i32);
    pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE: Self =
        Self(343i32);
    pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE: Self = Self(344i32);
    pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS: Self = Self(345i32);
    pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT: Self = Self(346i32);
    pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS: Self = Self(354i32);
    pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT: Self = Self(401i32);
    pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS: Self = Self(403i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: Self =
        Self(410i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: Self =
        Self(412i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: Self =
        Self(414i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: Self =
        Self(416i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED : Self = Self (418i32) ;
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: Self =
        Self(420i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED: Self =
        Self(422i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED: Self = Self(425i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED: Self = Self(426i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED: Self = Self(427i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED: Self = Self(428i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED: Self =
        Self(429i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED: Self = Self(430i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED: Self = Self(431i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT: Self = Self(447i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT: Self = Self(448i32);
    pub const D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER: Self = Self(493i32);
    pub const D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER: Self = Self(494i32);
    pub const D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS: Self = Self(506i32);
    pub const D3D12_MESSAGE_ID_CREATEDEVICE_WARNING: Self = Self(507i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE: Self = Self(519i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER: Self = Self(520i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE: Self = Self(521i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS: Self = Self(522i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS: Self = Self(523i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS: Self = Self(524i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES: Self = Self(525i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION: Self = Self(526i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH: Self = Self(527i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE: Self = Self(528i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT: Self = Self(529i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS: Self = Self(530i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS: Self = Self(531i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT: Self = Self(532i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER: Self = Self(533i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END: Self = Self(534i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN: Self = Self(535i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG: Self = Self(536i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE: Self = Self(537i32);
    pub const D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE: Self = Self(538i32);
    pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION: Self = Self(540i32);
    pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET: Self = Self(541i32);
    pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE: Self = Self(542i32);
    pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET: Self = Self(543i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_OPEN: Self = Self(544i32);
    pub const D3D12_MESSAGE_ID_INVALID_BUNDLE_API: Self = Self(546i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED: Self = Self(547i32);
    pub const D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE: Self = Self(549i32);
    pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC: Self = Self(552i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_SYNC: Self = Self(553i32);
    pub const D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID: Self = Self(554i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE: Self = Self(557i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR: Self = Self(558i32);
    pub const D3D12_MESSAGE_ID_CREATE_PIPELINESTATE: Self = Self(559i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMANDLIST12: Self = Self(560i32);
    pub const D3D12_MESSAGE_ID_CREATE_RESOURCE: Self = Self(562i32);
    pub const D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP: Self = Self(563i32);
    pub const D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE: Self = Self(564i32);
    pub const D3D12_MESSAGE_ID_CREATE_LIBRARY: Self = Self(565i32);
    pub const D3D12_MESSAGE_ID_CREATE_HEAP: Self = Self(566i32);
    pub const D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE: Self = Self(567i32);
    pub const D3D12_MESSAGE_ID_CREATE_QUERYHEAP: Self = Self(568i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE: Self = Self(569i32);
    pub const D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE: Self = Self(570i32);
    pub const D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR: Self = Self(571i32);
    pub const D3D12_MESSAGE_ID_LIVE_PIPELINESTATE: Self = Self(572i32);
    pub const D3D12_MESSAGE_ID_LIVE_COMMANDLIST12: Self = Self(573i32);
    pub const D3D12_MESSAGE_ID_LIVE_RESOURCE: Self = Self(575i32);
    pub const D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP: Self = Self(576i32);
    pub const D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE: Self = Self(577i32);
    pub const D3D12_MESSAGE_ID_LIVE_LIBRARY: Self = Self(578i32);
    pub const D3D12_MESSAGE_ID_LIVE_HEAP: Self = Self(579i32);
    pub const D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE: Self = Self(580i32);
    pub const D3D12_MESSAGE_ID_LIVE_QUERYHEAP: Self = Self(581i32);
    pub const D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE: Self = Self(582i32);
    pub const D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE: Self = Self(583i32);
    pub const D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR: Self = Self(584i32);
    pub const D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE: Self = Self(585i32);
    pub const D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12: Self = Self(586i32);
    pub const D3D12_MESSAGE_ID_DESTROY_RESOURCE: Self = Self(588i32);
    pub const D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP: Self = Self(589i32);
    pub const D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE: Self = Self(590i32);
    pub const D3D12_MESSAGE_ID_DESTROY_LIBRARY: Self = Self(591i32);
    pub const D3D12_MESSAGE_ID_DESTROY_HEAP: Self = Self(592i32);
    pub const D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE: Self = Self(593i32);
    pub const D3D12_MESSAGE_ID_DESTROY_QUERYHEAP: Self = Self(594i32);
    pub const D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE: Self = Self(595i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS: Self = Self(597i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS: Self = Self(599i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN: Self = Self(602i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN: Self = Self(603i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC: Self = Self(604i32);
    pub const D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE: Self = Self(607i32);
    pub const D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE: Self = Self(608i32);
    pub const D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE: Self = Self(609i32);
    pub const D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH: Self = Self(610i32);
    pub const D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE: Self = Self(611i32);
    pub const D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE: Self = Self(613i32);
    pub const D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE: Self =
        Self(614i32);
    pub const D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE: Self = Self(615i32);
    pub const D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE: Self =
        Self(616i32);
    pub const D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE: Self = Self(622i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC: Self = Self(623i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE: Self = Self(624i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE: Self = Self(625i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES: Self = Self(626i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL: Self = Self(627i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES: Self = Self(628i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT: Self = Self(629i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS: Self = Self(630i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS: Self = Self(631i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN: Self = Self(632i32);
    pub const D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN: Self = Self(633i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES: Self = Self(634i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE: Self = Self(635i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES: Self =
        Self(636i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL: Self = Self(637i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES: Self = Self(638i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS: Self = Self(639i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS: Self = Self(640i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN: Self = Self(641i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN: Self = Self(642i32);
    pub const D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE: Self = Self(643i32);
    pub const D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE: Self = Self(644i32);
    pub const D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC: Self = Self(645i32);
    pub const D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE: Self = Self(646i32);
    pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE: Self =
        Self(647i32);
    pub const D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE: Self = Self(649i32);
    pub const D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC: Self = Self(650i32);
    pub const D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE: Self =
        Self(652i32);
    pub const D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES: Self = Self(653i32);
    pub const D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR: Self = Self(654i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN: Self =
        Self(655i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT: Self =
        Self(656i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET: Self =
        Self(657i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET: Self = Self(658i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH : Self = Self (659i32) ;
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX: Self =
        Self(660i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE: Self =
        Self(661i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK: Self =
        Self(662i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE: Self =
        Self(663i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS : Self = Self (664i32) ;
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION: Self =
        Self(665i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND:
        Self = Self(666i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH: Self = Self(667i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH:
        Self = Self(668i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH:
        Self = Self(669i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH: Self =
        Self(670i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN : Self = Self (671i32) ;
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT:
        Self = Self(672i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY: Self =
        Self(673i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE: Self = Self(674i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 : Self = Self (675i32) ;
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING : Self = Self (676i32) ;
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH: Self =
        Self(677i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS : Self = Self (678i32) ;
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET: Self =
        Self(679i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET: Self =
        Self(680i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH: Self =
        Self(681i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT: Self =
        Self(682i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS: Self =
        Self(683i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES: Self =
        Self(684i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC: Self = Self(685i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH: Self =
        Self(686i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH: Self =
        Self(687i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH: Self =
        Self(688i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH: Self =
        Self(689i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH: Self =
        Self(690i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE: Self =
        Self(691i32);
    pub const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE: Self = Self(692i32);
    pub const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH: Self = Self(693i32);
    pub const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE: Self = Self(694i32);
    pub const D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE: Self = Self(695i32);
    pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND: Self = Self(696i32);
    pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED: Self = Self(697i32);
    pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION: Self = Self(698i32);
    pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE: Self = Self(699i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES: Self = Self(700i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP: Self = Self(701i32);
    pub const D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS: Self = Self(702i32);
    pub const D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY: Self = Self(703i32);
    pub const D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY: Self = Self(705i32);
    pub const D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID: Self = Self(708i32);
    pub const D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID: Self = Self(709i32);
    pub const D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID: Self = Self(710i32);
    pub const D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID: Self = Self(711i32);
    pub const D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID: Self = Self(712i32);
    pub const D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC: Self = Self(713i32);
    pub const D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC: Self = Self(715i32);
    pub const D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC: Self = Self(717i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY: Self = Self(718i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT: Self = Self(719i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY: Self = Self(720i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT: Self = Self(721i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS: Self = Self(722i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC: Self = Self(723i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT: Self = Self(724i32);
    pub const D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID: Self = Self(725i32);
    pub const D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID: Self = Self(726i32);
    pub const D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID: Self = Self(727i32);
    pub const D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID: Self = Self(728i32);
    pub const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS: Self = Self(729i32);
    pub const D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS: Self = Self(731i32);
    pub const D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY: Self = Self(732i32);
    pub const D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS: Self = Self(733i32);
    pub const D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS: Self = Self(734i32);
    pub const D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED: Self = Self(735i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT: Self = Self(737i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT: Self = Self(738i32);
    pub const D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE: Self = Self(739i32);
    pub const D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET: Self = Self(740i32);
    pub const D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE: Self = Self(739i32);
    pub const D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET: Self = Self(740i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP: Self = Self(741i32);
    pub const D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID: Self = Self(742i32);
    pub const D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID: Self = Self(743i32);
    pub const D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS: Self = Self(744i32);
    pub const D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION: Self = Self(745i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE: Self = Self(815i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT: Self = Self(816i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT: Self = Self(817i32);
    pub const D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH: Self = Self(818i32);
    pub const D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE: Self = Self(820i32);
    pub const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE: Self = Self(821i32);
    pub const D3D12_MESSAGE_ID_MAP_INVALIDHEAP: Self = Self(822i32);
    pub const D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP: Self = Self(823i32);
    pub const D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE: Self = Self(824i32);
    pub const D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE: Self = Self(825i32);
    pub const D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE: Self = Self(826i32);
    pub const D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE: Self = Self(827i32);
    pub const D3D12_MESSAGE_ID_MAP_INVALIDRANGE: Self = Self(828i32);
    pub const D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE: Self = Self(829i32);
    pub const D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER: Self = Self(832i32);
    pub const D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN: Self = Self(833i32);
    pub const D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN: Self = Self(834i32);
    pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED: Self = Self(835i32);
    pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH: Self = Self(836i32);
    pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST: Self = Self(837i32);
    pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST: Self = Self(838i32);
    pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST: Self = Self(839i32);
    pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION: Self = Self(840i32);
    pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS: Self = Self(841i32);
    pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC: Self = Self(842i32);
    pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION: Self = Self(843i32);
    pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS: Self = Self(844i32);
    pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS: Self = Self(845i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST: Self = Self(846i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE: Self = Self(847i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION: Self = Self(848i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE: Self = Self(849i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE: Self = Self(850i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET: Self = Self(851i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT: Self = Self(852i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT: Self = Self(853i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS: Self = Self(854i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH: Self = Self(855i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT: Self = Self(856i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT: Self =
        Self(857i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS: Self = Self(858i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC: Self = Self(859i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE: Self = Self(860i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION: Self = Self(861i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE: Self = Self(862i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE: Self = Self(863i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET: Self = Self(864i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT: Self = Self(865i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT: Self = Self(866i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS: Self = Self(867i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH: Self = Self(868i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT: Self = Self(869i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT: Self =
        Self(870i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS: Self = Self(871i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES: Self = Self(872i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX: Self = Self(873i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH: Self = Self(874i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX: Self = Self(875i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS: Self = Self(876i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX: Self = Self(877i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT: Self = Self(878i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH: Self = Self(879i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT: Self = Self(880i32);
    pub const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER: Self = Self(881i32);
    pub const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH: Self =
        Self(882i32);
    pub const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE: Self =
        Self(883i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB: Self = Self(884i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH: Self = Self(885i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH: Self =
        Self(886i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH: Self = Self(887i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED: Self = Self(888i32);
    pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP: Self = Self(889i32);
    pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE: Self = Self(890i32);
    pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX: Self = Self(891i32);
    pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE: Self = Self(892i32);
    pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX: Self = Self(893i32);
    pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP: Self = Self(894i32);
    pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE: Self = Self(895i32);
    pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX: Self = Self(896i32);
    pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE: Self = Self(897i32);
    pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX: Self = Self(898i32);
    pub const D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED: Self = Self(899i32);
    pub const D3D12_MESSAGE_ID_INVALID_NODE_INDEX: Self = Self(900i32);
    pub const D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE: Self = Self(901i32);
    pub const D3D12_MESSAGE_ID_NODE_MASK_MISMATCH: Self = Self(902i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY: Self = Self(903i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES: Self =
        Self(904i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES: Self = Self(905i32);
    pub const D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES: Self = Self(906i32);
    pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE: Self =
        Self(907i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS: Self =
        Self(908i32);
    pub const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE: Self = Self(909i32);
    pub const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS: Self = Self(910i32);
    pub const D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS: Self = Self(911i32);
    pub const D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT: Self = Self(912i32);
    pub const D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS: Self = Self(913i32);
    pub const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES: Self = Self(914i32);
    pub const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE: Self = Self(915i32);
    pub const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT: Self = Self(916i32);
    pub const D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT: Self = Self(917i32);
    pub const D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY: Self = Self(918i32);
    pub const D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE: Self = Self(919i32);
    pub const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY: Self = Self(920i32);
    pub const D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE: Self = Self(921i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS: Self = Self(922i32);
    pub const D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE: Self = Self(923i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED: Self = Self(924i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT : Self = Self (925i32) ;
    pub const D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS: Self = Self(926i32);
    pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED: Self =
        Self(927i32);
    pub const D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY: Self = Self(929i32);
    pub const D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE: Self = Self(930i32);
    pub const D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE: Self = Self(931i32);
    pub const D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT: Self = Self(932i32);
    pub const D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT: Self = Self(933i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED: Self = Self(934i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED: Self =
        Self(935i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS: Self =
        Self(936i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS : Self = Self (937i32) ;
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED: Self = Self(938i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH: Self = Self(939i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH: Self =
        Self(940i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH: Self =
        Self(941i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE: Self =
        Self(942i32);
    pub const D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST: Self = Self(943i32);
    pub const D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE: Self = Self(944i32);
    pub const D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC: Self = Self(945i32);
    pub const D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE: Self = Self(946i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST: Self = Self(947i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE: Self = Self(948i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC: Self = Self(949i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE: Self = Self(950i32);
    pub const D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH: Self = Self(951i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET: Self = Self(952i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH: Self = Self(953i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS: Self = Self(954i32);
    pub const D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH: Self = Self(955i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH: Self = Self(956i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END: Self = Self(957i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE: Self = Self(958i32);
    pub const D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT: Self = Self(959i32);
    pub const D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE: Self = Self(960i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS: Self =
        Self(961i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB: Self = Self(962i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH: Self = Self(963i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH: Self = Self(964i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED: Self = Self(965i32);
    pub const D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY: Self = Self(966i32);
    pub const D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY: Self = Self(967i32);
    pub const D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY: Self = Self(968i32);
    pub const D3D12_MESSAGE_ID_STOREPIPELINE_NONAME: Self = Self(969i32);
    pub const D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME: Self = Self(970i32);
    pub const D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND: Self = Self(971i32);
    pub const D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC: Self = Self(972i32);
    pub const D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY: Self = Self(973i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH: Self =
        Self(974i32);
    pub const D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS: Self = Self(975i32);
    pub const D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED: Self = Self(976i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED: Self = Self(977i32);
    pub const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED: Self =
        Self(978i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST: Self = Self(979i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEODECODER: Self = Self(980i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM: Self = Self(981i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST: Self = Self(982i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEODECODER: Self = Self(983i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM: Self = Self(984i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST: Self = Self(985i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEODECODER: Self = Self(986i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM: Self = Self(987i32);
    pub const D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS: Self = Self(988i32);
    pub const D3D12_MESSAGE_ID_DEPRECATED_API: Self = Self(989i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE: Self = Self(990i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET: Self = Self(991i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET: Self = Self(992i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET: Self = Self(993i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET: Self = Self(994i32);
    pub const D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE: Self = Self(995i32);
    pub const D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS: Self = Self(996i32);
    pub const D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D: Self = Self(997i32);
    pub const D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE: Self = Self(998i32);
    pub const D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE: Self = Self(999i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED: Self = Self(1000i32);
    pub const D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE: Self = Self(1001i32);
    pub const D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE: Self = Self(1002i32);
    pub const D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE:
        Self = Self(1003i32);
    pub const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET: Self =
        Self(1004i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS: Self =
        Self(1005i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH: Self = Self(1006i32);
    pub const D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS: Self = Self(1007i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS: Self =
        Self(1008i32);
    pub const D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY: Self = Self(1009i32);
    pub const D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS: Self = Self(1013i32);
    pub const D3D12_MESSAGE_ID_BEGIN_EVENT: Self = Self(1014i32);
    pub const D3D12_MESSAGE_ID_END_EVENT: Self = Self(1015i32);
    pub const D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS: Self = Self(1016i32);
    pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED: Self =
        Self(1017i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT: Self = Self(1018i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT: Self = Self(1019i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM: Self = Self(1020i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM: Self = Self(1021i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE: Self = Self(1022i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH: Self =
        Self(1023i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME:
        Self = Self(1024i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME : Self = Self (1025i32) ;
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE: Self = Self(1026i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST: Self = Self(1027i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION: Self =
        Self(1028i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS: Self = Self(1029i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC: Self = Self(1030i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION: Self =
        Self(1031i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS: Self = Self(1032i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT: Self = Self(1033i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES: Self = Self(1034i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES: Self =
        Self(1035i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE: Self = Self(1036i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE: Self =
        Self(1037i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS: Self =
        Self(1038i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS: Self = Self(1039i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES: Self = Self(1040i32);
    pub const D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG: Self = Self(1041i32);
    pub const D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE: Self = Self(1042i32);
    pub const D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS: Self = Self(1043i32);
    pub const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE: Self = Self(1044i32);
    pub const D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET: Self = Self(1045i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH: Self =
        Self(1046i32);
    pub const D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE: Self = Self(1047i32);
    pub const D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED: Self = Self(1048i32);
    pub const D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS: Self = Self(1049i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT: Self = Self(1050i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE: Self = Self(1051i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST: Self = Self(1052i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE: Self = Self(1053i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE: Self = Self(1054i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST: Self = Self(1055i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE: Self = Self(1056i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE: Self = Self(1057i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST: Self = Self(1058i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE: Self = Self(1059i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR: Self = Self(1060i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM: Self = Self(1061i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR: Self = Self(1062i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM: Self = Self(1063i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR: Self = Self(1064i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM: Self = Self(1065i32);
    pub const D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS: Self = Self(1066i32);
    pub const D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT: Self = Self(1067i32);
    pub const D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION: Self = Self(1068i32);
    pub const D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY: Self = Self(1069i32);
    pub const D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION: Self = Self(1070i32);
    pub const D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION: Self = Self(1071i32);
    pub const D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY: Self = Self(1072i32);
    pub const D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION: Self = Self(1073i32);
    pub const D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION: Self = Self(1074i32);
    pub const D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY: Self = Self(1075i32);
    pub const D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION: Self = Self(1076i32);
    pub const D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED: Self = Self(1077i32);
    pub const D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION: Self = Self(1078i32);
    pub const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED: Self =
        Self(1079i32);
    pub const D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED: Self = Self(1080i32);
    pub const D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE: Self =
        Self(1081i32);
    pub const D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR: Self =
        Self(1082i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP: Self = Self(1083i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP: Self = Self(1084i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP: Self = Self(1085i32);
    pub const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN: Self = Self(1086i32);
    pub const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN: Self = Self(1087i32);
    pub const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS: Self = Self(1088i32);
    pub const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE: Self = Self(1089i32);
    pub const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST: Self = Self(1090i32);
    pub const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE: Self = Self(1091i32);
    pub const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT: Self = Self(1092i32);
    pub const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED: Self = Self(1093i32);
    pub const D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS: Self = Self(1094i32);
    pub const D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED: Self = Self(1095i32);
    pub const D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS: Self = Self(1096i32);
    pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG: Self =
        Self(1097i32);
    pub const D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG: Self =
        Self(1098i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE: Self = Self(1099i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED: Self = Self(1100i32);
    pub const D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT: Self = Self(1101i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED: Self = Self(1102i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR: Self = Self(1103i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED:
        Self = Self(1104i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR: Self =
        Self(1105i32);
    pub const D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT: Self = Self(1106i32);
    pub const D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT: Self = Self(1107i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE: Self = Self(1108i32);
    pub const D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT: Self = Self(1109i32);
    pub const D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT: Self = Self(1110i32);
    pub const D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS: Self = Self(1111i32);
    pub const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED: Self = Self(1112i32);
    pub const D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT: Self = Self(1113i32);
    pub const D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED: Self = Self(1114i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER: Self = Self(1115i32);
    pub const D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER: Self = Self(1116i32);
    pub const D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER: Self = Self(1117i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED: Self = Self(1118i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS: Self = Self(1119i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS: Self = Self(1120i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS:
        Self = Self(1121i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMANDPOOL: Self = Self(1122i32);
    pub const D3D12_MESSAGE_ID_LIVE_COMMANDPOOL: Self = Self(1123i32);
    pub const D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL: Self = Self(1124i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS: Self = Self(1125i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED: Self = Self(1126i32);
    pub const D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH: Self = Self(1127i32);
    pub const D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION: Self = Self(1128i32);
    pub const D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST: Self =
        Self(1129i32);
    pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST: Self =
        Self(1130i32);
    pub const D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST: Self = Self(1131i32);
    pub const D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS: Self =
        Self(1132i32);
    pub const D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET: Self =
        Self(1133i32);
    pub const D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING: Self =
        Self(1134i32);
    pub const D3D12_MESSAGE_ID_COMMAND_POOL_SYNC: Self = Self(1135i32);
    pub const D3D12_MESSAGE_ID_EVICT_UNDERFLOW: Self = Self(1136i32);
    pub const D3D12_MESSAGE_ID_CREATE_META_COMMAND: Self = Self(1137i32);
    pub const D3D12_MESSAGE_ID_LIVE_META_COMMAND: Self = Self(1138i32);
    pub const D3D12_MESSAGE_ID_DESTROY_META_COMMAND: Self = Self(1139i32);
    pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE: Self = Self(1140i32);
    pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE: Self = Self(1141i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE: Self = Self(1142i32);
    pub const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE: Self = Self(1143i32);
    pub const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER: Self = Self(1144i32);
    pub const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC: Self =
        Self(1145i32);
    pub const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED: Self = Self(1146i32);
    pub const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION: Self =
        Self(1147i32);
    pub const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS: Self =
        Self(1148i32);
    pub const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET: Self =
        Self(1149i32);
    pub const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION: Self =
        Self(1150i32);
    pub const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS: Self =
        Self(1151i32);
    pub const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN: Self =
        Self(1152i32);
    pub const D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER: Self =
        Self(1153i32);
    pub const D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES: Self =
        Self(1154i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE: Self = Self(1155i32);
    pub const D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS: Self =
        Self(1156i32);
    pub const D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED: Self = Self(1157i32);
    pub const D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID: Self =
        Self(1158i32);
    pub const D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID: Self =
        Self(1159i32);
    pub const D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID: Self = Self(1160i32);
    pub const D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID: Self = Self(1161i32);
    pub const D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID: Self =
        Self(1162i32);
    pub const D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER: Self = Self(1163i32);
    pub const D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER: Self = Self(1164i32);
    pub const D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER: Self = Self(1165i32);
    pub const D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED: Self = Self(1166i32);
    pub const D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD: Self = Self(1167i32);
    pub const D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD: Self = Self(1168i32);
    pub const D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD: Self = Self(1169i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_ERROR: Self = Self(1170i32);
    pub const D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID: Self = Self(1171i32);
    pub const D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS: Self = Self(1172i32);
    pub const D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION: Self = Self(1173i32);
    pub const D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH: Self = Self(1174i32);
    pub const D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND: Self = Self(1175i32);
    pub const D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS: Self = Self(1176i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST: Self = Self(1177i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST: Self = Self(1178i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST: Self = Self(1179i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE: Self = Self(1180i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE: Self = Self(1181i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE: Self = Self(1182i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR: Self = Self(1183i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR: Self = Self(1184i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR: Self = Self(1185i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP: Self = Self(1186i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP: Self = Self(1187i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP: Self = Self(1188i32);
    pub const D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS: Self = Self(1189i32);
    pub const D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS: Self = Self(1190i32);
    pub const D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR: Self = Self(1191i32);
    pub const D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD: Self = Self(1192i32);
    pub const D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR: Self = Self(1193i32);
    pub const D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR: Self = Self(1194i32);
    pub const D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR: Self = Self(1195i32);
    pub const D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR: Self = Self(1196i32);
    pub const D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR: Self = Self(1197i32);
    pub const D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR: Self = Self(1198i32);
    pub const D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID: Self = Self(1199i32);
    pub const D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID: Self = Self(1200i32);
    pub const D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE: Self =
        Self(1201i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER: Self = Self(1202i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED: Self = Self(1203i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES: Self = Self(1204i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN: Self = Self(1205i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST: Self = Self(1206i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED: Self = Self(1207i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME: Self = Self(1208i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS: Self =
        Self(1209i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS: Self =
        Self(1210i32);
    pub const D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH: Self = Self(1211i32);
    pub const D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED: Self = Self(1212i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS: Self = Self(1213i32);
    pub const D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE: Self = Self(1214i32);
    pub const D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR: Self = Self(1215i32);
    pub const D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL: Self = Self(1216i32);
    pub const D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT: Self = Self(1217i32);
    pub const D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT: Self = Self(1218i32);
    pub const D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT: Self =
        Self(1219i32);
    pub const D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT: Self = Self(1220i32);
    pub const D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT: Self = Self(1221i32);
    pub const D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE: Self = Self(1222i32);
    pub const D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT: Self =
        Self(1223i32);
    pub const D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL:
        Self = Self(1224i32);
    pub const D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND: Self = Self(1225i32);
    pub const D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND: Self = Self(1226i32);
    pub const D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND: Self = Self(1227i32);
    pub const D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID: Self = Self(1228i32);
    pub const D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT: Self = Self(1229i32);
    pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY: Self =
        Self(1230i32);
    pub const D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR: Self = Self(1231i32);
    pub const D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE : Self = Self (1232i32) ;
    pub const D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE: Self = Self(1233i32);
    pub const D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP: Self =
        Self(1234i32);
    pub const D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER: Self = Self(1235i32);
    pub const D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2: Self = Self(1236i32);
    pub const D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1: Self = Self(1237i32);
    pub const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT: Self = Self(1238i32);
    pub const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE: Self = Self(1239i32);
    pub const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL: Self = Self(1240i32);
    pub const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT: Self = Self(1241i32);
    pub const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY: Self = Self(1242i32);
    pub const D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE: Self = Self(1243i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH: Self =
        Self(1244i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH: Self =
        Self(1245i32);
    pub const D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR: Self = Self(1246i32);
    pub const D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT: Self =
        Self(1247i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH: Self =
        Self(1248i32);
    pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE: Self = Self(1249i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH: Self = Self(1250i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH: Self = Self(1251i32);
    pub const D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT: Self =
        Self(1252i32);
    pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH: Self =
        Self(1253i32);
    pub const D3D12_MESSAGE_ID_EMPTY_DISPATCH: Self = Self(1254i32);
    pub const D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY: Self =
        Self(1255i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION: Self = Self(1256i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION: Self = Self(1257i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT: Self = Self(1258i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY: Self = Self(1259i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT: Self = Self(1260i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG: Self =
        Self(1261i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS: Self = Self(1262i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY: Self =
        Self(1263i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT: Self =
        Self(1264i32);
    pub const D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE: Self = Self(1265i32);
    pub const D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY: Self = Self(1266i32);
    pub const D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE: Self =
        Self(1267i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT: Self =
        Self(1268i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT: Self =
        Self(1269i32);
    pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH:
        Self = Self(1270i32);
    pub const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE: Self =
        Self(1271i32);
    pub const D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE: Self = Self(1272i32);
    pub const D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE: Self = Self(1273i32);
    pub const D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE : Self = Self (1274i32) ;
    pub const D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE : Self = Self (1275i32) ;
    pub const D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE: Self = Self(1276i32);
    pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS: Self =
        Self(1277i32);
    pub const D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE: Self =
        Self(1278i32);
    pub const D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY: Self = Self(1279i32);
    pub const D3D12_MESSAGE_ID_D3D12_MESSAGES_END: Self = Self(1280i32);
}
unsafe impl ::windows::Abi for D3D12_MESSAGE_ID {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_INFO_QUEUE_FILTER_DESC {
    pub num_categories: u32,
    pub p_category_list: *mut D3D12_MESSAGE_CATEGORY,
    pub num_severities: u32,
    pub p_severity_list: *mut D3D12_MESSAGE_SEVERITY,
    pub num_ids: u32,
    pub p_id_list: *mut D3D12_MESSAGE_ID,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_INFO_QUEUE_FILTER_DESC_abi(
    u32,
    *mut D3D12_MESSAGE_CATEGORY,
    u32,
    *mut D3D12_MESSAGE_SEVERITY,
    u32,
    *mut D3D12_MESSAGE_ID,
);
impl D3D12_INFO_QUEUE_FILTER_DESC {}
unsafe impl ::windows::Abi for D3D12_INFO_QUEUE_FILTER_DESC {
    type Abi = D3D12_INFO_QUEUE_FILTER_DESC_abi;
}
impl ::std::default::Default for D3D12_INFO_QUEUE_FILTER_DESC {
    fn default() -> Self {
        Self {
            num_categories: 0,
            p_category_list: ::std::ptr::null_mut(),
            num_severities: 0,
            p_severity_list: ::std::ptr::null_mut(),
            num_ids: 0,
            p_id_list: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_INFO_QUEUE_FILTER_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_INFO_QUEUE_FILTER_DESC")
            .field("num_categories", &format_args!("{:?}", self.num_categories))
            .field(
                "p_category_list",
                &format_args!("{:?}", self.p_category_list),
            )
            .field("num_severities", &format_args!("{:?}", self.num_severities))
            .field(
                "p_severity_list",
                &format_args!("{:?}", self.p_severity_list),
            )
            .field("num_ids", &format_args!("{:?}", self.num_ids))
            .field("p_id_list", &format_args!("{:?}", self.p_id_list))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_INFO_QUEUE_FILTER_DESC {
    fn clone(&self) -> Self {
        Self {
            num_categories: self.num_categories,
            p_category_list: self.p_category_list,
            num_severities: self.num_severities,
            p_severity_list: self.p_severity_list,
            num_ids: self.num_ids,
            p_id_list: self.p_id_list,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_INFO_QUEUE_FILTER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.num_categories == other.num_categories
            && self.p_category_list == other.p_category_list
            && self.num_severities == other.num_severities
            && self.p_severity_list == other.p_severity_list
            && self.num_ids == other.num_ids
            && self.p_id_list == other.p_id_list
    }
}
impl ::std::cmp::Eq for D3D12_INFO_QUEUE_FILTER_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_INFO_QUEUE_FILTER {
    pub allow_list: D3D12_INFO_QUEUE_FILTER_DESC,
    pub deny_list: D3D12_INFO_QUEUE_FILTER_DESC,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_INFO_QUEUE_FILTER_abi(
    D3D12_INFO_QUEUE_FILTER_DESC_abi,
    D3D12_INFO_QUEUE_FILTER_DESC_abi,
);
impl D3D12_INFO_QUEUE_FILTER {}
unsafe impl ::windows::Abi for D3D12_INFO_QUEUE_FILTER {
    type Abi = D3D12_INFO_QUEUE_FILTER_abi;
}
impl ::std::default::Default for D3D12_INFO_QUEUE_FILTER {
    fn default() -> Self {
        Self {
            allow_list: ::std::default::Default::default(),
            deny_list: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_INFO_QUEUE_FILTER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_INFO_QUEUE_FILTER")
            .field("allow_list", &format_args!("{:?}", self.allow_list))
            .field("deny_list", &format_args!("{:?}", self.deny_list))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_INFO_QUEUE_FILTER {
    fn clone(&self) -> Self {
        Self {
            allow_list: <D3D12_INFO_QUEUE_FILTER_DESC as std::clone::Clone>::clone(
                &self.allow_list,
            ),
            deny_list: <D3D12_INFO_QUEUE_FILTER_DESC as std::clone::Clone>::clone(&self.deny_list),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_INFO_QUEUE_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.allow_list == other.allow_list && self.deny_list == other.deny_list
    }
}
impl ::std::cmp::Eq for D3D12_INFO_QUEUE_FILTER {}
pub const D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT: u32 = 4294967295u32;
pub const D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER: u32 = 4294967295u32;
pub const D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL: u32 = 4294967295u32;
pub const D3D12_KEEP_UNORDERED_ACCESS_VIEWS: u32 = 4294967295u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_LIBRARY_DESC {
    pub creator: *mut i8,
    pub flags: u32,
    pub function_count: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_LIBRARY_DESC_abi(*mut i8, u32, u32);
impl D3D12_LIBRARY_DESC {}
unsafe impl ::windows::Abi for D3D12_LIBRARY_DESC {
    type Abi = D3D12_LIBRARY_DESC_abi;
}
impl ::std::default::Default for D3D12_LIBRARY_DESC {
    fn default() -> Self {
        Self {
            creator: ::std::ptr::null_mut(),
            flags: 0,
            function_count: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_LIBRARY_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_LIBRARY_DESC")
            .field("creator", &format_args!("{:?}", self.creator))
            .field("flags", &format_args!("{:?}", self.flags))
            .field("function_count", &format_args!("{:?}", self.function_count))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_LIBRARY_DESC {
    fn clone(&self) -> Self {
        Self {
            creator: self.creator,
            flags: self.flags,
            function_count: self.function_count,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_LIBRARY_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.creator == other.creator
            && self.flags == other.flags
            && self.function_count == other.function_count
    }
}
impl ::std::cmp::Eq for D3D12_LIBRARY_DESC {}
impl ::std::marker::Copy for D3D12_LIBRARY_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_LIFETIME_STATE(pub i32);
impl ::std::convert::From<i32> for D3D12_LIFETIME_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_LIFETIME_STATE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_LIFETIME_STATE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_LIFETIME_STATE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_LIFETIME_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_LIFETIME_STATE {}
impl ::std::marker::Copy for D3D12_LIFETIME_STATE {}
impl D3D12_LIFETIME_STATE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_LIFETIME_STATE_IN_USE: Self = Self(0i32);
    pub const D3D12_LIFETIME_STATE_NOT_IN_USE: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_LIFETIME_STATE {
    type Abi = Self;
}
pub const D3D12_LINEAR_GAMMA: f32 = 1f32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_LOCAL_ROOT_SIGNATURE {
    pub p_local_root_signature: ::std::option::Option<ID3D12RootSignature>,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_LOCAL_ROOT_SIGNATURE_abi(::windows::RawPtr);
impl D3D12_LOCAL_ROOT_SIGNATURE {}
unsafe impl ::windows::Abi for D3D12_LOCAL_ROOT_SIGNATURE {
    type Abi = D3D12_LOCAL_ROOT_SIGNATURE_abi;
}
impl ::std::default::Default for D3D12_LOCAL_ROOT_SIGNATURE {
    fn default() -> Self {
        Self {
            p_local_root_signature: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_LOCAL_ROOT_SIGNATURE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_LOCAL_ROOT_SIGNATURE")
            .field(
                "p_local_root_signature",
                &format_args!("{:?}", self.p_local_root_signature),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_LOCAL_ROOT_SIGNATURE {
    fn clone(&self) -> Self {
        Self {
            p_local_root_signature:
                <::std::option::Option<ID3D12RootSignature> as std::clone::Clone>::clone(
                    &self.p_local_root_signature,
                ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_LOCAL_ROOT_SIGNATURE {
    fn eq(&self, other: &Self) -> bool {
        self.p_local_root_signature == other.p_local_root_signature
    }
}
impl ::std::cmp::Eq for D3D12_LOCAL_ROOT_SIGNATURE {}
pub const D3D12_MAG_FILTER_SHIFT: u32 = 2u32;
pub const D3D12_MAJOR_VERSION: u32 = 12u32;
pub const D3D12_MAX_BORDER_COLOR_COMPONENT: f32 = 1f32;
pub const D3D12_MAX_DEPTH: f32 = 1f32;
pub const D3D12_MAX_LIVE_STATIC_SAMPLERS: u32 = 2032u32;
pub const D3D12_MAX_MAXANISOTROPY: u32 = 16u32;
pub const D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT: u32 = 32u32;
pub const D3D12_MAX_POSITION_VALUE: f32 = 34028236000000000000000000000000000f32;
pub const D3D12_MAX_ROOT_COST: u32 = 64u32;
pub const D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1: u32 = 1000000u32;
pub const D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2: u32 = 1000000u32;
pub const D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE: u32 = 2048u32;
pub const D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP: u32 = 17u32;
pub const D3D12_MAX_VIEW_INSTANCE_COUNT: u32 = 4u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_MEASUREMENTS_ACTION(pub i32);
impl ::std::convert::From<i32> for D3D12_MEASUREMENTS_ACTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_MEASUREMENTS_ACTION {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_MEASUREMENTS_ACTION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_MEASUREMENTS_ACTION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_MEASUREMENTS_ACTION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_MEASUREMENTS_ACTION {}
impl ::std::marker::Copy for D3D12_MEASUREMENTS_ACTION {}
impl D3D12_MEASUREMENTS_ACTION {
    #![allow(non_upper_case_globals)]
    pub const D3D12_MEASUREMENTS_ACTION_KEEP_ALL: Self = Self(0i32);
    pub const D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS: Self = Self(1i32);
    pub const D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY: Self = Self(2i32);
    pub const D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_MEASUREMENTS_ACTION {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_MEMCPY_DEST {
    pub p_data: *mut ::std::ffi::c_void,
    pub row_pitch: usize,
    pub slice_pitch: usize,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_MEMCPY_DEST_abi(*mut ::std::ffi::c_void, usize, usize);
impl D3D12_MEMCPY_DEST {}
unsafe impl ::windows::Abi for D3D12_MEMCPY_DEST {
    type Abi = D3D12_MEMCPY_DEST_abi;
}
impl ::std::default::Default for D3D12_MEMCPY_DEST {
    fn default() -> Self {
        Self {
            p_data: ::std::ptr::null_mut(),
            row_pitch: 0,
            slice_pitch: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_MEMCPY_DEST {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_MEMCPY_DEST")
            .field("p_data", &format_args!("{:?}", self.p_data))
            .field("row_pitch", &format_args!("{:?}", self.row_pitch))
            .field("slice_pitch", &format_args!("{:?}", self.slice_pitch))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_MEMCPY_DEST {
    fn clone(&self) -> Self {
        Self {
            p_data: <*mut ::std::ffi::c_void as std::clone::Clone>::clone(&self.p_data),
            row_pitch: self.row_pitch,
            slice_pitch: self.slice_pitch,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_MEMCPY_DEST {
    fn eq(&self, other: &Self) -> bool {
        self.p_data == other.p_data
            && self.row_pitch == other.row_pitch
            && self.slice_pitch == other.slice_pitch
    }
}
impl ::std::cmp::Eq for D3D12_MEMCPY_DEST {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_MESSAGE {
    pub category: D3D12_MESSAGE_CATEGORY,
    pub severity: D3D12_MESSAGE_SEVERITY,
    pub id: D3D12_MESSAGE_ID,
    pub p_description: *mut i8,
    pub description_byte_length: usize,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_MESSAGE_abi(
    D3D12_MESSAGE_CATEGORY,
    D3D12_MESSAGE_SEVERITY,
    D3D12_MESSAGE_ID,
    *mut i8,
    usize,
);
impl D3D12_MESSAGE {}
unsafe impl ::windows::Abi for D3D12_MESSAGE {
    type Abi = D3D12_MESSAGE_abi;
}
impl ::std::default::Default for D3D12_MESSAGE {
    fn default() -> Self {
        Self {
            category: ::std::default::Default::default(),
            severity: ::std::default::Default::default(),
            id: ::std::default::Default::default(),
            p_description: ::std::ptr::null_mut(),
            description_byte_length: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_MESSAGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_MESSAGE")
            .field("category", &format_args!("{:?}", self.category))
            .field("severity", &format_args!("{:?}", self.severity))
            .field("id", &format_args!("{:?}", self.id))
            .field("p_description", &format_args!("{:?}", self.p_description))
            .field(
                "description_byte_length",
                &format_args!("{:?}", self.description_byte_length),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_MESSAGE {
    fn clone(&self) -> Self {
        Self {
            category: self.category,
            severity: self.severity,
            id: self.id,
            p_description: self.p_description,
            description_byte_length: self.description_byte_length,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_MESSAGE {
    fn eq(&self, other: &Self) -> bool {
        self.category == other.category
            && self.severity == other.severity
            && self.id == other.id
            && self.p_description == other.p_description
            && self.description_byte_length == other.description_byte_length
    }
}
impl ::std::cmp::Eq for D3D12_MESSAGE {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_META_COMMAND_DESC {
    pub id: ::windows::Guid,
    pub name: *mut u16,
    pub initialization_dirty_state: D3D12_GRAPHICS_STATES,
    pub execution_dirty_state: D3D12_GRAPHICS_STATES,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_META_COMMAND_DESC_abi(
    ::windows::Guid,
    *mut u16,
    D3D12_GRAPHICS_STATES,
    D3D12_GRAPHICS_STATES,
);
impl D3D12_META_COMMAND_DESC {}
unsafe impl ::windows::Abi for D3D12_META_COMMAND_DESC {
    type Abi = D3D12_META_COMMAND_DESC_abi;
}
impl ::std::default::Default for D3D12_META_COMMAND_DESC {
    fn default() -> Self {
        Self {
            id: ::windows::Guid::zeroed(),
            name: ::std::ptr::null_mut(),
            initialization_dirty_state: ::std::default::Default::default(),
            execution_dirty_state: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_META_COMMAND_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_META_COMMAND_DESC")
            .field("id", &format_args!("{:?}", self.id))
            .field("name", &format_args!("{:?}", self.name))
            .field(
                "initialization_dirty_state",
                &format_args!("{:?}", self.initialization_dirty_state),
            )
            .field(
                "execution_dirty_state",
                &format_args!("{:?}", self.execution_dirty_state),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_META_COMMAND_DESC {
    fn clone(&self) -> Self {
        Self {
            id: <::windows::Guid as std::clone::Clone>::clone(&self.id),
            name: self.name,
            initialization_dirty_state: self.initialization_dirty_state,
            execution_dirty_state: self.execution_dirty_state,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_META_COMMAND_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.id == other.id
            && self.name == other.name
            && self.initialization_dirty_state == other.initialization_dirty_state
            && self.execution_dirty_state == other.execution_dirty_state
    }
}
impl ::std::cmp::Eq for D3D12_META_COMMAND_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_META_COMMAND_PARAMETER_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_META_COMMAND_PARAMETER_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_META_COMMAND_PARAMETER_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_META_COMMAND_PARAMETER_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_META_COMMAND_PARAMETER_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_META_COMMAND_PARAMETER_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_META_COMMAND_PARAMETER_TYPE {}
impl ::std::marker::Copy for D3D12_META_COMMAND_PARAMETER_TYPE {}
impl D3D12_META_COMMAND_PARAMETER_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT: Self = Self(0i32);
    pub const D3D12_META_COMMAND_PARAMETER_TYPE_UINT64: Self = Self(1i32);
    pub const D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS: Self = Self(2i32);
    pub const D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV: Self =
        Self(3i32);
    pub const D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV: Self =
        Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_META_COMMAND_PARAMETER_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_META_COMMAND_PARAMETER_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_META_COMMAND_PARAMETER_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_META_COMMAND_PARAMETER_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_META_COMMAND_PARAMETER_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_META_COMMAND_PARAMETER_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_META_COMMAND_PARAMETER_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_META_COMMAND_PARAMETER_FLAGS {}
impl ::std::marker::Copy for D3D12_META_COMMAND_PARAMETER_FLAGS {}
impl D3D12_META_COMMAND_PARAMETER_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_META_COMMAND_PARAMETER_FLAG_INPUT: Self = Self(1i32);
    pub const D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_META_COMMAND_PARAMETER_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_META_COMMAND_PARAMETER_DESC {
    pub name: *mut u16,
    pub r#type: D3D12_META_COMMAND_PARAMETER_TYPE,
    pub flags: D3D12_META_COMMAND_PARAMETER_FLAGS,
    pub required_resource_state: D3D12_RESOURCE_STATES,
    pub structure_offset: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_META_COMMAND_PARAMETER_DESC_abi(
    *mut u16,
    D3D12_META_COMMAND_PARAMETER_TYPE,
    D3D12_META_COMMAND_PARAMETER_FLAGS,
    D3D12_RESOURCE_STATES,
    u32,
);
impl D3D12_META_COMMAND_PARAMETER_DESC {}
unsafe impl ::windows::Abi for D3D12_META_COMMAND_PARAMETER_DESC {
    type Abi = D3D12_META_COMMAND_PARAMETER_DESC_abi;
}
impl ::std::default::Default for D3D12_META_COMMAND_PARAMETER_DESC {
    fn default() -> Self {
        Self {
            name: ::std::ptr::null_mut(),
            r#type: ::std::default::Default::default(),
            flags: ::std::default::Default::default(),
            required_resource_state: ::std::default::Default::default(),
            structure_offset: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_META_COMMAND_PARAMETER_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_META_COMMAND_PARAMETER_DESC")
            .field("name", &format_args!("{:?}", self.name))
            .field("type", &format_args!("{:?}", self.r#type))
            .field("flags", &format_args!("{:?}", self.flags))
            .field(
                "required_resource_state",
                &format_args!("{:?}", self.required_resource_state),
            )
            .field(
                "structure_offset",
                &format_args!("{:?}", self.structure_offset),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_META_COMMAND_PARAMETER_DESC {
    fn clone(&self) -> Self {
        Self {
            name: self.name,
            r#type: self.r#type,
            flags: self.flags,
            required_resource_state: self.required_resource_state,
            structure_offset: self.structure_offset,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_META_COMMAND_PARAMETER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.name == other.name
            && self.r#type == other.r#type
            && self.flags == other.flags
            && self.required_resource_state == other.required_resource_state
            && self.structure_offset == other.structure_offset
    }
}
impl ::std::cmp::Eq for D3D12_META_COMMAND_PARAMETER_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_META_COMMAND_PARAMETER_STAGE(pub i32);
impl ::std::convert::From<i32> for D3D12_META_COMMAND_PARAMETER_STAGE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_META_COMMAND_PARAMETER_STAGE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_META_COMMAND_PARAMETER_STAGE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_META_COMMAND_PARAMETER_STAGE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_META_COMMAND_PARAMETER_STAGE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_META_COMMAND_PARAMETER_STAGE {}
impl ::std::marker::Copy for D3D12_META_COMMAND_PARAMETER_STAGE {}
impl D3D12_META_COMMAND_PARAMETER_STAGE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_META_COMMAND_PARAMETER_STAGE_CREATION: Self = Self(0i32);
    pub const D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION: Self = Self(1i32);
    pub const D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_META_COMMAND_PARAMETER_STAGE {
    type Abi = Self;
}
pub const D3D12_MINOR_VERSION: u32 = 0u32;
pub const D3D12_MIN_BORDER_COLOR_COMPONENT: f32 = 0f32;
pub const D3D12_MIN_DEPTH: f32 = 0f32;
pub const D3D12_MIN_FILTER_SHIFT: u32 = 4u32;
pub const D3D12_MIN_MAXANISOTROPY: u32 = 0u32;
pub const D3D12_MIP_FILTER_SHIFT: u32 = 0u32;
pub const D3D12_MIP_LOD_BIAS_MAX: f32 = 15.99f32;
pub const D3D12_MIP_LOD_BIAS_MIN: f32 = -16f32;
pub const D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT: u32 = 8u32;
pub const D3D12_MIP_LOD_RANGE_BIT_COUNT: u32 = 8u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_MIP_REGION {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_MIP_REGION_abi(u32, u32, u32);
impl D3D12_MIP_REGION {}
unsafe impl ::windows::Abi for D3D12_MIP_REGION {
    type Abi = D3D12_MIP_REGION_abi;
}
impl ::std::default::Default for D3D12_MIP_REGION {
    fn default() -> Self {
        Self {
            width: 0,
            height: 0,
            depth: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_MIP_REGION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_MIP_REGION")
            .field("width", &format_args!("{:?}", self.width))
            .field("height", &format_args!("{:?}", self.height))
            .field("depth", &format_args!("{:?}", self.depth))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_MIP_REGION {
    fn clone(&self) -> Self {
        Self {
            width: self.width,
            height: self.height,
            depth: self.depth,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_MIP_REGION {
    fn eq(&self, other: &Self) -> bool {
        self.width == other.width && self.height == other.height && self.depth == other.depth
    }
}
impl ::std::cmp::Eq for D3D12_MIP_REGION {}
impl ::std::marker::Copy for D3D12_MIP_REGION {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_MULTIPLE_FENCE_WAIT_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_MULTIPLE_FENCE_WAIT_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_MULTIPLE_FENCE_WAIT_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_MULTIPLE_FENCE_WAIT_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_MULTIPLE_FENCE_WAIT_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_MULTIPLE_FENCE_WAIT_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_MULTIPLE_FENCE_WAIT_FLAGS {}
impl ::std::marker::Copy for D3D12_MULTIPLE_FENCE_WAIT_FLAGS {}
impl D3D12_MULTIPLE_FENCE_WAIT_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY: Self = Self(1i32);
    pub const D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL: Self = Self(0i32);
}
unsafe impl ::windows::Abi for D3D12_MULTIPLE_FENCE_WAIT_FLAGS {
    type Abi = Self;
}
pub const D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH: f32 = 1.4f32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_NODE_MASK {
    pub node_mask: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_NODE_MASK_abi(u32);
impl D3D12_NODE_MASK {}
unsafe impl ::windows::Abi for D3D12_NODE_MASK {
    type Abi = D3D12_NODE_MASK_abi;
}
impl ::std::default::Default for D3D12_NODE_MASK {
    fn default() -> Self {
        Self { node_mask: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_NODE_MASK {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_NODE_MASK")
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_NODE_MASK {
    fn clone(&self) -> Self {
        Self {
            node_mask: self.node_mask,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_NODE_MASK {
    fn eq(&self, other: &Self) -> bool {
        self.node_mask == other.node_mask
    }
}
impl ::std::cmp::Eq for D3D12_NODE_MASK {}
impl ::std::marker::Copy for D3D12_NODE_MASK {}
pub const D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT: u32 = 0u32;
pub const D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END: u32 = 4294967295u32;
pub const D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START: u32 = 4294967288u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_PACKED_MIP_INFO {
    pub num_standard_mips: u8,
    pub num_packed_mips: u8,
    pub num_tiles_for_packed_mips: u32,
    pub start_tile_index_in_overall_resource: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_PACKED_MIP_INFO_abi(u8, u8, u32, u32);
impl D3D12_PACKED_MIP_INFO {}
unsafe impl ::windows::Abi for D3D12_PACKED_MIP_INFO {
    type Abi = D3D12_PACKED_MIP_INFO_abi;
}
impl ::std::default::Default for D3D12_PACKED_MIP_INFO {
    fn default() -> Self {
        Self {
            num_standard_mips: 0,
            num_packed_mips: 0,
            num_tiles_for_packed_mips: 0,
            start_tile_index_in_overall_resource: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_PACKED_MIP_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_PACKED_MIP_INFO")
            .field(
                "num_standard_mips",
                &format_args!("{:?}", self.num_standard_mips),
            )
            .field(
                "num_packed_mips",
                &format_args!("{:?}", self.num_packed_mips),
            )
            .field(
                "num_tiles_for_packed_mips",
                &format_args!("{:?}", self.num_tiles_for_packed_mips),
            )
            .field(
                "start_tile_index_in_overall_resource",
                &format_args!("{:?}", self.start_tile_index_in_overall_resource),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_PACKED_MIP_INFO {
    fn clone(&self) -> Self {
        Self {
            num_standard_mips: self.num_standard_mips,
            num_packed_mips: self.num_packed_mips,
            num_tiles_for_packed_mips: self.num_tiles_for_packed_mips,
            start_tile_index_in_overall_resource: self.start_tile_index_in_overall_resource,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_PACKED_MIP_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.num_standard_mips == other.num_standard_mips
            && self.num_packed_mips == other.num_packed_mips
            && self.num_tiles_for_packed_mips == other.num_tiles_for_packed_mips
            && self.start_tile_index_in_overall_resource
                == other.start_tile_index_in_overall_resource
    }
}
impl ::std::cmp::Eq for D3D12_PACKED_MIP_INFO {}
impl ::std::marker::Copy for D3D12_PACKED_MIP_INFO {}
pub const D3D12_PACKED_TILE: u32 = 4294967295u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_PARAMETER_DESC {
    pub name: *mut i8,
    pub semantic_name: *mut i8,
    pub r#type: super::direct3d11::D3D_SHADER_VARIABLE_TYPE,
    pub class: super::direct3d11::D3D_SHADER_VARIABLE_CLASS,
    pub rows: u32,
    pub columns: u32,
    pub interpolation_mode: super::direct3d11::D3D_INTERPOLATION_MODE,
    pub flags: super::direct3d11::D3D_PARAMETER_FLAGS,
    pub first_in_register: u32,
    pub first_in_component: u32,
    pub first_out_register: u32,
    pub first_out_component: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_PARAMETER_DESC_abi(
    *mut i8,
    *mut i8,
    super::direct3d11::D3D_SHADER_VARIABLE_TYPE,
    super::direct3d11::D3D_SHADER_VARIABLE_CLASS,
    u32,
    u32,
    super::direct3d11::D3D_INTERPOLATION_MODE,
    super::direct3d11::D3D_PARAMETER_FLAGS,
    u32,
    u32,
    u32,
    u32,
);
impl D3D12_PARAMETER_DESC {}
unsafe impl ::windows::Abi for D3D12_PARAMETER_DESC {
    type Abi = D3D12_PARAMETER_DESC_abi;
}
impl ::std::default::Default for D3D12_PARAMETER_DESC {
    fn default() -> Self {
        Self {
            name: ::std::ptr::null_mut(),
            semantic_name: ::std::ptr::null_mut(),
            r#type: ::std::default::Default::default(),
            class: ::std::default::Default::default(),
            rows: 0,
            columns: 0,
            interpolation_mode: ::std::default::Default::default(),
            flags: ::std::default::Default::default(),
            first_in_register: 0,
            first_in_component: 0,
            first_out_register: 0,
            first_out_component: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_PARAMETER_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_PARAMETER_DESC")
            .field("name", &format_args!("{:?}", self.name))
            .field("semantic_name", &format_args!("{:?}", self.semantic_name))
            .field("type", &format_args!("{:?}", self.r#type))
            .field("class", &format_args!("{:?}", self.class))
            .field("rows", &format_args!("{:?}", self.rows))
            .field("columns", &format_args!("{:?}", self.columns))
            .field(
                "interpolation_mode",
                &format_args!("{:?}", self.interpolation_mode),
            )
            .field("flags", &format_args!("{:?}", self.flags))
            .field(
                "first_in_register",
                &format_args!("{:?}", self.first_in_register),
            )
            .field(
                "first_in_component",
                &format_args!("{:?}", self.first_in_component),
            )
            .field(
                "first_out_register",
                &format_args!("{:?}", self.first_out_register),
            )
            .field(
                "first_out_component",
                &format_args!("{:?}", self.first_out_component),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_PARAMETER_DESC {
    fn clone(&self) -> Self {
        Self {
            name: self.name,
            semantic_name: self.semantic_name,
            r#type: self.r#type,
            class: self.class,
            rows: self.rows,
            columns: self.columns,
            interpolation_mode: self.interpolation_mode,
            flags: self.flags,
            first_in_register: self.first_in_register,
            first_in_component: self.first_in_component,
            first_out_register: self.first_out_register,
            first_out_component: self.first_out_component,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_PARAMETER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.name == other.name
            && self.semantic_name == other.semantic_name
            && self.r#type == other.r#type
            && self.class == other.class
            && self.rows == other.rows
            && self.columns == other.columns
            && self.interpolation_mode == other.interpolation_mode
            && self.flags == other.flags
            && self.first_in_register == other.first_in_register
            && self.first_in_component == other.first_in_component
            && self.first_out_register == other.first_out_register
            && self.first_out_component == other.first_out_component
    }
}
impl ::std::cmp::Eq for D3D12_PARAMETER_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_PIPELINE_STATE_STREAM_DESC {
    pub size_in_bytes: usize,
    pub p_pipeline_state_subobject_stream: *mut ::std::ffi::c_void,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_PIPELINE_STATE_STREAM_DESC_abi(usize, *mut ::std::ffi::c_void);
impl D3D12_PIPELINE_STATE_STREAM_DESC {}
unsafe impl ::windows::Abi for D3D12_PIPELINE_STATE_STREAM_DESC {
    type Abi = D3D12_PIPELINE_STATE_STREAM_DESC_abi;
}
impl ::std::default::Default for D3D12_PIPELINE_STATE_STREAM_DESC {
    fn default() -> Self {
        Self {
            size_in_bytes: 0,
            p_pipeline_state_subobject_stream: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_PIPELINE_STATE_STREAM_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_PIPELINE_STATE_STREAM_DESC")
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .field(
                "p_pipeline_state_subobject_stream",
                &format_args!("{:?}", self.p_pipeline_state_subobject_stream),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_PIPELINE_STATE_STREAM_DESC {
    fn clone(&self) -> Self {
        Self {
            size_in_bytes: self.size_in_bytes,
            p_pipeline_state_subobject_stream:
                <*mut ::std::ffi::c_void as std::clone::Clone>::clone(
                    &self.p_pipeline_state_subobject_stream,
                ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_PIPELINE_STATE_STREAM_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.size_in_bytes == other.size_in_bytes
            && self.p_pipeline_state_subobject_stream == other.p_pipeline_state_subobject_stream
    }
}
impl ::std::cmp::Eq for D3D12_PIPELINE_STATE_STREAM_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_PIPELINE_STATE_SUBOBJECT_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {}
impl ::std::marker::Copy for D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {}
impl D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE: Self = Self(0i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS: Self = Self(1i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS: Self = Self(2i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS: Self = Self(3i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS: Self = Self(4i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS: Self = Self(5i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS: Self = Self(6i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT: Self = Self(7i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND: Self = Self(8i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK: Self = Self(9i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER: Self = Self(10i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL: Self = Self(11i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT: Self = Self(12i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE: Self = Self(13i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY: Self = Self(14i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS: Self = Self(15i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT: Self = Self(16i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC: Self = Self(17i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK: Self = Self(18i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO: Self = Self(19i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS: Self = Self(20i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1: Self = Self(21i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING: Self = Self(22i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS: Self = Self(24i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS: Self = Self(25i32);
    pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID: Self = Self(26i32);
}
unsafe impl ::windows::Abi for D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {
    type Abi = Self;
}
pub const D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT: u32 = 15u32;
pub const D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT: u32 = 16u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_PROTECTED_RESOURCE_SESSION_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {}
impl ::std::marker::Copy for D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {}
impl D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE: Self = Self(0i32);
}
unsafe impl ::windows::Abi for D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_PROTECTED_RESOURCE_SESSION_DESC {
    pub node_mask: u32,
    pub flags: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_PROTECTED_RESOURCE_SESSION_DESC_abi(u32, D3D12_PROTECTED_RESOURCE_SESSION_FLAGS);
impl D3D12_PROTECTED_RESOURCE_SESSION_DESC {}
unsafe impl ::windows::Abi for D3D12_PROTECTED_RESOURCE_SESSION_DESC {
    type Abi = D3D12_PROTECTED_RESOURCE_SESSION_DESC_abi;
}
impl ::std::default::Default for D3D12_PROTECTED_RESOURCE_SESSION_DESC {
    fn default() -> Self {
        Self {
            node_mask: 0,
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_PROTECTED_RESOURCE_SESSION_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_PROTECTED_RESOURCE_SESSION_DESC")
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_PROTECTED_RESOURCE_SESSION_DESC {
    fn clone(&self) -> Self {
        Self {
            node_mask: self.node_mask,
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_PROTECTED_RESOURCE_SESSION_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.node_mask == other.node_mask && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_PROTECTED_RESOURCE_SESSION_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {
    pub node_mask: u32,
    pub flags: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS,
    pub protection_type: ::windows::Guid,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_PROTECTED_RESOURCE_SESSION_DESC1_abi(
    u32,
    D3D12_PROTECTED_RESOURCE_SESSION_FLAGS,
    ::windows::Guid,
);
impl D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {}
unsafe impl ::windows::Abi for D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {
    type Abi = D3D12_PROTECTED_RESOURCE_SESSION_DESC1_abi;
}
impl ::std::default::Default for D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {
    fn default() -> Self {
        Self {
            node_mask: 0,
            flags: ::std::default::Default::default(),
            protection_type: ::windows::Guid::zeroed(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_PROTECTED_RESOURCE_SESSION_DESC1")
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .field("flags", &format_args!("{:?}", self.flags))
            .field(
                "protection_type",
                &format_args!("{:?}", self.protection_type),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {
    fn clone(&self) -> Self {
        Self {
            node_mask: self.node_mask,
            flags: self.flags,
            protection_type: <::windows::Guid as std::clone::Clone>::clone(&self.protection_type),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {
    fn eq(&self, other: &Self) -> bool {
        self.node_mask == other.node_mask
            && self.flags == other.flags
            && self.protection_type == other.protection_type
    }
}
impl ::std::cmp::Eq for D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_PROTECTED_SESSION_STATUS(pub i32);
impl ::std::convert::From<i32> for D3D12_PROTECTED_SESSION_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_PROTECTED_SESSION_STATUS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_PROTECTED_SESSION_STATUS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_PROTECTED_SESSION_STATUS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_PROTECTED_SESSION_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_PROTECTED_SESSION_STATUS {}
impl ::std::marker::Copy for D3D12_PROTECTED_SESSION_STATUS {}
impl D3D12_PROTECTED_SESSION_STATUS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_PROTECTED_SESSION_STATUS_OK: Self = Self(0i32);
    pub const D3D12_PROTECTED_SESSION_STATUS_INVALID: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_PROTECTED_SESSION_STATUS {
    type Abi = Self;
}
pub const D3D12_PS_CS_UAV_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_PS_CS_UAV_REGISTER_COUNT: u32 = 8u32;
pub const D3D12_PS_CS_UAV_REGISTER_READS_PER_INST: u32 = 1u32;
pub const D3D12_PS_CS_UAV_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_PS_FRONTFACING_DEFAULT_VALUE: u32 = 4294967295u32;
pub const D3D12_PS_FRONTFACING_FALSE_VALUE: u32 = 0u32;
pub const D3D12_PS_FRONTFACING_TRUE_VALUE: u32 = 4294967295u32;
pub const D3D12_PS_INPUT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_PS_INPUT_REGISTER_COUNT: u32 = 32u32;
pub const D3D12_PS_INPUT_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_PS_INPUT_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT: f32 = 0f32;
pub const D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS: u32 = 1u32;
pub const D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_PS_OUTPUT_MASK_REGISTER_COUNT: u32 = 1u32;
pub const D3D12_PS_OUTPUT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_PS_OUTPUT_REGISTER_COUNT: u32 = 8u32;
pub const D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT: f32 = 0.5f32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_QUERY_DATA_PIPELINE_STATISTICS {
    pub ia_vertices: u64,
    pub ia_primitives: u64,
    pub vs_invocations: u64,
    pub gs_invocations: u64,
    pub gs_primitives: u64,
    pub cinvocations: u64,
    pub cprimitives: u64,
    pub ps_invocations: u64,
    pub hs_invocations: u64,
    pub ds_invocations: u64,
    pub cs_invocations: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_QUERY_DATA_PIPELINE_STATISTICS_abi(
    u64,
    u64,
    u64,
    u64,
    u64,
    u64,
    u64,
    u64,
    u64,
    u64,
    u64,
);
impl D3D12_QUERY_DATA_PIPELINE_STATISTICS {}
unsafe impl ::windows::Abi for D3D12_QUERY_DATA_PIPELINE_STATISTICS {
    type Abi = D3D12_QUERY_DATA_PIPELINE_STATISTICS_abi;
}
impl ::std::default::Default for D3D12_QUERY_DATA_PIPELINE_STATISTICS {
    fn default() -> Self {
        Self {
            ia_vertices: 0,
            ia_primitives: 0,
            vs_invocations: 0,
            gs_invocations: 0,
            gs_primitives: 0,
            cinvocations: 0,
            cprimitives: 0,
            ps_invocations: 0,
            hs_invocations: 0,
            ds_invocations: 0,
            cs_invocations: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_QUERY_DATA_PIPELINE_STATISTICS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_QUERY_DATA_PIPELINE_STATISTICS")
            .field("ia_vertices", &format_args!("{:?}", self.ia_vertices))
            .field("ia_primitives", &format_args!("{:?}", self.ia_primitives))
            .field("vs_invocations", &format_args!("{:?}", self.vs_invocations))
            .field("gs_invocations", &format_args!("{:?}", self.gs_invocations))
            .field("gs_primitives", &format_args!("{:?}", self.gs_primitives))
            .field("cinvocations", &format_args!("{:?}", self.cinvocations))
            .field("cprimitives", &format_args!("{:?}", self.cprimitives))
            .field("ps_invocations", &format_args!("{:?}", self.ps_invocations))
            .field("hs_invocations", &format_args!("{:?}", self.hs_invocations))
            .field("ds_invocations", &format_args!("{:?}", self.ds_invocations))
            .field("cs_invocations", &format_args!("{:?}", self.cs_invocations))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_QUERY_DATA_PIPELINE_STATISTICS {
    fn clone(&self) -> Self {
        Self {
            ia_vertices: self.ia_vertices,
            ia_primitives: self.ia_primitives,
            vs_invocations: self.vs_invocations,
            gs_invocations: self.gs_invocations,
            gs_primitives: self.gs_primitives,
            cinvocations: self.cinvocations,
            cprimitives: self.cprimitives,
            ps_invocations: self.ps_invocations,
            hs_invocations: self.hs_invocations,
            ds_invocations: self.ds_invocations,
            cs_invocations: self.cs_invocations,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_QUERY_DATA_PIPELINE_STATISTICS {
    fn eq(&self, other: &Self) -> bool {
        self.ia_vertices == other.ia_vertices
            && self.ia_primitives == other.ia_primitives
            && self.vs_invocations == other.vs_invocations
            && self.gs_invocations == other.gs_invocations
            && self.gs_primitives == other.gs_primitives
            && self.cinvocations == other.cinvocations
            && self.cprimitives == other.cprimitives
            && self.ps_invocations == other.ps_invocations
            && self.hs_invocations == other.hs_invocations
            && self.ds_invocations == other.ds_invocations
            && self.cs_invocations == other.cs_invocations
    }
}
impl ::std::cmp::Eq for D3D12_QUERY_DATA_PIPELINE_STATISTICS {}
impl ::std::marker::Copy for D3D12_QUERY_DATA_PIPELINE_STATISTICS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_QUERY_DATA_SO_STATISTICS {
    pub num_primitives_written: u64,
    pub primitives_storage_needed: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_QUERY_DATA_SO_STATISTICS_abi(u64, u64);
impl D3D12_QUERY_DATA_SO_STATISTICS {}
unsafe impl ::windows::Abi for D3D12_QUERY_DATA_SO_STATISTICS {
    type Abi = D3D12_QUERY_DATA_SO_STATISTICS_abi;
}
impl ::std::default::Default for D3D12_QUERY_DATA_SO_STATISTICS {
    fn default() -> Self {
        Self {
            num_primitives_written: 0,
            primitives_storage_needed: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_QUERY_DATA_SO_STATISTICS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_QUERY_DATA_SO_STATISTICS")
            .field(
                "num_primitives_written",
                &format_args!("{:?}", self.num_primitives_written),
            )
            .field(
                "primitives_storage_needed",
                &format_args!("{:?}", self.primitives_storage_needed),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_QUERY_DATA_SO_STATISTICS {
    fn clone(&self) -> Self {
        Self {
            num_primitives_written: self.num_primitives_written,
            primitives_storage_needed: self.primitives_storage_needed,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_QUERY_DATA_SO_STATISTICS {
    fn eq(&self, other: &Self) -> bool {
        self.num_primitives_written == other.num_primitives_written
            && self.primitives_storage_needed == other.primitives_storage_needed
    }
}
impl ::std::cmp::Eq for D3D12_QUERY_DATA_SO_STATISTICS {}
impl ::std::marker::Copy for D3D12_QUERY_DATA_SO_STATISTICS {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_QUERY_HEAP_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_QUERY_HEAP_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_QUERY_HEAP_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_QUERY_HEAP_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_QUERY_HEAP_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_QUERY_HEAP_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_QUERY_HEAP_TYPE {}
impl ::std::marker::Copy for D3D12_QUERY_HEAP_TYPE {}
impl D3D12_QUERY_HEAP_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_QUERY_HEAP_TYPE_OCCLUSION: Self = Self(0i32);
    pub const D3D12_QUERY_HEAP_TYPE_TIMESTAMP: Self = Self(1i32);
    pub const D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS: Self = Self(2i32);
    pub const D3D12_QUERY_HEAP_TYPE_SO_STATISTICS: Self = Self(3i32);
    pub const D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS: Self = Self(4i32);
    pub const D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP: Self = Self(5i32);
}
unsafe impl ::windows::Abi for D3D12_QUERY_HEAP_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_QUERY_HEAP_DESC {
    pub r#type: D3D12_QUERY_HEAP_TYPE,
    pub count: u32,
    pub node_mask: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_QUERY_HEAP_DESC_abi(D3D12_QUERY_HEAP_TYPE, u32, u32);
impl D3D12_QUERY_HEAP_DESC {}
unsafe impl ::windows::Abi for D3D12_QUERY_HEAP_DESC {
    type Abi = D3D12_QUERY_HEAP_DESC_abi;
}
impl ::std::default::Default for D3D12_QUERY_HEAP_DESC {
    fn default() -> Self {
        Self {
            r#type: ::std::default::Default::default(),
            count: 0,
            node_mask: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_QUERY_HEAP_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_QUERY_HEAP_DESC")
            .field("type", &format_args!("{:?}", self.r#type))
            .field("count", &format_args!("{:?}", self.count))
            .field("node_mask", &format_args!("{:?}", self.node_mask))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_QUERY_HEAP_DESC {
    fn clone(&self) -> Self {
        Self {
            r#type: self.r#type,
            count: self.count,
            node_mask: self.node_mask,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_QUERY_HEAP_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.r#type == other.r#type
            && self.count == other.count
            && self.node_mask == other.node_mask
    }
}
impl ::std::cmp::Eq for D3D12_QUERY_HEAP_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RANGE_UINT64 {
    pub begin: u64,
    pub end: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RANGE_UINT64_abi(u64, u64);
impl D3D12_RANGE_UINT64 {}
unsafe impl ::windows::Abi for D3D12_RANGE_UINT64 {
    type Abi = D3D12_RANGE_UINT64_abi;
}
impl ::std::default::Default for D3D12_RANGE_UINT64 {
    fn default() -> Self {
        Self { begin: 0, end: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_RANGE_UINT64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RANGE_UINT64")
            .field("begin", &format_args!("{:?}", self.begin))
            .field("end", &format_args!("{:?}", self.end))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RANGE_UINT64 {
    fn clone(&self) -> Self {
        Self {
            begin: self.begin,
            end: self.end,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RANGE_UINT64 {
    fn eq(&self, other: &Self) -> bool {
        self.begin == other.begin && self.end == other.end
    }
}
impl ::std::cmp::Eq for D3D12_RANGE_UINT64 {}
impl ::std::marker::Copy for D3D12_RANGE_UINT64 {}
pub const D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT: u32 = 16u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_AABB {
    pub minx: f32,
    pub miny: f32,
    pub minz: f32,
    pub maxx: f32,
    pub maxy: f32,
    pub maxz: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_AABB_abi(f32, f32, f32, f32, f32, f32);
impl D3D12_RAYTRACING_AABB {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_AABB {
    type Abi = D3D12_RAYTRACING_AABB_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_AABB {
    fn default() -> Self {
        Self {
            minx: 0.0,
            miny: 0.0,
            minz: 0.0,
            maxx: 0.0,
            maxy: 0.0,
            maxz: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_AABB {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_AABB")
            .field("minx", &format_args!("{:?}", self.minx))
            .field("miny", &format_args!("{:?}", self.miny))
            .field("minz", &format_args!("{:?}", self.minz))
            .field("maxx", &format_args!("{:?}", self.maxx))
            .field("maxy", &format_args!("{:?}", self.maxy))
            .field("maxz", &format_args!("{:?}", self.maxz))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_AABB {
    fn clone(&self) -> Self {
        Self {
            minx: self.minx,
            miny: self.miny,
            minz: self.minz,
            maxx: self.maxx,
            maxy: self.maxy,
            maxz: self.maxz,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_AABB {
    fn eq(&self, other: &Self) -> bool {
        self.minx == other.minx
            && self.miny == other.miny
            && self.minz == other.minz
            && self.maxx == other.maxx
            && self.maxy == other.maxy
            && self.maxz == other.maxz
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_AABB {}
impl ::std::marker::Copy for D3D12_RAYTRACING_AABB {}
pub const D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT: u32 = 8u32;
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT: u32 = 256u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE(pub i32);
impl ::std::convert::From<i32> for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {}
impl ::std::marker::Copy for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {}
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE: Self = Self(0i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT: Self = Self(1i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS:
        Self = Self(2i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE: Self = Self(3i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC {
    pub compacted_size_in_bytes: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC_abi(u64);
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC {}
unsafe impl ::windows::Abi
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
    type Abi = D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC_abi;
}
impl ::std::default::Default
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
    fn default() -> Self {
        Self {
            compacted_size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct(
            "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC",
        )
        .field(
            "compacted_size_in_bytes",
            &format_args!("{:?}", self.compacted_size_in_bytes),
        )
        .finish()
    }
}
impl ::std::clone::Clone
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
    fn clone(&self) -> Self {
        Self {
            compacted_size_in_bytes: self.compacted_size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
    fn eq(&self, other: &Self) -> bool {
        self.compacted_size_in_bytes == other.compacted_size_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC {}
impl ::std::marker::Copy
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC {
    pub current_size_in_bytes: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC_abi(u64);
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC {}
unsafe impl ::windows::Abi
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
    type Abi = D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC_abi;
}
impl ::std::default::Default
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
    fn default() -> Self {
        Self {
            current_size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC")
            .field(
                "current_size_in_bytes",
                &format_args!("{:?}", self.current_size_in_bytes),
            )
            .finish()
    }
}
impl ::std::clone::Clone
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
    fn clone(&self) -> Self {
        Self {
            current_size_in_bytes: self.current_size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
    fn eq(&self, other: &Self) -> bool {
        self.current_size_in_bytes == other.current_size_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC {}
impl ::std::marker::Copy
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {}
impl ::std::marker::Copy for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {}
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE: Self =
        Self(0i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION: Self =
        Self(1i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION: Self =
        Self(2i32);
    pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE: Self =
        Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {
    pub dest_buffer: u64,
    pub info_type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC_abi(
    u64,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE,
);
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {
    type Abi = D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {
    fn default() -> Self {
        Self {
            dest_buffer: 0,
            info_type: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC")
            .field("dest_buffer", &format_args!("{:?}", self.dest_buffer))
            .field("info_type", &format_args!("{:?}", self.info_type))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {
    fn clone(&self) -> Self {
        Self {
            dest_buffer: self.dest_buffer,
            info_type: self.info_type,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.dest_buffer == other.dest_buffer && self.info_type == other.info_type
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC {
    pub serialized_size_in_bytes: u64,
    pub num_bottom_level_acceleration_structure_pointers: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC_abi(u64, u64);
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC {}
unsafe impl ::windows::Abi
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
    type Abi = D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC_abi;
}
impl ::std::default::Default
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
    fn default() -> Self {
        Self {
            serialized_size_in_bytes: 0,
            num_bottom_level_acceleration_structure_pointers: 0,
        }
    }
}
impl ::std::fmt::Debug
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct(
            "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC",
        )
        .field(
            "serialized_size_in_bytes",
            &format_args!("{:?}", self.serialized_size_in_bytes),
        )
        .field(
            "num_bottom_level_acceleration_structure_pointers",
            &format_args!(
                "{:?}",
                self.num_bottom_level_acceleration_structure_pointers
            ),
        )
        .finish()
    }
}
impl ::std::clone::Clone
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
    fn clone(&self) -> Self {
        Self {
            serialized_size_in_bytes: self.serialized_size_in_bytes,
            num_bottom_level_acceleration_structure_pointers: self
                .num_bottom_level_acceleration_structure_pointers,
        }
    }
}
impl ::std::cmp::PartialEq
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
    fn eq(&self, other: &Self) -> bool {
        self.serialized_size_in_bytes == other.serialized_size_in_bytes
            && self.num_bottom_level_acceleration_structure_pointers
                == other.num_bottom_level_acceleration_structure_pointers
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC {}
impl ::std::marker::Copy
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC {
    pub decoded_size_in_bytes: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC_abi(u64);
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC {}
unsafe impl ::windows::Abi
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
    type Abi = D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC_abi;
}
impl ::std::default::Default
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
    fn default() -> Self {
        Self {
            decoded_size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct(
            "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC",
        )
        .field(
            "decoded_size_in_bytes",
            &format_args!("{:?}", self.decoded_size_in_bytes),
        )
        .finish()
    }
}
impl ::std::clone::Clone
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
    fn clone(&self) -> Self {
        Self {
            decoded_size_in_bytes: self.decoded_size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
    fn eq(&self, other: &Self) -> bool {
        self.decoded_size_in_bytes == other.decoded_size_in_bytes
    }
}
impl ::std::cmp::Eq
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
}
impl ::std::marker::Copy
    for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {
    pub result_data_max_size_in_bytes: u64,
    pub scratch_data_size_in_bytes: u64,
    pub update_scratch_data_size_in_bytes: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_abi(u64, u64, u64);
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {
    type Abi = D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {
    fn default() -> Self {
        Self {
            result_data_max_size_in_bytes: 0,
            scratch_data_size_in_bytes: 0,
            update_scratch_data_size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO")
            .field(
                "result_data_max_size_in_bytes",
                &format_args!("{:?}", self.result_data_max_size_in_bytes),
            )
            .field(
                "scratch_data_size_in_bytes",
                &format_args!("{:?}", self.scratch_data_size_in_bytes),
            )
            .field(
                "update_scratch_data_size_in_bytes",
                &format_args!("{:?}", self.update_scratch_data_size_in_bytes),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {
    fn clone(&self) -> Self {
        Self {
            result_data_max_size_in_bytes: self.result_data_max_size_in_bytes,
            scratch_data_size_in_bytes: self.scratch_data_size_in_bytes,
            update_scratch_data_size_in_bytes: self.update_scratch_data_size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.result_data_max_size_in_bytes == other.result_data_max_size_in_bytes
            && self.scratch_data_size_in_bytes == other.scratch_data_size_in_bytes
            && self.update_scratch_data_size_in_bytes == other.update_scratch_data_size_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {}
impl ::std::marker::Copy for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {
    pub location: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV_abi(u64);
impl D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {
    type Abi = D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {
    fn default() -> Self {
        Self { location: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV")
            .field("location", &format_args!("{:?}", self.location))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {
    fn clone(&self) -> Self {
        Self {
            location: self.location,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.location == other.location
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {}
impl ::std::marker::Copy for D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_INSTANCE_DESC {
    pub transform: [f32; 12usize],
    pub _bitfield1: u32,
    pub _bitfield2: u32,
    pub acceleration_structure: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_INSTANCE_DESC_abi([f32; 12usize], u32, u32, u64);
impl D3D12_RAYTRACING_INSTANCE_DESC {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_INSTANCE_DESC {
    type Abi = D3D12_RAYTRACING_INSTANCE_DESC_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_INSTANCE_DESC {
    fn default() -> Self {
        Self {
            transform: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            _bitfield1: 0,
            _bitfield2: 0,
            acceleration_structure: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_INSTANCE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_INSTANCE_DESC")
            .field("transform", &format_args!("{:?}", self.transform))
            .field("_bitfield1", &format_args!("{:?}", self._bitfield1))
            .field("_bitfield2", &format_args!("{:?}", self._bitfield2))
            .field(
                "acceleration_structure",
                &format_args!("{:?}", self.acceleration_structure),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_INSTANCE_DESC {
    fn clone(&self) -> Self {
        Self {
            transform: <[f32; 12usize] as std::clone::Clone>::clone(&self.transform),
            _bitfield1: self._bitfield1,
            _bitfield2: self._bitfield2,
            acceleration_structure: self.acceleration_structure,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_INSTANCE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.transform == other.transform
            && self._bitfield1 == other._bitfield1
            && self._bitfield2 == other._bitfield2
            && self.acceleration_structure == other.acceleration_structure
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_INSTANCE_DESC {}
pub const D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT: u32 = 16u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAYTRACING_INSTANCE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RAYTRACING_INSTANCE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_INSTANCE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAYTRACING_INSTANCE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_INSTANCE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_INSTANCE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_INSTANCE_FLAGS {}
impl ::std::marker::Copy for D3D12_RAYTRACING_INSTANCE_FLAGS {}
impl D3D12_RAYTRACING_INSTANCE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAYTRACING_INSTANCE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE: Self = Self(1i32);
    pub const D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE: Self = Self(2i32);
    pub const D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE: Self = Self(4i32);
    pub const D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE: Self = Self(8i32);
}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_INSTANCE_FLAGS {
    type Abi = Self;
}
pub const D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES: u32 = 32u32;
pub const D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH: u32 = 31u32;
pub const D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE: u32 =
    16777216u32;
pub const D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE: u32 = 16777216u32;
pub const D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE: u32 =
    536870912u32;
pub const D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS: u32 = 1073741824u32;
pub const D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE: u32 = 4096u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_PIPELINE_CONFIG {
    pub max_trace_recursion_depth: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_PIPELINE_CONFIG_abi(u32);
impl D3D12_RAYTRACING_PIPELINE_CONFIG {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_PIPELINE_CONFIG {
    type Abi = D3D12_RAYTRACING_PIPELINE_CONFIG_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_PIPELINE_CONFIG {
    fn default() -> Self {
        Self {
            max_trace_recursion_depth: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_PIPELINE_CONFIG {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_PIPELINE_CONFIG")
            .field(
                "max_trace_recursion_depth",
                &format_args!("{:?}", self.max_trace_recursion_depth),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_PIPELINE_CONFIG {
    fn clone(&self) -> Self {
        Self {
            max_trace_recursion_depth: self.max_trace_recursion_depth,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_PIPELINE_CONFIG {
    fn eq(&self, other: &Self) -> bool {
        self.max_trace_recursion_depth == other.max_trace_recursion_depth
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_PIPELINE_CONFIG {}
impl ::std::marker::Copy for D3D12_RAYTRACING_PIPELINE_CONFIG {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAYTRACING_PIPELINE_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RAYTRACING_PIPELINE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_PIPELINE_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAYTRACING_PIPELINE_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_PIPELINE_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_PIPELINE_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_PIPELINE_FLAGS {}
impl ::std::marker::Copy for D3D12_RAYTRACING_PIPELINE_FLAGS {}
impl D3D12_RAYTRACING_PIPELINE_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAYTRACING_PIPELINE_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES: Self = Self(256i32);
    pub const D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES: Self = Self(512i32);
}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_PIPELINE_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_PIPELINE_CONFIG1 {
    pub max_trace_recursion_depth: u32,
    pub flags: D3D12_RAYTRACING_PIPELINE_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_PIPELINE_CONFIG1_abi(u32, D3D12_RAYTRACING_PIPELINE_FLAGS);
impl D3D12_RAYTRACING_PIPELINE_CONFIG1 {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_PIPELINE_CONFIG1 {
    type Abi = D3D12_RAYTRACING_PIPELINE_CONFIG1_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_PIPELINE_CONFIG1 {
    fn default() -> Self {
        Self {
            max_trace_recursion_depth: 0,
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_PIPELINE_CONFIG1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_PIPELINE_CONFIG1")
            .field(
                "max_trace_recursion_depth",
                &format_args!("{:?}", self.max_trace_recursion_depth),
            )
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_PIPELINE_CONFIG1 {
    fn clone(&self) -> Self {
        Self {
            max_trace_recursion_depth: self.max_trace_recursion_depth,
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_PIPELINE_CONFIG1 {
    fn eq(&self, other: &Self) -> bool {
        self.max_trace_recursion_depth == other.max_trace_recursion_depth
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_PIPELINE_CONFIG1 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RAYTRACING_SHADER_CONFIG {
    pub max_payload_size_in_bytes: u32,
    pub max_attribute_size_in_bytes: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RAYTRACING_SHADER_CONFIG_abi(u32, u32);
impl D3D12_RAYTRACING_SHADER_CONFIG {}
unsafe impl ::windows::Abi for D3D12_RAYTRACING_SHADER_CONFIG {
    type Abi = D3D12_RAYTRACING_SHADER_CONFIG_abi;
}
impl ::std::default::Default for D3D12_RAYTRACING_SHADER_CONFIG {
    fn default() -> Self {
        Self {
            max_payload_size_in_bytes: 0,
            max_attribute_size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_RAYTRACING_SHADER_CONFIG {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RAYTRACING_SHADER_CONFIG")
            .field(
                "max_payload_size_in_bytes",
                &format_args!("{:?}", self.max_payload_size_in_bytes),
            )
            .field(
                "max_attribute_size_in_bytes",
                &format_args!("{:?}", self.max_attribute_size_in_bytes),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RAYTRACING_SHADER_CONFIG {
    fn clone(&self) -> Self {
        Self {
            max_payload_size_in_bytes: self.max_payload_size_in_bytes,
            max_attribute_size_in_bytes: self.max_attribute_size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RAYTRACING_SHADER_CONFIG {
    fn eq(&self, other: &Self) -> bool {
        self.max_payload_size_in_bytes == other.max_payload_size_in_bytes
            && self.max_attribute_size_in_bytes == other.max_attribute_size_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_RAYTRACING_SHADER_CONFIG {}
impl ::std::marker::Copy for D3D12_RAYTRACING_SHADER_CONFIG {}
pub const D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT: u32 = 32u32;
pub const D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT: u32 = 64u32;
pub const D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT: u32 = 16u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RAY_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RAY_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RAY_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RAY_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RAY_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RAY_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RAY_FLAGS {}
impl ::std::marker::Copy for D3D12_RAY_FLAGS {}
impl D3D12_RAY_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RAY_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_RAY_FLAG_FORCE_OPAQUE: Self = Self(1i32);
    pub const D3D12_RAY_FLAG_FORCE_NON_OPAQUE: Self = Self(2i32);
    pub const D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH: Self = Self(4i32);
    pub const D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER: Self = Self(8i32);
    pub const D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES: Self = Self(16i32);
    pub const D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES: Self = Self(32i32);
    pub const D3D12_RAY_FLAG_CULL_OPAQUE: Self = Self(64i32);
    pub const D3D12_RAY_FLAG_CULL_NON_OPAQUE: Self = Self(128i32);
    pub const D3D12_RAY_FLAG_SKIP_TRIANGLES: Self = Self(256i32);
    pub const D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES: Self = Self(512i32);
}
unsafe impl ::windows::Abi for D3D12_RAY_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {}
impl ::std::marker::Copy for D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {}
impl D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD: Self = Self(0i32);
    pub const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE: Self = Self(1i32);
    pub const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR: Self = Self(2i32);
    pub const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {
    pub clear_value: D3D12_CLEAR_VALUE,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS_abi(D3D12_CLEAR_VALUE_abi);
impl D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {}
unsafe impl ::windows::Abi for D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {
    type Abi = D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS_abi;
}
impl ::std::default::Default for D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {
    fn default() -> Self {
        Self {
            clear_value: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS")
            .field("clear_value", &format_args!("{:?}", self.clear_value))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {
    fn clone(&self) -> Self {
        Self {
            clear_value: <D3D12_CLEAR_VALUE as std::clone::Clone>::clone(&self.clear_value),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.clear_value == other.clear_value
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RENDER_PASS_BEGINNING_ACCESS {
    pub r#type: D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE,
    pub anonymous: D3D12_RENDER_PASS_BEGINNING_ACCESS_0,
}
impl D3D12_RENDER_PASS_BEGINNING_ACCESS {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_RENDER_PASS_BEGINNING_ACCESS_0 {
    pub clear: D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS,
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RENDER_PASS_ENDING_ACCESS_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {}
impl ::std::marker::Copy for D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {}
impl D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD: Self = Self(0i32);
    pub const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE: Self = Self(1i32);
    pub const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE: Self = Self(2i32);
    pub const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {
    pub src_subresource: u32,
    pub dst_subresource: u32,
    pub dstx: u32,
    pub dsty: u32,
    pub src_rect: super::display_devices::RECT,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS_abi(
    u32,
    u32,
    u32,
    u32,
    super::display_devices::RECT_abi,
);
impl D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {}
unsafe impl ::windows::Abi for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {
    type Abi = D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS_abi;
}
impl ::std::default::Default for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {
    fn default() -> Self {
        Self {
            src_subresource: 0,
            dst_subresource: 0,
            dstx: 0,
            dsty: 0,
            src_rect: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS")
            .field(
                "src_subresource",
                &format_args!("{:?}", self.src_subresource),
            )
            .field(
                "dst_subresource",
                &format_args!("{:?}", self.dst_subresource),
            )
            .field("dstx", &format_args!("{:?}", self.dstx))
            .field("dsty", &format_args!("{:?}", self.dsty))
            .field("src_rect", &format_args!("{:?}", self.src_rect))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {
    fn clone(&self) -> Self {
        Self {
            src_subresource: self.src_subresource,
            dst_subresource: self.dst_subresource,
            dstx: self.dstx,
            dsty: self.dsty,
            src_rect: <super::display_devices::RECT as std::clone::Clone>::clone(&self.src_rect),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.src_subresource == other.src_subresource
            && self.dst_subresource == other.dst_subresource
            && self.dstx == other.dstx
            && self.dsty == other.dsty
            && self.src_rect == other.src_rect
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESOLVE_MODE(pub i32);
impl ::std::convert::From<i32> for D3D12_RESOLVE_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESOLVE_MODE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESOLVE_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESOLVE_MODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOLVE_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESOLVE_MODE {}
impl ::std::marker::Copy for D3D12_RESOLVE_MODE {}
impl D3D12_RESOLVE_MODE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESOLVE_MODE_DECOMPRESS: Self = Self(0i32);
    pub const D3D12_RESOLVE_MODE_MIN: Self = Self(1i32);
    pub const D3D12_RESOLVE_MODE_MAX: Self = Self(2i32);
    pub const D3D12_RESOLVE_MODE_AVERAGE: Self = Self(3i32);
    pub const D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK: Self = Self(4i32);
    pub const D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK: Self = Self(5i32);
}
unsafe impl ::windows::Abi for D3D12_RESOLVE_MODE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {
    pub p_src_resource: ::std::option::Option<ID3D12Resource>,
    pub p_dst_resource: ::std::option::Option<ID3D12Resource>,
    pub subresource_count: u32,
    pub p_subresource_parameters:
        *mut D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS,
    pub format: super::dxgi::DXGI_FORMAT,
    pub resolve_mode: D3D12_RESOLVE_MODE,
    pub preserve_resolve_source: ::windows::BOOL,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS_abi(
    ::windows::RawPtr,
    ::windows::RawPtr,
    u32,
    *mut D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS_abi,
    super::dxgi::DXGI_FORMAT,
    D3D12_RESOLVE_MODE,
    ::windows::BOOL,
);
impl D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {}
unsafe impl ::windows::Abi for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {
    type Abi = D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS_abi;
}
impl ::std::default::Default for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {
    fn default() -> Self {
        Self {
            p_src_resource: ::std::default::Default::default(),
            p_dst_resource: ::std::default::Default::default(),
            subresource_count: 0,
            p_subresource_parameters: ::std::ptr::null_mut(),
            format: ::std::default::Default::default(),
            resolve_mode: ::std::default::Default::default(),
            preserve_resolve_source: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS")
            .field("p_src_resource", &format_args!("{:?}", self.p_src_resource))
            .field("p_dst_resource", &format_args!("{:?}", self.p_dst_resource))
            .field(
                "subresource_count",
                &format_args!("{:?}", self.subresource_count),
            )
            .field(
                "p_subresource_parameters",
                &format_args!("{:?}", self.p_subresource_parameters),
            )
            .field("format", &format_args!("{:?}", self.format))
            .field("resolve_mode", &format_args!("{:?}", self.resolve_mode))
            .field(
                "preserve_resolve_source",
                &format_args!("{:?}", self.preserve_resolve_source),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {
    fn clone(&self) -> Self {
        Self { p_src_resource : < :: std :: option :: Option < ID3D12Resource > as std :: clone :: Clone > :: clone (& self . p_src_resource) , p_dst_resource : < :: std :: option :: Option < ID3D12Resource > as std :: clone :: Clone > :: clone (& self . p_dst_resource) , subresource_count : self . subresource_count , p_subresource_parameters : < * mut D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS as std :: clone :: Clone > :: clone (& self . p_subresource_parameters) , format : self . format , resolve_mode : self . resolve_mode , preserve_resolve_source : < :: windows :: BOOL as std :: clone :: Clone > :: clone (& self . preserve_resolve_source) }
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.p_src_resource == other.p_src_resource
            && self.p_dst_resource == other.p_dst_resource
            && self.subresource_count == other.subresource_count
            && self.p_subresource_parameters == other.p_subresource_parameters
            && self.format == other.format
            && self.resolve_mode == other.resolve_mode
            && self.preserve_resolve_source == other.preserve_resolve_source
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RENDER_PASS_ENDING_ACCESS {
    pub r#type: D3D12_RENDER_PASS_ENDING_ACCESS_TYPE,
    pub anonymous: D3D12_RENDER_PASS_ENDING_ACCESS_0,
}
impl D3D12_RENDER_PASS_ENDING_ACCESS {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_RENDER_PASS_ENDING_ACCESS_0 {
    pub resolve: D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS,
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {
    pub cpu_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    pub depth_beginning_access: D3D12_RENDER_PASS_BEGINNING_ACCESS,
    pub stencil_beginning_access: D3D12_RENDER_PASS_BEGINNING_ACCESS,
    pub depth_ending_access: D3D12_RENDER_PASS_ENDING_ACCESS,
    pub stencil_ending_access: D3D12_RENDER_PASS_ENDING_ACCESS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC_abi(
    D3D12_CPU_DESCRIPTOR_HANDLE_abi,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_abi,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_abi,
    D3D12_RENDER_PASS_ENDING_ACCESS_abi,
    D3D12_RENDER_PASS_ENDING_ACCESS_abi,
);
impl D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {}
unsafe impl ::windows::Abi for D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {
    type Abi = D3D12_RENDER_PASS_DEPTH_STENCIL_DESC_abi;
}
impl ::std::default::Default for D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {
    fn default() -> Self {
        Self {
            cpu_descriptor: ::std::default::Default::default(),
            depth_beginning_access: ::std::default::Default::default(),
            stencil_beginning_access: ::std::default::Default::default(),
            depth_ending_access: ::std::default::Default::default(),
            stencil_ending_access: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RENDER_PASS_DEPTH_STENCIL_DESC")
            .field("cpu_descriptor", &format_args!("{:?}", self.cpu_descriptor))
            .field(
                "depth_beginning_access",
                &format_args!("{:?}", self.depth_beginning_access),
            )
            .field(
                "stencil_beginning_access",
                &format_args!("{:?}", self.stencil_beginning_access),
            )
            .field(
                "depth_ending_access",
                &format_args!("{:?}", self.depth_ending_access),
            )
            .field(
                "stencil_ending_access",
                &format_args!("{:?}", self.stencil_ending_access),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {
    fn clone(&self) -> Self {
        Self {
            cpu_descriptor: <D3D12_CPU_DESCRIPTOR_HANDLE as std::clone::Clone>::clone(
                &self.cpu_descriptor,
            ),
            depth_beginning_access:
                <D3D12_RENDER_PASS_BEGINNING_ACCESS as std::clone::Clone>::clone(
                    &self.depth_beginning_access,
                ),
            stencil_beginning_access:
                <D3D12_RENDER_PASS_BEGINNING_ACCESS as std::clone::Clone>::clone(
                    &self.stencil_beginning_access,
                ),
            depth_ending_access: <D3D12_RENDER_PASS_ENDING_ACCESS as std::clone::Clone>::clone(
                &self.depth_ending_access,
            ),
            stencil_ending_access: <D3D12_RENDER_PASS_ENDING_ACCESS as std::clone::Clone>::clone(
                &self.stencil_ending_access,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.cpu_descriptor == other.cpu_descriptor
            && self.depth_beginning_access == other.depth_beginning_access
            && self.stencil_beginning_access == other.stencil_beginning_access
            && self.depth_ending_access == other.depth_ending_access
            && self.stencil_ending_access == other.stencil_ending_access
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RENDER_PASS_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RENDER_PASS_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RENDER_PASS_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RENDER_PASS_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_PASS_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_PASS_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_PASS_FLAGS {}
impl ::std::marker::Copy for D3D12_RENDER_PASS_FLAGS {}
impl D3D12_RENDER_PASS_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RENDER_PASS_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES: Self = Self(1i32);
    pub const D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS: Self = Self(2i32);
    pub const D3D12_RENDER_PASS_FLAG_RESUMING_PASS: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_RENDER_PASS_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RENDER_PASS_RENDER_TARGET_DESC {
    pub cpu_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    pub beginning_access: D3D12_RENDER_PASS_BEGINNING_ACCESS,
    pub ending_access: D3D12_RENDER_PASS_ENDING_ACCESS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RENDER_PASS_RENDER_TARGET_DESC_abi(
    D3D12_CPU_DESCRIPTOR_HANDLE_abi,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_abi,
    D3D12_RENDER_PASS_ENDING_ACCESS_abi,
);
impl D3D12_RENDER_PASS_RENDER_TARGET_DESC {}
unsafe impl ::windows::Abi for D3D12_RENDER_PASS_RENDER_TARGET_DESC {
    type Abi = D3D12_RENDER_PASS_RENDER_TARGET_DESC_abi;
}
impl ::std::default::Default for D3D12_RENDER_PASS_RENDER_TARGET_DESC {
    fn default() -> Self {
        Self {
            cpu_descriptor: ::std::default::Default::default(),
            beginning_access: ::std::default::Default::default(),
            ending_access: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RENDER_PASS_RENDER_TARGET_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RENDER_PASS_RENDER_TARGET_DESC")
            .field("cpu_descriptor", &format_args!("{:?}", self.cpu_descriptor))
            .field(
                "beginning_access",
                &format_args!("{:?}", self.beginning_access),
            )
            .field("ending_access", &format_args!("{:?}", self.ending_access))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RENDER_PASS_RENDER_TARGET_DESC {
    fn clone(&self) -> Self {
        Self {
            cpu_descriptor: <D3D12_CPU_DESCRIPTOR_HANDLE as std::clone::Clone>::clone(
                &self.cpu_descriptor,
            ),
            beginning_access: <D3D12_RENDER_PASS_BEGINNING_ACCESS as std::clone::Clone>::clone(
                &self.beginning_access,
            ),
            ending_access: <D3D12_RENDER_PASS_ENDING_ACCESS as std::clone::Clone>::clone(
                &self.ending_access,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RENDER_PASS_RENDER_TARGET_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.cpu_descriptor == other.cpu_descriptor
            && self.beginning_access == other.beginning_access
            && self.ending_access == other.ending_access
    }
}
impl ::std::cmp::Eq for D3D12_RENDER_PASS_RENDER_TARGET_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RTV_DIMENSION(pub i32);
impl ::std::convert::From<i32> for D3D12_RTV_DIMENSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RTV_DIMENSION {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RTV_DIMENSION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RTV_DIMENSION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RTV_DIMENSION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RTV_DIMENSION {}
impl ::std::marker::Copy for D3D12_RTV_DIMENSION {}
impl D3D12_RTV_DIMENSION {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RTV_DIMENSION_UNKNOWN: Self = Self(0i32);
    pub const D3D12_RTV_DIMENSION_BUFFER: Self = Self(1i32);
    pub const D3D12_RTV_DIMENSION_TEXTURE1D: Self = Self(2i32);
    pub const D3D12_RTV_DIMENSION_TEXTURE1DARRAY: Self = Self(3i32);
    pub const D3D12_RTV_DIMENSION_TEXTURE2D: Self = Self(4i32);
    pub const D3D12_RTV_DIMENSION_TEXTURE2DARRAY: Self = Self(5i32);
    pub const D3D12_RTV_DIMENSION_TEXTURE2DMS: Self = Self(6i32);
    pub const D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY: Self = Self(7i32);
    pub const D3D12_RTV_DIMENSION_TEXTURE3D: Self = Self(8i32);
}
unsafe impl ::windows::Abi for D3D12_RTV_DIMENSION {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX1D_RTV {
    pub mip_slice: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX1D_RTV_abi(u32);
impl D3D12_TEX1D_RTV {}
unsafe impl ::windows::Abi for D3D12_TEX1D_RTV {
    type Abi = D3D12_TEX1D_RTV_abi;
}
impl ::std::default::Default for D3D12_TEX1D_RTV {
    fn default() -> Self {
        Self { mip_slice: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_TEX1D_RTV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX1D_RTV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX1D_RTV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX1D_RTV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
    }
}
impl ::std::cmp::Eq for D3D12_TEX1D_RTV {}
impl ::std::marker::Copy for D3D12_TEX1D_RTV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX1D_ARRAY_RTV {
    pub mip_slice: u32,
    pub first_array_slice: u32,
    pub array_size: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX1D_ARRAY_RTV_abi(u32, u32, u32);
impl D3D12_TEX1D_ARRAY_RTV {}
unsafe impl ::windows::Abi for D3D12_TEX1D_ARRAY_RTV {
    type Abi = D3D12_TEX1D_ARRAY_RTV_abi;
}
impl ::std::default::Default for D3D12_TEX1D_ARRAY_RTV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            first_array_slice: 0,
            array_size: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX1D_ARRAY_RTV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX1D_ARRAY_RTV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX1D_ARRAY_RTV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX1D_ARRAY_RTV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
            && self.first_array_slice == other.first_array_slice
            && self.array_size == other.array_size
    }
}
impl ::std::cmp::Eq for D3D12_TEX1D_ARRAY_RTV {}
impl ::std::marker::Copy for D3D12_TEX1D_ARRAY_RTV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2D_RTV {
    pub mip_slice: u32,
    pub plane_slice: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2D_RTV_abi(u32, u32);
impl D3D12_TEX2D_RTV {}
unsafe impl ::windows::Abi for D3D12_TEX2D_RTV {
    type Abi = D3D12_TEX2D_RTV_abi;
}
impl ::std::default::Default for D3D12_TEX2D_RTV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            plane_slice: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2D_RTV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2D_RTV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field("plane_slice", &format_args!("{:?}", self.plane_slice))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2D_RTV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            plane_slice: self.plane_slice,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2D_RTV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice && self.plane_slice == other.plane_slice
    }
}
impl ::std::cmp::Eq for D3D12_TEX2D_RTV {}
impl ::std::marker::Copy for D3D12_TEX2D_RTV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2D_ARRAY_RTV {
    pub mip_slice: u32,
    pub first_array_slice: u32,
    pub array_size: u32,
    pub plane_slice: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2D_ARRAY_RTV_abi(u32, u32, u32, u32);
impl D3D12_TEX2D_ARRAY_RTV {}
unsafe impl ::windows::Abi for D3D12_TEX2D_ARRAY_RTV {
    type Abi = D3D12_TEX2D_ARRAY_RTV_abi;
}
impl ::std::default::Default for D3D12_TEX2D_ARRAY_RTV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            first_array_slice: 0,
            array_size: 0,
            plane_slice: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2D_ARRAY_RTV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2D_ARRAY_RTV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .field("plane_slice", &format_args!("{:?}", self.plane_slice))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2D_ARRAY_RTV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
            plane_slice: self.plane_slice,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2D_ARRAY_RTV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
            && self.first_array_slice == other.first_array_slice
            && self.array_size == other.array_size
            && self.plane_slice == other.plane_slice
    }
}
impl ::std::cmp::Eq for D3D12_TEX2D_ARRAY_RTV {}
impl ::std::marker::Copy for D3D12_TEX2D_ARRAY_RTV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2DMS_RTV {
    pub unused_field_nothing_to_define: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2DMS_RTV_abi(u32);
impl D3D12_TEX2DMS_RTV {}
unsafe impl ::windows::Abi for D3D12_TEX2DMS_RTV {
    type Abi = D3D12_TEX2DMS_RTV_abi;
}
impl ::std::default::Default for D3D12_TEX2DMS_RTV {
    fn default() -> Self {
        Self {
            unused_field_nothing_to_define: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2DMS_RTV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2DMS_RTV")
            .field(
                "unused_field_nothing_to_define",
                &format_args!("{:?}", self.unused_field_nothing_to_define),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2DMS_RTV {
    fn clone(&self) -> Self {
        Self {
            unused_field_nothing_to_define: self.unused_field_nothing_to_define,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2DMS_RTV {
    fn eq(&self, other: &Self) -> bool {
        self.unused_field_nothing_to_define == other.unused_field_nothing_to_define
    }
}
impl ::std::cmp::Eq for D3D12_TEX2DMS_RTV {}
impl ::std::marker::Copy for D3D12_TEX2DMS_RTV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2DMS_ARRAY_RTV {
    pub first_array_slice: u32,
    pub array_size: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2DMS_ARRAY_RTV_abi(u32, u32);
impl D3D12_TEX2DMS_ARRAY_RTV {}
unsafe impl ::windows::Abi for D3D12_TEX2DMS_ARRAY_RTV {
    type Abi = D3D12_TEX2DMS_ARRAY_RTV_abi;
}
impl ::std::default::Default for D3D12_TEX2DMS_ARRAY_RTV {
    fn default() -> Self {
        Self {
            first_array_slice: 0,
            array_size: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2DMS_ARRAY_RTV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2DMS_ARRAY_RTV")
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2DMS_ARRAY_RTV {
    fn clone(&self) -> Self {
        Self {
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2DMS_ARRAY_RTV {
    fn eq(&self, other: &Self) -> bool {
        self.first_array_slice == other.first_array_slice && self.array_size == other.array_size
    }
}
impl ::std::cmp::Eq for D3D12_TEX2DMS_ARRAY_RTV {}
impl ::std::marker::Copy for D3D12_TEX2DMS_ARRAY_RTV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX3D_RTV {
    pub mip_slice: u32,
    pub first_wslice: u32,
    pub wsize: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX3D_RTV_abi(u32, u32, u32);
impl D3D12_TEX3D_RTV {}
unsafe impl ::windows::Abi for D3D12_TEX3D_RTV {
    type Abi = D3D12_TEX3D_RTV_abi;
}
impl ::std::default::Default for D3D12_TEX3D_RTV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            first_wslice: 0,
            wsize: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX3D_RTV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX3D_RTV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field("first_wslice", &format_args!("{:?}", self.first_wslice))
            .field("wsize", &format_args!("{:?}", self.wsize))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX3D_RTV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            first_wslice: self.first_wslice,
            wsize: self.wsize,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX3D_RTV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
            && self.first_wslice == other.first_wslice
            && self.wsize == other.wsize
    }
}
impl ::std::cmp::Eq for D3D12_TEX3D_RTV {}
impl ::std::marker::Copy for D3D12_TEX3D_RTV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RENDER_TARGET_VIEW_DESC {
    pub format: super::dxgi::DXGI_FORMAT,
    pub view_dimension: D3D12_RTV_DIMENSION,
    pub anonymous: D3D12_RENDER_TARGET_VIEW_DESC_0,
}
impl D3D12_RENDER_TARGET_VIEW_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_RENDER_TARGET_VIEW_DESC_0 {
    pub buffer: D3D12_BUFFER_RTV,
    pub texture1d: D3D12_TEX1D_RTV,
    pub texture1d_array: D3D12_TEX1D_ARRAY_RTV,
    pub texture2d: D3D12_TEX2D_RTV,
    pub texture2d_array: D3D12_TEX2D_ARRAY_RTV,
    pub texture2dms: D3D12_TEX2DMS_RTV,
    pub texture2dms_array: D3D12_TEX2DMS_ARRAY_RTV,
    pub texture3d: D3D12_TEX3D_RTV,
}
pub const D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE: u32 = 4096u32;
pub const D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP: u32 = 27u32;
pub const D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT: u32 = 4096u32;
pub const D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE: u32 = 4096u32;
pub const D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP: u32 = 32u32;
pub const D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP: u32 = 32u32;
pub const D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION: u32 = 16384u32;
pub const D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT: u32 = 1024u32;
pub const D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT: u32 = 4096u32;
pub const D3D12_REQ_MAXANISOTROPY: u32 = 16u32;
pub const D3D12_REQ_MIP_LEVELS: u32 = 15u32;
pub const D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES: u32 = 2048u32;
pub const D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE: u32 = 4096u32;
pub const D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH: u32 = 16384u32;
pub const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM: u32 = 128u32;
pub const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM: f32 = 0.25f32;
pub const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM: u32 = 2048u32;
pub const D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP: u32 = 20u32;
pub const D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE: u32 = 4096u32;
pub const D3D12_REQ_SUBRESOURCES: u32 = 30720u32;
pub const D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION: u32 = 2048u32;
pub const D3D12_REQ_TEXTURE1D_U_DIMENSION: u32 = 16384u32;
pub const D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION: u32 = 2048u32;
pub const D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION: u32 = 16384u32;
pub const D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION: u32 = 2048u32;
pub const D3D12_REQ_TEXTURECUBE_DIMENSION: u32 = 16384u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESIDENCY_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RESIDENCY_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESIDENCY_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESIDENCY_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESIDENCY_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESIDENCY_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESIDENCY_FLAGS {}
impl ::std::marker::Copy for D3D12_RESIDENCY_FLAGS {}
impl D3D12_RESIDENCY_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESIDENCY_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_RESIDENCY_FLAGS {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RESIDENCY_PRIORITY(pub i32);
impl ::std::convert::From<i32> for D3D12_RESIDENCY_PRIORITY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RESIDENCY_PRIORITY {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RESIDENCY_PRIORITY {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RESIDENCY_PRIORITY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RESIDENCY_PRIORITY {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RESIDENCY_PRIORITY {}
impl ::std::marker::Copy for D3D12_RESIDENCY_PRIORITY {}
impl D3D12_RESIDENCY_PRIORITY {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RESIDENCY_PRIORITY_MINIMUM: Self = Self(671088640i32);
    pub const D3D12_RESIDENCY_PRIORITY_LOW: Self = Self(1342177280i32);
    pub const D3D12_RESIDENCY_PRIORITY_NORMAL: Self = Self(2013265920i32);
    pub const D3D12_RESIDENCY_PRIORITY_HIGH: Self = Self(-1610547200i32);
    pub const D3D12_RESIDENCY_PRIORITY_MAXIMUM: Self = Self(-939524096i32);
}
unsafe impl ::windows::Abi for D3D12_RESIDENCY_PRIORITY {
    type Abi = Self;
}
pub const D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL: u32 = 0u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RESOURCE_ALLOCATION_INFO {
    pub size_in_bytes: u64,
    pub alignment: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RESOURCE_ALLOCATION_INFO_abi(u64, u64);
impl D3D12_RESOURCE_ALLOCATION_INFO {}
unsafe impl ::windows::Abi for D3D12_RESOURCE_ALLOCATION_INFO {
    type Abi = D3D12_RESOURCE_ALLOCATION_INFO_abi;
}
impl ::std::default::Default for D3D12_RESOURCE_ALLOCATION_INFO {
    fn default() -> Self {
        Self {
            size_in_bytes: 0,
            alignment: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_ALLOCATION_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RESOURCE_ALLOCATION_INFO")
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .field("alignment", &format_args!("{:?}", self.alignment))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_ALLOCATION_INFO {
    fn clone(&self) -> Self {
        Self {
            size_in_bytes: self.size_in_bytes,
            alignment: self.alignment,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_ALLOCATION_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.size_in_bytes == other.size_in_bytes && self.alignment == other.alignment
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_ALLOCATION_INFO {}
impl ::std::marker::Copy for D3D12_RESOURCE_ALLOCATION_INFO {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RESOURCE_ALLOCATION_INFO1 {
    pub offset: u64,
    pub alignment: u64,
    pub size_in_bytes: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RESOURCE_ALLOCATION_INFO1_abi(u64, u64, u64);
impl D3D12_RESOURCE_ALLOCATION_INFO1 {}
unsafe impl ::windows::Abi for D3D12_RESOURCE_ALLOCATION_INFO1 {
    type Abi = D3D12_RESOURCE_ALLOCATION_INFO1_abi;
}
impl ::std::default::Default for D3D12_RESOURCE_ALLOCATION_INFO1 {
    fn default() -> Self {
        Self {
            offset: 0,
            alignment: 0,
            size_in_bytes: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_ALLOCATION_INFO1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RESOURCE_ALLOCATION_INFO1")
            .field("offset", &format_args!("{:?}", self.offset))
            .field("alignment", &format_args!("{:?}", self.alignment))
            .field("size_in_bytes", &format_args!("{:?}", self.size_in_bytes))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_ALLOCATION_INFO1 {
    fn clone(&self) -> Self {
        Self {
            offset: self.offset,
            alignment: self.alignment,
            size_in_bytes: self.size_in_bytes,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_ALLOCATION_INFO1 {
    fn eq(&self, other: &Self) -> bool {
        self.offset == other.offset
            && self.alignment == other.alignment
            && self.size_in_bytes == other.size_in_bytes
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_ALLOCATION_INFO1 {}
impl ::std::marker::Copy for D3D12_RESOURCE_ALLOCATION_INFO1 {}
pub const D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES: u32 = 4294967295u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RESOURCE_DESC1 {
    pub dimension: D3D12_RESOURCE_DIMENSION,
    pub alignment: u64,
    pub width: u64,
    pub height: u32,
    pub depth_or_array_size: u16,
    pub mip_levels: u16,
    pub format: super::dxgi::DXGI_FORMAT,
    pub sample_desc: super::dxgi::DXGI_SAMPLE_DESC,
    pub layout: D3D12_TEXTURE_LAYOUT,
    pub flags: D3D12_RESOURCE_FLAGS,
    pub sampler_feedback_mip_region: D3D12_MIP_REGION,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RESOURCE_DESC1_abi(
    D3D12_RESOURCE_DIMENSION,
    u64,
    u64,
    u32,
    u16,
    u16,
    super::dxgi::DXGI_FORMAT,
    super::dxgi::DXGI_SAMPLE_DESC_abi,
    D3D12_TEXTURE_LAYOUT,
    D3D12_RESOURCE_FLAGS,
    D3D12_MIP_REGION_abi,
);
impl D3D12_RESOURCE_DESC1 {}
unsafe impl ::windows::Abi for D3D12_RESOURCE_DESC1 {
    type Abi = D3D12_RESOURCE_DESC1_abi;
}
impl ::std::default::Default for D3D12_RESOURCE_DESC1 {
    fn default() -> Self {
        Self {
            dimension: ::std::default::Default::default(),
            alignment: 0,
            width: 0,
            height: 0,
            depth_or_array_size: 0,
            mip_levels: 0,
            format: ::std::default::Default::default(),
            sample_desc: ::std::default::Default::default(),
            layout: ::std::default::Default::default(),
            flags: ::std::default::Default::default(),
            sampler_feedback_mip_region: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_RESOURCE_DESC1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RESOURCE_DESC1")
            .field("dimension", &format_args!("{:?}", self.dimension))
            .field("alignment", &format_args!("{:?}", self.alignment))
            .field("width", &format_args!("{:?}", self.width))
            .field("height", &format_args!("{:?}", self.height))
            .field(
                "depth_or_array_size",
                &format_args!("{:?}", self.depth_or_array_size),
            )
            .field("mip_levels", &format_args!("{:?}", self.mip_levels))
            .field("format", &format_args!("{:?}", self.format))
            .field("sample_desc", &format_args!("{:?}", self.sample_desc))
            .field("layout", &format_args!("{:?}", self.layout))
            .field("flags", &format_args!("{:?}", self.flags))
            .field(
                "sampler_feedback_mip_region",
                &format_args!("{:?}", self.sampler_feedback_mip_region),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RESOURCE_DESC1 {
    fn clone(&self) -> Self {
        Self {
            dimension: self.dimension,
            alignment: self.alignment,
            width: self.width,
            height: self.height,
            depth_or_array_size: self.depth_or_array_size,
            mip_levels: self.mip_levels,
            format: self.format,
            sample_desc: <super::dxgi::DXGI_SAMPLE_DESC as std::clone::Clone>::clone(
                &self.sample_desc,
            ),
            layout: self.layout,
            flags: self.flags,
            sampler_feedback_mip_region: <D3D12_MIP_REGION as std::clone::Clone>::clone(
                &self.sampler_feedback_mip_region,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RESOURCE_DESC1 {
    fn eq(&self, other: &Self) -> bool {
        self.dimension == other.dimension
            && self.alignment == other.alignment
            && self.width == other.width
            && self.height == other.height
            && self.depth_or_array_size == other.depth_or_array_size
            && self.mip_levels == other.mip_levels
            && self.format == other.format
            && self.sample_desc == other.sample_desc
            && self.layout == other.layout
            && self.flags == other.flags
            && self.sampler_feedback_mip_region == other.sampler_feedback_mip_region
    }
}
impl ::std::cmp::Eq for D3D12_RESOURCE_DESC1 {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_RLDO_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_RLDO_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_RLDO_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_RLDO_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_RLDO_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_RLDO_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_RLDO_FLAGS {}
impl ::std::marker::Copy for D3D12_RLDO_FLAGS {}
impl D3D12_RLDO_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_RLDO_NONE: Self = Self(0i32);
    pub const D3D12_RLDO_SUMMARY: Self = Self(1i32);
    pub const D3D12_RLDO_DETAIL: Self = Self(2i32);
    pub const D3D12_RLDO_IGNORE_INTERNAL: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_RLDO_FLAGS {
    type Abi = Self;
}
pub const D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT: u32 = 2u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_RT_FORMAT_ARRAY {
    pub rt_formats: [super::dxgi::DXGI_FORMAT; 8usize],
    pub num_render_targets: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_RT_FORMAT_ARRAY_abi([super::dxgi::DXGI_FORMAT; 8usize], u32);
impl D3D12_RT_FORMAT_ARRAY {}
unsafe impl ::windows::Abi for D3D12_RT_FORMAT_ARRAY {
    type Abi = D3D12_RT_FORMAT_ARRAY_abi;
}
impl ::std::default::Default for D3D12_RT_FORMAT_ARRAY {
    fn default() -> Self {
        Self {
            rt_formats: [
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
                ::std::default::Default::default(),
            ],
            num_render_targets: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_RT_FORMAT_ARRAY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_RT_FORMAT_ARRAY")
            .field("rt_formats", &format_args!("{:?}", self.rt_formats))
            .field(
                "num_render_targets",
                &format_args!("{:?}", self.num_render_targets),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_RT_FORMAT_ARRAY {
    fn clone(&self) -> Self {
        Self {
            rt_formats: <[super::dxgi::DXGI_FORMAT; 8usize] as std::clone::Clone>::clone(
                &self.rt_formats,
            ),
            num_render_targets: self.num_render_targets,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_RT_FORMAT_ARRAY {
    fn eq(&self, other: &Self) -> bool {
        self.rt_formats == other.rt_formats && self.num_render_targets == other.num_render_targets
    }
}
impl ::std::cmp::Eq for D3D12_RT_FORMAT_ARRAY {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SAMPLER_DESC {
    pub filter: D3D12_FILTER,
    pub addressu: D3D12_TEXTURE_ADDRESS_MODE,
    pub addressv: D3D12_TEXTURE_ADDRESS_MODE,
    pub addressw: D3D12_TEXTURE_ADDRESS_MODE,
    pub mip_lod_bias: f32,
    pub max_anisotropy: u32,
    pub comparison_func: D3D12_COMPARISON_FUNC,
    pub border_color: [f32; 4usize],
    pub min_lod: f32,
    pub max_lod: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SAMPLER_DESC_abi(
    D3D12_FILTER,
    D3D12_TEXTURE_ADDRESS_MODE,
    D3D12_TEXTURE_ADDRESS_MODE,
    D3D12_TEXTURE_ADDRESS_MODE,
    f32,
    u32,
    D3D12_COMPARISON_FUNC,
    [f32; 4usize],
    f32,
    f32,
);
impl D3D12_SAMPLER_DESC {}
unsafe impl ::windows::Abi for D3D12_SAMPLER_DESC {
    type Abi = D3D12_SAMPLER_DESC_abi;
}
impl ::std::default::Default for D3D12_SAMPLER_DESC {
    fn default() -> Self {
        Self {
            filter: ::std::default::Default::default(),
            addressu: ::std::default::Default::default(),
            addressv: ::std::default::Default::default(),
            addressw: ::std::default::Default::default(),
            mip_lod_bias: 0.0,
            max_anisotropy: 0,
            comparison_func: ::std::default::Default::default(),
            border_color: [0.0, 0.0, 0.0, 0.0],
            min_lod: 0.0,
            max_lod: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SAMPLER_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SAMPLER_DESC")
            .field("filter", &format_args!("{:?}", self.filter))
            .field("addressu", &format_args!("{:?}", self.addressu))
            .field("addressv", &format_args!("{:?}", self.addressv))
            .field("addressw", &format_args!("{:?}", self.addressw))
            .field("mip_lod_bias", &format_args!("{:?}", self.mip_lod_bias))
            .field("max_anisotropy", &format_args!("{:?}", self.max_anisotropy))
            .field(
                "comparison_func",
                &format_args!("{:?}", self.comparison_func),
            )
            .field("border_color", &format_args!("{:?}", self.border_color))
            .field("min_lod", &format_args!("{:?}", self.min_lod))
            .field("max_lod", &format_args!("{:?}", self.max_lod))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SAMPLER_DESC {
    fn clone(&self) -> Self {
        Self {
            filter: self.filter,
            addressu: self.addressu,
            addressv: self.addressv,
            addressw: self.addressw,
            mip_lod_bias: self.mip_lod_bias,
            max_anisotropy: self.max_anisotropy,
            comparison_func: self.comparison_func,
            border_color: <[f32; 4usize] as std::clone::Clone>::clone(&self.border_color),
            min_lod: self.min_lod,
            max_lod: self.max_lod,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SAMPLER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.filter == other.filter
            && self.addressu == other.addressu
            && self.addressv == other.addressv
            && self.addressw == other.addressw
            && self.mip_lod_bias == other.mip_lod_bias
            && self.max_anisotropy == other.max_anisotropy
            && self.comparison_func == other.comparison_func
            && self.border_color == other.border_color
            && self.min_lod == other.min_lod
            && self.max_lod == other.max_lod
    }
}
impl ::std::cmp::Eq for D3D12_SAMPLER_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SAMPLE_POSITION {
    pub x: i8,
    pub y: i8,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SAMPLE_POSITION_abi(i8, i8);
impl D3D12_SAMPLE_POSITION {}
unsafe impl ::windows::Abi for D3D12_SAMPLE_POSITION {
    type Abi = D3D12_SAMPLE_POSITION_abi;
}
impl ::std::default::Default for D3D12_SAMPLE_POSITION {
    fn default() -> Self {
        Self { x: 0, y: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_SAMPLE_POSITION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SAMPLE_POSITION")
            .field("x", &format_args!("{:?}", self.x))
            .field("y", &format_args!("{:?}", self.y))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SAMPLE_POSITION {
    fn clone(&self) -> Self {
        Self {
            x: self.x,
            y: self.y,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SAMPLE_POSITION {
    fn eq(&self, other: &Self) -> bool {
        self.x == other.x && self.y == other.y
    }
}
impl ::std::cmp::Eq for D3D12_SAMPLE_POSITION {}
impl ::std::marker::Copy for D3D12_SAMPLE_POSITION {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {
    pub driver_opaque_guid: ::windows::Guid,
    pub driver_opaque_versioning_data: [u8; 16usize],
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER_abi(::windows::Guid, [u8; 16usize]);
impl D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {}
unsafe impl ::windows::Abi for D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {
    type Abi = D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER_abi;
}
impl ::std::default::Default for D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {
    fn default() -> Self {
        Self {
            driver_opaque_guid: ::windows::Guid::zeroed(),
            driver_opaque_versioning_data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        }
    }
}
impl ::std::fmt::Debug for D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER")
            .field(
                "driver_opaque_guid",
                &format_args!("{:?}", self.driver_opaque_guid),
            )
            .field(
                "driver_opaque_versioning_data",
                &format_args!("{:?}", self.driver_opaque_versioning_data),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {
    fn clone(&self) -> Self {
        Self {
            driver_opaque_guid: <::windows::Guid as std::clone::Clone>::clone(
                &self.driver_opaque_guid,
            ),
            driver_opaque_versioning_data: <[u8; 16usize] as std::clone::Clone>::clone(
                &self.driver_opaque_versioning_data,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {
    fn eq(&self, other: &Self) -> bool {
        self.driver_opaque_guid == other.driver_opaque_guid
            && self.driver_opaque_versioning_data == other.driver_opaque_versioning_data
    }
}
impl ::std::cmp::Eq for D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SERIALIZED_DATA_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_SERIALIZED_DATA_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SERIALIZED_DATA_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SERIALIZED_DATA_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SERIALIZED_DATA_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SERIALIZED_DATA_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SERIALIZED_DATA_TYPE {}
impl ::std::marker::Copy for D3D12_SERIALIZED_DATA_TYPE {}
impl D3D12_SERIALIZED_DATA_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE: Self = Self(0i32);
}
unsafe impl ::windows::Abi for D3D12_SERIALIZED_DATA_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {
    pub driver_matching_identifier: D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    pub serialized_size_in_bytes_including_header: u64,
    pub deserialized_size_in_bytes: u64,
    pub num_bottom_level_acceleration_structure_pointers_after_header: u64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_abi(
    D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER_abi,
    u64,
    u64,
    u64,
);
impl D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {}
unsafe impl ::windows::Abi for D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {
    type Abi = D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_abi;
}
impl ::std::default::Default for D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {
    fn default() -> Self {
        Self {
            driver_matching_identifier: ::std::default::Default::default(),
            serialized_size_in_bytes_including_header: 0,
            deserialized_size_in_bytes: 0,
            num_bottom_level_acceleration_structure_pointers_after_header: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER")
            .field(
                "driver_matching_identifier",
                &format_args!("{:?}", self.driver_matching_identifier),
            )
            .field(
                "serialized_size_in_bytes_including_header",
                &format_args!("{:?}", self.serialized_size_in_bytes_including_header),
            )
            .field(
                "deserialized_size_in_bytes",
                &format_args!("{:?}", self.deserialized_size_in_bytes),
            )
            .field(
                "num_bottom_level_acceleration_structure_pointers_after_header",
                &format_args!(
                    "{:?}",
                    self.num_bottom_level_acceleration_structure_pointers_after_header
                ),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {
    fn clone(&self) -> Self {
        Self {
            driver_matching_identifier:
                <D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER as std::clone::Clone>::clone(
                    &self.driver_matching_identifier,
                ),
            serialized_size_in_bytes_including_header: self
                .serialized_size_in_bytes_including_header,
            deserialized_size_in_bytes: self.deserialized_size_in_bytes,
            num_bottom_level_acceleration_structure_pointers_after_header: self
                .num_bottom_level_acceleration_structure_pointers_after_header,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {
    fn eq(&self, other: &Self) -> bool {
        self.driver_matching_identifier == other.driver_matching_identifier
            && self.serialized_size_in_bytes_including_header
                == other.serialized_size_in_bytes_including_header
            && self.deserialized_size_in_bytes == other.deserialized_size_in_bytes
            && self.num_bottom_level_acceleration_structure_pointers_after_header
                == other.num_bottom_level_acceleration_structure_pointers_after_header
    }
}
impl ::std::cmp::Eq for D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SHADER_BUFFER_DESC {
    pub name: *mut i8,
    pub r#type: super::direct3d11::D3D_CBUFFER_TYPE,
    pub variables: u32,
    pub size: u32,
    pub u_flags: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SHADER_BUFFER_DESC_abi(
    *mut i8,
    super::direct3d11::D3D_CBUFFER_TYPE,
    u32,
    u32,
    u32,
);
impl D3D12_SHADER_BUFFER_DESC {}
unsafe impl ::windows::Abi for D3D12_SHADER_BUFFER_DESC {
    type Abi = D3D12_SHADER_BUFFER_DESC_abi;
}
impl ::std::default::Default for D3D12_SHADER_BUFFER_DESC {
    fn default() -> Self {
        Self {
            name: ::std::ptr::null_mut(),
            r#type: ::std::default::Default::default(),
            variables: 0,
            size: 0,
            u_flags: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_BUFFER_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SHADER_BUFFER_DESC")
            .field("name", &format_args!("{:?}", self.name))
            .field("type", &format_args!("{:?}", self.r#type))
            .field("variables", &format_args!("{:?}", self.variables))
            .field("size", &format_args!("{:?}", self.size))
            .field("u_flags", &format_args!("{:?}", self.u_flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SHADER_BUFFER_DESC {
    fn clone(&self) -> Self {
        Self {
            name: self.name,
            r#type: self.r#type,
            variables: self.variables,
            size: self.size,
            u_flags: self.u_flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_BUFFER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.name == other.name
            && self.r#type == other.r#type
            && self.variables == other.variables
            && self.size == other.size
            && self.u_flags == other.u_flags
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_BUFFER_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SHADER_COMPONENT_MAPPING(pub i32);
impl ::std::convert::From<i32> for D3D12_SHADER_COMPONENT_MAPPING {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SHADER_COMPONENT_MAPPING {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SHADER_COMPONENT_MAPPING {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_COMPONENT_MAPPING {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_COMPONENT_MAPPING {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_COMPONENT_MAPPING {}
impl ::std::marker::Copy for D3D12_SHADER_COMPONENT_MAPPING {}
impl D3D12_SHADER_COMPONENT_MAPPING {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0: Self = Self(0i32);
    pub const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1: Self = Self(1i32);
    pub const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2: Self = Self(2i32);
    pub const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3: Self = Self(3i32);
    pub const D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0: Self = Self(4i32);
    pub const D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1: Self = Self(5i32);
}
unsafe impl ::windows::Abi for D3D12_SHADER_COMPONENT_MAPPING {
    type Abi = Self;
}
pub const D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES: u32 = 4096u32;
pub const D3D12_SHADER_COMPONENT_MAPPING_MASK: u32 = 7u32;
pub const D3D12_SHADER_COMPONENT_MAPPING_SHIFT: u32 = 3u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SHADER_DESC {
    pub version: u32,
    pub creator: *mut i8,
    pub flags: u32,
    pub constant_buffers: u32,
    pub bound_resources: u32,
    pub input_parameters: u32,
    pub output_parameters: u32,
    pub instruction_count: u32,
    pub temp_register_count: u32,
    pub temp_array_count: u32,
    pub def_count: u32,
    pub dcl_count: u32,
    pub texture_normal_instructions: u32,
    pub texture_load_instructions: u32,
    pub texture_comp_instructions: u32,
    pub texture_bias_instructions: u32,
    pub texture_gradient_instructions: u32,
    pub float_instruction_count: u32,
    pub int_instruction_count: u32,
    pub uint_instruction_count: u32,
    pub static_flow_control_count: u32,
    pub dynamic_flow_control_count: u32,
    pub macro_instruction_count: u32,
    pub array_instruction_count: u32,
    pub cut_instruction_count: u32,
    pub emit_instruction_count: u32,
    pub gs_output_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    pub gs_max_output_vertex_count: u32,
    pub input_primitive: super::direct3d11::D3D_PRIMITIVE,
    pub patch_constant_parameters: u32,
    pub c_gs_instance_count: u32,
    pub c_control_points: u32,
    pub hs_output_primitive: super::direct3d11::D3D_TESSELLATOR_OUTPUT_PRIMITIVE,
    pub hs_partitioning: super::direct3d11::D3D_TESSELLATOR_PARTITIONING,
    pub tessellator_domain: super::direct3d11::D3D_TESSELLATOR_DOMAIN,
    pub c_barrier_instructions: u32,
    pub c_interlocked_instructions: u32,
    pub c_texture_store_instructions: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SHADER_DESC_abi(
    u32,
    *mut i8,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    u32,
    super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    u32,
    super::direct3d11::D3D_PRIMITIVE,
    u32,
    u32,
    u32,
    super::direct3d11::D3D_TESSELLATOR_OUTPUT_PRIMITIVE,
    super::direct3d11::D3D_TESSELLATOR_PARTITIONING,
    super::direct3d11::D3D_TESSELLATOR_DOMAIN,
    u32,
    u32,
    u32,
);
impl D3D12_SHADER_DESC {}
unsafe impl ::windows::Abi for D3D12_SHADER_DESC {
    type Abi = D3D12_SHADER_DESC_abi;
}
impl ::std::default::Default for D3D12_SHADER_DESC {
    fn default() -> Self {
        Self {
            version: 0,
            creator: ::std::ptr::null_mut(),
            flags: 0,
            constant_buffers: 0,
            bound_resources: 0,
            input_parameters: 0,
            output_parameters: 0,
            instruction_count: 0,
            temp_register_count: 0,
            temp_array_count: 0,
            def_count: 0,
            dcl_count: 0,
            texture_normal_instructions: 0,
            texture_load_instructions: 0,
            texture_comp_instructions: 0,
            texture_bias_instructions: 0,
            texture_gradient_instructions: 0,
            float_instruction_count: 0,
            int_instruction_count: 0,
            uint_instruction_count: 0,
            static_flow_control_count: 0,
            dynamic_flow_control_count: 0,
            macro_instruction_count: 0,
            array_instruction_count: 0,
            cut_instruction_count: 0,
            emit_instruction_count: 0,
            gs_output_topology: ::std::default::Default::default(),
            gs_max_output_vertex_count: 0,
            input_primitive: ::std::default::Default::default(),
            patch_constant_parameters: 0,
            c_gs_instance_count: 0,
            c_control_points: 0,
            hs_output_primitive: ::std::default::Default::default(),
            hs_partitioning: ::std::default::Default::default(),
            tessellator_domain: ::std::default::Default::default(),
            c_barrier_instructions: 0,
            c_interlocked_instructions: 0,
            c_texture_store_instructions: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SHADER_DESC")
            .field("version", &format_args!("{:?}", self.version))
            .field("creator", &format_args!("{:?}", self.creator))
            .field("flags", &format_args!("{:?}", self.flags))
            .field(
                "constant_buffers",
                &format_args!("{:?}", self.constant_buffers),
            )
            .field(
                "bound_resources",
                &format_args!("{:?}", self.bound_resources),
            )
            .field(
                "input_parameters",
                &format_args!("{:?}", self.input_parameters),
            )
            .field(
                "output_parameters",
                &format_args!("{:?}", self.output_parameters),
            )
            .field(
                "instruction_count",
                &format_args!("{:?}", self.instruction_count),
            )
            .field(
                "temp_register_count",
                &format_args!("{:?}", self.temp_register_count),
            )
            .field(
                "temp_array_count",
                &format_args!("{:?}", self.temp_array_count),
            )
            .field("def_count", &format_args!("{:?}", self.def_count))
            .field("dcl_count", &format_args!("{:?}", self.dcl_count))
            .field(
                "texture_normal_instructions",
                &format_args!("{:?}", self.texture_normal_instructions),
            )
            .field(
                "texture_load_instructions",
                &format_args!("{:?}", self.texture_load_instructions),
            )
            .field(
                "texture_comp_instructions",
                &format_args!("{:?}", self.texture_comp_instructions),
            )
            .field(
                "texture_bias_instructions",
                &format_args!("{:?}", self.texture_bias_instructions),
            )
            .field(
                "texture_gradient_instructions",
                &format_args!("{:?}", self.texture_gradient_instructions),
            )
            .field(
                "float_instruction_count",
                &format_args!("{:?}", self.float_instruction_count),
            )
            .field(
                "int_instruction_count",
                &format_args!("{:?}", self.int_instruction_count),
            )
            .field(
                "uint_instruction_count",
                &format_args!("{:?}", self.uint_instruction_count),
            )
            .field(
                "static_flow_control_count",
                &format_args!("{:?}", self.static_flow_control_count),
            )
            .field(
                "dynamic_flow_control_count",
                &format_args!("{:?}", self.dynamic_flow_control_count),
            )
            .field(
                "macro_instruction_count",
                &format_args!("{:?}", self.macro_instruction_count),
            )
            .field(
                "array_instruction_count",
                &format_args!("{:?}", self.array_instruction_count),
            )
            .field(
                "cut_instruction_count",
                &format_args!("{:?}", self.cut_instruction_count),
            )
            .field(
                "emit_instruction_count",
                &format_args!("{:?}", self.emit_instruction_count),
            )
            .field(
                "gs_output_topology",
                &format_args!("{:?}", self.gs_output_topology),
            )
            .field(
                "gs_max_output_vertex_count",
                &format_args!("{:?}", self.gs_max_output_vertex_count),
            )
            .field(
                "input_primitive",
                &format_args!("{:?}", self.input_primitive),
            )
            .field(
                "patch_constant_parameters",
                &format_args!("{:?}", self.patch_constant_parameters),
            )
            .field(
                "c_gs_instance_count",
                &format_args!("{:?}", self.c_gs_instance_count),
            )
            .field(
                "c_control_points",
                &format_args!("{:?}", self.c_control_points),
            )
            .field(
                "hs_output_primitive",
                &format_args!("{:?}", self.hs_output_primitive),
            )
            .field(
                "hs_partitioning",
                &format_args!("{:?}", self.hs_partitioning),
            )
            .field(
                "tessellator_domain",
                &format_args!("{:?}", self.tessellator_domain),
            )
            .field(
                "c_barrier_instructions",
                &format_args!("{:?}", self.c_barrier_instructions),
            )
            .field(
                "c_interlocked_instructions",
                &format_args!("{:?}", self.c_interlocked_instructions),
            )
            .field(
                "c_texture_store_instructions",
                &format_args!("{:?}", self.c_texture_store_instructions),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SHADER_DESC {
    fn clone(&self) -> Self {
        Self {
            version: self.version,
            creator: self.creator,
            flags: self.flags,
            constant_buffers: self.constant_buffers,
            bound_resources: self.bound_resources,
            input_parameters: self.input_parameters,
            output_parameters: self.output_parameters,
            instruction_count: self.instruction_count,
            temp_register_count: self.temp_register_count,
            temp_array_count: self.temp_array_count,
            def_count: self.def_count,
            dcl_count: self.dcl_count,
            texture_normal_instructions: self.texture_normal_instructions,
            texture_load_instructions: self.texture_load_instructions,
            texture_comp_instructions: self.texture_comp_instructions,
            texture_bias_instructions: self.texture_bias_instructions,
            texture_gradient_instructions: self.texture_gradient_instructions,
            float_instruction_count: self.float_instruction_count,
            int_instruction_count: self.int_instruction_count,
            uint_instruction_count: self.uint_instruction_count,
            static_flow_control_count: self.static_flow_control_count,
            dynamic_flow_control_count: self.dynamic_flow_control_count,
            macro_instruction_count: self.macro_instruction_count,
            array_instruction_count: self.array_instruction_count,
            cut_instruction_count: self.cut_instruction_count,
            emit_instruction_count: self.emit_instruction_count,
            gs_output_topology: self.gs_output_topology,
            gs_max_output_vertex_count: self.gs_max_output_vertex_count,
            input_primitive: self.input_primitive,
            patch_constant_parameters: self.patch_constant_parameters,
            c_gs_instance_count: self.c_gs_instance_count,
            c_control_points: self.c_control_points,
            hs_output_primitive: self.hs_output_primitive,
            hs_partitioning: self.hs_partitioning,
            tessellator_domain: self.tessellator_domain,
            c_barrier_instructions: self.c_barrier_instructions,
            c_interlocked_instructions: self.c_interlocked_instructions,
            c_texture_store_instructions: self.c_texture_store_instructions,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.version == other.version
            && self.creator == other.creator
            && self.flags == other.flags
            && self.constant_buffers == other.constant_buffers
            && self.bound_resources == other.bound_resources
            && self.input_parameters == other.input_parameters
            && self.output_parameters == other.output_parameters
            && self.instruction_count == other.instruction_count
            && self.temp_register_count == other.temp_register_count
            && self.temp_array_count == other.temp_array_count
            && self.def_count == other.def_count
            && self.dcl_count == other.dcl_count
            && self.texture_normal_instructions == other.texture_normal_instructions
            && self.texture_load_instructions == other.texture_load_instructions
            && self.texture_comp_instructions == other.texture_comp_instructions
            && self.texture_bias_instructions == other.texture_bias_instructions
            && self.texture_gradient_instructions == other.texture_gradient_instructions
            && self.float_instruction_count == other.float_instruction_count
            && self.int_instruction_count == other.int_instruction_count
            && self.uint_instruction_count == other.uint_instruction_count
            && self.static_flow_control_count == other.static_flow_control_count
            && self.dynamic_flow_control_count == other.dynamic_flow_control_count
            && self.macro_instruction_count == other.macro_instruction_count
            && self.array_instruction_count == other.array_instruction_count
            && self.cut_instruction_count == other.cut_instruction_count
            && self.emit_instruction_count == other.emit_instruction_count
            && self.gs_output_topology == other.gs_output_topology
            && self.gs_max_output_vertex_count == other.gs_max_output_vertex_count
            && self.input_primitive == other.input_primitive
            && self.patch_constant_parameters == other.patch_constant_parameters
            && self.c_gs_instance_count == other.c_gs_instance_count
            && self.c_control_points == other.c_control_points
            && self.hs_output_primitive == other.hs_output_primitive
            && self.hs_partitioning == other.hs_partitioning
            && self.tessellator_domain == other.tessellator_domain
            && self.c_barrier_instructions == other.c_barrier_instructions
            && self.c_interlocked_instructions == other.c_interlocked_instructions
            && self.c_texture_store_instructions == other.c_texture_store_instructions
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_DESC {}
pub const D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES: u32 = 32u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SHADER_INPUT_BIND_DESC {
    pub name: *mut i8,
    pub r#type: super::direct3d11::D3D_SHADER_INPUT_TYPE,
    pub bind_point: u32,
    pub bind_count: u32,
    pub u_flags: u32,
    pub return_type: super::direct3d11::D3D_RESOURCE_RETURN_TYPE,
    pub dimension: super::direct3d11::D3D_SRV_DIMENSION,
    pub num_samples: u32,
    pub space: u32,
    pub u_id: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SHADER_INPUT_BIND_DESC_abi(
    *mut i8,
    super::direct3d11::D3D_SHADER_INPUT_TYPE,
    u32,
    u32,
    u32,
    super::direct3d11::D3D_RESOURCE_RETURN_TYPE,
    super::direct3d11::D3D_SRV_DIMENSION,
    u32,
    u32,
    u32,
);
impl D3D12_SHADER_INPUT_BIND_DESC {}
unsafe impl ::windows::Abi for D3D12_SHADER_INPUT_BIND_DESC {
    type Abi = D3D12_SHADER_INPUT_BIND_DESC_abi;
}
impl ::std::default::Default for D3D12_SHADER_INPUT_BIND_DESC {
    fn default() -> Self {
        Self {
            name: ::std::ptr::null_mut(),
            r#type: ::std::default::Default::default(),
            bind_point: 0,
            bind_count: 0,
            u_flags: 0,
            return_type: ::std::default::Default::default(),
            dimension: ::std::default::Default::default(),
            num_samples: 0,
            space: 0,
            u_id: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_INPUT_BIND_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SHADER_INPUT_BIND_DESC")
            .field("name", &format_args!("{:?}", self.name))
            .field("type", &format_args!("{:?}", self.r#type))
            .field("bind_point", &format_args!("{:?}", self.bind_point))
            .field("bind_count", &format_args!("{:?}", self.bind_count))
            .field("u_flags", &format_args!("{:?}", self.u_flags))
            .field("return_type", &format_args!("{:?}", self.return_type))
            .field("dimension", &format_args!("{:?}", self.dimension))
            .field("num_samples", &format_args!("{:?}", self.num_samples))
            .field("space", &format_args!("{:?}", self.space))
            .field("u_id", &format_args!("{:?}", self.u_id))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SHADER_INPUT_BIND_DESC {
    fn clone(&self) -> Self {
        Self {
            name: self.name,
            r#type: self.r#type,
            bind_point: self.bind_point,
            bind_count: self.bind_count,
            u_flags: self.u_flags,
            return_type: self.return_type,
            dimension: self.dimension,
            num_samples: self.num_samples,
            space: self.space,
            u_id: self.u_id,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_INPUT_BIND_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.name == other.name
            && self.r#type == other.r#type
            && self.bind_point == other.bind_point
            && self.bind_count == other.bind_count
            && self.u_flags == other.u_flags
            && self.return_type == other.return_type
            && self.dimension == other.dimension
            && self.num_samples == other.num_samples
            && self.space == other.space
            && self.u_id == other.u_id
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_INPUT_BIND_DESC {}
pub const D3D12_SHADER_MAJOR_VERSION: u32 = 5u32;
pub const D3D12_SHADER_MAX_INSTANCES: u32 = 65535u32;
pub const D3D12_SHADER_MAX_INTERFACES: u32 = 253u32;
pub const D3D12_SHADER_MAX_INTERFACE_CALL_SITES: u32 = 4096u32;
pub const D3D12_SHADER_MAX_TYPES: u32 = 65535u32;
pub const D3D12_SHADER_MINOR_VERSION: u32 = 1u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SRV_DIMENSION(pub i32);
impl ::std::convert::From<i32> for D3D12_SRV_DIMENSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SRV_DIMENSION {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SRV_DIMENSION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SRV_DIMENSION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SRV_DIMENSION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SRV_DIMENSION {}
impl ::std::marker::Copy for D3D12_SRV_DIMENSION {}
impl D3D12_SRV_DIMENSION {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SRV_DIMENSION_UNKNOWN: Self = Self(0i32);
    pub const D3D12_SRV_DIMENSION_BUFFER: Self = Self(1i32);
    pub const D3D12_SRV_DIMENSION_TEXTURE1D: Self = Self(2i32);
    pub const D3D12_SRV_DIMENSION_TEXTURE1DARRAY: Self = Self(3i32);
    pub const D3D12_SRV_DIMENSION_TEXTURE2D: Self = Self(4i32);
    pub const D3D12_SRV_DIMENSION_TEXTURE2DARRAY: Self = Self(5i32);
    pub const D3D12_SRV_DIMENSION_TEXTURE2DMS: Self = Self(6i32);
    pub const D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY: Self = Self(7i32);
    pub const D3D12_SRV_DIMENSION_TEXTURE3D: Self = Self(8i32);
    pub const D3D12_SRV_DIMENSION_TEXTURECUBE: Self = Self(9i32);
    pub const D3D12_SRV_DIMENSION_TEXTURECUBEARRAY: Self = Self(10i32);
    pub const D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE: Self = Self(11i32);
}
unsafe impl ::windows::Abi for D3D12_SRV_DIMENSION {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX1D_SRV {
    pub most_detailed_mip: u32,
    pub mip_levels: u32,
    pub resource_min_lod_clamp: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX1D_SRV_abi(u32, u32, f32);
impl D3D12_TEX1D_SRV {}
unsafe impl ::windows::Abi for D3D12_TEX1D_SRV {
    type Abi = D3D12_TEX1D_SRV_abi;
}
impl ::std::default::Default for D3D12_TEX1D_SRV {
    fn default() -> Self {
        Self {
            most_detailed_mip: 0,
            mip_levels: 0,
            resource_min_lod_clamp: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX1D_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX1D_SRV")
            .field(
                "most_detailed_mip",
                &format_args!("{:?}", self.most_detailed_mip),
            )
            .field("mip_levels", &format_args!("{:?}", self.mip_levels))
            .field(
                "resource_min_lod_clamp",
                &format_args!("{:?}", self.resource_min_lod_clamp),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX1D_SRV {
    fn clone(&self) -> Self {
        Self {
            most_detailed_mip: self.most_detailed_mip,
            mip_levels: self.mip_levels,
            resource_min_lod_clamp: self.resource_min_lod_clamp,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX1D_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.most_detailed_mip == other.most_detailed_mip
            && self.mip_levels == other.mip_levels
            && self.resource_min_lod_clamp == other.resource_min_lod_clamp
    }
}
impl ::std::cmp::Eq for D3D12_TEX1D_SRV {}
impl ::std::marker::Copy for D3D12_TEX1D_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX1D_ARRAY_SRV {
    pub most_detailed_mip: u32,
    pub mip_levels: u32,
    pub first_array_slice: u32,
    pub array_size: u32,
    pub resource_min_lod_clamp: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX1D_ARRAY_SRV_abi(u32, u32, u32, u32, f32);
impl D3D12_TEX1D_ARRAY_SRV {}
unsafe impl ::windows::Abi for D3D12_TEX1D_ARRAY_SRV {
    type Abi = D3D12_TEX1D_ARRAY_SRV_abi;
}
impl ::std::default::Default for D3D12_TEX1D_ARRAY_SRV {
    fn default() -> Self {
        Self {
            most_detailed_mip: 0,
            mip_levels: 0,
            first_array_slice: 0,
            array_size: 0,
            resource_min_lod_clamp: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX1D_ARRAY_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX1D_ARRAY_SRV")
            .field(
                "most_detailed_mip",
                &format_args!("{:?}", self.most_detailed_mip),
            )
            .field("mip_levels", &format_args!("{:?}", self.mip_levels))
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .field(
                "resource_min_lod_clamp",
                &format_args!("{:?}", self.resource_min_lod_clamp),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX1D_ARRAY_SRV {
    fn clone(&self) -> Self {
        Self {
            most_detailed_mip: self.most_detailed_mip,
            mip_levels: self.mip_levels,
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
            resource_min_lod_clamp: self.resource_min_lod_clamp,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX1D_ARRAY_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.most_detailed_mip == other.most_detailed_mip
            && self.mip_levels == other.mip_levels
            && self.first_array_slice == other.first_array_slice
            && self.array_size == other.array_size
            && self.resource_min_lod_clamp == other.resource_min_lod_clamp
    }
}
impl ::std::cmp::Eq for D3D12_TEX1D_ARRAY_SRV {}
impl ::std::marker::Copy for D3D12_TEX1D_ARRAY_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2D_SRV {
    pub most_detailed_mip: u32,
    pub mip_levels: u32,
    pub plane_slice: u32,
    pub resource_min_lod_clamp: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2D_SRV_abi(u32, u32, u32, f32);
impl D3D12_TEX2D_SRV {}
unsafe impl ::windows::Abi for D3D12_TEX2D_SRV {
    type Abi = D3D12_TEX2D_SRV_abi;
}
impl ::std::default::Default for D3D12_TEX2D_SRV {
    fn default() -> Self {
        Self {
            most_detailed_mip: 0,
            mip_levels: 0,
            plane_slice: 0,
            resource_min_lod_clamp: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2D_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2D_SRV")
            .field(
                "most_detailed_mip",
                &format_args!("{:?}", self.most_detailed_mip),
            )
            .field("mip_levels", &format_args!("{:?}", self.mip_levels))
            .field("plane_slice", &format_args!("{:?}", self.plane_slice))
            .field(
                "resource_min_lod_clamp",
                &format_args!("{:?}", self.resource_min_lod_clamp),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2D_SRV {
    fn clone(&self) -> Self {
        Self {
            most_detailed_mip: self.most_detailed_mip,
            mip_levels: self.mip_levels,
            plane_slice: self.plane_slice,
            resource_min_lod_clamp: self.resource_min_lod_clamp,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2D_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.most_detailed_mip == other.most_detailed_mip
            && self.mip_levels == other.mip_levels
            && self.plane_slice == other.plane_slice
            && self.resource_min_lod_clamp == other.resource_min_lod_clamp
    }
}
impl ::std::cmp::Eq for D3D12_TEX2D_SRV {}
impl ::std::marker::Copy for D3D12_TEX2D_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2D_ARRAY_SRV {
    pub most_detailed_mip: u32,
    pub mip_levels: u32,
    pub first_array_slice: u32,
    pub array_size: u32,
    pub plane_slice: u32,
    pub resource_min_lod_clamp: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2D_ARRAY_SRV_abi(u32, u32, u32, u32, u32, f32);
impl D3D12_TEX2D_ARRAY_SRV {}
unsafe impl ::windows::Abi for D3D12_TEX2D_ARRAY_SRV {
    type Abi = D3D12_TEX2D_ARRAY_SRV_abi;
}
impl ::std::default::Default for D3D12_TEX2D_ARRAY_SRV {
    fn default() -> Self {
        Self {
            most_detailed_mip: 0,
            mip_levels: 0,
            first_array_slice: 0,
            array_size: 0,
            plane_slice: 0,
            resource_min_lod_clamp: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2D_ARRAY_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2D_ARRAY_SRV")
            .field(
                "most_detailed_mip",
                &format_args!("{:?}", self.most_detailed_mip),
            )
            .field("mip_levels", &format_args!("{:?}", self.mip_levels))
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .field("plane_slice", &format_args!("{:?}", self.plane_slice))
            .field(
                "resource_min_lod_clamp",
                &format_args!("{:?}", self.resource_min_lod_clamp),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2D_ARRAY_SRV {
    fn clone(&self) -> Self {
        Self {
            most_detailed_mip: self.most_detailed_mip,
            mip_levels: self.mip_levels,
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
            plane_slice: self.plane_slice,
            resource_min_lod_clamp: self.resource_min_lod_clamp,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2D_ARRAY_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.most_detailed_mip == other.most_detailed_mip
            && self.mip_levels == other.mip_levels
            && self.first_array_slice == other.first_array_slice
            && self.array_size == other.array_size
            && self.plane_slice == other.plane_slice
            && self.resource_min_lod_clamp == other.resource_min_lod_clamp
    }
}
impl ::std::cmp::Eq for D3D12_TEX2D_ARRAY_SRV {}
impl ::std::marker::Copy for D3D12_TEX2D_ARRAY_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2DMS_SRV {
    pub unused_field_nothing_to_define: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2DMS_SRV_abi(u32);
impl D3D12_TEX2DMS_SRV {}
unsafe impl ::windows::Abi for D3D12_TEX2DMS_SRV {
    type Abi = D3D12_TEX2DMS_SRV_abi;
}
impl ::std::default::Default for D3D12_TEX2DMS_SRV {
    fn default() -> Self {
        Self {
            unused_field_nothing_to_define: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2DMS_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2DMS_SRV")
            .field(
                "unused_field_nothing_to_define",
                &format_args!("{:?}", self.unused_field_nothing_to_define),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2DMS_SRV {
    fn clone(&self) -> Self {
        Self {
            unused_field_nothing_to_define: self.unused_field_nothing_to_define,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2DMS_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.unused_field_nothing_to_define == other.unused_field_nothing_to_define
    }
}
impl ::std::cmp::Eq for D3D12_TEX2DMS_SRV {}
impl ::std::marker::Copy for D3D12_TEX2DMS_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2DMS_ARRAY_SRV {
    pub first_array_slice: u32,
    pub array_size: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2DMS_ARRAY_SRV_abi(u32, u32);
impl D3D12_TEX2DMS_ARRAY_SRV {}
unsafe impl ::windows::Abi for D3D12_TEX2DMS_ARRAY_SRV {
    type Abi = D3D12_TEX2DMS_ARRAY_SRV_abi;
}
impl ::std::default::Default for D3D12_TEX2DMS_ARRAY_SRV {
    fn default() -> Self {
        Self {
            first_array_slice: 0,
            array_size: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2DMS_ARRAY_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2DMS_ARRAY_SRV")
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2DMS_ARRAY_SRV {
    fn clone(&self) -> Self {
        Self {
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2DMS_ARRAY_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.first_array_slice == other.first_array_slice && self.array_size == other.array_size
    }
}
impl ::std::cmp::Eq for D3D12_TEX2DMS_ARRAY_SRV {}
impl ::std::marker::Copy for D3D12_TEX2DMS_ARRAY_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX3D_SRV {
    pub most_detailed_mip: u32,
    pub mip_levels: u32,
    pub resource_min_lod_clamp: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX3D_SRV_abi(u32, u32, f32);
impl D3D12_TEX3D_SRV {}
unsafe impl ::windows::Abi for D3D12_TEX3D_SRV {
    type Abi = D3D12_TEX3D_SRV_abi;
}
impl ::std::default::Default for D3D12_TEX3D_SRV {
    fn default() -> Self {
        Self {
            most_detailed_mip: 0,
            mip_levels: 0,
            resource_min_lod_clamp: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX3D_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX3D_SRV")
            .field(
                "most_detailed_mip",
                &format_args!("{:?}", self.most_detailed_mip),
            )
            .field("mip_levels", &format_args!("{:?}", self.mip_levels))
            .field(
                "resource_min_lod_clamp",
                &format_args!("{:?}", self.resource_min_lod_clamp),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX3D_SRV {
    fn clone(&self) -> Self {
        Self {
            most_detailed_mip: self.most_detailed_mip,
            mip_levels: self.mip_levels,
            resource_min_lod_clamp: self.resource_min_lod_clamp,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX3D_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.most_detailed_mip == other.most_detailed_mip
            && self.mip_levels == other.mip_levels
            && self.resource_min_lod_clamp == other.resource_min_lod_clamp
    }
}
impl ::std::cmp::Eq for D3D12_TEX3D_SRV {}
impl ::std::marker::Copy for D3D12_TEX3D_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEXCUBE_SRV {
    pub most_detailed_mip: u32,
    pub mip_levels: u32,
    pub resource_min_lod_clamp: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEXCUBE_SRV_abi(u32, u32, f32);
impl D3D12_TEXCUBE_SRV {}
unsafe impl ::windows::Abi for D3D12_TEXCUBE_SRV {
    type Abi = D3D12_TEXCUBE_SRV_abi;
}
impl ::std::default::Default for D3D12_TEXCUBE_SRV {
    fn default() -> Self {
        Self {
            most_detailed_mip: 0,
            mip_levels: 0,
            resource_min_lod_clamp: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEXCUBE_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEXCUBE_SRV")
            .field(
                "most_detailed_mip",
                &format_args!("{:?}", self.most_detailed_mip),
            )
            .field("mip_levels", &format_args!("{:?}", self.mip_levels))
            .field(
                "resource_min_lod_clamp",
                &format_args!("{:?}", self.resource_min_lod_clamp),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEXCUBE_SRV {
    fn clone(&self) -> Self {
        Self {
            most_detailed_mip: self.most_detailed_mip,
            mip_levels: self.mip_levels,
            resource_min_lod_clamp: self.resource_min_lod_clamp,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEXCUBE_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.most_detailed_mip == other.most_detailed_mip
            && self.mip_levels == other.mip_levels
            && self.resource_min_lod_clamp == other.resource_min_lod_clamp
    }
}
impl ::std::cmp::Eq for D3D12_TEXCUBE_SRV {}
impl ::std::marker::Copy for D3D12_TEXCUBE_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEXCUBE_ARRAY_SRV {
    pub most_detailed_mip: u32,
    pub mip_levels: u32,
    pub first2d_array_face: u32,
    pub num_cubes: u32,
    pub resource_min_lod_clamp: f32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEXCUBE_ARRAY_SRV_abi(u32, u32, u32, u32, f32);
impl D3D12_TEXCUBE_ARRAY_SRV {}
unsafe impl ::windows::Abi for D3D12_TEXCUBE_ARRAY_SRV {
    type Abi = D3D12_TEXCUBE_ARRAY_SRV_abi;
}
impl ::std::default::Default for D3D12_TEXCUBE_ARRAY_SRV {
    fn default() -> Self {
        Self {
            most_detailed_mip: 0,
            mip_levels: 0,
            first2d_array_face: 0,
            num_cubes: 0,
            resource_min_lod_clamp: 0.0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEXCUBE_ARRAY_SRV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEXCUBE_ARRAY_SRV")
            .field(
                "most_detailed_mip",
                &format_args!("{:?}", self.most_detailed_mip),
            )
            .field("mip_levels", &format_args!("{:?}", self.mip_levels))
            .field(
                "first2d_array_face",
                &format_args!("{:?}", self.first2d_array_face),
            )
            .field("num_cubes", &format_args!("{:?}", self.num_cubes))
            .field(
                "resource_min_lod_clamp",
                &format_args!("{:?}", self.resource_min_lod_clamp),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEXCUBE_ARRAY_SRV {
    fn clone(&self) -> Self {
        Self {
            most_detailed_mip: self.most_detailed_mip,
            mip_levels: self.mip_levels,
            first2d_array_face: self.first2d_array_face,
            num_cubes: self.num_cubes,
            resource_min_lod_clamp: self.resource_min_lod_clamp,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEXCUBE_ARRAY_SRV {
    fn eq(&self, other: &Self) -> bool {
        self.most_detailed_mip == other.most_detailed_mip
            && self.mip_levels == other.mip_levels
            && self.first2d_array_face == other.first2d_array_face
            && self.num_cubes == other.num_cubes
            && self.resource_min_lod_clamp == other.resource_min_lod_clamp
    }
}
impl ::std::cmp::Eq for D3D12_TEXCUBE_ARRAY_SRV {}
impl ::std::marker::Copy for D3D12_TEXCUBE_ARRAY_SRV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SHADER_RESOURCE_VIEW_DESC {
    pub format: super::dxgi::DXGI_FORMAT,
    pub view_dimension: D3D12_SRV_DIMENSION,
    pub shader4_component_mapping: u32,
    pub anonymous: D3D12_SHADER_RESOURCE_VIEW_DESC_0,
}
impl D3D12_SHADER_RESOURCE_VIEW_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_SHADER_RESOURCE_VIEW_DESC_0 {
    pub buffer: D3D12_BUFFER_SRV,
    pub texture1d: D3D12_TEX1D_SRV,
    pub texture1d_array: D3D12_TEX1D_ARRAY_SRV,
    pub texture2d: D3D12_TEX2D_SRV,
    pub texture2d_array: D3D12_TEX2D_ARRAY_SRV,
    pub texture2dms: D3D12_TEX2DMS_SRV,
    pub texture2dms_array: D3D12_TEX2DMS_ARRAY_SRV,
    pub texture3d: D3D12_TEX3D_SRV,
    pub texture_cube: D3D12_TEXCUBE_SRV,
    pub texture_cube_array: D3D12_TEXCUBE_ARRAY_SRV,
    pub raytracing_acceleration_structure: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV,
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SHADER_TYPE_DESC {
    pub class: super::direct3d11::D3D_SHADER_VARIABLE_CLASS,
    pub r#type: super::direct3d11::D3D_SHADER_VARIABLE_TYPE,
    pub rows: u32,
    pub columns: u32,
    pub elements: u32,
    pub members: u32,
    pub offset: u32,
    pub name: *mut i8,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SHADER_TYPE_DESC_abi(
    super::direct3d11::D3D_SHADER_VARIABLE_CLASS,
    super::direct3d11::D3D_SHADER_VARIABLE_TYPE,
    u32,
    u32,
    u32,
    u32,
    u32,
    *mut i8,
);
impl D3D12_SHADER_TYPE_DESC {}
unsafe impl ::windows::Abi for D3D12_SHADER_TYPE_DESC {
    type Abi = D3D12_SHADER_TYPE_DESC_abi;
}
impl ::std::default::Default for D3D12_SHADER_TYPE_DESC {
    fn default() -> Self {
        Self {
            class: ::std::default::Default::default(),
            r#type: ::std::default::Default::default(),
            rows: 0,
            columns: 0,
            elements: 0,
            members: 0,
            offset: 0,
            name: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_TYPE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SHADER_TYPE_DESC")
            .field("class", &format_args!("{:?}", self.class))
            .field("type", &format_args!("{:?}", self.r#type))
            .field("rows", &format_args!("{:?}", self.rows))
            .field("columns", &format_args!("{:?}", self.columns))
            .field("elements", &format_args!("{:?}", self.elements))
            .field("members", &format_args!("{:?}", self.members))
            .field("offset", &format_args!("{:?}", self.offset))
            .field("name", &format_args!("{:?}", self.name))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SHADER_TYPE_DESC {
    fn clone(&self) -> Self {
        Self {
            class: self.class,
            r#type: self.r#type,
            rows: self.rows,
            columns: self.columns,
            elements: self.elements,
            members: self.members,
            offset: self.offset,
            name: self.name,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_TYPE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.class == other.class
            && self.r#type == other.r#type
            && self.rows == other.rows
            && self.columns == other.columns
            && self.elements == other.elements
            && self.members == other.members
            && self.offset == other.offset
            && self.name == other.name
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_TYPE_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SHADER_VARIABLE_DESC {
    pub name: *mut i8,
    pub start_offset: u32,
    pub size: u32,
    pub u_flags: u32,
    pub default_value: *mut ::std::ffi::c_void,
    pub start_texture: u32,
    pub texture_size: u32,
    pub start_sampler: u32,
    pub sampler_size: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SHADER_VARIABLE_DESC_abi(
    *mut i8,
    u32,
    u32,
    u32,
    *mut ::std::ffi::c_void,
    u32,
    u32,
    u32,
    u32,
);
impl D3D12_SHADER_VARIABLE_DESC {}
unsafe impl ::windows::Abi for D3D12_SHADER_VARIABLE_DESC {
    type Abi = D3D12_SHADER_VARIABLE_DESC_abi;
}
impl ::std::default::Default for D3D12_SHADER_VARIABLE_DESC {
    fn default() -> Self {
        Self {
            name: ::std::ptr::null_mut(),
            start_offset: 0,
            size: 0,
            u_flags: 0,
            default_value: ::std::ptr::null_mut(),
            start_texture: 0,
            texture_size: 0,
            start_sampler: 0,
            sampler_size: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_VARIABLE_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SHADER_VARIABLE_DESC")
            .field("name", &format_args!("{:?}", self.name))
            .field("start_offset", &format_args!("{:?}", self.start_offset))
            .field("size", &format_args!("{:?}", self.size))
            .field("u_flags", &format_args!("{:?}", self.u_flags))
            .field("default_value", &format_args!("{:?}", self.default_value))
            .field("start_texture", &format_args!("{:?}", self.start_texture))
            .field("texture_size", &format_args!("{:?}", self.texture_size))
            .field("start_sampler", &format_args!("{:?}", self.start_sampler))
            .field("sampler_size", &format_args!("{:?}", self.sampler_size))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SHADER_VARIABLE_DESC {
    fn clone(&self) -> Self {
        Self {
            name: self.name,
            start_offset: self.start_offset,
            size: self.size,
            u_flags: self.u_flags,
            default_value: <*mut ::std::ffi::c_void as std::clone::Clone>::clone(
                &self.default_value,
            ),
            start_texture: self.start_texture,
            texture_size: self.texture_size,
            start_sampler: self.start_sampler,
            sampler_size: self.sampler_size,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_VARIABLE_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.name == other.name
            && self.start_offset == other.start_offset
            && self.size == other.size
            && self.u_flags == other.u_flags
            && self.default_value == other.default_value
            && self.start_texture == other.start_texture
            && self.texture_size == other.texture_size
            && self.start_sampler == other.start_sampler
            && self.sampler_size == other.sampler_size
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_VARIABLE_DESC {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SHADER_VERSION_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_SHADER_VERSION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SHADER_VERSION_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SHADER_VERSION_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SHADER_VERSION_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADER_VERSION_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SHADER_VERSION_TYPE {}
impl ::std::marker::Copy for D3D12_SHADER_VERSION_TYPE {}
impl D3D12_SHADER_VERSION_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SHVER_PIXEL_SHADER: Self = Self(0i32);
    pub const D3D12_SHVER_VERTEX_SHADER: Self = Self(1i32);
    pub const D3D12_SHVER_GEOMETRY_SHADER: Self = Self(2i32);
    pub const D3D12_SHVER_HULL_SHADER: Self = Self(3i32);
    pub const D3D12_SHVER_DOMAIN_SHADER: Self = Self(4i32);
    pub const D3D12_SHVER_COMPUTE_SHADER: Self = Self(5i32);
    pub const D3D12_SHVER_RESERVED0: Self = Self(65520i32);
}
unsafe impl ::windows::Abi for D3D12_SHADER_VERSION_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SHADING_RATE(pub i32);
impl ::std::convert::From<i32> for D3D12_SHADING_RATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SHADING_RATE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SHADING_RATE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SHADING_RATE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADING_RATE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SHADING_RATE {}
impl ::std::marker::Copy for D3D12_SHADING_RATE {}
impl D3D12_SHADING_RATE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SHADING_RATE_1X1: Self = Self(0i32);
    pub const D3D12_SHADING_RATE_1X2: Self = Self(1i32);
    pub const D3D12_SHADING_RATE_2X1: Self = Self(4i32);
    pub const D3D12_SHADING_RATE_2X2: Self = Self(5i32);
    pub const D3D12_SHADING_RATE_2X4: Self = Self(6i32);
    pub const D3D12_SHADING_RATE_4X2: Self = Self(9i32);
    pub const D3D12_SHADING_RATE_4X4: Self = Self(10i32);
}
unsafe impl ::windows::Abi for D3D12_SHADING_RATE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_SHADING_RATE_COMBINER(pub i32);
impl ::std::convert::From<i32> for D3D12_SHADING_RATE_COMBINER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_SHADING_RATE_COMBINER {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_SHADING_RATE_COMBINER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_SHADING_RATE_COMBINER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_SHADING_RATE_COMBINER {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_SHADING_RATE_COMBINER {}
impl ::std::marker::Copy for D3D12_SHADING_RATE_COMBINER {}
impl D3D12_SHADING_RATE_COMBINER {
    #![allow(non_upper_case_globals)]
    pub const D3D12_SHADING_RATE_COMBINER_PASSTHROUGH: Self = Self(0i32);
    pub const D3D12_SHADING_RATE_COMBINER_OVERRIDE: Self = Self(1i32);
    pub const D3D12_SHADING_RATE_COMBINER_MIN: Self = Self(2i32);
    pub const D3D12_SHADING_RATE_COMBINER_MAX: Self = Self(3i32);
    pub const D3D12_SHADING_RATE_COMBINER_SUM: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_SHADING_RATE_COMBINER {
    type Abi = Self;
}
pub const D3D12_SHADING_RATE_VALID_MASK: u32 = 3u32;
pub const D3D12_SHADING_RATE_X_AXIS_SHIFT: u32 = 2u32;
pub const D3D12_SHIFT_INSTRUCTION_PAD_VALUE: u32 = 0u32;
pub const D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT: u32 = 5u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SIGNATURE_PARAMETER_DESC {
    pub semantic_name: *mut i8,
    pub semantic_index: u32,
    pub register: u32,
    pub system_value_type: super::direct3d11::D3D_NAME,
    pub component_type: super::direct3d11::D3D_REGISTER_COMPONENT_TYPE,
    pub mask: u8,
    pub read_write_mask: u8,
    pub stream: u32,
    pub min_precision: super::direct3d11::D3D_MIN_PRECISION,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SIGNATURE_PARAMETER_DESC_abi(
    *mut i8,
    u32,
    u32,
    super::direct3d11::D3D_NAME,
    super::direct3d11::D3D_REGISTER_COMPONENT_TYPE,
    u8,
    u8,
    u32,
    super::direct3d11::D3D_MIN_PRECISION,
);
impl D3D12_SIGNATURE_PARAMETER_DESC {}
unsafe impl ::windows::Abi for D3D12_SIGNATURE_PARAMETER_DESC {
    type Abi = D3D12_SIGNATURE_PARAMETER_DESC_abi;
}
impl ::std::default::Default for D3D12_SIGNATURE_PARAMETER_DESC {
    fn default() -> Self {
        Self {
            semantic_name: ::std::ptr::null_mut(),
            semantic_index: 0,
            register: 0,
            system_value_type: ::std::default::Default::default(),
            component_type: ::std::default::Default::default(),
            mask: 0,
            read_write_mask: 0,
            stream: 0,
            min_precision: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_SIGNATURE_PARAMETER_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SIGNATURE_PARAMETER_DESC")
            .field("semantic_name", &format_args!("{:?}", self.semantic_name))
            .field("semantic_index", &format_args!("{:?}", self.semantic_index))
            .field("register", &format_args!("{:?}", self.register))
            .field(
                "system_value_type",
                &format_args!("{:?}", self.system_value_type),
            )
            .field("component_type", &format_args!("{:?}", self.component_type))
            .field("mask", &format_args!("{:?}", self.mask))
            .field(
                "read_write_mask",
                &format_args!("{:?}", self.read_write_mask),
            )
            .field("stream", &format_args!("{:?}", self.stream))
            .field("min_precision", &format_args!("{:?}", self.min_precision))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SIGNATURE_PARAMETER_DESC {
    fn clone(&self) -> Self {
        Self {
            semantic_name: self.semantic_name,
            semantic_index: self.semantic_index,
            register: self.register,
            system_value_type: self.system_value_type,
            component_type: self.component_type,
            mask: self.mask,
            read_write_mask: self.read_write_mask,
            stream: self.stream,
            min_precision: self.min_precision,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SIGNATURE_PARAMETER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.semantic_name == other.semantic_name
            && self.semantic_index == other.semantic_index
            && self.register == other.register
            && self.system_value_type == other.system_value_type
            && self.component_type == other.component_type
            && self.mask == other.mask
            && self.read_write_mask == other.read_write_mask
            && self.stream == other.stream
            && self.min_precision == other.min_precision
    }
}
impl ::std::cmp::Eq for D3D12_SIGNATURE_PARAMETER_DESC {}
pub const D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT: u32 = 8u32;
pub const D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT: u32 = 65536u32;
pub const D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT: u32 = 4096u32;
pub const D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES: u32 = 2048u32;
pub const D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES: u32 = 512u32;
pub const D3D12_SO_BUFFER_SLOT_COUNT: u32 = 4u32;
pub const D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP: u32 = 4294967295u32;
pub const D3D12_SO_NO_RASTERIZED_STREAM: u32 = 4294967295u32;
pub const D3D12_SO_OUTPUT_COMPONENT_COUNT: u32 = 128u32;
pub const D3D12_SO_STREAM_COUNT: u32 = 4u32;
pub const D3D12_SPEC_DATE_DAY: u32 = 14u32;
pub const D3D12_SPEC_DATE_MONTH: u32 = 11u32;
pub const D3D12_SPEC_DATE_YEAR: u32 = 2014u32;
pub const D3D12_SPEC_VERSION: f32 = 1.16f32;
pub const D3D12_SRGB_GAMMA: f32 = 2.2f32;
pub const D3D12_SRGB_TO_FLOAT_DENOMINATOR_1: f32 = 12.92f32;
pub const D3D12_SRGB_TO_FLOAT_DENOMINATOR_2: f32 = 1.055f32;
pub const D3D12_SRGB_TO_FLOAT_EXPONENT: f32 = 2.4f32;
pub const D3D12_SRGB_TO_FLOAT_OFFSET: f32 = 0.055f32;
pub const D3D12_SRGB_TO_FLOAT_THRESHOLD: f32 = 0.04045f32;
pub const D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP: f32 = 0.5f32;
pub const D3D12_STANDARD_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED: u32 = 64u32;
pub const D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE: u32 = 4u32;
pub const D3D12_STANDARD_PIXEL_COMPONENT_COUNT: u32 = 128u32;
pub const D3D12_STANDARD_PIXEL_ELEMENT_COUNT: u32 = 32u32;
pub const D3D12_STANDARD_VECTOR_SIZE: u32 = 4u32;
pub const D3D12_STANDARD_VERTEX_ELEMENT_COUNT: u32 = 32u32;
pub const D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT: u32 = 64u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_STATE_OBJECT_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_STATE_OBJECT_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_STATE_OBJECT_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_STATE_OBJECT_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_STATE_OBJECT_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_STATE_OBJECT_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_STATE_OBJECT_FLAGS {}
impl ::std::marker::Copy for D3D12_STATE_OBJECT_FLAGS {}
impl D3D12_STATE_OBJECT_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_STATE_OBJECT_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS: Self =
        Self(1i32);
    pub const D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS: Self =
        Self(2i32);
    pub const D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS: Self = Self(4i32);
}
unsafe impl ::windows::Abi for D3D12_STATE_OBJECT_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_STATE_OBJECT_CONFIG {
    pub flags: D3D12_STATE_OBJECT_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_STATE_OBJECT_CONFIG_abi(D3D12_STATE_OBJECT_FLAGS);
impl D3D12_STATE_OBJECT_CONFIG {}
unsafe impl ::windows::Abi for D3D12_STATE_OBJECT_CONFIG {
    type Abi = D3D12_STATE_OBJECT_CONFIG_abi;
}
impl ::std::default::Default for D3D12_STATE_OBJECT_CONFIG {
    fn default() -> Self {
        Self {
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_STATE_OBJECT_CONFIG {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_STATE_OBJECT_CONFIG")
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_STATE_OBJECT_CONFIG {
    fn clone(&self) -> Self {
        Self { flags: self.flags }
    }
}
impl ::std::cmp::PartialEq for D3D12_STATE_OBJECT_CONFIG {
    fn eq(&self, other: &Self) -> bool {
        self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_STATE_OBJECT_CONFIG {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_STATE_OBJECT_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_STATE_OBJECT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_STATE_OBJECT_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_STATE_OBJECT_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_STATE_OBJECT_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_STATE_OBJECT_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_STATE_OBJECT_TYPE {}
impl ::std::marker::Copy for D3D12_STATE_OBJECT_TYPE {}
impl D3D12_STATE_OBJECT_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_STATE_OBJECT_TYPE_COLLECTION: Self = Self(0i32);
    pub const D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE: Self = Self(3i32);
}
unsafe impl ::windows::Abi for D3D12_STATE_OBJECT_TYPE {
    type Abi = Self;
}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_STATE_SUBOBJECT_TYPE(pub i32);
impl ::std::convert::From<i32> for D3D12_STATE_SUBOBJECT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_STATE_SUBOBJECT_TYPE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_STATE_SUBOBJECT_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_STATE_SUBOBJECT_TYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_STATE_SUBOBJECT_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_STATE_SUBOBJECT_TYPE {}
impl ::std::marker::Copy for D3D12_STATE_SUBOBJECT_TYPE {}
impl D3D12_STATE_SUBOBJECT_TYPE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG: Self = Self(0i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE: Self = Self(1i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE: Self = Self(2i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK: Self = Self(3i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY: Self = Self(5i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION: Self = Self(6i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION: Self = Self(7i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION: Self = Self(8i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG: Self = Self(9i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG: Self = Self(10i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP: Self = Self(11i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1: Self = Self(12i32);
    pub const D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID: Self = Self(13i32);
}
unsafe impl ::windows::Abi for D3D12_STATE_SUBOBJECT_TYPE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_STATE_SUBOBJECT {
    pub r#type: D3D12_STATE_SUBOBJECT_TYPE,
    pub p_desc: *mut ::std::ffi::c_void,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_STATE_SUBOBJECT_abi(D3D12_STATE_SUBOBJECT_TYPE, *mut ::std::ffi::c_void);
impl D3D12_STATE_SUBOBJECT {}
unsafe impl ::windows::Abi for D3D12_STATE_SUBOBJECT {
    type Abi = D3D12_STATE_SUBOBJECT_abi;
}
impl ::std::default::Default for D3D12_STATE_SUBOBJECT {
    fn default() -> Self {
        Self {
            r#type: ::std::default::Default::default(),
            p_desc: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_STATE_SUBOBJECT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_STATE_SUBOBJECT")
            .field("type", &format_args!("{:?}", self.r#type))
            .field("p_desc", &format_args!("{:?}", self.p_desc))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_STATE_SUBOBJECT {
    fn clone(&self) -> Self {
        Self {
            r#type: self.r#type,
            p_desc: <*mut ::std::ffi::c_void as std::clone::Clone>::clone(&self.p_desc),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_STATE_SUBOBJECT {
    fn eq(&self, other: &Self) -> bool {
        self.r#type == other.r#type && self.p_desc == other.p_desc
    }
}
impl ::std::cmp::Eq for D3D12_STATE_SUBOBJECT {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_STATE_OBJECT_DESC {
    pub r#type: D3D12_STATE_OBJECT_TYPE,
    pub num_subobjects: u32,
    pub p_subobjects: *mut D3D12_STATE_SUBOBJECT,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_STATE_OBJECT_DESC_abi(
    D3D12_STATE_OBJECT_TYPE,
    u32,
    *mut D3D12_STATE_SUBOBJECT_abi,
);
impl D3D12_STATE_OBJECT_DESC {}
unsafe impl ::windows::Abi for D3D12_STATE_OBJECT_DESC {
    type Abi = D3D12_STATE_OBJECT_DESC_abi;
}
impl ::std::default::Default for D3D12_STATE_OBJECT_DESC {
    fn default() -> Self {
        Self {
            r#type: ::std::default::Default::default(),
            num_subobjects: 0,
            p_subobjects: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_STATE_OBJECT_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_STATE_OBJECT_DESC")
            .field("type", &format_args!("{:?}", self.r#type))
            .field("num_subobjects", &format_args!("{:?}", self.num_subobjects))
            .field("p_subobjects", &format_args!("{:?}", self.p_subobjects))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_STATE_OBJECT_DESC {
    fn clone(&self) -> Self {
        Self {
            r#type: self.r#type,
            num_subobjects: self.num_subobjects,
            p_subobjects: <*mut D3D12_STATE_SUBOBJECT as std::clone::Clone>::clone(
                &self.p_subobjects,
            ),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_STATE_OBJECT_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.r#type == other.r#type
            && self.num_subobjects == other.num_subobjects
            && self.p_subobjects == other.p_subobjects
    }
}
impl ::std::cmp::Eq for D3D12_STATE_OBJECT_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    pub p_subobject_to_associate: *mut D3D12_STATE_SUBOBJECT,
    pub num_exports: u32,
    pub p_exports: *mut *mut u16,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_abi(
    *mut D3D12_STATE_SUBOBJECT_abi,
    u32,
    *mut *mut u16,
);
impl D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {}
unsafe impl ::windows::Abi for D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    type Abi = D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_abi;
}
impl ::std::default::Default for D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    fn default() -> Self {
        Self {
            p_subobject_to_associate: ::std::ptr::null_mut(),
            num_exports: 0,
            p_exports: ::std::ptr::null_mut(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION")
            .field(
                "p_subobject_to_associate",
                &format_args!("{:?}", self.p_subobject_to_associate),
            )
            .field("num_exports", &format_args!("{:?}", self.num_exports))
            .field("p_exports", &format_args!("{:?}", self.p_exports))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    fn clone(&self) -> Self {
        Self {
            p_subobject_to_associate: <*mut D3D12_STATE_SUBOBJECT as std::clone::Clone>::clone(
                &self.p_subobject_to_associate,
            ),
            num_exports: self.num_exports,
            p_exports: self.p_exports,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    fn eq(&self, other: &Self) -> bool {
        self.p_subobject_to_associate == other.p_subobject_to_associate
            && self.num_exports == other.num_exports
            && self.p_exports == other.p_exports
    }
}
impl ::std::cmp::Eq for D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {}
pub const D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT: u32 = 8u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SUBRESOURCE_DATA {
    pub p_data: *mut ::std::ffi::c_void,
    pub row_pitch: isize,
    pub slice_pitch: isize,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SUBRESOURCE_DATA_abi(*mut ::std::ffi::c_void, isize, isize);
impl D3D12_SUBRESOURCE_DATA {}
unsafe impl ::windows::Abi for D3D12_SUBRESOURCE_DATA {
    type Abi = D3D12_SUBRESOURCE_DATA_abi;
}
impl ::std::default::Default for D3D12_SUBRESOURCE_DATA {
    fn default() -> Self {
        Self {
            p_data: ::std::ptr::null_mut(),
            row_pitch: 0,
            slice_pitch: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SUBRESOURCE_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SUBRESOURCE_DATA")
            .field("p_data", &format_args!("{:?}", self.p_data))
            .field("row_pitch", &format_args!("{:?}", self.row_pitch))
            .field("slice_pitch", &format_args!("{:?}", self.slice_pitch))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SUBRESOURCE_DATA {
    fn clone(&self) -> Self {
        Self {
            p_data: <*mut ::std::ffi::c_void as std::clone::Clone>::clone(&self.p_data),
            row_pitch: self.row_pitch,
            slice_pitch: self.slice_pitch,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SUBRESOURCE_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.p_data == other.p_data
            && self.row_pitch == other.row_pitch
            && self.slice_pitch == other.slice_pitch
    }
}
impl ::std::cmp::Eq for D3D12_SUBRESOURCE_DATA {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SUBRESOURCE_INFO {
    pub offset: u64,
    pub row_pitch: u32,
    pub depth_pitch: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SUBRESOURCE_INFO_abi(u64, u32, u32);
impl D3D12_SUBRESOURCE_INFO {}
unsafe impl ::windows::Abi for D3D12_SUBRESOURCE_INFO {
    type Abi = D3D12_SUBRESOURCE_INFO_abi;
}
impl ::std::default::Default for D3D12_SUBRESOURCE_INFO {
    fn default() -> Self {
        Self {
            offset: 0,
            row_pitch: 0,
            depth_pitch: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SUBRESOURCE_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SUBRESOURCE_INFO")
            .field("offset", &format_args!("{:?}", self.offset))
            .field("row_pitch", &format_args!("{:?}", self.row_pitch))
            .field("depth_pitch", &format_args!("{:?}", self.depth_pitch))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SUBRESOURCE_INFO {
    fn clone(&self) -> Self {
        Self {
            offset: self.offset,
            row_pitch: self.row_pitch,
            depth_pitch: self.depth_pitch,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SUBRESOURCE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.offset == other.offset
            && self.row_pitch == other.row_pitch
            && self.depth_pitch == other.depth_pitch
    }
}
impl ::std::cmp::Eq for D3D12_SUBRESOURCE_INFO {}
impl ::std::marker::Copy for D3D12_SUBRESOURCE_INFO {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SUBRESOURCE_RANGE_UINT64 {
    pub subresource: u32,
    pub range: D3D12_RANGE_UINT64,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SUBRESOURCE_RANGE_UINT64_abi(u32, D3D12_RANGE_UINT64_abi);
impl D3D12_SUBRESOURCE_RANGE_UINT64 {}
unsafe impl ::windows::Abi for D3D12_SUBRESOURCE_RANGE_UINT64 {
    type Abi = D3D12_SUBRESOURCE_RANGE_UINT64_abi;
}
impl ::std::default::Default for D3D12_SUBRESOURCE_RANGE_UINT64 {
    fn default() -> Self {
        Self {
            subresource: 0,
            range: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_SUBRESOURCE_RANGE_UINT64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SUBRESOURCE_RANGE_UINT64")
            .field("subresource", &format_args!("{:?}", self.subresource))
            .field("range", &format_args!("{:?}", self.range))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SUBRESOURCE_RANGE_UINT64 {
    fn clone(&self) -> Self {
        Self {
            subresource: self.subresource,
            range: <D3D12_RANGE_UINT64 as std::clone::Clone>::clone(&self.range),
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SUBRESOURCE_RANGE_UINT64 {
    fn eq(&self, other: &Self) -> bool {
        self.subresource == other.subresource && self.range == other.range
    }
}
impl ::std::cmp::Eq for D3D12_SUBRESOURCE_RANGE_UINT64 {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_SUBRESOURCE_TILING {
    pub width_in_tiles: u32,
    pub height_in_tiles: u16,
    pub depth_in_tiles: u16,
    pub start_tile_index_in_overall_resource: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_SUBRESOURCE_TILING_abi(u32, u16, u16, u32);
impl D3D12_SUBRESOURCE_TILING {}
unsafe impl ::windows::Abi for D3D12_SUBRESOURCE_TILING {
    type Abi = D3D12_SUBRESOURCE_TILING_abi;
}
impl ::std::default::Default for D3D12_SUBRESOURCE_TILING {
    fn default() -> Self {
        Self {
            width_in_tiles: 0,
            height_in_tiles: 0,
            depth_in_tiles: 0,
            start_tile_index_in_overall_resource: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_SUBRESOURCE_TILING {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_SUBRESOURCE_TILING")
            .field("width_in_tiles", &format_args!("{:?}", self.width_in_tiles))
            .field(
                "height_in_tiles",
                &format_args!("{:?}", self.height_in_tiles),
            )
            .field("depth_in_tiles", &format_args!("{:?}", self.depth_in_tiles))
            .field(
                "start_tile_index_in_overall_resource",
                &format_args!("{:?}", self.start_tile_index_in_overall_resource),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_SUBRESOURCE_TILING {
    fn clone(&self) -> Self {
        Self {
            width_in_tiles: self.width_in_tiles,
            height_in_tiles: self.height_in_tiles,
            depth_in_tiles: self.depth_in_tiles,
            start_tile_index_in_overall_resource: self.start_tile_index_in_overall_resource,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_SUBRESOURCE_TILING {
    fn eq(&self, other: &Self) -> bool {
        self.width_in_tiles == other.width_in_tiles
            && self.height_in_tiles == other.height_in_tiles
            && self.depth_in_tiles == other.depth_in_tiles
            && self.start_tile_index_in_overall_resource
                == other.start_tile_index_in_overall_resource
    }
}
impl ::std::cmp::Eq for D3D12_SUBRESOURCE_TILING {}
impl ::std::marker::Copy for D3D12_SUBRESOURCE_TILING {}
pub const D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT: u32 = 8u32;
pub const D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END: u32 = 4294967295u32;
pub const D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START: u32 = 4294967280u32;
pub const D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR: u32 = 64u32;
pub const D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR: u32 = 64u32;
pub const D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR: u32 = 63u32;
pub const D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR: u32 = 64u32;
pub const D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR: u32 = 2u32;
pub const D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR: u32 = 1u32;
pub const D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR: u32 = 1u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX1D_ARRAY_UAV {
    pub mip_slice: u32,
    pub first_array_slice: u32,
    pub array_size: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX1D_ARRAY_UAV_abi(u32, u32, u32);
impl D3D12_TEX1D_ARRAY_UAV {}
unsafe impl ::windows::Abi for D3D12_TEX1D_ARRAY_UAV {
    type Abi = D3D12_TEX1D_ARRAY_UAV_abi;
}
impl ::std::default::Default for D3D12_TEX1D_ARRAY_UAV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            first_array_slice: 0,
            array_size: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX1D_ARRAY_UAV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX1D_ARRAY_UAV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX1D_ARRAY_UAV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX1D_ARRAY_UAV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
            && self.first_array_slice == other.first_array_slice
            && self.array_size == other.array_size
    }
}
impl ::std::cmp::Eq for D3D12_TEX1D_ARRAY_UAV {}
impl ::std::marker::Copy for D3D12_TEX1D_ARRAY_UAV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX1D_UAV {
    pub mip_slice: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX1D_UAV_abi(u32);
impl D3D12_TEX1D_UAV {}
unsafe impl ::windows::Abi for D3D12_TEX1D_UAV {
    type Abi = D3D12_TEX1D_UAV_abi;
}
impl ::std::default::Default for D3D12_TEX1D_UAV {
    fn default() -> Self {
        Self { mip_slice: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_TEX1D_UAV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX1D_UAV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX1D_UAV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX1D_UAV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
    }
}
impl ::std::cmp::Eq for D3D12_TEX1D_UAV {}
impl ::std::marker::Copy for D3D12_TEX1D_UAV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2D_ARRAY_UAV {
    pub mip_slice: u32,
    pub first_array_slice: u32,
    pub array_size: u32,
    pub plane_slice: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2D_ARRAY_UAV_abi(u32, u32, u32, u32);
impl D3D12_TEX2D_ARRAY_UAV {}
unsafe impl ::windows::Abi for D3D12_TEX2D_ARRAY_UAV {
    type Abi = D3D12_TEX2D_ARRAY_UAV_abi;
}
impl ::std::default::Default for D3D12_TEX2D_ARRAY_UAV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            first_array_slice: 0,
            array_size: 0,
            plane_slice: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2D_ARRAY_UAV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2D_ARRAY_UAV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field(
                "first_array_slice",
                &format_args!("{:?}", self.first_array_slice),
            )
            .field("array_size", &format_args!("{:?}", self.array_size))
            .field("plane_slice", &format_args!("{:?}", self.plane_slice))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2D_ARRAY_UAV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            first_array_slice: self.first_array_slice,
            array_size: self.array_size,
            plane_slice: self.plane_slice,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2D_ARRAY_UAV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
            && self.first_array_slice == other.first_array_slice
            && self.array_size == other.array_size
            && self.plane_slice == other.plane_slice
    }
}
impl ::std::cmp::Eq for D3D12_TEX2D_ARRAY_UAV {}
impl ::std::marker::Copy for D3D12_TEX2D_ARRAY_UAV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX2D_UAV {
    pub mip_slice: u32,
    pub plane_slice: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX2D_UAV_abi(u32, u32);
impl D3D12_TEX2D_UAV {}
unsafe impl ::windows::Abi for D3D12_TEX2D_UAV {
    type Abi = D3D12_TEX2D_UAV_abi;
}
impl ::std::default::Default for D3D12_TEX2D_UAV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            plane_slice: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX2D_UAV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX2D_UAV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field("plane_slice", &format_args!("{:?}", self.plane_slice))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX2D_UAV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            plane_slice: self.plane_slice,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX2D_UAV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice && self.plane_slice == other.plane_slice
    }
}
impl ::std::cmp::Eq for D3D12_TEX2D_UAV {}
impl ::std::marker::Copy for D3D12_TEX2D_UAV {}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TEX3D_UAV {
    pub mip_slice: u32,
    pub first_wslice: u32,
    pub wsize: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TEX3D_UAV_abi(u32, u32, u32);
impl D3D12_TEX3D_UAV {}
unsafe impl ::windows::Abi for D3D12_TEX3D_UAV {
    type Abi = D3D12_TEX3D_UAV_abi;
}
impl ::std::default::Default for D3D12_TEX3D_UAV {
    fn default() -> Self {
        Self {
            mip_slice: 0,
            first_wslice: 0,
            wsize: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TEX3D_UAV {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TEX3D_UAV")
            .field("mip_slice", &format_args!("{:?}", self.mip_slice))
            .field("first_wslice", &format_args!("{:?}", self.first_wslice))
            .field("wsize", &format_args!("{:?}", self.wsize))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TEX3D_UAV {
    fn clone(&self) -> Self {
        Self {
            mip_slice: self.mip_slice,
            first_wslice: self.first_wslice,
            wsize: self.wsize,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TEX3D_UAV {
    fn eq(&self, other: &Self) -> bool {
        self.mip_slice == other.mip_slice
            && self.first_wslice == other.first_wslice
            && self.wsize == other.wsize
    }
}
impl ::std::cmp::Eq for D3D12_TEX3D_UAV {}
impl ::std::marker::Copy for D3D12_TEX3D_UAV {}
pub const D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT: u32 = 16u32;
pub const D3D12_TEXTURE_DATA_PITCH_ALIGNMENT: u32 = 256u32;
pub const D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT: u32 = 512u32;
pub const D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES: u32 = 65536u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_TILE_SHAPE {
    pub width_in_texels: u32,
    pub height_in_texels: u32,
    pub depth_in_texels: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_TILE_SHAPE_abi(u32, u32, u32);
impl D3D12_TILE_SHAPE {}
unsafe impl ::windows::Abi for D3D12_TILE_SHAPE {
    type Abi = D3D12_TILE_SHAPE_abi;
}
impl ::std::default::Default for D3D12_TILE_SHAPE {
    fn default() -> Self {
        Self {
            width_in_texels: 0,
            height_in_texels: 0,
            depth_in_texels: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_TILE_SHAPE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_TILE_SHAPE")
            .field(
                "width_in_texels",
                &format_args!("{:?}", self.width_in_texels),
            )
            .field(
                "height_in_texels",
                &format_args!("{:?}", self.height_in_texels),
            )
            .field(
                "depth_in_texels",
                &format_args!("{:?}", self.depth_in_texels),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_TILE_SHAPE {
    fn clone(&self) -> Self {
        Self {
            width_in_texels: self.width_in_texels,
            height_in_texels: self.height_in_texels,
            depth_in_texels: self.depth_in_texels,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_TILE_SHAPE {
    fn eq(&self, other: &Self) -> bool {
        self.width_in_texels == other.width_in_texels
            && self.height_in_texels == other.height_in_texels
            && self.depth_in_texels == other.depth_in_texels
    }
}
impl ::std::cmp::Eq for D3D12_TILE_SHAPE {}
impl ::std::marker::Copy for D3D12_TILE_SHAPE {}
pub const D3D12_TRACKED_WORKLOAD_MAX_INSTANCES: u32 = 32u32;
pub const D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT: u32 = 4096u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_UAV_DIMENSION(pub i32);
impl ::std::convert::From<i32> for D3D12_UAV_DIMENSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_UAV_DIMENSION {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_UAV_DIMENSION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_UAV_DIMENSION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_UAV_DIMENSION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_UAV_DIMENSION {}
impl ::std::marker::Copy for D3D12_UAV_DIMENSION {}
impl D3D12_UAV_DIMENSION {
    #![allow(non_upper_case_globals)]
    pub const D3D12_UAV_DIMENSION_UNKNOWN: Self = Self(0i32);
    pub const D3D12_UAV_DIMENSION_BUFFER: Self = Self(1i32);
    pub const D3D12_UAV_DIMENSION_TEXTURE1D: Self = Self(2i32);
    pub const D3D12_UAV_DIMENSION_TEXTURE1DARRAY: Self = Self(3i32);
    pub const D3D12_UAV_DIMENSION_TEXTURE2D: Self = Self(4i32);
    pub const D3D12_UAV_DIMENSION_TEXTURE2DARRAY: Self = Self(5i32);
    pub const D3D12_UAV_DIMENSION_TEXTURE3D: Self = Self(8i32);
}
unsafe impl ::windows::Abi for D3D12_UAV_DIMENSION {
    type Abi = Self;
}
pub const D3D12_UAV_SLOT_COUNT: u32 = 64u32;
pub const D3D12_UNBOUND_MEMORY_ACCESS_RESULT: u32 = 0u32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_UNORDERED_ACCESS_VIEW_DESC {
    pub format: super::dxgi::DXGI_FORMAT,
    pub view_dimension: D3D12_UAV_DIMENSION,
    pub anonymous: D3D12_UNORDERED_ACCESS_VIEW_DESC_0,
}
impl D3D12_UNORDERED_ACCESS_VIEW_DESC {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_UNORDERED_ACCESS_VIEW_DESC_0 {
    pub buffer: D3D12_BUFFER_UAV,
    pub texture1d: D3D12_TEX1D_UAV,
    pub texture1d_array: D3D12_TEX1D_ARRAY_UAV,
    pub texture2d: D3D12_TEX2D_UAV,
    pub texture2d_array: D3D12_TEX2D_ARRAY_UAV,
    pub texture3d: D3D12_TEX3D_UAV,
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA {
    pub version: D3D12_DRED_VERSION,
    pub anonymous: D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA_0,
}
impl D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA {}
#[repr(C)]
#[allow(non_snake_case)]
pub union D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA_0 {
    pub dred_1_0: D3D12_DEVICE_REMOVED_EXTENDED_DATA,
    pub dred_1_1: D3D12_DEVICE_REMOVED_EXTENDED_DATA1,
    pub dred_1_2: D3D12_DEVICE_REMOVED_EXTENDED_DATA2,
}
pub const D3D12_VIDEO_DECODE_MAX_ARGUMENTS: u32 = 10u32;
pub const D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS: u32 = 4u32;
pub const D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT: u32 = 256u32;
pub const D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT: u32 = 256u32;
pub const D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN: u32 = 4294967295u32;
pub const D3D12_VIDEO_PROCESS_MAX_FILTERS: u32 = 32u32;
pub const D3D12_VIDEO_PROCESS_STEREO_VIEWS: u32 = 2u32;
pub const D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX: u32 = 15u32;
pub const D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE: u32 = 16u32;
pub const D3D12_VIEWPORT_BOUNDS_MAX: u32 = 32767u32;
pub const D3D12_VIEWPORT_BOUNDS_MIN: i32 = -32768i32;
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_VIEW_INSTANCE_LOCATION {
    pub viewport_array_index: u32,
    pub render_target_array_index: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_VIEW_INSTANCE_LOCATION_abi(u32, u32);
impl D3D12_VIEW_INSTANCE_LOCATION {}
unsafe impl ::windows::Abi for D3D12_VIEW_INSTANCE_LOCATION {
    type Abi = D3D12_VIEW_INSTANCE_LOCATION_abi;
}
impl ::std::default::Default for D3D12_VIEW_INSTANCE_LOCATION {
    fn default() -> Self {
        Self {
            viewport_array_index: 0,
            render_target_array_index: 0,
        }
    }
}
impl ::std::fmt::Debug for D3D12_VIEW_INSTANCE_LOCATION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_VIEW_INSTANCE_LOCATION")
            .field(
                "viewport_array_index",
                &format_args!("{:?}", self.viewport_array_index),
            )
            .field(
                "render_target_array_index",
                &format_args!("{:?}", self.render_target_array_index),
            )
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_VIEW_INSTANCE_LOCATION {
    fn clone(&self) -> Self {
        Self {
            viewport_array_index: self.viewport_array_index,
            render_target_array_index: self.render_target_array_index,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_VIEW_INSTANCE_LOCATION {
    fn eq(&self, other: &Self) -> bool {
        self.viewport_array_index == other.viewport_array_index
            && self.render_target_array_index == other.render_target_array_index
    }
}
impl ::std::cmp::Eq for D3D12_VIEW_INSTANCE_LOCATION {}
impl ::std::marker::Copy for D3D12_VIEW_INSTANCE_LOCATION {}
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_VIEW_INSTANCING_FLAGS(pub i32);
impl ::std::convert::From<i32> for D3D12_VIEW_INSTANCING_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_VIEW_INSTANCING_FLAGS {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_VIEW_INSTANCING_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_VIEW_INSTANCING_FLAGS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_VIEW_INSTANCING_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_VIEW_INSTANCING_FLAGS {}
impl ::std::marker::Copy for D3D12_VIEW_INSTANCING_FLAGS {}
impl D3D12_VIEW_INSTANCING_FLAGS {
    #![allow(non_upper_case_globals)]
    pub const D3D12_VIEW_INSTANCING_FLAG_NONE: Self = Self(0i32);
    pub const D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING: Self = Self(1i32);
}
unsafe impl ::windows::Abi for D3D12_VIEW_INSTANCING_FLAGS {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_VIEW_INSTANCING_DESC {
    pub view_instance_count: u32,
    pub p_view_instance_locations: *mut D3D12_VIEW_INSTANCE_LOCATION,
    pub flags: D3D12_VIEW_INSTANCING_FLAGS,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_VIEW_INSTANCING_DESC_abi(
    u32,
    *mut D3D12_VIEW_INSTANCE_LOCATION_abi,
    D3D12_VIEW_INSTANCING_FLAGS,
);
impl D3D12_VIEW_INSTANCING_DESC {}
unsafe impl ::windows::Abi for D3D12_VIEW_INSTANCING_DESC {
    type Abi = D3D12_VIEW_INSTANCING_DESC_abi;
}
impl ::std::default::Default for D3D12_VIEW_INSTANCING_DESC {
    fn default() -> Self {
        Self {
            view_instance_count: 0,
            p_view_instance_locations: ::std::ptr::null_mut(),
            flags: ::std::default::Default::default(),
        }
    }
}
impl ::std::fmt::Debug for D3D12_VIEW_INSTANCING_DESC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_VIEW_INSTANCING_DESC")
            .field(
                "view_instance_count",
                &format_args!("{:?}", self.view_instance_count),
            )
            .field(
                "p_view_instance_locations",
                &format_args!("{:?}", self.p_view_instance_locations),
            )
            .field("flags", &format_args!("{:?}", self.flags))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_VIEW_INSTANCING_DESC {
    fn clone(&self) -> Self {
        Self {
            view_instance_count: self.view_instance_count,
            p_view_instance_locations:
                <*mut D3D12_VIEW_INSTANCE_LOCATION as std::clone::Clone>::clone(
                    &self.p_view_instance_locations,
                ),
            flags: self.flags,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_VIEW_INSTANCING_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.view_instance_count == other.view_instance_count
            && self.p_view_instance_locations == other.p_view_instance_locations
            && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for D3D12_VIEW_INSTANCING_DESC {}
pub const D3D12_VS_INPUT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_VS_INPUT_REGISTER_COUNT: u32 = 32u32;
pub const D3D12_VS_INPUT_REGISTER_READS_PER_INST: u32 = 2u32;
pub const D3D12_VS_INPUT_REGISTER_READ_PORTS: u32 = 1u32;
pub const D3D12_VS_OUTPUT_REGISTER_COMPONENTS: u32 = 4u32;
pub const D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT: u32 = 32u32;
pub const D3D12_VS_OUTPUT_REGISTER_COUNT: u32 = 32u32;
pub const D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT: u32 = 10u32;
pub const D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP: u32 = 25u32;
pub const D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP: u32 = 25u32;
#[allow(non_camel_case_types)]
#[repr(transparent)]
pub struct D3D12_WRITEBUFFERIMMEDIATE_MODE(pub i32);
impl ::std::convert::From<i32> for D3D12_WRITEBUFFERIMMEDIATE_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
impl ::std::clone::Clone for D3D12_WRITEBUFFERIMMEDIATE_MODE {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}
impl ::std::default::Default for D3D12_WRITEBUFFERIMMEDIATE_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::std::fmt::Debug for D3D12_WRITEBUFFERIMMEDIATE_MODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for D3D12_WRITEBUFFERIMMEDIATE_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for D3D12_WRITEBUFFERIMMEDIATE_MODE {}
impl ::std::marker::Copy for D3D12_WRITEBUFFERIMMEDIATE_MODE {}
impl D3D12_WRITEBUFFERIMMEDIATE_MODE {
    #![allow(non_upper_case_globals)]
    pub const D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT: Self = Self(0i32);
    pub const D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN: Self = Self(1i32);
    pub const D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT: Self = Self(2i32);
}
unsafe impl ::windows::Abi for D3D12_WRITEBUFFERIMMEDIATE_MODE {
    type Abi = Self;
}
#[repr(C)]
#[allow(non_snake_case)]
pub struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {
    pub dest: u64,
    pub value: u32,
}
#[repr(C)]
#[doc(hidden)]
pub struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER_abi(u64, u32);
impl D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {}
unsafe impl ::windows::Abi for D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {
    type Abi = D3D12_WRITEBUFFERIMMEDIATE_PARAMETER_abi;
}
impl ::std::default::Default for D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {
    fn default() -> Self {
        Self { dest: 0, value: 0 }
    }
}
impl ::std::fmt::Debug for D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("D3D12_WRITEBUFFERIMMEDIATE_PARAMETER")
            .field("dest", &format_args!("{:?}", self.dest))
            .field("value", &format_args!("{:?}", self.value))
            .finish()
    }
}
impl ::std::clone::Clone for D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {
    fn clone(&self) -> Self {
        Self {
            dest: self.dest,
            value: self.value,
        }
    }
}
impl ::std::cmp::PartialEq for D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {
    fn eq(&self, other: &Self) -> bool {
        self.dest == other.dest && self.value == other.value
    }
}
impl ::std::cmp::Eq for D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {}
impl ::std::marker::Copy for D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D11On12Device(::windows::IUnknown);
impl ::std::clone::Clone for ID3D11On12Device {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D11On12Device {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D11On12Device {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D11On12Device {}
unsafe impl ::windows::Interface for ID3D11On12Device {
    type Vtable = ID3D11On12Device_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2237734515,
        28841,
        18702,
        [150, 20, 169, 227, 2, 119, 121, 4],
    );
}
#[repr(C)]
pub struct ID3D11On12Device_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource12: ::windows::RawPtr,
        p_flags11: *const D3D11_RESOURCE_FLAGS,
        in_state: D3D12_RESOURCE_STATES,
        out_state: D3D12_RESOURCE_STATES,
        riid: *const ::windows::Guid,
        pp_resource11: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_resources: ::windows::RawPtr,
        num_resources: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_resources: ::windows::RawPtr,
        num_resources: u32,
    ),
);
#[allow(non_snake_case)]
impl ID3D11On12Device {
    pub unsafe fn CreateWrappedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        p_resource12: T0__,
        p_flags11: *const D3D11_RESOURCE_FLAGS,
        in_state: D3D12_RESOURCE_STATES,
        out_state: D3D12_RESOURCE_STATES,
        riid: *const ::windows::Guid,
        pp_resource11: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(
            ::windows::Abi::abi(self),
            p_resource12.into().abi(),
            p_flags11,
            in_state,
            out_state,
            riid,
            pp_resource11,
        )
    }
    pub unsafe fn ReleaseWrappedResources<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, super::direct3d11::ID3D11Resource>>,
    >(
        &self,
        pp_resources: T0__,
        num_resources: u32,
    ) {
        (::windows::Interface::vtable(self).4)(
            ::windows::Abi::abi(self),
            pp_resources.into().abi(),
            num_resources,
        )
    }
    pub unsafe fn AcquireWrappedResources<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, super::direct3d11::ID3D11Resource>>,
    >(
        &self,
        pp_resources: T0__,
        num_resources: u32,
    ) {
        (::windows::Interface::vtable(self).5)(
            ::windows::Abi::abi(self),
            pp_resources.into().abi(),
            num_resources,
        )
    }
}
impl ::std::convert::From<ID3D11On12Device> for ::windows::IUnknown {
    fn from(value: ID3D11On12Device) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D11On12Device> for ::windows::IUnknown {
    fn from(value: &ID3D11On12Device) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D11On12Device {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D11On12Device {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D11On12Device1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D11On12Device1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D11On12Device1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D11On12Device1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D11On12Device1 {}
unsafe impl ::windows::Interface for ID3D11On12Device1 {
    type Vtable = ID3D11On12Device1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3182841332,
        59951,
        19568,
        [184, 97, 170, 171, 18, 88, 187, 93],
    );
}
#[repr(C)]
pub struct ID3D11On12Device1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource12: ::windows::RawPtr,
        p_flags11: *const D3D11_RESOURCE_FLAGS,
        in_state: D3D12_RESOURCE_STATES,
        out_state: D3D12_RESOURCE_STATES,
        riid: *const ::windows::Guid,
        pp_resource11: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_resources: ::windows::RawPtr,
        num_resources: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_resources: ::windows::RawPtr,
        num_resources: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D11On12Device1 {
    pub unsafe fn CreateWrappedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        p_resource12: T0__,
        p_flags11: *const D3D11_RESOURCE_FLAGS,
        in_state: D3D12_RESOURCE_STATES,
        out_state: D3D12_RESOURCE_STATES,
        riid: *const ::windows::Guid,
        pp_resource11: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(
            ::windows::Abi::abi(self),
            p_resource12.into().abi(),
            p_flags11,
            in_state,
            out_state,
            riid,
            pp_resource11,
        )
    }
    pub unsafe fn ReleaseWrappedResources<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, super::direct3d11::ID3D11Resource>>,
    >(
        &self,
        pp_resources: T0__,
        num_resources: u32,
    ) {
        (::windows::Interface::vtable(self).4)(
            ::windows::Abi::abi(self),
            pp_resources.into().abi(),
            num_resources,
        )
    }
    pub unsafe fn AcquireWrappedResources<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, super::direct3d11::ID3D11Resource>>,
    >(
        &self,
        pp_resources: T0__,
        num_resources: u32,
    ) {
        (::windows::Interface::vtable(self).5)(
            ::windows::Abi::abi(self),
            pp_resources.into().abi(),
            num_resources,
        )
    }
    pub unsafe fn GetD3D12Device(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), riid, ppv_device)
    }
}
impl ::std::convert::From<ID3D11On12Device1> for ::windows::IUnknown {
    fn from(value: ID3D11On12Device1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D11On12Device1> for ::windows::IUnknown {
    fn from(value: &ID3D11On12Device1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D11On12Device1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D11On12Device1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D11On12Device1> for ID3D11On12Device {
    fn from(value: ID3D11On12Device1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D11On12Device1> for ID3D11On12Device {
    fn from(value: &ID3D11On12Device1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D11On12Device>> for ID3D11On12Device1 {
    fn into(self) -> ::windows::Param<'a, ID3D11On12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D11On12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D11On12Device>> for &'a ID3D11On12Device1 {
    fn into(self) -> ::windows::Param<'a, ID3D11On12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D11On12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D11On12Device2(::windows::IUnknown);
impl ::std::clone::Clone for ID3D11On12Device2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D11On12Device2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D11On12Device2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D11On12Device2 {}
unsafe impl ::windows::Interface for ID3D11On12Device2 {
    type Vtable = ID3D11On12Device2_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3700486961,
        18240,
        17402,
        [134, 110, 103, 241, 44, 181, 130, 35],
    );
}
#[repr(C)]
pub struct ID3D11On12Device2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource12: ::windows::RawPtr,
        p_flags11: *const D3D11_RESOURCE_FLAGS,
        in_state: D3D12_RESOURCE_STATES,
        out_state: D3D12_RESOURCE_STATES,
        riid: *const ::windows::Guid,
        pp_resource11: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_resources: ::windows::RawPtr,
        num_resources: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_resources: ::windows::RawPtr,
        num_resources: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource11: ::windows::RawPtr,
        p_command_queue: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_resource12: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource11: ::windows::RawPtr,
        num_sync: u32,
        p_signal_values: *mut u64,
        pp_fences: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D11On12Device2 {
    pub unsafe fn CreateWrappedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        p_resource12: T0__,
        p_flags11: *const D3D11_RESOURCE_FLAGS,
        in_state: D3D12_RESOURCE_STATES,
        out_state: D3D12_RESOURCE_STATES,
        riid: *const ::windows::Guid,
        pp_resource11: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(
            ::windows::Abi::abi(self),
            p_resource12.into().abi(),
            p_flags11,
            in_state,
            out_state,
            riid,
            pp_resource11,
        )
    }
    pub unsafe fn ReleaseWrappedResources<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, super::direct3d11::ID3D11Resource>>,
    >(
        &self,
        pp_resources: T0__,
        num_resources: u32,
    ) {
        (::windows::Interface::vtable(self).4)(
            ::windows::Abi::abi(self),
            pp_resources.into().abi(),
            num_resources,
        )
    }
    pub unsafe fn AcquireWrappedResources<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, super::direct3d11::ID3D11Resource>>,
    >(
        &self,
        pp_resources: T0__,
        num_resources: u32,
    ) {
        (::windows::Interface::vtable(self).5)(
            ::windows::Abi::abi(self),
            pp_resources.into().abi(),
            num_resources,
        )
    }
    pub unsafe fn GetD3D12Device(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn UnwrapUnderlyingResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, super::direct3d11::ID3D11Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandQueue>>,
    >(
        &self,
        p_resource11: T0__,
        p_command_queue: T1__,
        riid: *const ::windows::Guid,
        ppv_resource12: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(
            ::windows::Abi::abi(self),
            p_resource11.into().abi(),
            p_command_queue.into().abi(),
            riid,
            ppv_resource12,
        )
    }
    pub unsafe fn ReturnUnderlyingResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, super::direct3d11::ID3D11Resource>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        p_resource11: T0__,
        num_sync: u32,
        p_signal_values: *mut u64,
        pp_fences: T3__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_resource11.into().abi(),
            num_sync,
            p_signal_values,
            pp_fences.into().abi(),
        )
    }
}
impl ::std::convert::From<ID3D11On12Device2> for ::windows::IUnknown {
    fn from(value: ID3D11On12Device2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D11On12Device2> for ::windows::IUnknown {
    fn from(value: &ID3D11On12Device2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D11On12Device2 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D11On12Device2 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D11On12Device2> for ID3D11On12Device1 {
    fn from(value: ID3D11On12Device2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D11On12Device2> for ID3D11On12Device1 {
    fn from(value: &ID3D11On12Device2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D11On12Device1>> for ID3D11On12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D11On12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D11On12Device1>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D11On12Device1>> for &'a ID3D11On12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D11On12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D11On12Device1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D11On12Device2> for ID3D11On12Device {
    fn from(value: ID3D11On12Device2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D11On12Device2> for ID3D11On12Device {
    fn from(value: &ID3D11On12Device2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D11On12Device>> for ID3D11On12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D11On12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D11On12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D11On12Device>> for &'a ID3D11On12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D11On12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D11On12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Debug(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Debug {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Debug {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Debug {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Debug {}
unsafe impl ::windows::Interface for ID3D12Debug {
    type Vtable = ID3D12Debug_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        876906679,
        26694,
        18251,
        [185, 137, 240, 39, 68, 130, 69, 224],
    );
}
#[repr(C)]
pub struct ID3D12Debug_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
);
#[allow(non_snake_case)]
impl ID3D12Debug {
    pub unsafe fn EnableDebugLayer(&self) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12Debug> for ::windows::IUnknown {
    fn from(value: ID3D12Debug) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Debug> for ::windows::IUnknown {
    fn from(value: &ID3D12Debug) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Debug {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Debug {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Debug1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Debug1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Debug1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Debug1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Debug1 {}
unsafe impl ::windows::Interface for ID3D12Debug1 {
    type Vtable = ID3D12Debug1_abi;
    const IID: ::windows::Guid =
        ::windows::Guid::from_values(2952438986, 25598, 19854, [184, 173, 21, 144, 0, 175, 67, 4]);
}
#[repr(C)]
pub struct ID3D12Debug1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enable: ::windows::BOOL),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enable: ::windows::BOOL),
);
#[allow(non_snake_case)]
impl ID3D12Debug1 {
    pub unsafe fn EnableDebugLayer(&self) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self))
    }
    pub unsafe fn SetEnableGPUBasedValidation(&self, enable: ::windows::BOOL) {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn SetEnableSynchronizedCommandQueueValidation(&self, enable: ::windows::BOOL) {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), enable)
    }
}
impl ::std::convert::From<ID3D12Debug1> for ::windows::IUnknown {
    fn from(value: ID3D12Debug1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Debug1> for ::windows::IUnknown {
    fn from(value: &ID3D12Debug1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Debug1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Debug1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Debug2(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Debug2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Debug2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Debug2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Debug2 {}
unsafe impl ::windows::Interface for ID3D12Debug2 {
    type Vtable = ID3D12Debug2_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2477155780,
        41906,
        20061,
        [182, 146, 162, 106, 225, 78, 51, 116],
    );
}
#[repr(C)]
pub struct ID3D12Debug2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, flags: D3D12_GPU_BASED_VALIDATION_FLAGS),
);
#[allow(non_snake_case)]
impl ID3D12Debug2 {
    pub unsafe fn SetGPUBasedValidationFlags(&self, flags: D3D12_GPU_BASED_VALIDATION_FLAGS) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), flags)
    }
}
impl ::std::convert::From<ID3D12Debug2> for ::windows::IUnknown {
    fn from(value: ID3D12Debug2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Debug2> for ::windows::IUnknown {
    fn from(value: &ID3D12Debug2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Debug2 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Debug2 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Debug3(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Debug3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Debug3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Debug3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Debug3 {}
unsafe impl ::windows::Interface for ID3D12Debug3 {
    type Vtable = ID3D12Debug3_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1559553423,
        63089,
        20465,
        [165, 66, 54, 134, 227, 209, 83, 209],
    );
}
#[repr(C)]
pub struct ID3D12Debug3_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enable: ::windows::BOOL),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enable: ::windows::BOOL),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, flags: D3D12_GPU_BASED_VALIDATION_FLAGS),
);
#[allow(non_snake_case)]
impl ID3D12Debug3 {
    pub unsafe fn EnableDebugLayer(&self) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self))
    }
    pub unsafe fn SetEnableGPUBasedValidation(&self, enable: ::windows::BOOL) {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn SetEnableSynchronizedCommandQueueValidation(&self, enable: ::windows::BOOL) {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn SetGPUBasedValidationFlags(&self, flags: D3D12_GPU_BASED_VALIDATION_FLAGS) {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), flags)
    }
}
impl ::std::convert::From<ID3D12Debug3> for ::windows::IUnknown {
    fn from(value: ID3D12Debug3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Debug3> for ::windows::IUnknown {
    fn from(value: &ID3D12Debug3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Debug3 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Debug3 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Debug3> for ID3D12Debug {
    fn from(value: ID3D12Debug3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Debug3> for ID3D12Debug {
    fn from(value: &ID3D12Debug3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Debug>> for ID3D12Debug3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Debug> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Debug>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Debug>> for &'a ID3D12Debug3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Debug> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Debug>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DebugCommandList(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DebugCommandList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DebugCommandList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DebugCommandList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DebugCommandList {}
unsafe impl ::windows::Interface for ID3D12DebugCommandList {
    type Vtable = ID3D12DebugCommandList_abi;
    const IID: ::windows::Guid =
        ::windows::Guid::from_values(165723958, 21676, 18511, [136, 71, 75, 174, 234, 182, 5, 63]);
}
#[repr(C)]
pub struct ID3D12DebugCommandList_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        subresource: u32,
        state: u32,
    ) -> ::windows::BOOL,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        mask: D3D12_DEBUG_FEATURE,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_DEBUG_FEATURE,
);
#[allow(non_snake_case)]
impl ID3D12DebugCommandList {
    pub unsafe fn AssertResourceState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        subresource: u32,
        state: u32,
    ) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).3)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            subresource,
            state,
        )
    }
    pub unsafe fn SetFeatureMask(&self, mask: D3D12_DEBUG_FEATURE) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), mask)
    }
    pub unsafe fn GetFeatureMask(&self) -> D3D12_DEBUG_FEATURE {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12DebugCommandList> for ::windows::IUnknown {
    fn from(value: ID3D12DebugCommandList) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DebugCommandList> for ::windows::IUnknown {
    fn from(value: &ID3D12DebugCommandList) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12DebugCommandList
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DebugCommandList
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DebugCommandList1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DebugCommandList1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DebugCommandList1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DebugCommandList1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DebugCommandList1 {}
unsafe impl ::windows::Interface for ID3D12DebugCommandList1 {
    type Vtable = ID3D12DebugCommandList1_abi;
    const IID: ::windows::Guid =
        ::windows::Guid::from_values(271362385, 12571, 19201, [177, 31, 236, 184, 62, 6, 27, 55]);
}
#[repr(C)]
pub struct ID3D12DebugCommandList1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        subresource: u32,
        state: u32,
    ) -> ::windows::BOOL,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE,
        p_data: *const ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE,
        p_data: *mut ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12DebugCommandList1 {
    pub unsafe fn AssertResourceState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        subresource: u32,
        state: u32,
    ) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).3)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            subresource,
            state,
        )
    }
    pub unsafe fn SetDebugParameter(
        &self,
        r#type: D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE,
        p_data: *const ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), r#type, p_data, data_size)
    }
    pub unsafe fn GetDebugParameter(
        &self,
        r#type: D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE,
        p_data: *mut ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), r#type, p_data, data_size)
    }
}
impl ::std::convert::From<ID3D12DebugCommandList1> for ::windows::IUnknown {
    fn from(value: ID3D12DebugCommandList1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DebugCommandList1> for ::windows::IUnknown {
    fn from(value: &ID3D12DebugCommandList1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12DebugCommandList1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DebugCommandList1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DebugCommandList2(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DebugCommandList2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DebugCommandList2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DebugCommandList2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DebugCommandList2 {}
unsafe impl ::windows::Interface for ID3D12DebugCommandList2 {
    type Vtable = ID3D12DebugCommandList2_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2931127759,
        19974,
        18622,
        [186, 59, 196, 80, 252, 150, 101, 46],
    );
}
#[repr(C)]
pub struct ID3D12DebugCommandList2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        subresource: u32,
        state: u32,
    ) -> ::windows::BOOL,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        mask: D3D12_DEBUG_FEATURE,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_DEBUG_FEATURE,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE,
        p_data: *const ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE,
        p_data: *mut ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12DebugCommandList2 {
    pub unsafe fn AssertResourceState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        subresource: u32,
        state: u32,
    ) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).3)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            subresource,
            state,
        )
    }
    pub unsafe fn SetFeatureMask(&self, mask: D3D12_DEBUG_FEATURE) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), mask)
    }
    pub unsafe fn GetFeatureMask(&self) -> D3D12_DEBUG_FEATURE {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self))
    }
    pub unsafe fn SetDebugParameter(
        &self,
        r#type: D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE,
        p_data: *const ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), r#type, p_data, data_size)
    }
    pub unsafe fn GetDebugParameter(
        &self,
        r#type: D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE,
        p_data: *mut ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), r#type, p_data, data_size)
    }
}
impl ::std::convert::From<ID3D12DebugCommandList2> for ::windows::IUnknown {
    fn from(value: ID3D12DebugCommandList2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DebugCommandList2> for ::windows::IUnknown {
    fn from(value: &ID3D12DebugCommandList2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12DebugCommandList2
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DebugCommandList2
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12DebugCommandList2> for ID3D12DebugCommandList {
    fn from(value: ID3D12DebugCommandList2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DebugCommandList2> for ID3D12DebugCommandList {
    fn from(value: &ID3D12DebugCommandList2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DebugCommandList>>
    for ID3D12DebugCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12DebugCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DebugCommandList>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DebugCommandList>>
    for &'a ID3D12DebugCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12DebugCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DebugCommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DebugCommandQueue(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DebugCommandQueue {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DebugCommandQueue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DebugCommandQueue {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DebugCommandQueue {}
unsafe impl ::windows::Interface for ID3D12DebugCommandQueue {
    type Vtable = ID3D12DebugCommandQueue_abi;
    const IID: ::windows::Guid =
        ::windows::Guid::from_values(165723958, 21676, 18511, [136, 71, 75, 174, 234, 182, 5, 58]);
}
#[repr(C)]
pub struct ID3D12DebugCommandQueue_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        subresource: u32,
        state: u32,
    ) -> ::windows::BOOL,
);
#[allow(non_snake_case)]
impl ID3D12DebugCommandQueue {
    pub unsafe fn AssertResourceState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        subresource: u32,
        state: u32,
    ) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).3)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            subresource,
            state,
        )
    }
}
impl ::std::convert::From<ID3D12DebugCommandQueue> for ::windows::IUnknown {
    fn from(value: ID3D12DebugCommandQueue) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DebugCommandQueue> for ::windows::IUnknown {
    fn from(value: &ID3D12DebugCommandQueue) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12DebugCommandQueue
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DebugCommandQueue
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DebugDevice(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DebugDevice {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DebugDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DebugDevice {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DebugDevice {}
unsafe impl ::windows::Interface for ID3D12DebugDevice {
    type Vtable = ID3D12DebugDevice_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1072420573,
        18803,
        18311,
        [129, 148, 228, 95, 158, 40, 146, 62],
    );
}
#[repr(C)]
pub struct ID3D12DebugDevice_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        mask: D3D12_DEBUG_FEATURE,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_DEBUG_FEATURE,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        flags: D3D12_RLDO_FLAGS,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12DebugDevice {
    pub unsafe fn SetFeatureMask(&self, mask: D3D12_DEBUG_FEATURE) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), mask)
    }
    pub unsafe fn GetFeatureMask(&self) -> D3D12_DEBUG_FEATURE {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self))
    }
    pub unsafe fn ReportLiveDeviceObjects(&self, flags: D3D12_RLDO_FLAGS) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), flags)
    }
}
impl ::std::convert::From<ID3D12DebugDevice> for ::windows::IUnknown {
    fn from(value: ID3D12DebugDevice) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DebugDevice> for ::windows::IUnknown {
    fn from(value: &ID3D12DebugDevice) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12DebugDevice {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12DebugDevice {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DebugDevice1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DebugDevice1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DebugDevice1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DebugDevice1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DebugDevice1 {}
unsafe impl ::windows::Interface for ID3D12DebugDevice1 {
    type Vtable = ID3D12DebugDevice1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2847348592,
        53401,
        19045,
        [166, 152, 61, 238, 16, 2, 15, 136],
    );
}
#[repr(C)]
pub struct ID3D12DebugDevice1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_DEBUG_DEVICE_PARAMETER_TYPE,
        p_data: *const ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_DEBUG_DEVICE_PARAMETER_TYPE,
        p_data: *mut ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        flags: D3D12_RLDO_FLAGS,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12DebugDevice1 {
    pub unsafe fn SetDebugParameter(
        &self,
        r#type: D3D12_DEBUG_DEVICE_PARAMETER_TYPE,
        p_data: *const ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), r#type, p_data, data_size)
    }
    pub unsafe fn GetDebugParameter(
        &self,
        r#type: D3D12_DEBUG_DEVICE_PARAMETER_TYPE,
        p_data: *mut ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), r#type, p_data, data_size)
    }
    pub unsafe fn ReportLiveDeviceObjects(&self, flags: D3D12_RLDO_FLAGS) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), flags)
    }
}
impl ::std::convert::From<ID3D12DebugDevice1> for ::windows::IUnknown {
    fn from(value: ID3D12DebugDevice1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DebugDevice1> for ::windows::IUnknown {
    fn from(value: &ID3D12DebugDevice1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12DebugDevice1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DebugDevice1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DebugDevice2(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DebugDevice2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DebugDevice2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DebugDevice2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DebugDevice2 {}
unsafe impl ::windows::Interface for ID3D12DebugDevice2 {
    type Vtable = ID3D12DebugDevice2_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1626131393,
        14221,
        19953,
        [137, 76, 248, 172, 92, 228, 215, 221],
    );
}
#[repr(C)]
pub struct ID3D12DebugDevice2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        mask: D3D12_DEBUG_FEATURE,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_DEBUG_FEATURE,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        flags: D3D12_RLDO_FLAGS,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_DEBUG_DEVICE_PARAMETER_TYPE,
        p_data: *const ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_DEBUG_DEVICE_PARAMETER_TYPE,
        p_data: *mut ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12DebugDevice2 {
    pub unsafe fn SetFeatureMask(&self, mask: D3D12_DEBUG_FEATURE) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), mask)
    }
    pub unsafe fn GetFeatureMask(&self) -> D3D12_DEBUG_FEATURE {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self))
    }
    pub unsafe fn ReportLiveDeviceObjects(&self, flags: D3D12_RLDO_FLAGS) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), flags)
    }
    pub unsafe fn SetDebugParameter(
        &self,
        r#type: D3D12_DEBUG_DEVICE_PARAMETER_TYPE,
        p_data: *const ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), r#type, p_data, data_size)
    }
    pub unsafe fn GetDebugParameter(
        &self,
        r#type: D3D12_DEBUG_DEVICE_PARAMETER_TYPE,
        p_data: *mut ::std::ffi::c_void,
        data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), r#type, p_data, data_size)
    }
}
impl ::std::convert::From<ID3D12DebugDevice2> for ::windows::IUnknown {
    fn from(value: ID3D12DebugDevice2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DebugDevice2> for ::windows::IUnknown {
    fn from(value: &ID3D12DebugDevice2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12DebugDevice2 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DebugDevice2
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12DebugDevice2> for ID3D12DebugDevice {
    fn from(value: ID3D12DebugDevice2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DebugDevice2> for ID3D12DebugDevice {
    fn from(value: &ID3D12DebugDevice2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DebugDevice>> for ID3D12DebugDevice2 {
    fn into(self) -> ::windows::Param<'a, ID3D12DebugDevice> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DebugDevice>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DebugDevice>> for &'a ID3D12DebugDevice2 {
    fn into(self) -> ::windows::Param<'a, ID3D12DebugDevice> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DebugDevice>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Device(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Device {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Device {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Device {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Device {}
unsafe impl ::windows::Interface for ID3D12Device {
    type Vtable = ID3D12Device_abi;
    const IID: ::windows::Guid =
        ::windows::Guid::from_values(412621297, 7606, 19287, [190, 84, 24, 33, 51, 155, 133, 247]);
}
#[repr(C)]
pub struct ID3D12Device_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_counter_resource: ::windows::RawPtr,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
);
#[allow(non_snake_case)]
impl ID3D12Device {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetNodeCount(&self) -> u32 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn CreateCommandQueue(
        &self,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_command_queue,
        )
    }
    pub unsafe fn CreateCommandAllocator(
        &self,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            r#type,
            riid,
            pp_command_allocator,
        )
    }
    pub unsafe fn CreateGraphicsPipelineState(
        &self,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateComputePipelineState(
        &self,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateCommandList<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: T2__,
        p_initial_state: T3__,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            p_command_allocator.into().abi(),
            p_initial_state.into().abi(),
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CheckFeatureSupport(
        &self,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            feature,
            p_feature_support_data,
            feature_support_data_size,
        )
    }
    pub unsafe fn CreateDescriptorHeap(
        &self,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_descriptor_heap_desc,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn GetDescriptorHandleIncrementSize(
        &self,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self), descriptor_heap_type)
    }
    pub unsafe fn CreateRootSignature(
        &self,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            node_mask,
            p_blob_with_root_signature,
            blob_length_in_bytes,
            riid,
            ppv_root_signature,
        )
    }
    pub unsafe fn CreateConstantBufferView(
        &self,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CreateShaderResourceView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_counter_resource: T1__,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_counter_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateRenderTargetView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateDepthStencilView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateSampler(
        &self,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CopyDescriptors(
        &self,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).23)(
            ::windows::Abi::abi(self),
            num_dest_descriptor_ranges,
            p_dest_descriptor_range_starts,
            p_dest_descriptor_range_sizes,
            num_src_descriptor_ranges,
            p_src_descriptor_range_starts,
            p_src_descriptor_range_sizes,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn CopyDescriptorsSimple(
        &self,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).24)(
            ::windows::Abi::abi(self),
            num_descriptors,
            dest_descriptor_range_start,
            src_descriptor_range_start,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn GetResourceAllocationInfo(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
        )
    }
    pub unsafe fn GetCustomHeapProperties(
        &self,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).26)(
            ::windows::Abi::abi(self),
            result__,
            node_mask,
            heap_type,
        )
    }
    pub unsafe fn CreateCommittedResource(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn CreatePlacedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateReservedResource(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSharedHandle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            p_object.into().abi(),
            p_attributes,
            access,
            name,
            p_handle,
        )
    }
    pub unsafe fn OpenSharedHandle(
        &self,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), nt_handle, riid, ppv_obj)
    }
    pub unsafe fn OpenSharedHandleByName(
        &self,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            name,
            access,
            p_nt_handle,
        )
    }
    pub unsafe fn MakeResident<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn Evict<'a, T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>>(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn CreateFence(
        &self,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            initial_value,
            flags,
            riid,
            pp_fence,
        )
    }
    pub unsafe fn GetDeviceRemovedReason(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetCopyableFootprints(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
    pub unsafe fn CreateQueryHeap(
        &self,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).39)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn SetStablePowerState(&self, enable: ::windows::BOOL) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).40)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn CreateCommandSignature<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: T1__,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            p_desc,
            p_root_signature.into().abi(),
            riid,
            ppv_command_signature,
        )
    }
    pub unsafe fn GetResourceTiling<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_num_tiles_for_entire_resource,
            p_packed_mip_desc,
            p_standard_tile_shape_for_non_packed_mips,
            p_num_subresource_tilings,
            first_subresource_tiling_to_get,
            p_subresource_tilings_for_non_packed_mips,
        )
    }
    pub unsafe fn GetAdapterLuid(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), result__)
    }
}
impl ::std::convert::From<ID3D12Device> for ::windows::IUnknown {
    fn from(value: ID3D12Device) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device> for ::windows::IUnknown {
    fn from(value: &ID3D12Device) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Device {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Device {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device> for ID3D12Object {
    fn from(value: ID3D12Device) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device> for ID3D12Object {
    fn from(value: &ID3D12Device) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Device {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Device {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Device1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Device1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Device1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Device1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Device1 {}
unsafe impl ::windows::Interface for ID3D12Device1 {
    type Vtable = ID3D12Device1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2007813760,
        25486,
        20069,
        [136, 149, 193, 242, 51, 134, 134, 62],
    );
}
#[repr(C)]
pub struct ID3D12Device1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_counter_resource: ::windows::RawPtr,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_fences: ::windows::RawPtr,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Device1 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetNodeCount(&self) -> u32 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn CreateCommandQueue(
        &self,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_command_queue,
        )
    }
    pub unsafe fn CreateCommandAllocator(
        &self,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            r#type,
            riid,
            pp_command_allocator,
        )
    }
    pub unsafe fn CreateGraphicsPipelineState(
        &self,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateComputePipelineState(
        &self,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateCommandList<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: T2__,
        p_initial_state: T3__,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            p_command_allocator.into().abi(),
            p_initial_state.into().abi(),
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CheckFeatureSupport(
        &self,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            feature,
            p_feature_support_data,
            feature_support_data_size,
        )
    }
    pub unsafe fn CreateDescriptorHeap(
        &self,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_descriptor_heap_desc,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn GetDescriptorHandleIncrementSize(
        &self,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self), descriptor_heap_type)
    }
    pub unsafe fn CreateRootSignature(
        &self,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            node_mask,
            p_blob_with_root_signature,
            blob_length_in_bytes,
            riid,
            ppv_root_signature,
        )
    }
    pub unsafe fn CreateConstantBufferView(
        &self,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CreateShaderResourceView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_counter_resource: T1__,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_counter_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateRenderTargetView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateDepthStencilView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateSampler(
        &self,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CopyDescriptors(
        &self,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).23)(
            ::windows::Abi::abi(self),
            num_dest_descriptor_ranges,
            p_dest_descriptor_range_starts,
            p_dest_descriptor_range_sizes,
            num_src_descriptor_ranges,
            p_src_descriptor_range_starts,
            p_src_descriptor_range_sizes,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn CopyDescriptorsSimple(
        &self,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).24)(
            ::windows::Abi::abi(self),
            num_descriptors,
            dest_descriptor_range_start,
            src_descriptor_range_start,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn GetResourceAllocationInfo(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
        )
    }
    pub unsafe fn GetCustomHeapProperties(
        &self,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).26)(
            ::windows::Abi::abi(self),
            result__,
            node_mask,
            heap_type,
        )
    }
    pub unsafe fn CreateCommittedResource(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn CreatePlacedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateReservedResource(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSharedHandle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            p_object.into().abi(),
            p_attributes,
            access,
            name,
            p_handle,
        )
    }
    pub unsafe fn OpenSharedHandle(
        &self,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), nt_handle, riid, ppv_obj)
    }
    pub unsafe fn OpenSharedHandleByName(
        &self,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            name,
            access,
            p_nt_handle,
        )
    }
    pub unsafe fn MakeResident<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn Evict<'a, T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>>(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn CreateFence(
        &self,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            initial_value,
            flags,
            riid,
            pp_fence,
        )
    }
    pub unsafe fn GetDeviceRemovedReason(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetCopyableFootprints(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
    pub unsafe fn CreateQueryHeap(
        &self,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).39)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn SetStablePowerState(&self, enable: ::windows::BOOL) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).40)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn CreateCommandSignature<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: T1__,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            p_desc,
            p_root_signature.into().abi(),
            riid,
            ppv_command_signature,
        )
    }
    pub unsafe fn GetResourceTiling<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_num_tiles_for_entire_resource,
            p_packed_mip_desc,
            p_standard_tile_shape_for_non_packed_mips,
            p_num_subresource_tilings,
            first_subresource_tiling_to_get,
            p_subresource_tilings_for_non_packed_mips,
        )
    }
    pub unsafe fn GetAdapterLuid(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn CreatePipelineLibrary(
        &self,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            p_library_blob,
            blob_length,
            riid,
            pp_pipeline_library,
        )
    }
    pub unsafe fn SetEventOnMultipleFenceCompletion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        pp_fences: T0__,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            pp_fences.into().abi(),
            p_fence_values,
            num_fences,
            flags,
            h_event,
        )
    }
    pub unsafe fn SetResidencyPriority<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
            p_priorities,
        )
    }
}
impl ::std::convert::From<ID3D12Device1> for ::windows::IUnknown {
    fn from(value: ID3D12Device1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device1> for ::windows::IUnknown {
    fn from(value: &ID3D12Device1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Device1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Device1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device1> for ID3D12Device {
    fn from(value: ID3D12Device1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device1> for ID3D12Device {
    fn from(value: &ID3D12Device1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for ID3D12Device1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for &'a ID3D12Device1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device1> for ID3D12Object {
    fn from(value: ID3D12Device1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device1> for ID3D12Object {
    fn from(value: &ID3D12Device1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Device1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Device1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Device2(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Device2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Device2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Device2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Device2 {}
unsafe impl ::windows::Interface for ID3D12Device2 {
    type Vtable = ID3D12Device2_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        817538078,
        45403,
        18268,
        [160, 187, 26, 245, 197, 182, 67, 40],
    );
}
#[repr(C)]
pub struct ID3D12Device2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_counter_resource: ::windows::RawPtr,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_fences: ::windows::RawPtr,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Device2 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetNodeCount(&self) -> u32 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn CreateCommandQueue(
        &self,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_command_queue,
        )
    }
    pub unsafe fn CreateCommandAllocator(
        &self,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            r#type,
            riid,
            pp_command_allocator,
        )
    }
    pub unsafe fn CreateGraphicsPipelineState(
        &self,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateComputePipelineState(
        &self,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateCommandList<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: T2__,
        p_initial_state: T3__,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            p_command_allocator.into().abi(),
            p_initial_state.into().abi(),
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CheckFeatureSupport(
        &self,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            feature,
            p_feature_support_data,
            feature_support_data_size,
        )
    }
    pub unsafe fn CreateDescriptorHeap(
        &self,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_descriptor_heap_desc,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn GetDescriptorHandleIncrementSize(
        &self,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self), descriptor_heap_type)
    }
    pub unsafe fn CreateRootSignature(
        &self,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            node_mask,
            p_blob_with_root_signature,
            blob_length_in_bytes,
            riid,
            ppv_root_signature,
        )
    }
    pub unsafe fn CreateConstantBufferView(
        &self,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CreateShaderResourceView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_counter_resource: T1__,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_counter_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateRenderTargetView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateDepthStencilView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateSampler(
        &self,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CopyDescriptors(
        &self,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).23)(
            ::windows::Abi::abi(self),
            num_dest_descriptor_ranges,
            p_dest_descriptor_range_starts,
            p_dest_descriptor_range_sizes,
            num_src_descriptor_ranges,
            p_src_descriptor_range_starts,
            p_src_descriptor_range_sizes,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn CopyDescriptorsSimple(
        &self,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).24)(
            ::windows::Abi::abi(self),
            num_descriptors,
            dest_descriptor_range_start,
            src_descriptor_range_start,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn GetResourceAllocationInfo(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
        )
    }
    pub unsafe fn GetCustomHeapProperties(
        &self,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).26)(
            ::windows::Abi::abi(self),
            result__,
            node_mask,
            heap_type,
        )
    }
    pub unsafe fn CreateCommittedResource(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn CreatePlacedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateReservedResource(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSharedHandle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            p_object.into().abi(),
            p_attributes,
            access,
            name,
            p_handle,
        )
    }
    pub unsafe fn OpenSharedHandle(
        &self,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), nt_handle, riid, ppv_obj)
    }
    pub unsafe fn OpenSharedHandleByName(
        &self,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            name,
            access,
            p_nt_handle,
        )
    }
    pub unsafe fn MakeResident<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn Evict<'a, T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>>(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn CreateFence(
        &self,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            initial_value,
            flags,
            riid,
            pp_fence,
        )
    }
    pub unsafe fn GetDeviceRemovedReason(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetCopyableFootprints(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
    pub unsafe fn CreateQueryHeap(
        &self,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).39)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn SetStablePowerState(&self, enable: ::windows::BOOL) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).40)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn CreateCommandSignature<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: T1__,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            p_desc,
            p_root_signature.into().abi(),
            riid,
            ppv_command_signature,
        )
    }
    pub unsafe fn GetResourceTiling<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_num_tiles_for_entire_resource,
            p_packed_mip_desc,
            p_standard_tile_shape_for_non_packed_mips,
            p_num_subresource_tilings,
            first_subresource_tiling_to_get,
            p_subresource_tilings_for_non_packed_mips,
        )
    }
    pub unsafe fn GetAdapterLuid(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn CreatePipelineLibrary(
        &self,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            p_library_blob,
            blob_length,
            riid,
            pp_pipeline_library,
        )
    }
    pub unsafe fn SetEventOnMultipleFenceCompletion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        pp_fences: T0__,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            pp_fences.into().abi(),
            p_fence_values,
            num_fences,
            flags,
            h_event,
        )
    }
    pub unsafe fn SetResidencyPriority<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
            p_priorities,
        )
    }
    pub unsafe fn CreatePipelineState(
        &self,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
}
impl ::std::convert::From<ID3D12Device2> for ::windows::IUnknown {
    fn from(value: ID3D12Device2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device2> for ::windows::IUnknown {
    fn from(value: &ID3D12Device2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Device2 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Device2 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device2> for ID3D12Device1 {
    fn from(value: ID3D12Device2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device2> for ID3D12Device1 {
    fn from(value: &ID3D12Device2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for ID3D12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for &'a ID3D12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device2> for ID3D12Device {
    fn from(value: ID3D12Device2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device2> for ID3D12Device {
    fn from(value: &ID3D12Device2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for ID3D12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for &'a ID3D12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device2> for ID3D12Object {
    fn from(value: ID3D12Device2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device2> for ID3D12Object {
    fn from(value: &ID3D12Device2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Device2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Device3(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Device3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Device3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Device3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Device3 {}
unsafe impl ::windows::Interface for ID3D12Device3 {
    type Vtable = ID3D12Device3_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2178604053,
        11181,
        17298,
        [147, 197, 16, 19, 69, 196, 170, 152],
    );
}
#[repr(C)]
pub struct ID3D12Device3_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_counter_resource: ::windows::RawPtr,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_fences: ::windows::RawPtr,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_fence_to_signal: ::windows::RawPtr,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Device3 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetNodeCount(&self) -> u32 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn CreateCommandQueue(
        &self,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_command_queue,
        )
    }
    pub unsafe fn CreateCommandAllocator(
        &self,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            r#type,
            riid,
            pp_command_allocator,
        )
    }
    pub unsafe fn CreateGraphicsPipelineState(
        &self,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateComputePipelineState(
        &self,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateCommandList<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: T2__,
        p_initial_state: T3__,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            p_command_allocator.into().abi(),
            p_initial_state.into().abi(),
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CheckFeatureSupport(
        &self,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            feature,
            p_feature_support_data,
            feature_support_data_size,
        )
    }
    pub unsafe fn CreateDescriptorHeap(
        &self,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_descriptor_heap_desc,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn GetDescriptorHandleIncrementSize(
        &self,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self), descriptor_heap_type)
    }
    pub unsafe fn CreateRootSignature(
        &self,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            node_mask,
            p_blob_with_root_signature,
            blob_length_in_bytes,
            riid,
            ppv_root_signature,
        )
    }
    pub unsafe fn CreateConstantBufferView(
        &self,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CreateShaderResourceView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_counter_resource: T1__,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_counter_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateRenderTargetView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateDepthStencilView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateSampler(
        &self,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CopyDescriptors(
        &self,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).23)(
            ::windows::Abi::abi(self),
            num_dest_descriptor_ranges,
            p_dest_descriptor_range_starts,
            p_dest_descriptor_range_sizes,
            num_src_descriptor_ranges,
            p_src_descriptor_range_starts,
            p_src_descriptor_range_sizes,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn CopyDescriptorsSimple(
        &self,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).24)(
            ::windows::Abi::abi(self),
            num_descriptors,
            dest_descriptor_range_start,
            src_descriptor_range_start,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn GetResourceAllocationInfo(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
        )
    }
    pub unsafe fn GetCustomHeapProperties(
        &self,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).26)(
            ::windows::Abi::abi(self),
            result__,
            node_mask,
            heap_type,
        )
    }
    pub unsafe fn CreateCommittedResource(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn CreatePlacedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateReservedResource(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSharedHandle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            p_object.into().abi(),
            p_attributes,
            access,
            name,
            p_handle,
        )
    }
    pub unsafe fn OpenSharedHandle(
        &self,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), nt_handle, riid, ppv_obj)
    }
    pub unsafe fn OpenSharedHandleByName(
        &self,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            name,
            access,
            p_nt_handle,
        )
    }
    pub unsafe fn MakeResident<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn Evict<'a, T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>>(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn CreateFence(
        &self,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            initial_value,
            flags,
            riid,
            pp_fence,
        )
    }
    pub unsafe fn GetDeviceRemovedReason(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetCopyableFootprints(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
    pub unsafe fn CreateQueryHeap(
        &self,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).39)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn SetStablePowerState(&self, enable: ::windows::BOOL) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).40)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn CreateCommandSignature<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: T1__,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            p_desc,
            p_root_signature.into().abi(),
            riid,
            ppv_command_signature,
        )
    }
    pub unsafe fn GetResourceTiling<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_num_tiles_for_entire_resource,
            p_packed_mip_desc,
            p_standard_tile_shape_for_non_packed_mips,
            p_num_subresource_tilings,
            first_subresource_tiling_to_get,
            p_subresource_tilings_for_non_packed_mips,
        )
    }
    pub unsafe fn GetAdapterLuid(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn CreatePipelineLibrary(
        &self,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            p_library_blob,
            blob_length,
            riid,
            pp_pipeline_library,
        )
    }
    pub unsafe fn SetEventOnMultipleFenceCompletion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        pp_fences: T0__,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            pp_fences.into().abi(),
            p_fence_values,
            num_fences,
            flags,
            h_event,
        )
    }
    pub unsafe fn SetResidencyPriority<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
            p_priorities,
        )
    }
    pub unsafe fn CreatePipelineState(
        &self,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn OpenExistingHeapFromAddress(
        &self,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            p_address,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn OpenExistingHeapFromFileMapping(
        &self,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            h_file_mapping,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn EnqueueMakeResident<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: T2__,
        p_fence_to_signal: T3__,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            flags,
            num_objects,
            pp_objects.into().abi(),
            p_fence_to_signal.into().abi(),
            fence_value_to_signal,
        )
    }
}
impl ::std::convert::From<ID3D12Device3> for ::windows::IUnknown {
    fn from(value: ID3D12Device3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device3> for ::windows::IUnknown {
    fn from(value: &ID3D12Device3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device3> for ID3D12Device2 {
    fn from(value: ID3D12Device3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device3> for ID3D12Device2 {
    fn from(value: &ID3D12Device3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for &'a ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device3> for ID3D12Device1 {
    fn from(value: ID3D12Device3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device3> for ID3D12Device1 {
    fn from(value: &ID3D12Device3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for &'a ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device3> for ID3D12Device {
    fn from(value: ID3D12Device3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device3> for ID3D12Device {
    fn from(value: &ID3D12Device3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for &'a ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device3> for ID3D12Object {
    fn from(value: ID3D12Device3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device3> for ID3D12Object {
    fn from(value: &ID3D12Device3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Device3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12ProtectedSession(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12ProtectedSession {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12ProtectedSession {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12ProtectedSession {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12ProtectedSession {}
unsafe impl ::windows::Interface for ID3D12ProtectedSession {
    type Vtable = ID3D12ProtectedSession_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2706586904,
        2753,
        16516,
        [133, 185, 137, 169, 97, 22, 128, 107],
    );
}
#[repr(C)]
pub struct ID3D12ProtectedSession_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_PROTECTED_SESSION_STATUS,
);
#[allow(non_snake_case)]
impl ID3D12ProtectedSession {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetStatusFence(
        &self,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), riid, pp_fence)
    }
    pub unsafe fn GetSessionStatus(&self) -> D3D12_PROTECTED_SESSION_STATUS {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12ProtectedSession> for ::windows::IUnknown {
    fn from(value: ID3D12ProtectedSession) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedSession> for ::windows::IUnknown {
    fn from(value: &ID3D12ProtectedSession) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12ProtectedSession
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12ProtectedSession
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12ProtectedSession> for ID3D12DeviceChild {
    fn from(value: ID3D12ProtectedSession) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedSession> for ID3D12DeviceChild {
    fn from(value: &ID3D12ProtectedSession) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12ProtectedSession {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12ProtectedSession
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12ProtectedSession> for ID3D12Object {
    fn from(value: ID3D12ProtectedSession) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedSession> for ID3D12Object {
    fn from(value: &ID3D12ProtectedSession) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12ProtectedSession {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12ProtectedSession {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12ProtectedResourceSession(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12ProtectedResourceSession {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12ProtectedResourceSession {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12ProtectedResourceSession {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12ProtectedResourceSession {}
unsafe impl ::windows::Interface for ID3D12ProtectedResourceSession {
    type Vtable = ID3D12ProtectedResourceSession_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1826002676,
        62089,
        16588,
        [128, 145, 90, 108, 10, 9, 156, 61],
    );
}
#[repr(C)]
pub struct ID3D12ProtectedResourceSession_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_PROTECTED_SESSION_STATUS,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_PROTECTED_RESOURCE_SESSION_DESC,
    ),
);
#[allow(non_snake_case)]
impl ID3D12ProtectedResourceSession {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetStatusFence(
        &self,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), riid, pp_fence)
    }
    pub unsafe fn GetSessionStatus(&self) -> D3D12_PROTECTED_SESSION_STATUS {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetDesc(&self, result__: *mut D3D12_PROTECTED_RESOURCE_SESSION_DESC) {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), result__)
    }
}
impl ::std::convert::From<ID3D12ProtectedResourceSession> for ::windows::IUnknown {
    fn from(value: ID3D12ProtectedResourceSession) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedResourceSession> for ::windows::IUnknown {
    fn from(value: &ID3D12ProtectedResourceSession) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12ProtectedResourceSession
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12ProtectedResourceSession
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12ProtectedResourceSession> for ID3D12ProtectedSession {
    fn from(value: ID3D12ProtectedResourceSession) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedResourceSession> for ID3D12ProtectedSession {
    fn from(value: &ID3D12ProtectedResourceSession) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedSession>>
    for ID3D12ProtectedResourceSession
{
    fn into(self) -> ::windows::Param<'a, ID3D12ProtectedSession> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12ProtectedSession>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedSession>>
    for &'a ID3D12ProtectedResourceSession
{
    fn into(self) -> ::windows::Param<'a, ID3D12ProtectedSession> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12ProtectedSession>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12ProtectedResourceSession> for ID3D12DeviceChild {
    fn from(value: ID3D12ProtectedResourceSession) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedResourceSession> for ID3D12DeviceChild {
    fn from(value: &ID3D12ProtectedResourceSession) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for ID3D12ProtectedResourceSession
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12ProtectedResourceSession
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12ProtectedResourceSession> for ID3D12Object {
    fn from(value: ID3D12ProtectedResourceSession) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedResourceSession> for ID3D12Object {
    fn from(value: &ID3D12ProtectedResourceSession) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for ID3D12ProtectedResourceSession
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for &'a ID3D12ProtectedResourceSession
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Device4(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Device4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Device4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Device4 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Device4 {}
unsafe impl ::windows::Interface for ID3D12Device4 {
    type Vtable = ID3D12Device4_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3898990359,
        43502,
        18169,
        [164, 99, 48, 152, 49, 90, 162, 229],
    );
}
#[repr(C)]
pub struct ID3D12Device4_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_counter_resource: ::windows::RawPtr,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_fences: ::windows::RawPtr,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_fence_to_signal: ::windows::RawPtr,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ),
);
#[allow(non_snake_case)]
impl ID3D12Device4 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetNodeCount(&self) -> u32 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn CreateCommandQueue(
        &self,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_command_queue,
        )
    }
    pub unsafe fn CreateCommandAllocator(
        &self,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            r#type,
            riid,
            pp_command_allocator,
        )
    }
    pub unsafe fn CreateGraphicsPipelineState(
        &self,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateComputePipelineState(
        &self,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateCommandList<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: T2__,
        p_initial_state: T3__,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            p_command_allocator.into().abi(),
            p_initial_state.into().abi(),
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CheckFeatureSupport(
        &self,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            feature,
            p_feature_support_data,
            feature_support_data_size,
        )
    }
    pub unsafe fn CreateDescriptorHeap(
        &self,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_descriptor_heap_desc,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn GetDescriptorHandleIncrementSize(
        &self,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self), descriptor_heap_type)
    }
    pub unsafe fn CreateRootSignature(
        &self,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            node_mask,
            p_blob_with_root_signature,
            blob_length_in_bytes,
            riid,
            ppv_root_signature,
        )
    }
    pub unsafe fn CreateConstantBufferView(
        &self,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CreateShaderResourceView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_counter_resource: T1__,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_counter_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateRenderTargetView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateDepthStencilView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateSampler(
        &self,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CopyDescriptors(
        &self,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).23)(
            ::windows::Abi::abi(self),
            num_dest_descriptor_ranges,
            p_dest_descriptor_range_starts,
            p_dest_descriptor_range_sizes,
            num_src_descriptor_ranges,
            p_src_descriptor_range_starts,
            p_src_descriptor_range_sizes,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn CopyDescriptorsSimple(
        &self,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).24)(
            ::windows::Abi::abi(self),
            num_descriptors,
            dest_descriptor_range_start,
            src_descriptor_range_start,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn GetResourceAllocationInfo(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
        )
    }
    pub unsafe fn GetCustomHeapProperties(
        &self,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).26)(
            ::windows::Abi::abi(self),
            result__,
            node_mask,
            heap_type,
        )
    }
    pub unsafe fn CreateCommittedResource(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn CreatePlacedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateReservedResource(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSharedHandle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            p_object.into().abi(),
            p_attributes,
            access,
            name,
            p_handle,
        )
    }
    pub unsafe fn OpenSharedHandle(
        &self,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), nt_handle, riid, ppv_obj)
    }
    pub unsafe fn OpenSharedHandleByName(
        &self,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            name,
            access,
            p_nt_handle,
        )
    }
    pub unsafe fn MakeResident<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn Evict<'a, T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>>(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn CreateFence(
        &self,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            initial_value,
            flags,
            riid,
            pp_fence,
        )
    }
    pub unsafe fn GetDeviceRemovedReason(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetCopyableFootprints(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
    pub unsafe fn CreateQueryHeap(
        &self,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).39)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn SetStablePowerState(&self, enable: ::windows::BOOL) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).40)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn CreateCommandSignature<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: T1__,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            p_desc,
            p_root_signature.into().abi(),
            riid,
            ppv_command_signature,
        )
    }
    pub unsafe fn GetResourceTiling<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_num_tiles_for_entire_resource,
            p_packed_mip_desc,
            p_standard_tile_shape_for_non_packed_mips,
            p_num_subresource_tilings,
            first_subresource_tiling_to_get,
            p_subresource_tilings_for_non_packed_mips,
        )
    }
    pub unsafe fn GetAdapterLuid(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn CreatePipelineLibrary(
        &self,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            p_library_blob,
            blob_length,
            riid,
            pp_pipeline_library,
        )
    }
    pub unsafe fn SetEventOnMultipleFenceCompletion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        pp_fences: T0__,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            pp_fences.into().abi(),
            p_fence_values,
            num_fences,
            flags,
            h_event,
        )
    }
    pub unsafe fn SetResidencyPriority<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
            p_priorities,
        )
    }
    pub unsafe fn CreatePipelineState(
        &self,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn OpenExistingHeapFromAddress(
        &self,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            p_address,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn OpenExistingHeapFromFileMapping(
        &self,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            h_file_mapping,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn EnqueueMakeResident<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: T2__,
        p_fence_to_signal: T3__,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            flags,
            num_objects,
            pp_objects.into().abi(),
            p_fence_to_signal.into().abi(),
            fence_value_to_signal,
        )
    }
    pub unsafe fn CreateCommandList1(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            flags,
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CreateProtectedResourceSession(
        &self,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).52)(::windows::Abi::abi(self), p_desc, riid, pp_session)
    }
    pub unsafe fn CreateCommittedResource1<
        'a,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T5__,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap1<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: T1__,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_desc,
            p_protected_session.into().abi(),
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn CreateReservedResource1<
        'a,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T3__,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn GetResourceAllocationInfo1(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ) {
        (::windows::Interface::vtable(self).56)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
            p_resource_allocation_info1,
        )
    }
}
impl ::std::convert::From<ID3D12Device4> for ::windows::IUnknown {
    fn from(value: ID3D12Device4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device4> for ::windows::IUnknown {
    fn from(value: &ID3D12Device4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device4> for ID3D12Device3 {
    fn from(value: ID3D12Device4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device4> for ID3D12Device3 {
    fn from(value: &ID3D12Device4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for &'a ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device4> for ID3D12Device2 {
    fn from(value: ID3D12Device4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device4> for ID3D12Device2 {
    fn from(value: &ID3D12Device4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for &'a ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device4> for ID3D12Device1 {
    fn from(value: ID3D12Device4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device4> for ID3D12Device1 {
    fn from(value: &ID3D12Device4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for &'a ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device4> for ID3D12Device {
    fn from(value: ID3D12Device4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device4> for ID3D12Device {
    fn from(value: &ID3D12Device4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for &'a ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device4> for ID3D12Object {
    fn from(value: ID3D12Device4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device4> for ID3D12Object {
    fn from(value: &ID3D12Device4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Device4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12LifetimeOwner(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12LifetimeOwner {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12LifetimeOwner {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12LifetimeOwner {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12LifetimeOwner {}
unsafe impl ::windows::Interface for ID3D12LifetimeOwner {
    type Vtable = ID3D12LifetimeOwner_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3865554847,
        52566,
        20294,
        [131, 206, 3, 46, 89, 93, 112, 168],
    );
}
#[repr(C)]
pub struct ID3D12LifetimeOwner_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, new_state: D3D12_LIFETIME_STATE),
);
#[allow(non_snake_case)]
impl ID3D12LifetimeOwner {
    pub unsafe fn LifetimeStateUpdated(&self, new_state: D3D12_LIFETIME_STATE) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), new_state)
    }
}
impl ::std::convert::From<ID3D12LifetimeOwner> for ::windows::IUnknown {
    fn from(value: ID3D12LifetimeOwner) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12LifetimeOwner> for ::windows::IUnknown {
    fn from(value: &ID3D12LifetimeOwner) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12LifetimeOwner {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12LifetimeOwner
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Device5(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Device5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Device5 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Device5 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Device5 {}
unsafe impl ::windows::Interface for ID3D12Device5 {
    type Vtable = ID3D12Device5_abi;
    const IID: ::windows::Guid =
        ::windows::Guid::from_values(2337216315, 12266, 19328, [143, 88, 67, 7, 25, 26, 185, 93]);
}
#[repr(C)]
pub struct ID3D12Device5_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_counter_resource: ::windows::RawPtr,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_fences: ::windows::RawPtr,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_fence_to_signal: ::windows::RawPtr,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_owner: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_tracker: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_num_meta_commands: *mut u32,
        p_descs: *mut D3D12_META_COMMAND_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        command_id: *const ::windows::Guid,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        p_total_structure_size_in_bytes: *mut u32,
        p_parameter_count: *mut u32,
        p_parameter_descs: *mut D3D12_META_COMMAND_PARAMETER_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        command_id: *const ::windows::Guid,
        node_mask: u32,
        p_creation_parameters_data: *const ::std::ffi::c_void,
        creation_parameters_data_size_in_bytes: usize,
        riid: *const ::windows::Guid,
        pp_meta_command: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_STATE_OBJECT_DESC,
        riid: *const ::windows::Guid,
        pp_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
        p_info: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        serialized_data_type: D3D12_SERIALIZED_DATA_TYPE,
        p_identifier_to_check: *const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    ) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS,
);
#[allow(non_snake_case)]
impl ID3D12Device5 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetNodeCount(&self) -> u32 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn CreateCommandQueue(
        &self,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_command_queue,
        )
    }
    pub unsafe fn CreateCommandAllocator(
        &self,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            r#type,
            riid,
            pp_command_allocator,
        )
    }
    pub unsafe fn CreateGraphicsPipelineState(
        &self,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateComputePipelineState(
        &self,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateCommandList<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: T2__,
        p_initial_state: T3__,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            p_command_allocator.into().abi(),
            p_initial_state.into().abi(),
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CheckFeatureSupport(
        &self,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            feature,
            p_feature_support_data,
            feature_support_data_size,
        )
    }
    pub unsafe fn CreateDescriptorHeap(
        &self,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_descriptor_heap_desc,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn GetDescriptorHandleIncrementSize(
        &self,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self), descriptor_heap_type)
    }
    pub unsafe fn CreateRootSignature(
        &self,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            node_mask,
            p_blob_with_root_signature,
            blob_length_in_bytes,
            riid,
            ppv_root_signature,
        )
    }
    pub unsafe fn CreateConstantBufferView(
        &self,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CreateShaderResourceView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_counter_resource: T1__,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_counter_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateRenderTargetView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateDepthStencilView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateSampler(
        &self,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CopyDescriptors(
        &self,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).23)(
            ::windows::Abi::abi(self),
            num_dest_descriptor_ranges,
            p_dest_descriptor_range_starts,
            p_dest_descriptor_range_sizes,
            num_src_descriptor_ranges,
            p_src_descriptor_range_starts,
            p_src_descriptor_range_sizes,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn CopyDescriptorsSimple(
        &self,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).24)(
            ::windows::Abi::abi(self),
            num_descriptors,
            dest_descriptor_range_start,
            src_descriptor_range_start,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn GetResourceAllocationInfo(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
        )
    }
    pub unsafe fn GetCustomHeapProperties(
        &self,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).26)(
            ::windows::Abi::abi(self),
            result__,
            node_mask,
            heap_type,
        )
    }
    pub unsafe fn CreateCommittedResource(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn CreatePlacedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateReservedResource(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSharedHandle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            p_object.into().abi(),
            p_attributes,
            access,
            name,
            p_handle,
        )
    }
    pub unsafe fn OpenSharedHandle(
        &self,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), nt_handle, riid, ppv_obj)
    }
    pub unsafe fn OpenSharedHandleByName(
        &self,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            name,
            access,
            p_nt_handle,
        )
    }
    pub unsafe fn MakeResident<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn Evict<'a, T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>>(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn CreateFence(
        &self,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            initial_value,
            flags,
            riid,
            pp_fence,
        )
    }
    pub unsafe fn GetDeviceRemovedReason(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetCopyableFootprints(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
    pub unsafe fn CreateQueryHeap(
        &self,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).39)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn SetStablePowerState(&self, enable: ::windows::BOOL) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).40)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn CreateCommandSignature<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: T1__,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            p_desc,
            p_root_signature.into().abi(),
            riid,
            ppv_command_signature,
        )
    }
    pub unsafe fn GetResourceTiling<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_num_tiles_for_entire_resource,
            p_packed_mip_desc,
            p_standard_tile_shape_for_non_packed_mips,
            p_num_subresource_tilings,
            first_subresource_tiling_to_get,
            p_subresource_tilings_for_non_packed_mips,
        )
    }
    pub unsafe fn GetAdapterLuid(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn CreatePipelineLibrary(
        &self,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            p_library_blob,
            blob_length,
            riid,
            pp_pipeline_library,
        )
    }
    pub unsafe fn SetEventOnMultipleFenceCompletion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        pp_fences: T0__,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            pp_fences.into().abi(),
            p_fence_values,
            num_fences,
            flags,
            h_event,
        )
    }
    pub unsafe fn SetResidencyPriority<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
            p_priorities,
        )
    }
    pub unsafe fn CreatePipelineState(
        &self,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn OpenExistingHeapFromAddress(
        &self,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            p_address,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn OpenExistingHeapFromFileMapping(
        &self,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            h_file_mapping,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn EnqueueMakeResident<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: T2__,
        p_fence_to_signal: T3__,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            flags,
            num_objects,
            pp_objects.into().abi(),
            p_fence_to_signal.into().abi(),
            fence_value_to_signal,
        )
    }
    pub unsafe fn CreateCommandList1(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            flags,
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CreateProtectedResourceSession(
        &self,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).52)(::windows::Abi::abi(self), p_desc, riid, pp_session)
    }
    pub unsafe fn CreateCommittedResource1<
        'a,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T5__,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap1<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: T1__,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_desc,
            p_protected_session.into().abi(),
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn CreateReservedResource1<
        'a,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T3__,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn GetResourceAllocationInfo1(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ) {
        (::windows::Interface::vtable(self).56)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
            p_resource_allocation_info1,
        )
    }
    pub unsafe fn CreateLifetimeTracker<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12LifetimeOwner>>,
    >(
        &self,
        p_owner: T0__,
        riid: *const ::windows::Guid,
        ppv_tracker: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).57)(
            ::windows::Abi::abi(self),
            p_owner.into().abi(),
            riid,
            ppv_tracker,
        )
    }
    pub unsafe fn RemoveDevice(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn EnumerateMetaCommands(
        &self,
        p_num_meta_commands: *mut u32,
        p_descs: *mut D3D12_META_COMMAND_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_num_meta_commands,
            p_descs,
        )
    }
    pub unsafe fn EnumerateMetaCommandParameters(
        &self,
        command_id: *const ::windows::Guid,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        p_total_structure_size_in_bytes: *mut u32,
        p_parameter_count: *mut u32,
        p_parameter_descs: *mut D3D12_META_COMMAND_PARAMETER_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            command_id,
            stage,
            p_total_structure_size_in_bytes,
            p_parameter_count,
            p_parameter_descs,
        )
    }
    pub unsafe fn CreateMetaCommand(
        &self,
        command_id: *const ::windows::Guid,
        node_mask: u32,
        p_creation_parameters_data: *const ::std::ffi::c_void,
        creation_parameters_data_size_in_bytes: usize,
        riid: *const ::windows::Guid,
        pp_meta_command: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            command_id,
            node_mask,
            p_creation_parameters_data,
            creation_parameters_data_size_in_bytes,
            riid,
            pp_meta_command,
        )
    }
    pub unsafe fn CreateStateObject(
        &self,
        p_desc: *const D3D12_STATE_OBJECT_DESC,
        riid: *const ::windows::Guid,
        pp_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).62)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_state_object,
        )
    }
    pub unsafe fn GetRaytracingAccelerationStructurePrebuildInfo(
        &self,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
        p_info: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO,
    ) {
        (::windows::Interface::vtable(self).63)(::windows::Abi::abi(self), p_desc, p_info)
    }
    pub unsafe fn CheckDriverMatchingIdentifier(
        &self,
        serialized_data_type: D3D12_SERIALIZED_DATA_TYPE,
        p_identifier_to_check: *const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    ) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            serialized_data_type,
            p_identifier_to_check,
        )
    }
}
impl ::std::convert::From<ID3D12Device5> for ::windows::IUnknown {
    fn from(value: ID3D12Device5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device5> for ::windows::IUnknown {
    fn from(value: &ID3D12Device5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device5> for ID3D12Device4 {
    fn from(value: ID3D12Device5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device5> for ID3D12Device4 {
    fn from(value: &ID3D12Device5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device4>> for ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device4>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device4>> for &'a ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device4>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device5> for ID3D12Device3 {
    fn from(value: ID3D12Device5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device5> for ID3D12Device3 {
    fn from(value: &ID3D12Device5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for &'a ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device5> for ID3D12Device2 {
    fn from(value: ID3D12Device5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device5> for ID3D12Device2 {
    fn from(value: &ID3D12Device5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for &'a ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device5> for ID3D12Device1 {
    fn from(value: ID3D12Device5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device5> for ID3D12Device1 {
    fn from(value: &ID3D12Device5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for &'a ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device5> for ID3D12Device {
    fn from(value: ID3D12Device5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device5> for ID3D12Device {
    fn from(value: &ID3D12Device5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for &'a ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device5> for ID3D12Object {
    fn from(value: ID3D12Device5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device5> for ID3D12Object {
    fn from(value: &ID3D12Device5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Device5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Device6(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Device6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Device6 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Device6 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Device6 {}
unsafe impl ::windows::Interface for ID3D12Device6 {
    type Vtable = ID3D12Device6_abi;
    const IID: ::windows::Guid =
        ::windows::Guid::from_values(3339395611, 16612, 18967, [137, 175, 2, 90, 7, 39, 166, 220]);
}
#[repr(C)]
pub struct ID3D12Device6_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_counter_resource: ::windows::RawPtr,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_fences: ::windows::RawPtr,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_fence_to_signal: ::windows::RawPtr,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_owner: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_tracker: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_num_meta_commands: *mut u32,
        p_descs: *mut D3D12_META_COMMAND_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        command_id: *const ::windows::Guid,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        p_total_structure_size_in_bytes: *mut u32,
        p_parameter_count: *mut u32,
        p_parameter_descs: *mut D3D12_META_COMMAND_PARAMETER_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        command_id: *const ::windows::Guid,
        node_mask: u32,
        p_creation_parameters_data: *const ::std::ffi::c_void,
        creation_parameters_data_size_in_bytes: usize,
        riid: *const ::windows::Guid,
        pp_meta_command: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_STATE_OBJECT_DESC,
        riid: *const ::windows::Guid,
        pp_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
        p_info: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        serialized_data_type: D3D12_SERIALIZED_DATA_TYPE,
        p_identifier_to_check: *const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    ) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        mode: D3D12_BACKGROUND_PROCESSING_MODE,
        measurements_action: D3D12_MEASUREMENTS_ACTION,
        h_event_to_signal_upon_completion: super::system_services::HANDLE,
        pb_further_measurements_desired: *mut i32,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Device6 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetNodeCount(&self) -> u32 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn CreateCommandQueue(
        &self,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_command_queue,
        )
    }
    pub unsafe fn CreateCommandAllocator(
        &self,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            r#type,
            riid,
            pp_command_allocator,
        )
    }
    pub unsafe fn CreateGraphicsPipelineState(
        &self,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateComputePipelineState(
        &self,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateCommandList<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: T2__,
        p_initial_state: T3__,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            p_command_allocator.into().abi(),
            p_initial_state.into().abi(),
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CheckFeatureSupport(
        &self,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            feature,
            p_feature_support_data,
            feature_support_data_size,
        )
    }
    pub unsafe fn CreateDescriptorHeap(
        &self,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_descriptor_heap_desc,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn GetDescriptorHandleIncrementSize(
        &self,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self), descriptor_heap_type)
    }
    pub unsafe fn CreateRootSignature(
        &self,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            node_mask,
            p_blob_with_root_signature,
            blob_length_in_bytes,
            riid,
            ppv_root_signature,
        )
    }
    pub unsafe fn CreateConstantBufferView(
        &self,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CreateShaderResourceView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_counter_resource: T1__,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_counter_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateRenderTargetView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateDepthStencilView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateSampler(
        &self,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CopyDescriptors(
        &self,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).23)(
            ::windows::Abi::abi(self),
            num_dest_descriptor_ranges,
            p_dest_descriptor_range_starts,
            p_dest_descriptor_range_sizes,
            num_src_descriptor_ranges,
            p_src_descriptor_range_starts,
            p_src_descriptor_range_sizes,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn CopyDescriptorsSimple(
        &self,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).24)(
            ::windows::Abi::abi(self),
            num_descriptors,
            dest_descriptor_range_start,
            src_descriptor_range_start,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn GetResourceAllocationInfo(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
        )
    }
    pub unsafe fn GetCustomHeapProperties(
        &self,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).26)(
            ::windows::Abi::abi(self),
            result__,
            node_mask,
            heap_type,
        )
    }
    pub unsafe fn CreateCommittedResource(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn CreatePlacedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateReservedResource(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSharedHandle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            p_object.into().abi(),
            p_attributes,
            access,
            name,
            p_handle,
        )
    }
    pub unsafe fn OpenSharedHandle(
        &self,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), nt_handle, riid, ppv_obj)
    }
    pub unsafe fn OpenSharedHandleByName(
        &self,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            name,
            access,
            p_nt_handle,
        )
    }
    pub unsafe fn MakeResident<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn Evict<'a, T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>>(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn CreateFence(
        &self,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            initial_value,
            flags,
            riid,
            pp_fence,
        )
    }
    pub unsafe fn GetDeviceRemovedReason(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetCopyableFootprints(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
    pub unsafe fn CreateQueryHeap(
        &self,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).39)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn SetStablePowerState(&self, enable: ::windows::BOOL) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).40)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn CreateCommandSignature<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: T1__,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            p_desc,
            p_root_signature.into().abi(),
            riid,
            ppv_command_signature,
        )
    }
    pub unsafe fn GetResourceTiling<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_num_tiles_for_entire_resource,
            p_packed_mip_desc,
            p_standard_tile_shape_for_non_packed_mips,
            p_num_subresource_tilings,
            first_subresource_tiling_to_get,
            p_subresource_tilings_for_non_packed_mips,
        )
    }
    pub unsafe fn GetAdapterLuid(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn CreatePipelineLibrary(
        &self,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            p_library_blob,
            blob_length,
            riid,
            pp_pipeline_library,
        )
    }
    pub unsafe fn SetEventOnMultipleFenceCompletion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        pp_fences: T0__,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            pp_fences.into().abi(),
            p_fence_values,
            num_fences,
            flags,
            h_event,
        )
    }
    pub unsafe fn SetResidencyPriority<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
            p_priorities,
        )
    }
    pub unsafe fn CreatePipelineState(
        &self,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn OpenExistingHeapFromAddress(
        &self,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            p_address,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn OpenExistingHeapFromFileMapping(
        &self,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            h_file_mapping,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn EnqueueMakeResident<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: T2__,
        p_fence_to_signal: T3__,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            flags,
            num_objects,
            pp_objects.into().abi(),
            p_fence_to_signal.into().abi(),
            fence_value_to_signal,
        )
    }
    pub unsafe fn CreateCommandList1(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            flags,
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CreateProtectedResourceSession(
        &self,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).52)(::windows::Abi::abi(self), p_desc, riid, pp_session)
    }
    pub unsafe fn CreateCommittedResource1<
        'a,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T5__,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap1<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: T1__,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_desc,
            p_protected_session.into().abi(),
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn CreateReservedResource1<
        'a,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T3__,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn GetResourceAllocationInfo1(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ) {
        (::windows::Interface::vtable(self).56)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
            p_resource_allocation_info1,
        )
    }
    pub unsafe fn CreateLifetimeTracker<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12LifetimeOwner>>,
    >(
        &self,
        p_owner: T0__,
        riid: *const ::windows::Guid,
        ppv_tracker: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).57)(
            ::windows::Abi::abi(self),
            p_owner.into().abi(),
            riid,
            ppv_tracker,
        )
    }
    pub unsafe fn RemoveDevice(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn EnumerateMetaCommands(
        &self,
        p_num_meta_commands: *mut u32,
        p_descs: *mut D3D12_META_COMMAND_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_num_meta_commands,
            p_descs,
        )
    }
    pub unsafe fn EnumerateMetaCommandParameters(
        &self,
        command_id: *const ::windows::Guid,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        p_total_structure_size_in_bytes: *mut u32,
        p_parameter_count: *mut u32,
        p_parameter_descs: *mut D3D12_META_COMMAND_PARAMETER_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            command_id,
            stage,
            p_total_structure_size_in_bytes,
            p_parameter_count,
            p_parameter_descs,
        )
    }
    pub unsafe fn CreateMetaCommand(
        &self,
        command_id: *const ::windows::Guid,
        node_mask: u32,
        p_creation_parameters_data: *const ::std::ffi::c_void,
        creation_parameters_data_size_in_bytes: usize,
        riid: *const ::windows::Guid,
        pp_meta_command: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            command_id,
            node_mask,
            p_creation_parameters_data,
            creation_parameters_data_size_in_bytes,
            riid,
            pp_meta_command,
        )
    }
    pub unsafe fn CreateStateObject(
        &self,
        p_desc: *const D3D12_STATE_OBJECT_DESC,
        riid: *const ::windows::Guid,
        pp_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).62)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_state_object,
        )
    }
    pub unsafe fn GetRaytracingAccelerationStructurePrebuildInfo(
        &self,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
        p_info: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO,
    ) {
        (::windows::Interface::vtable(self).63)(::windows::Abi::abi(self), p_desc, p_info)
    }
    pub unsafe fn CheckDriverMatchingIdentifier(
        &self,
        serialized_data_type: D3D12_SERIALIZED_DATA_TYPE,
        p_identifier_to_check: *const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    ) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            serialized_data_type,
            p_identifier_to_check,
        )
    }
    pub unsafe fn SetBackgroundProcessingMode(
        &self,
        mode: D3D12_BACKGROUND_PROCESSING_MODE,
        measurements_action: D3D12_MEASUREMENTS_ACTION,
        h_event_to_signal_upon_completion: super::system_services::HANDLE,
        pb_further_measurements_desired: *mut i32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).65)(
            ::windows::Abi::abi(self),
            mode,
            measurements_action,
            h_event_to_signal_upon_completion,
            pb_further_measurements_desired,
        )
    }
}
impl ::std::convert::From<ID3D12Device6> for ::windows::IUnknown {
    fn from(value: ID3D12Device6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device6> for ::windows::IUnknown {
    fn from(value: &ID3D12Device6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device6> for ID3D12Device5 {
    fn from(value: ID3D12Device6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device6> for ID3D12Device5 {
    fn from(value: &ID3D12Device6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device5>> for ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device5> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device5>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device5>> for &'a ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device5> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device5>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device6> for ID3D12Device4 {
    fn from(value: ID3D12Device6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device6> for ID3D12Device4 {
    fn from(value: &ID3D12Device6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device4>> for ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device4>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device4>> for &'a ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device4>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device6> for ID3D12Device3 {
    fn from(value: ID3D12Device6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device6> for ID3D12Device3 {
    fn from(value: &ID3D12Device6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for &'a ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device6> for ID3D12Device2 {
    fn from(value: ID3D12Device6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device6> for ID3D12Device2 {
    fn from(value: &ID3D12Device6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for &'a ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device6> for ID3D12Device1 {
    fn from(value: ID3D12Device6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device6> for ID3D12Device1 {
    fn from(value: &ID3D12Device6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for &'a ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device6> for ID3D12Device {
    fn from(value: ID3D12Device6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device6> for ID3D12Device {
    fn from(value: &ID3D12Device6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for &'a ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device6> for ID3D12Object {
    fn from(value: ID3D12Device6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device6> for ID3D12Object {
    fn from(value: &ID3D12Device6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Device6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Device7(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Device7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Device7 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Device7 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Device7 {}
unsafe impl ::windows::Interface for ID3D12Device7 {
    type Vtable = ID3D12Device7_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1543588691,
        26785,
        19355,
        [139, 209, 221, 96, 70, 185, 53, 139],
    );
}
#[repr(C)]
pub struct ID3D12Device7_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_counter_resource: ::windows::RawPtr,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_fences: ::windows::RawPtr,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_fence_to_signal: ::windows::RawPtr,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_owner: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_tracker: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_num_meta_commands: *mut u32,
        p_descs: *mut D3D12_META_COMMAND_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        command_id: *const ::windows::Guid,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        p_total_structure_size_in_bytes: *mut u32,
        p_parameter_count: *mut u32,
        p_parameter_descs: *mut D3D12_META_COMMAND_PARAMETER_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        command_id: *const ::windows::Guid,
        node_mask: u32,
        p_creation_parameters_data: *const ::std::ffi::c_void,
        creation_parameters_data_size_in_bytes: usize,
        riid: *const ::windows::Guid,
        pp_meta_command: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_STATE_OBJECT_DESC,
        riid: *const ::windows::Guid,
        pp_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
        p_info: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        serialized_data_type: D3D12_SERIALIZED_DATA_TYPE,
        p_identifier_to_check: *const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    ) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        mode: D3D12_BACKGROUND_PROCESSING_MODE,
        measurements_action: D3D12_MEASUREMENTS_ACTION,
        h_event_to_signal_upon_completion: super::system_services::HANDLE,
        pb_further_measurements_desired: *mut i32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_addition: *const D3D12_STATE_OBJECT_DESC,
        p_state_object_to_grow_from: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_new_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC1,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Device7 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetNodeCount(&self) -> u32 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn CreateCommandQueue(
        &self,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_command_queue,
        )
    }
    pub unsafe fn CreateCommandAllocator(
        &self,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            r#type,
            riid,
            pp_command_allocator,
        )
    }
    pub unsafe fn CreateGraphicsPipelineState(
        &self,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateComputePipelineState(
        &self,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateCommandList<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: T2__,
        p_initial_state: T3__,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            p_command_allocator.into().abi(),
            p_initial_state.into().abi(),
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CheckFeatureSupport(
        &self,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            feature,
            p_feature_support_data,
            feature_support_data_size,
        )
    }
    pub unsafe fn CreateDescriptorHeap(
        &self,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_descriptor_heap_desc,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn GetDescriptorHandleIncrementSize(
        &self,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self), descriptor_heap_type)
    }
    pub unsafe fn CreateRootSignature(
        &self,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            node_mask,
            p_blob_with_root_signature,
            blob_length_in_bytes,
            riid,
            ppv_root_signature,
        )
    }
    pub unsafe fn CreateConstantBufferView(
        &self,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CreateShaderResourceView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_counter_resource: T1__,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_counter_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateRenderTargetView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateDepthStencilView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateSampler(
        &self,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CopyDescriptors(
        &self,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).23)(
            ::windows::Abi::abi(self),
            num_dest_descriptor_ranges,
            p_dest_descriptor_range_starts,
            p_dest_descriptor_range_sizes,
            num_src_descriptor_ranges,
            p_src_descriptor_range_starts,
            p_src_descriptor_range_sizes,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn CopyDescriptorsSimple(
        &self,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).24)(
            ::windows::Abi::abi(self),
            num_descriptors,
            dest_descriptor_range_start,
            src_descriptor_range_start,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn GetResourceAllocationInfo(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
        )
    }
    pub unsafe fn GetCustomHeapProperties(
        &self,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).26)(
            ::windows::Abi::abi(self),
            result__,
            node_mask,
            heap_type,
        )
    }
    pub unsafe fn CreateCommittedResource(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn CreatePlacedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateReservedResource(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSharedHandle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            p_object.into().abi(),
            p_attributes,
            access,
            name,
            p_handle,
        )
    }
    pub unsafe fn OpenSharedHandle(
        &self,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), nt_handle, riid, ppv_obj)
    }
    pub unsafe fn OpenSharedHandleByName(
        &self,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            name,
            access,
            p_nt_handle,
        )
    }
    pub unsafe fn MakeResident<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn Evict<'a, T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>>(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn CreateFence(
        &self,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            initial_value,
            flags,
            riid,
            pp_fence,
        )
    }
    pub unsafe fn GetDeviceRemovedReason(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetCopyableFootprints(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
    pub unsafe fn CreateQueryHeap(
        &self,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).39)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn SetStablePowerState(&self, enable: ::windows::BOOL) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).40)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn CreateCommandSignature<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: T1__,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            p_desc,
            p_root_signature.into().abi(),
            riid,
            ppv_command_signature,
        )
    }
    pub unsafe fn GetResourceTiling<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_num_tiles_for_entire_resource,
            p_packed_mip_desc,
            p_standard_tile_shape_for_non_packed_mips,
            p_num_subresource_tilings,
            first_subresource_tiling_to_get,
            p_subresource_tilings_for_non_packed_mips,
        )
    }
    pub unsafe fn GetAdapterLuid(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn CreatePipelineLibrary(
        &self,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            p_library_blob,
            blob_length,
            riid,
            pp_pipeline_library,
        )
    }
    pub unsafe fn SetEventOnMultipleFenceCompletion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        pp_fences: T0__,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            pp_fences.into().abi(),
            p_fence_values,
            num_fences,
            flags,
            h_event,
        )
    }
    pub unsafe fn SetResidencyPriority<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
            p_priorities,
        )
    }
    pub unsafe fn CreatePipelineState(
        &self,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn OpenExistingHeapFromAddress(
        &self,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            p_address,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn OpenExistingHeapFromFileMapping(
        &self,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            h_file_mapping,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn EnqueueMakeResident<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: T2__,
        p_fence_to_signal: T3__,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            flags,
            num_objects,
            pp_objects.into().abi(),
            p_fence_to_signal.into().abi(),
            fence_value_to_signal,
        )
    }
    pub unsafe fn CreateCommandList1(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            flags,
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CreateProtectedResourceSession(
        &self,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).52)(::windows::Abi::abi(self), p_desc, riid, pp_session)
    }
    pub unsafe fn CreateCommittedResource1<
        'a,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T5__,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap1<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: T1__,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_desc,
            p_protected_session.into().abi(),
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn CreateReservedResource1<
        'a,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T3__,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn GetResourceAllocationInfo1(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ) {
        (::windows::Interface::vtable(self).56)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
            p_resource_allocation_info1,
        )
    }
    pub unsafe fn CreateLifetimeTracker<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12LifetimeOwner>>,
    >(
        &self,
        p_owner: T0__,
        riid: *const ::windows::Guid,
        ppv_tracker: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).57)(
            ::windows::Abi::abi(self),
            p_owner.into().abi(),
            riid,
            ppv_tracker,
        )
    }
    pub unsafe fn RemoveDevice(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn EnumerateMetaCommands(
        &self,
        p_num_meta_commands: *mut u32,
        p_descs: *mut D3D12_META_COMMAND_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_num_meta_commands,
            p_descs,
        )
    }
    pub unsafe fn EnumerateMetaCommandParameters(
        &self,
        command_id: *const ::windows::Guid,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        p_total_structure_size_in_bytes: *mut u32,
        p_parameter_count: *mut u32,
        p_parameter_descs: *mut D3D12_META_COMMAND_PARAMETER_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            command_id,
            stage,
            p_total_structure_size_in_bytes,
            p_parameter_count,
            p_parameter_descs,
        )
    }
    pub unsafe fn CreateMetaCommand(
        &self,
        command_id: *const ::windows::Guid,
        node_mask: u32,
        p_creation_parameters_data: *const ::std::ffi::c_void,
        creation_parameters_data_size_in_bytes: usize,
        riid: *const ::windows::Guid,
        pp_meta_command: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            command_id,
            node_mask,
            p_creation_parameters_data,
            creation_parameters_data_size_in_bytes,
            riid,
            pp_meta_command,
        )
    }
    pub unsafe fn CreateStateObject(
        &self,
        p_desc: *const D3D12_STATE_OBJECT_DESC,
        riid: *const ::windows::Guid,
        pp_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).62)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_state_object,
        )
    }
    pub unsafe fn GetRaytracingAccelerationStructurePrebuildInfo(
        &self,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
        p_info: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO,
    ) {
        (::windows::Interface::vtable(self).63)(::windows::Abi::abi(self), p_desc, p_info)
    }
    pub unsafe fn CheckDriverMatchingIdentifier(
        &self,
        serialized_data_type: D3D12_SERIALIZED_DATA_TYPE,
        p_identifier_to_check: *const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    ) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            serialized_data_type,
            p_identifier_to_check,
        )
    }
    pub unsafe fn SetBackgroundProcessingMode(
        &self,
        mode: D3D12_BACKGROUND_PROCESSING_MODE,
        measurements_action: D3D12_MEASUREMENTS_ACTION,
        h_event_to_signal_upon_completion: super::system_services::HANDLE,
        pb_further_measurements_desired: *mut i32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).65)(
            ::windows::Abi::abi(self),
            mode,
            measurements_action,
            h_event_to_signal_upon_completion,
            pb_further_measurements_desired,
        )
    }
    pub unsafe fn AddToStateObject<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12StateObject>>,
    >(
        &self,
        p_addition: *const D3D12_STATE_OBJECT_DESC,
        p_state_object_to_grow_from: T1__,
        riid: *const ::windows::Guid,
        pp_new_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).66)(
            ::windows::Abi::abi(self),
            p_addition,
            p_state_object_to_grow_from.into().abi(),
            riid,
            pp_new_state_object,
        )
    }
    pub unsafe fn CreateProtectedResourceSession1(
        &self,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC1,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).67)(::windows::Abi::abi(self), p_desc, riid, pp_session)
    }
}
impl ::std::convert::From<ID3D12Device7> for ::windows::IUnknown {
    fn from(value: ID3D12Device7) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device7> for ::windows::IUnknown {
    fn from(value: &ID3D12Device7) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device7> for ID3D12Device6 {
    fn from(value: ID3D12Device7) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device7> for ID3D12Device6 {
    fn from(value: &ID3D12Device7) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device6>> for ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device6> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device6>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device6>> for &'a ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device6> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device6>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device7> for ID3D12Device5 {
    fn from(value: ID3D12Device7) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device7> for ID3D12Device5 {
    fn from(value: &ID3D12Device7) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device5>> for ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device5> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device5>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device5>> for &'a ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device5> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device5>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device7> for ID3D12Device4 {
    fn from(value: ID3D12Device7) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device7> for ID3D12Device4 {
    fn from(value: &ID3D12Device7) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device4>> for ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device4>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device4>> for &'a ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device4>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device7> for ID3D12Device3 {
    fn from(value: ID3D12Device7) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device7> for ID3D12Device3 {
    fn from(value: &ID3D12Device7) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for &'a ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device7> for ID3D12Device2 {
    fn from(value: ID3D12Device7) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device7> for ID3D12Device2 {
    fn from(value: &ID3D12Device7) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for &'a ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device7> for ID3D12Device1 {
    fn from(value: ID3D12Device7) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device7> for ID3D12Device1 {
    fn from(value: &ID3D12Device7) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for &'a ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device7> for ID3D12Device {
    fn from(value: ID3D12Device7) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device7> for ID3D12Device {
    fn from(value: &ID3D12Device7) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for &'a ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device7> for ID3D12Object {
    fn from(value: ID3D12Device7) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device7> for ID3D12Object {
    fn from(value: &ID3D12Device7) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Device7 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Device8(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Device8 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Device8 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Device8 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Device8 {}
unsafe impl ::windows::Interface for ID3D12Device8 {
    type Vtable = ID3D12Device8_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2451105467,
        63812,
        20350,
        [167, 92, 177, 178, 199, 183, 1, 243],
    );
}
#[repr(C)]
pub struct ID3D12Device8_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_counter_resource: ::windows::RawPtr,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        pp_fences: ::windows::RawPtr,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: ::windows::RawPtr,
        p_fence_to_signal: ::windows::RawPtr,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_owner: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_tracker: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_num_meta_commands: *mut u32,
        p_descs: *mut D3D12_META_COMMAND_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        command_id: *const ::windows::Guid,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        p_total_structure_size_in_bytes: *mut u32,
        p_parameter_count: *mut u32,
        p_parameter_descs: *mut D3D12_META_COMMAND_PARAMETER_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        command_id: *const ::windows::Guid,
        node_mask: u32,
        p_creation_parameters_data: *const ::std::ffi::c_void,
        creation_parameters_data_size_in_bytes: usize,
        riid: *const ::windows::Guid,
        pp_meta_command: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_STATE_OBJECT_DESC,
        riid: *const ::windows::Guid,
        pp_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
        p_info: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        serialized_data_type: D3D12_SERIALIZED_DATA_TYPE,
        p_identifier_to_check: *const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    ) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        mode: D3D12_BACKGROUND_PROCESSING_MODE,
        measurements_action: D3D12_MEASUREMENTS_ACTION,
        h_event_to_signal_upon_completion: super::system_services::HANDLE,
        pb_further_measurements_desired: *mut i32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_addition: *const D3D12_STATE_OBJECT_DESC,
        p_state_object_to_grow_from: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_new_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC1,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC1,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC1,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: ::windows::RawPtr,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap: ::windows::RawPtr,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC1,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_targeted_resource: ::windows::RawPtr,
        p_feedback_resource: ::windows::RawPtr,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_desc: *const D3D12_RESOURCE_DESC1,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ),
);
#[allow(non_snake_case)]
impl ID3D12Device8 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetNodeCount(&self) -> u32 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn CreateCommandQueue(
        &self,
        p_desc: *const D3D12_COMMAND_QUEUE_DESC,
        riid: *const ::windows::Guid,
        pp_command_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_command_queue,
        )
    }
    pub unsafe fn CreateCommandAllocator(
        &self,
        r#type: D3D12_COMMAND_LIST_TYPE,
        riid: *const ::windows::Guid,
        pp_command_allocator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            r#type,
            riid,
            pp_command_allocator,
        )
    }
    pub unsafe fn CreateGraphicsPipelineState(
        &self,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateComputePipelineState(
        &self,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn CreateCommandList<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        p_command_allocator: T2__,
        p_initial_state: T3__,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            p_command_allocator.into().abi(),
            p_initial_state.into().abi(),
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CheckFeatureSupport(
        &self,
        feature: D3D12_FEATURE,
        p_feature_support_data: *mut ::std::ffi::c_void,
        feature_support_data_size: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            feature,
            p_feature_support_data,
            feature_support_data_size,
        )
    }
    pub unsafe fn CreateDescriptorHeap(
        &self,
        p_descriptor_heap_desc: *const D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_descriptor_heap_desc,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn GetDescriptorHandleIncrementSize(
        &self,
        descriptor_heap_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self), descriptor_heap_type)
    }
    pub unsafe fn CreateRootSignature(
        &self,
        node_mask: u32,
        p_blob_with_root_signature: *const ::std::ffi::c_void,
        blob_length_in_bytes: usize,
        riid: *const ::windows::Guid,
        ppv_root_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            node_mask,
            p_blob_with_root_signature,
            blob_length_in_bytes,
            riid,
            ppv_root_signature,
        )
    }
    pub unsafe fn CreateConstantBufferView(
        &self,
        p_desc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CreateShaderResourceView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_SHADER_RESOURCE_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_counter_resource: T1__,
        p_desc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_counter_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateRenderTargetView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_RENDER_TARGET_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateDepthStencilView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_desc: *const D3D12_DEPTH_STENCIL_VIEW_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_desc,
            dest_descriptor,
        )
    }
    pub unsafe fn CreateSampler(
        &self,
        p_desc: *const D3D12_SAMPLER_DESC,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), p_desc, dest_descriptor)
    }
    pub unsafe fn CopyDescriptors(
        &self,
        num_dest_descriptor_ranges: u32,
        p_dest_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_dest_descriptor_range_sizes: *const u32,
        num_src_descriptor_ranges: u32,
        p_src_descriptor_range_starts: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        p_src_descriptor_range_sizes: *const u32,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).23)(
            ::windows::Abi::abi(self),
            num_dest_descriptor_ranges,
            p_dest_descriptor_range_starts,
            p_dest_descriptor_range_sizes,
            num_src_descriptor_ranges,
            p_src_descriptor_range_starts,
            p_src_descriptor_range_sizes,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn CopyDescriptorsSimple(
        &self,
        num_descriptors: u32,
        dest_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        src_descriptor_range_start: D3D12_CPU_DESCRIPTOR_HANDLE,
        descriptor_heaps_type: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).24)(
            ::windows::Abi::abi(self),
            num_descriptors,
            dest_descriptor_range_start,
            src_descriptor_range_start,
            descriptor_heaps_type,
        )
    }
    pub unsafe fn GetResourceAllocationInfo(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
        )
    }
    pub unsafe fn GetCustomHeapProperties(
        &self,
        result__: *mut D3D12_HEAP_PROPERTIES,
        node_mask: u32,
        heap_type: D3D12_HEAP_TYPE,
    ) {
        (::windows::Interface::vtable(self).26)(
            ::windows::Abi::abi(self),
            result__,
            node_mask,
            heap_type,
        )
    }
    pub unsafe fn CreateCommittedResource(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn CreatePlacedResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateReservedResource(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSharedHandle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
        p_attributes: *const super::system_services::SECURITY_ATTRIBUTES,
        access: u32,
        name: *const u16,
        p_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            p_object.into().abi(),
            p_attributes,
            access,
            name,
            p_handle,
        )
    }
    pub unsafe fn OpenSharedHandle(
        &self,
        nt_handle: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_obj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), nt_handle, riid, ppv_obj)
    }
    pub unsafe fn OpenSharedHandleByName(
        &self,
        name: *const u16,
        access: u32,
        p_nt_handle: *mut super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            name,
            access,
            p_nt_handle,
        )
    }
    pub unsafe fn MakeResident<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn Evict<'a, T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>>(
        &self,
        num_objects: u32,
        pp_objects: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
        )
    }
    pub unsafe fn CreateFence(
        &self,
        initial_value: u64,
        flags: D3D12_FENCE_FLAGS,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            initial_value,
            flags,
            riid,
            pp_fence,
        )
    }
    pub unsafe fn GetDeviceRemovedReason(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetCopyableFootprints(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
    pub unsafe fn CreateQueryHeap(
        &self,
        p_desc: *const D3D12_QUERY_HEAP_DESC,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).39)(::windows::Abi::abi(self), p_desc, riid, ppv_heap)
    }
    pub unsafe fn SetStablePowerState(&self, enable: ::windows::BOOL) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).40)(::windows::Abi::abi(self), enable)
    }
    pub unsafe fn CreateCommandSignature<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_desc: *const D3D12_COMMAND_SIGNATURE_DESC,
        p_root_signature: T1__,
        riid: *const ::windows::Guid,
        ppv_command_signature: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            p_desc,
            p_root_signature.into().abi(),
            riid,
            ppv_command_signature,
        )
    }
    pub unsafe fn GetResourceTiling<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_num_tiles_for_entire_resource: *mut u32,
        p_packed_mip_desc: *mut D3D12_PACKED_MIP_INFO,
        p_standard_tile_shape_for_non_packed_mips: *mut D3D12_TILE_SHAPE,
        p_num_subresource_tilings: *mut u32,
        first_subresource_tiling_to_get: u32,
        p_subresource_tilings_for_non_packed_mips: *mut D3D12_SUBRESOURCE_TILING,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_num_tiles_for_entire_resource,
            p_packed_mip_desc,
            p_standard_tile_shape_for_non_packed_mips,
            p_num_subresource_tilings,
            first_subresource_tiling_to_get,
            p_subresource_tilings_for_non_packed_mips,
        )
    }
    pub unsafe fn GetAdapterLuid(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn CreatePipelineLibrary(
        &self,
        p_library_blob: *const ::std::ffi::c_void,
        blob_length: usize,
        riid: *const ::windows::Guid,
        pp_pipeline_library: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            p_library_blob,
            blob_length,
            riid,
            pp_pipeline_library,
        )
    }
    pub unsafe fn SetEventOnMultipleFenceCompletion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        pp_fences: T0__,
        p_fence_values: *const u64,
        num_fences: u32,
        flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            pp_fences.into().abi(),
            p_fence_values,
            num_fences,
            flags,
            h_event,
        )
    }
    pub unsafe fn SetResidencyPriority<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
    >(
        &self,
        num_objects: u32,
        pp_objects: T1__,
        p_priorities: *const D3D12_RESIDENCY_PRIORITY,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_objects,
            pp_objects.into().abi(),
            p_priorities,
        )
    }
    pub unsafe fn CreatePipelineState(
        &self,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn OpenExistingHeapFromAddress(
        &self,
        p_address: *const ::std::ffi::c_void,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            p_address,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn OpenExistingHeapFromFileMapping(
        &self,
        h_file_mapping: super::system_services::HANDLE,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            h_file_mapping,
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn EnqueueMakeResident<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        flags: D3D12_RESIDENCY_FLAGS,
        num_objects: u32,
        pp_objects: T2__,
        p_fence_to_signal: T3__,
        fence_value_to_signal: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            flags,
            num_objects,
            pp_objects.into().abi(),
            p_fence_to_signal.into().abi(),
            fence_value_to_signal,
        )
    }
    pub unsafe fn CreateCommandList1(
        &self,
        node_mask: u32,
        r#type: D3D12_COMMAND_LIST_TYPE,
        flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const ::windows::Guid,
        pp_command_list: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            node_mask,
            r#type,
            flags,
            riid,
            pp_command_list,
        )
    }
    pub unsafe fn CreateProtectedResourceSession(
        &self,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).52)(::windows::Abi::abi(self), p_desc, riid, pp_session)
    }
    pub unsafe fn CreateCommittedResource1<
        'a,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T5__,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreateHeap1<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_HEAP_DESC,
        p_protected_session: T1__,
        riid: *const ::windows::Guid,
        ppv_heap: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_desc,
            p_protected_session.into().abi(),
            riid,
            ppv_heap,
        )
    }
    pub unsafe fn CreateReservedResource1<
        'a,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_desc: *const D3D12_RESOURCE_DESC,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T3__,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_desc,
            initial_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn GetResourceAllocationInfo1(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ) {
        (::windows::Interface::vtable(self).56)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
            p_resource_allocation_info1,
        )
    }
    pub unsafe fn CreateLifetimeTracker<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12LifetimeOwner>>,
    >(
        &self,
        p_owner: T0__,
        riid: *const ::windows::Guid,
        ppv_tracker: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).57)(
            ::windows::Abi::abi(self),
            p_owner.into().abi(),
            riid,
            ppv_tracker,
        )
    }
    pub unsafe fn RemoveDevice(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn EnumerateMetaCommands(
        &self,
        p_num_meta_commands: *mut u32,
        p_descs: *mut D3D12_META_COMMAND_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_num_meta_commands,
            p_descs,
        )
    }
    pub unsafe fn EnumerateMetaCommandParameters(
        &self,
        command_id: *const ::windows::Guid,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        p_total_structure_size_in_bytes: *mut u32,
        p_parameter_count: *mut u32,
        p_parameter_descs: *mut D3D12_META_COMMAND_PARAMETER_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            command_id,
            stage,
            p_total_structure_size_in_bytes,
            p_parameter_count,
            p_parameter_descs,
        )
    }
    pub unsafe fn CreateMetaCommand(
        &self,
        command_id: *const ::windows::Guid,
        node_mask: u32,
        p_creation_parameters_data: *const ::std::ffi::c_void,
        creation_parameters_data_size_in_bytes: usize,
        riid: *const ::windows::Guid,
        pp_meta_command: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            command_id,
            node_mask,
            p_creation_parameters_data,
            creation_parameters_data_size_in_bytes,
            riid,
            pp_meta_command,
        )
    }
    pub unsafe fn CreateStateObject(
        &self,
        p_desc: *const D3D12_STATE_OBJECT_DESC,
        riid: *const ::windows::Guid,
        pp_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).62)(
            ::windows::Abi::abi(self),
            p_desc,
            riid,
            pp_state_object,
        )
    }
    pub unsafe fn GetRaytracingAccelerationStructurePrebuildInfo(
        &self,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
        p_info: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO,
    ) {
        (::windows::Interface::vtable(self).63)(::windows::Abi::abi(self), p_desc, p_info)
    }
    pub unsafe fn CheckDriverMatchingIdentifier(
        &self,
        serialized_data_type: D3D12_SERIALIZED_DATA_TYPE,
        p_identifier_to_check: *const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    ) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            serialized_data_type,
            p_identifier_to_check,
        )
    }
    pub unsafe fn SetBackgroundProcessingMode(
        &self,
        mode: D3D12_BACKGROUND_PROCESSING_MODE,
        measurements_action: D3D12_MEASUREMENTS_ACTION,
        h_event_to_signal_upon_completion: super::system_services::HANDLE,
        pb_further_measurements_desired: *mut i32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).65)(
            ::windows::Abi::abi(self),
            mode,
            measurements_action,
            h_event_to_signal_upon_completion,
            pb_further_measurements_desired,
        )
    }
    pub unsafe fn AddToStateObject<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12StateObject>>,
    >(
        &self,
        p_addition: *const D3D12_STATE_OBJECT_DESC,
        p_state_object_to_grow_from: T1__,
        riid: *const ::windows::Guid,
        pp_new_state_object: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).66)(
            ::windows::Abi::abi(self),
            p_addition,
            p_state_object_to_grow_from.into().abi(),
            riid,
            pp_new_state_object,
        )
    }
    pub unsafe fn CreateProtectedResourceSession1(
        &self,
        p_desc: *const D3D12_PROTECTED_RESOURCE_SESSION_DESC1,
        riid: *const ::windows::Guid,
        pp_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).67)(::windows::Abi::abi(self), p_desc, riid, pp_session)
    }
    pub unsafe fn GetResourceAllocationInfo2(
        &self,
        result__: *mut D3D12_RESOURCE_ALLOCATION_INFO,
        visible_mask: u32,
        num_resource_descs: u32,
        p_resource_descs: *const D3D12_RESOURCE_DESC1,
        p_resource_allocation_info1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ) {
        (::windows::Interface::vtable(self).68)(
            ::windows::Abi::abi(self),
            result__,
            visible_mask,
            num_resource_descs,
            p_resource_descs,
            p_resource_allocation_info1,
        )
    }
    pub unsafe fn CreateCommittedResource2<
        'a,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_heap_properties: *const D3D12_HEAP_PROPERTIES,
        heap_flags: D3D12_HEAP_FLAGS,
        p_desc: *const D3D12_RESOURCE_DESC1,
        initial_resource_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        p_protected_session: T5__,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).69)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            heap_flags,
            p_desc,
            initial_resource_state,
            p_optimized_clear_value,
            p_protected_session.into().abi(),
            riid_resource,
            ppv_resource,
        )
    }
    pub unsafe fn CreatePlacedResource1<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Heap>>,
    >(
        &self,
        p_heap: T0__,
        heap_offset: u64,
        p_desc: *const D3D12_RESOURCE_DESC1,
        initial_state: D3D12_RESOURCE_STATES,
        p_optimized_clear_value: *const D3D12_CLEAR_VALUE,
        riid: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).70)(
            ::windows::Abi::abi(self),
            p_heap.into().abi(),
            heap_offset,
            p_desc,
            initial_state,
            p_optimized_clear_value,
            riid,
            ppv_resource,
        )
    }
    pub unsafe fn CreateSamplerFeedbackUnorderedAccessView<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_targeted_resource: T0__,
        p_feedback_resource: T1__,
        dest_descriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).71)(
            ::windows::Abi::abi(self),
            p_targeted_resource.into().abi(),
            p_feedback_resource.into().abi(),
            dest_descriptor,
        )
    }
    pub unsafe fn GetCopyableFootprints1(
        &self,
        p_resource_desc: *const D3D12_RESOURCE_DESC1,
        first_subresource: u32,
        num_subresources: u32,
        base_offset: u64,
        p_layouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        p_num_rows: *mut u32,
        p_row_size_in_bytes: *mut u64,
        p_total_bytes: *mut u64,
    ) {
        (::windows::Interface::vtable(self).72)(
            ::windows::Abi::abi(self),
            p_resource_desc,
            first_subresource,
            num_subresources,
            base_offset,
            p_layouts,
            p_num_rows,
            p_row_size_in_bytes,
            p_total_bytes,
        )
    }
}
impl ::std::convert::From<ID3D12Device8> for ::windows::IUnknown {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ::windows::IUnknown {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device8> for ID3D12Device7 {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ID3D12Device7 {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device7>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device7> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device7>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device7>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device7> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device7>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device8> for ID3D12Device6 {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ID3D12Device6 {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device6>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device6> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device6>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device6>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device6> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device6>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device8> for ID3D12Device5 {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ID3D12Device5 {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device5>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device5> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device5>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device5>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device5> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device5>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device8> for ID3D12Device4 {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ID3D12Device4 {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device4>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device4>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device4>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device4>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device8> for ID3D12Device3 {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ID3D12Device3 {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device3>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device3>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device8> for ID3D12Device2 {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ID3D12Device2 {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device2>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device8> for ID3D12Device1 {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ID3D12Device1 {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device1>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device8> for ID3D12Device {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ID3D12Device {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Device>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Device> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Device>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Device8> for ID3D12Object {
    fn from(value: ID3D12Device8) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Device8> for ID3D12Object {
    fn from(value: &ID3D12Device8) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Device8 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DeviceRemovedExtendedData(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DeviceRemovedExtendedData {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DeviceRemovedExtendedData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DeviceRemovedExtendedData {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DeviceRemovedExtendedData {}
unsafe impl ::windows::Interface for ID3D12DeviceRemovedExtendedData {
    type Vtable = ID3D12DeviceRemovedExtendedData_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2559778099,
        23272,
        18321,
        [170, 60, 26, 115, 162, 147, 78, 113],
    );
}
#[repr(C)]
pub struct ID3D12DeviceRemovedExtendedData_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_output: *mut D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_output: *mut D3D12_DRED_PAGE_FAULT_OUTPUT,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12DeviceRemovedExtendedData {
    pub unsafe fn GetAutoBreadcrumbsOutput(
        &self,
        p_output: *mut D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_output)
    }
    pub unsafe fn GetPageFaultAllocationOutput(
        &self,
        p_output: *mut D3D12_DRED_PAGE_FAULT_OUTPUT,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), p_output)
    }
}
impl ::std::convert::From<ID3D12DeviceRemovedExtendedData> for ::windows::IUnknown {
    fn from(value: ID3D12DeviceRemovedExtendedData) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DeviceRemovedExtendedData> for ::windows::IUnknown {
    fn from(value: &ID3D12DeviceRemovedExtendedData) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12DeviceRemovedExtendedData
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DeviceRemovedExtendedData
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DeviceRemovedExtendedData1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DeviceRemovedExtendedData1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DeviceRemovedExtendedData1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DeviceRemovedExtendedData1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DeviceRemovedExtendedData1 {}
unsafe impl ::windows::Interface for ID3D12DeviceRemovedExtendedData1 {
    type Vtable = ID3D12DeviceRemovedExtendedData1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2535956514,
        53021,
        19930,
        [158, 186, 239, 250, 101, 63, 197, 6],
    );
}
#[repr(C)]
pub struct ID3D12DeviceRemovedExtendedData1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_output: *mut D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_output: *mut D3D12_DRED_PAGE_FAULT_OUTPUT,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_output: *mut D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_output: *mut D3D12_DRED_PAGE_FAULT_OUTPUT1,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12DeviceRemovedExtendedData1 {
    pub unsafe fn GetAutoBreadcrumbsOutput(
        &self,
        p_output: *mut D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_output)
    }
    pub unsafe fn GetPageFaultAllocationOutput(
        &self,
        p_output: *mut D3D12_DRED_PAGE_FAULT_OUTPUT,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), p_output)
    }
    pub unsafe fn GetAutoBreadcrumbsOutput1(
        &self,
        p_output: *mut D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), p_output)
    }
    pub unsafe fn GetPageFaultAllocationOutput1(
        &self,
        p_output: *mut D3D12_DRED_PAGE_FAULT_OUTPUT1,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), p_output)
    }
}
impl ::std::convert::From<ID3D12DeviceRemovedExtendedData1> for ::windows::IUnknown {
    fn from(value: ID3D12DeviceRemovedExtendedData1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DeviceRemovedExtendedData1> for ::windows::IUnknown {
    fn from(value: &ID3D12DeviceRemovedExtendedData1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12DeviceRemovedExtendedData1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DeviceRemovedExtendedData1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12DeviceRemovedExtendedData1> for ID3D12DeviceRemovedExtendedData {
    fn from(value: ID3D12DeviceRemovedExtendedData1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DeviceRemovedExtendedData1> for ID3D12DeviceRemovedExtendedData {
    fn from(value: &ID3D12DeviceRemovedExtendedData1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceRemovedExtendedData>>
    for ID3D12DeviceRemovedExtendedData1
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceRemovedExtendedData> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceRemovedExtendedData>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceRemovedExtendedData>>
    for &'a ID3D12DeviceRemovedExtendedData1
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceRemovedExtendedData> {
        ::windows::Param::Owned(
            ::std::convert::Into::<ID3D12DeviceRemovedExtendedData>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DeviceRemovedExtendedDataSettings(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DeviceRemovedExtendedDataSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DeviceRemovedExtendedDataSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DeviceRemovedExtendedDataSettings {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DeviceRemovedExtendedDataSettings {}
unsafe impl ::windows::Interface for ID3D12DeviceRemovedExtendedDataSettings {
    type Vtable = ID3D12DeviceRemovedExtendedDataSettings_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2193377308,
        27547,
        16432,
        [174, 219, 126, 227, 209, 223, 30, 99],
    );
}
#[repr(C)]
pub struct ID3D12DeviceRemovedExtendedDataSettings_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enablement: D3D12_DRED_ENABLEMENT),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enablement: D3D12_DRED_ENABLEMENT),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enablement: D3D12_DRED_ENABLEMENT),
);
#[allow(non_snake_case)]
impl ID3D12DeviceRemovedExtendedDataSettings {
    pub unsafe fn SetAutoBreadcrumbsEnablement(&self, enablement: D3D12_DRED_ENABLEMENT) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), enablement)
    }
    pub unsafe fn SetPageFaultEnablement(&self, enablement: D3D12_DRED_ENABLEMENT) {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), enablement)
    }
    pub unsafe fn SetWatsonDumpEnablement(&self, enablement: D3D12_DRED_ENABLEMENT) {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), enablement)
    }
}
impl ::std::convert::From<ID3D12DeviceRemovedExtendedDataSettings> for ::windows::IUnknown {
    fn from(value: ID3D12DeviceRemovedExtendedDataSettings) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DeviceRemovedExtendedDataSettings> for ::windows::IUnknown {
    fn from(value: &ID3D12DeviceRemovedExtendedDataSettings) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12DeviceRemovedExtendedDataSettings
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DeviceRemovedExtendedDataSettings
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12DeviceRemovedExtendedDataSettings1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12DeviceRemovedExtendedDataSettings1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12DeviceRemovedExtendedDataSettings1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12DeviceRemovedExtendedDataSettings1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12DeviceRemovedExtendedDataSettings1 {}
unsafe impl ::windows::Interface for ID3D12DeviceRemovedExtendedDataSettings1 {
    type Vtable = ID3D12DeviceRemovedExtendedDataSettings1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3688214097,
        13079,
        20234,
        [173, 249, 29, 124, 237, 202, 174, 11],
    );
}
#[repr(C)]
pub struct ID3D12DeviceRemovedExtendedDataSettings1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enablement: D3D12_DRED_ENABLEMENT),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enablement: D3D12_DRED_ENABLEMENT),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enablement: D3D12_DRED_ENABLEMENT),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, enablement: D3D12_DRED_ENABLEMENT),
);
#[allow(non_snake_case)]
impl ID3D12DeviceRemovedExtendedDataSettings1 {
    pub unsafe fn SetAutoBreadcrumbsEnablement(&self, enablement: D3D12_DRED_ENABLEMENT) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), enablement)
    }
    pub unsafe fn SetPageFaultEnablement(&self, enablement: D3D12_DRED_ENABLEMENT) {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), enablement)
    }
    pub unsafe fn SetWatsonDumpEnablement(&self, enablement: D3D12_DRED_ENABLEMENT) {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), enablement)
    }
    pub unsafe fn SetBreadcrumbContextEnablement(&self, enablement: D3D12_DRED_ENABLEMENT) {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), enablement)
    }
}
impl ::std::convert::From<ID3D12DeviceRemovedExtendedDataSettings1> for ::windows::IUnknown {
    fn from(value: ID3D12DeviceRemovedExtendedDataSettings1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DeviceRemovedExtendedDataSettings1> for ::windows::IUnknown {
    fn from(value: &ID3D12DeviceRemovedExtendedDataSettings1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12DeviceRemovedExtendedDataSettings1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12DeviceRemovedExtendedDataSettings1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12DeviceRemovedExtendedDataSettings1>
    for ID3D12DeviceRemovedExtendedDataSettings
{
    fn from(value: ID3D12DeviceRemovedExtendedDataSettings1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12DeviceRemovedExtendedDataSettings1>
    for ID3D12DeviceRemovedExtendedDataSettings
{
    fn from(value: &ID3D12DeviceRemovedExtendedDataSettings1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceRemovedExtendedDataSettings>>
    for ID3D12DeviceRemovedExtendedDataSettings1
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceRemovedExtendedDataSettings> {
        ::windows::Param::Owned(::std::convert::Into::<
            ID3D12DeviceRemovedExtendedDataSettings,
        >::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceRemovedExtendedDataSettings>>
    for &'a ID3D12DeviceRemovedExtendedDataSettings1
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceRemovedExtendedDataSettings> {
        ::windows::Param::Owned(::std::convert::Into::<
            ID3D12DeviceRemovedExtendedDataSettings,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Fence1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Fence1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Fence1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Fence1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Fence1 {}
unsafe impl ::windows::Interface for ID3D12Fence1 {
    type Vtable = ID3D12Fence1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1127646718,
        57899,
        19616,
        [168, 219, 181, 180, 244, 221, 14, 74],
    );
}
#[repr(C)]
pub struct ID3D12Fence1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        value: u64,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, value: u64) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_FENCE_FLAGS,
);
#[allow(non_snake_case)]
impl ID3D12Fence1 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetCompletedValue(&self) -> u64 {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn SetEventOnCompletion(
        &self,
        value: u64,
        h_event: super::system_services::HANDLE,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self), value, h_event)
    }
    pub unsafe fn Signal(&self, value: u64) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), value)
    }
    pub unsafe fn GetCreationFlags(&self) -> D3D12_FENCE_FLAGS {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12Fence1> for ::windows::IUnknown {
    fn from(value: ID3D12Fence1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Fence1> for ::windows::IUnknown {
    fn from(value: &ID3D12Fence1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Fence1> for ID3D12Fence {
    fn from(value: ID3D12Fence1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Fence1> for ID3D12Fence {
    fn from(value: &ID3D12Fence1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Fence>> for ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Fence> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Fence>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Fence>> for &'a ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Fence> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Fence>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Fence1> for ID3D12Pageable {
    fn from(value: ID3D12Fence1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Fence1> for ID3D12Pageable {
    fn from(value: &ID3D12Fence1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Fence1> for ID3D12DeviceChild {
    fn from(value: ID3D12Fence1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Fence1> for ID3D12DeviceChild {
    fn from(value: &ID3D12Fence1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Fence1> for ID3D12Object {
    fn from(value: ID3D12Fence1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Fence1> for ID3D12Object {
    fn from(value: &ID3D12Fence1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Fence1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12FunctionParameterReflection(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12FunctionParameterReflection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12FunctionParameterReflection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12FunctionParameterReflection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12FunctionParameterReflection {}
unsafe impl ::windows::Interface for ID3D12FunctionParameterReflection {
    type Vtable = ID3D12FunctionParameterReflection_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3961910317,
        28678,
        20267,
        [179, 62, 2, 204, 51, 117, 115, 63],
    );
}
#[repr(C)]
pub struct ID3D12FunctionParameterReflection_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *mut D3D12_PARAMETER_DESC,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12FunctionParameterReflection {
    pub unsafe fn GetDesc(&self, p_desc: *mut D3D12_PARAMETER_DESC) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_desc)
    }
}
impl ::std::convert::From<ID3D12FunctionParameterReflection> for ::windows::IUnknown {
    fn from(value: ID3D12FunctionParameterReflection) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12FunctionParameterReflection> for ::windows::IUnknown {
    fn from(value: &ID3D12FunctionParameterReflection) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12FunctionParameterReflection
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12FunctionParameterReflection
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12ShaderReflectionType(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12ShaderReflectionType {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12ShaderReflectionType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12ShaderReflectionType {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12ShaderReflectionType {}
unsafe impl ::windows::Interface for ID3D12ShaderReflectionType {
    type Vtable = ID3D12ShaderReflectionType_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3910386513,
        30781,
        18634,
        [161, 209, 79, 48, 98, 132, 173, 86],
    );
}
#[repr(C)]
pub struct ID3D12ShaderReflectionType_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *mut D3D12_SHADER_TYPE_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index: u32,
    ) -> ::std::option::Option<ID3D12ShaderReflectionType>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionType>,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, index: u32) -> *const i8,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_type: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
    ) -> ::std::option::Option<ID3D12ShaderReflectionType>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
    ) -> ::std::option::Option<ID3D12ShaderReflectionType>,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        u_index: u32,
    ) -> ::std::option::Option<ID3D12ShaderReflectionType>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_type: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_base: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12ShaderReflectionType {
    pub unsafe fn GetDesc(&self, p_desc: *mut D3D12_SHADER_TYPE_DESC) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_desc)
    }
    pub unsafe fn GetMemberTypeByIndex(
        &self,
        index: u32,
    ) -> ::std::option::Option<ID3D12ShaderReflectionType> {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), index)
    }
    pub unsafe fn GetMemberTypeByName(
        &self,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionType> {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetMemberTypeName(&self, index: u32) -> *const i8 {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), index)
    }
    pub unsafe fn IsEqual<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12ShaderReflectionType>>,
    >(
        &self,
        p_type: T0__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), p_type.into().abi())
    }
    pub unsafe fn GetSubType(&self) -> ::std::option::Option<ID3D12ShaderReflectionType> {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetBaseClass(&self) -> ::std::option::Option<ID3D12ShaderReflectionType> {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetNumInterfaces(&self) -> u32 {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetInterfaceByIndex(
        &self,
        u_index: u32,
    ) -> ::std::option::Option<ID3D12ShaderReflectionType> {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self), u_index)
    }
    pub unsafe fn IsOfType<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12ShaderReflectionType>>,
    >(
        &self,
        p_type: T0__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(::windows::Abi::abi(self), p_type.into().abi())
    }
    pub unsafe fn ImplementsInterface<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12ShaderReflectionType>>,
    >(
        &self,
        p_base: T0__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(::windows::Abi::abi(self), p_base.into().abi())
    }
}
impl ::std::convert::From<ID3D12ShaderReflectionType> for ::windows::IUnknown {
    fn from(value: ID3D12ShaderReflectionType) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ShaderReflectionType> for ::windows::IUnknown {
    fn from(value: &ID3D12ShaderReflectionType) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12ShaderReflectionType
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12ShaderReflectionType
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12ShaderReflectionVariable(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12ShaderReflectionVariable {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12ShaderReflectionVariable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12ShaderReflectionVariable {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12ShaderReflectionVariable {}
unsafe impl ::windows::Interface for ID3D12ShaderReflectionVariable {
    type Vtable = ID3D12ShaderReflectionVariable_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2201462950,
        41494,
        17482,
        [178, 244, 49, 71, 51, 167, 58, 234],
    );
}
#[repr(C)]
pub struct ID3D12ShaderReflectionVariable_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *mut D3D12_SHADER_VARIABLE_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
    ) -> ::std::option::Option<ID3D12ShaderReflectionType>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
    )
        -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer>,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, u_array_index: u32) -> u32,
);
#[allow(non_snake_case)]
impl ID3D12ShaderReflectionVariable {
    pub unsafe fn GetDesc(&self, p_desc: *mut D3D12_SHADER_VARIABLE_DESC) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_desc)
    }
    pub unsafe fn GetType(&self) -> ::std::option::Option<ID3D12ShaderReflectionType> {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetBuffer(&self) -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer> {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetInterfaceSlot(&self, u_array_index: u32) -> u32 {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), u_array_index)
    }
}
impl ::std::convert::From<ID3D12ShaderReflectionVariable> for ::windows::IUnknown {
    fn from(value: ID3D12ShaderReflectionVariable) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ShaderReflectionVariable> for ::windows::IUnknown {
    fn from(value: &ID3D12ShaderReflectionVariable) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12ShaderReflectionVariable
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12ShaderReflectionVariable
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12ShaderReflectionConstantBuffer(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12ShaderReflectionConstantBuffer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12ShaderReflectionConstantBuffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12ShaderReflectionConstantBuffer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12ShaderReflectionConstantBuffer {}
unsafe impl ::windows::Interface for ID3D12ShaderReflectionConstantBuffer {
    type Vtable = ID3D12ShaderReflectionConstantBuffer_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3314915508,
        18611,
        18537,
        [185, 177, 177, 97, 139, 20, 168, 183],
    );
}
#[repr(C)]
pub struct ID3D12ShaderReflectionConstantBuffer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *mut D3D12_SHADER_BUFFER_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index: u32,
    ) -> ::std::option::Option<ID3D12ShaderReflectionVariable>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionVariable>,
);
#[allow(non_snake_case)]
impl ID3D12ShaderReflectionConstantBuffer {
    pub unsafe fn GetDesc(&self, p_desc: *mut D3D12_SHADER_BUFFER_DESC) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_desc)
    }
    pub unsafe fn GetVariableByIndex(
        &self,
        index: u32,
    ) -> ::std::option::Option<ID3D12ShaderReflectionVariable> {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), index)
    }
    pub unsafe fn GetVariableByName(
        &self,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionVariable> {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), name)
    }
}
impl ::std::convert::From<ID3D12ShaderReflectionConstantBuffer> for ::windows::IUnknown {
    fn from(value: ID3D12ShaderReflectionConstantBuffer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ShaderReflectionConstantBuffer> for ::windows::IUnknown {
    fn from(value: &ID3D12ShaderReflectionConstantBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12ShaderReflectionConstantBuffer
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12ShaderReflectionConstantBuffer
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12FunctionReflection(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12FunctionReflection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12FunctionReflection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12FunctionReflection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12FunctionReflection {}
unsafe impl ::windows::Interface for ID3D12FunctionReflection {
    type Vtable = ID3D12FunctionReflection_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        285768028,
        10098,
        19369,
        [178, 168, 212, 100, 220, 126, 39, 153],
    );
}
#[repr(C)]
pub struct ID3D12FunctionReflection_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *mut D3D12_FUNCTION_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        buffer_index: u32,
    )
        -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const i8,
    )
        -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        resource_index: u32,
        p_desc: *mut D3D12_SHADER_INPUT_BIND_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionVariable>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const i8,
        p_desc: *mut D3D12_SHADER_INPUT_BIND_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        parameter_index: i32,
    ) -> ::std::option::Option<ID3D12FunctionParameterReflection>,
);
#[allow(non_snake_case)]
impl ID3D12FunctionReflection {
    pub unsafe fn GetDesc(&self, p_desc: *mut D3D12_FUNCTION_DESC) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_desc)
    }
    pub unsafe fn GetConstantBufferByIndex(
        &self,
        buffer_index: u32,
    ) -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer> {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), buffer_index)
    }
    pub unsafe fn GetConstantBufferByName(
        &self,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer> {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetResourceBindingDesc(
        &self,
        resource_index: u32,
        p_desc: *mut D3D12_SHADER_INPUT_BIND_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), resource_index, p_desc)
    }
    pub unsafe fn GetVariableByName(
        &self,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionVariable> {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetResourceBindingDescByName(
        &self,
        name: *const i8,
        p_desc: *mut D3D12_SHADER_INPUT_BIND_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), name, p_desc)
    }
    pub unsafe fn GetFunctionParameter(
        &self,
        parameter_index: i32,
    ) -> ::std::option::Option<ID3D12FunctionParameterReflection> {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self), parameter_index)
    }
}
impl ::std::convert::From<ID3D12FunctionReflection> for ::windows::IUnknown {
    fn from(value: ID3D12FunctionReflection) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12FunctionReflection> for ::windows::IUnknown {
    fn from(value: &ID3D12FunctionReflection) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12FunctionReflection
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12FunctionReflection
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12GraphicsCommandList1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12GraphicsCommandList1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12GraphicsCommandList1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12GraphicsCommandList1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12GraphicsCommandList1 {}
unsafe impl ::windows::Interface for ID3D12GraphicsCommandList1 {
    type Vtable = ID3D12GraphicsCommandList1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1429275643,
        8167,
        17751,
        [187, 56, 148, 109, 125, 14, 124, 167],
    );
}
#[repr(C)]
pub struct ID3D12GraphicsCommandList1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_COMMAND_LIST_TYPE,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        num_bytes: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        p_src_resource: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: ::windows::RawPtr,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_viewports: u32,
        p_viewports: *const D3D12_VIEWPORT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, blend_factor: *const f32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, stencil_ref: u32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_command_list: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: ::windows::RawPtr,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_view: *const D3D12_INDEX_BUFFER_VIEW),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_region: *const D3D12_DISCARD_REGION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: ::windows::RawPtr,
        aligned_destination_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_buffer: ::windows::RawPtr,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_command_signature: ::windows::RawPtr,
        max_command_count: u32,
        p_argument_buffer: ::windows::RawPtr,
        argument_buffer_offset: u64,
        p_count_buffer: ::windows::RawPtr,
        count_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, min: f32, max: f32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, mask: u32),
);
#[allow(non_snake_case)]
impl ID3D12GraphicsCommandList1 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetType(&self) -> D3D12_COMMAND_LIST_TYPE {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn Close(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn Reset<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_allocator: T0__,
        p_initial_state: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_allocator.into().abi(),
            p_initial_state.into().abi(),
        )
    }
    pub unsafe fn ClearState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn DrawInstanced(
        &self,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            vertex_count_per_instance,
            instance_count,
            start_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn DrawIndexedInstanced(
        &self,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            index_count_per_instance,
            instance_count,
            start_index_location,
            base_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn Dispatch(
        &self,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ) {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            thread_group_countx,
            thread_group_county,
            thread_group_countz,
        )
    }
    pub unsafe fn CopyBufferRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        num_bytes: u64,
    ) {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            num_bytes,
        )
    }
    pub unsafe fn CopyTextureRegion(
        &self,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ) {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            p_dst,
            dstx,
            dsty,
            dstz,
            p_src,
            p_src_box,
        )
    }
    pub unsafe fn CopyResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        p_src_resource: T1__,
    ) {
        (::windows::Interface::vtable(self).17)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            p_src_resource.into().abi(),
        )
    }
    pub unsafe fn CopyTiles<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: T3__,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_tile_region_start_coordinate,
            p_tile_region_size,
            p_buffer.into().abi(),
            buffer_start_offset_in_bytes,
            flags,
        )
    }
    pub unsafe fn ResolveSubresource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        p_src_resource: T2__,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            p_src_resource.into().abi(),
            src_subresource,
            format,
        )
    }
    pub unsafe fn IASetPrimitiveTopology(
        &self,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ) {
        (::windows::Interface::vtable(self).20)(::windows::Abi::abi(self), primitive_topology)
    }
    pub unsafe fn RSSetViewports(&self, num_viewports: u32, p_viewports: *const D3D12_VIEWPORT) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            num_viewports,
            p_viewports,
        )
    }
    pub unsafe fn RSSetScissorRects(
        &self,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), num_rects, p_rects)
    }
    pub unsafe fn OMSetBlendFactor(&self, blend_factor: *const f32) {
        (::windows::Interface::vtable(self).23)(::windows::Abi::abi(self), blend_factor)
    }
    pub unsafe fn OMSetStencilRef(&self, stencil_ref: u32) {
        (::windows::Interface::vtable(self).24)(::windows::Abi::abi(self), stencil_ref)
    }
    pub unsafe fn SetPipelineState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn ResourceBarrier(
        &self,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ) {
        (::windows::Interface::vtable(self).26)(::windows::Abi::abi(self), num_barriers, p_barriers)
    }
    pub unsafe fn ExecuteBundle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>,
    >(
        &self,
        p_command_list: T0__,
    ) {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_command_list.into().abi(),
        )
    }
    pub unsafe fn SetDescriptorHeaps<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12DescriptorHeap>>,
    >(
        &self,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: T1__,
    ) {
        (::windows::Interface::vtable(self).28)(
            ::windows::Abi::abi(self),
            num_descriptor_heaps,
            pp_descriptor_heaps.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetGraphicsRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetGraphicsRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).32)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).37)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).39)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).40)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn IASetIndexBuffer(&self, p_view: *const D3D12_INDEX_BUFFER_VIEW) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), p_view)
    }
    pub unsafe fn IASetVertexBuffers(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn SOSetTargets(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn OMSetRenderTargets(
        &self,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_render_target_descriptors,
            p_render_target_descriptors,
            rts_single_handle_to_descriptor_range,
            p_depth_stencil_descriptor,
        )
    }
    pub unsafe fn ClearDepthStencilView(
        &self,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            depth_stencil_view,
            clear_flags,
            depth,
            stencil,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearRenderTargetView(
        &self,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            render_target_view,
            color_rgba,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewUint<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewFloat<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn DiscardResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_region: *const D3D12_DISCARD_REGION,
    ) {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_region,
        )
    }
    pub unsafe fn BeginQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).52)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn EndQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn ResolveQueryData<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: T4__,
        aligned_destination_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            start_index,
            num_queries,
            p_destination_buffer.into().abi(),
            aligned_destination_buffer_offset,
        )
    }
    pub unsafe fn SetPredication<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_buffer: T0__,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ) {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_buffer.into().abi(),
            aligned_buffer_offset,
            operation,
        )
    }
    pub unsafe fn SetMarker(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).56)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn BeginEvent(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).57)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn EndEvent(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn ExecuteIndirect<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandSignature>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_command_signature: T0__,
        max_command_count: u32,
        p_argument_buffer: T2__,
        argument_buffer_offset: u64,
        p_count_buffer: T4__,
        count_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_command_signature.into().abi(),
            max_command_count,
            p_argument_buffer.into().abi(),
            argument_buffer_offset,
            p_count_buffer.into().abi(),
            count_buffer_offset,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT64<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn OMSetDepthBounds(&self, min: f32, max: f32) {
        (::windows::Interface::vtable(self).62)(::windows::Abi::abi(self), min, max)
    }
    pub unsafe fn SetSamplePositions(
        &self,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ) {
        (::windows::Interface::vtable(self).63)(
            ::windows::Abi::abi(self),
            num_samples_per_pixel,
            num_pixels,
            p_sample_positions,
        )
    }
    pub unsafe fn ResolveSubresourceRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: T4__,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ) {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            dstx,
            dsty,
            p_src_resource.into().abi(),
            src_subresource,
            p_src_rect,
            format,
            resolve_mode,
        )
    }
    pub unsafe fn SetViewInstanceMask(&self, mask: u32) {
        (::windows::Interface::vtable(self).65)(::windows::Abi::abi(self), mask)
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList1> for ::windows::IUnknown {
    fn from(value: ID3D12GraphicsCommandList1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList1> for ::windows::IUnknown {
    fn from(value: &ID3D12GraphicsCommandList1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12GraphicsCommandList1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12GraphicsCommandList1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList1> for ID3D12GraphicsCommandList {
    fn from(value: ID3D12GraphicsCommandList1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList1> for ID3D12GraphicsCommandList {
    fn from(value: &ID3D12GraphicsCommandList1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for ID3D12GraphicsCommandList1
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for &'a ID3D12GraphicsCommandList1
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList1> for ID3D12CommandList {
    fn from(value: ID3D12GraphicsCommandList1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList1> for ID3D12CommandList {
    fn from(value: &ID3D12GraphicsCommandList1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for ID3D12GraphicsCommandList1
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for &'a ID3D12GraphicsCommandList1
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList1> for ID3D12DeviceChild {
    fn from(value: ID3D12GraphicsCommandList1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList1> for ID3D12DeviceChild {
    fn from(value: &ID3D12GraphicsCommandList1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for ID3D12GraphicsCommandList1
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12GraphicsCommandList1
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList1> for ID3D12Object {
    fn from(value: ID3D12GraphicsCommandList1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList1> for ID3D12Object {
    fn from(value: &ID3D12GraphicsCommandList1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12GraphicsCommandList1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for &'a ID3D12GraphicsCommandList1
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12GraphicsCommandList2(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12GraphicsCommandList2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12GraphicsCommandList2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12GraphicsCommandList2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12GraphicsCommandList2 {}
unsafe impl ::windows::Interface for ID3D12GraphicsCommandList2 {
    type Vtable = ID3D12GraphicsCommandList2_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        952362373,
        65303,
        16684,
        [145, 80, 79, 198, 249, 215, 42, 40],
    );
}
#[repr(C)]
pub struct ID3D12GraphicsCommandList2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_COMMAND_LIST_TYPE,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        num_bytes: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        p_src_resource: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: ::windows::RawPtr,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_viewports: u32,
        p_viewports: *const D3D12_VIEWPORT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, blend_factor: *const f32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, stencil_ref: u32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_command_list: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: ::windows::RawPtr,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_view: *const D3D12_INDEX_BUFFER_VIEW),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_region: *const D3D12_DISCARD_REGION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: ::windows::RawPtr,
        aligned_destination_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_buffer: ::windows::RawPtr,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_command_signature: ::windows::RawPtr,
        max_command_count: u32,
        p_argument_buffer: ::windows::RawPtr,
        argument_buffer_offset: u64,
        p_count_buffer: ::windows::RawPtr,
        count_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, min: f32, max: f32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, mask: u32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ),
);
#[allow(non_snake_case)]
impl ID3D12GraphicsCommandList2 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetType(&self) -> D3D12_COMMAND_LIST_TYPE {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn Close(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn Reset<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_allocator: T0__,
        p_initial_state: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_allocator.into().abi(),
            p_initial_state.into().abi(),
        )
    }
    pub unsafe fn ClearState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn DrawInstanced(
        &self,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            vertex_count_per_instance,
            instance_count,
            start_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn DrawIndexedInstanced(
        &self,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            index_count_per_instance,
            instance_count,
            start_index_location,
            base_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn Dispatch(
        &self,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ) {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            thread_group_countx,
            thread_group_county,
            thread_group_countz,
        )
    }
    pub unsafe fn CopyBufferRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        num_bytes: u64,
    ) {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            num_bytes,
        )
    }
    pub unsafe fn CopyTextureRegion(
        &self,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ) {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            p_dst,
            dstx,
            dsty,
            dstz,
            p_src,
            p_src_box,
        )
    }
    pub unsafe fn CopyResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        p_src_resource: T1__,
    ) {
        (::windows::Interface::vtable(self).17)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            p_src_resource.into().abi(),
        )
    }
    pub unsafe fn CopyTiles<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: T3__,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_tile_region_start_coordinate,
            p_tile_region_size,
            p_buffer.into().abi(),
            buffer_start_offset_in_bytes,
            flags,
        )
    }
    pub unsafe fn ResolveSubresource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        p_src_resource: T2__,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            p_src_resource.into().abi(),
            src_subresource,
            format,
        )
    }
    pub unsafe fn IASetPrimitiveTopology(
        &self,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ) {
        (::windows::Interface::vtable(self).20)(::windows::Abi::abi(self), primitive_topology)
    }
    pub unsafe fn RSSetViewports(&self, num_viewports: u32, p_viewports: *const D3D12_VIEWPORT) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            num_viewports,
            p_viewports,
        )
    }
    pub unsafe fn RSSetScissorRects(
        &self,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), num_rects, p_rects)
    }
    pub unsafe fn OMSetBlendFactor(&self, blend_factor: *const f32) {
        (::windows::Interface::vtable(self).23)(::windows::Abi::abi(self), blend_factor)
    }
    pub unsafe fn OMSetStencilRef(&self, stencil_ref: u32) {
        (::windows::Interface::vtable(self).24)(::windows::Abi::abi(self), stencil_ref)
    }
    pub unsafe fn SetPipelineState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn ResourceBarrier(
        &self,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ) {
        (::windows::Interface::vtable(self).26)(::windows::Abi::abi(self), num_barriers, p_barriers)
    }
    pub unsafe fn ExecuteBundle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>,
    >(
        &self,
        p_command_list: T0__,
    ) {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_command_list.into().abi(),
        )
    }
    pub unsafe fn SetDescriptorHeaps<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12DescriptorHeap>>,
    >(
        &self,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: T1__,
    ) {
        (::windows::Interface::vtable(self).28)(
            ::windows::Abi::abi(self),
            num_descriptor_heaps,
            pp_descriptor_heaps.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetGraphicsRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetGraphicsRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).32)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).37)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).39)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).40)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn IASetIndexBuffer(&self, p_view: *const D3D12_INDEX_BUFFER_VIEW) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), p_view)
    }
    pub unsafe fn IASetVertexBuffers(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn SOSetTargets(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn OMSetRenderTargets(
        &self,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_render_target_descriptors,
            p_render_target_descriptors,
            rts_single_handle_to_descriptor_range,
            p_depth_stencil_descriptor,
        )
    }
    pub unsafe fn ClearDepthStencilView(
        &self,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            depth_stencil_view,
            clear_flags,
            depth,
            stencil,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearRenderTargetView(
        &self,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            render_target_view,
            color_rgba,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewUint<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewFloat<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn DiscardResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_region: *const D3D12_DISCARD_REGION,
    ) {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_region,
        )
    }
    pub unsafe fn BeginQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).52)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn EndQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn ResolveQueryData<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: T4__,
        aligned_destination_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            start_index,
            num_queries,
            p_destination_buffer.into().abi(),
            aligned_destination_buffer_offset,
        )
    }
    pub unsafe fn SetPredication<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_buffer: T0__,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ) {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_buffer.into().abi(),
            aligned_buffer_offset,
            operation,
        )
    }
    pub unsafe fn SetMarker(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).56)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn BeginEvent(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).57)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn EndEvent(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn ExecuteIndirect<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandSignature>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_command_signature: T0__,
        max_command_count: u32,
        p_argument_buffer: T2__,
        argument_buffer_offset: u64,
        p_count_buffer: T4__,
        count_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_command_signature.into().abi(),
            max_command_count,
            p_argument_buffer.into().abi(),
            argument_buffer_offset,
            p_count_buffer.into().abi(),
            count_buffer_offset,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT64<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn OMSetDepthBounds(&self, min: f32, max: f32) {
        (::windows::Interface::vtable(self).62)(::windows::Abi::abi(self), min, max)
    }
    pub unsafe fn SetSamplePositions(
        &self,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ) {
        (::windows::Interface::vtable(self).63)(
            ::windows::Abi::abi(self),
            num_samples_per_pixel,
            num_pixels,
            p_sample_positions,
        )
    }
    pub unsafe fn ResolveSubresourceRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: T4__,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ) {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            dstx,
            dsty,
            p_src_resource.into().abi(),
            src_subresource,
            p_src_rect,
            format,
            resolve_mode,
        )
    }
    pub unsafe fn SetViewInstanceMask(&self, mask: u32) {
        (::windows::Interface::vtable(self).65)(::windows::Abi::abi(self), mask)
    }
    pub unsafe fn WriteBufferImmediate(
        &self,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ) {
        (::windows::Interface::vtable(self).66)(::windows::Abi::abi(self), count, p_params, p_modes)
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList2> for ::windows::IUnknown {
    fn from(value: ID3D12GraphicsCommandList2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList2> for ::windows::IUnknown {
    fn from(value: &ID3D12GraphicsCommandList2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList2> for ID3D12GraphicsCommandList1 {
    fn from(value: ID3D12GraphicsCommandList2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList2> for ID3D12GraphicsCommandList1 {
    fn from(value: &ID3D12GraphicsCommandList2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for &'a ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList2> for ID3D12GraphicsCommandList {
    fn from(value: ID3D12GraphicsCommandList2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList2> for ID3D12GraphicsCommandList {
    fn from(value: &ID3D12GraphicsCommandList2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for &'a ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList2> for ID3D12CommandList {
    fn from(value: ID3D12GraphicsCommandList2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList2> for ID3D12CommandList {
    fn from(value: &ID3D12GraphicsCommandList2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for &'a ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList2> for ID3D12DeviceChild {
    fn from(value: ID3D12GraphicsCommandList2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList2> for ID3D12DeviceChild {
    fn from(value: &ID3D12GraphicsCommandList2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList2> for ID3D12Object {
    fn from(value: ID3D12GraphicsCommandList2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList2> for ID3D12Object {
    fn from(value: &ID3D12GraphicsCommandList2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12GraphicsCommandList2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for &'a ID3D12GraphicsCommandList2
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12GraphicsCommandList3(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12GraphicsCommandList3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12GraphicsCommandList3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12GraphicsCommandList3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12GraphicsCommandList3 {}
unsafe impl ::windows::Interface for ID3D12GraphicsCommandList3 {
    type Vtable = ID3D12GraphicsCommandList3_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1876591527,
        47180,
        20024,
        [154, 200, 199, 189, 34, 1, 107, 61],
    );
}
#[repr(C)]
pub struct ID3D12GraphicsCommandList3_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_COMMAND_LIST_TYPE,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        num_bytes: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        p_src_resource: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: ::windows::RawPtr,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_viewports: u32,
        p_viewports: *const D3D12_VIEWPORT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, blend_factor: *const f32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, stencil_ref: u32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_command_list: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: ::windows::RawPtr,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_view: *const D3D12_INDEX_BUFFER_VIEW),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_region: *const D3D12_DISCARD_REGION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: ::windows::RawPtr,
        aligned_destination_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_buffer: ::windows::RawPtr,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_command_signature: ::windows::RawPtr,
        max_command_count: u32,
        p_argument_buffer: ::windows::RawPtr,
        argument_buffer_offset: u64,
        p_count_buffer: ::windows::RawPtr,
        count_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, min: f32, max: f32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, mask: u32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_protected_resource_session: ::windows::RawPtr,
    ),
);
#[allow(non_snake_case)]
impl ID3D12GraphicsCommandList3 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetType(&self) -> D3D12_COMMAND_LIST_TYPE {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn Close(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn Reset<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_allocator: T0__,
        p_initial_state: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_allocator.into().abi(),
            p_initial_state.into().abi(),
        )
    }
    pub unsafe fn ClearState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn DrawInstanced(
        &self,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            vertex_count_per_instance,
            instance_count,
            start_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn DrawIndexedInstanced(
        &self,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            index_count_per_instance,
            instance_count,
            start_index_location,
            base_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn Dispatch(
        &self,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ) {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            thread_group_countx,
            thread_group_county,
            thread_group_countz,
        )
    }
    pub unsafe fn CopyBufferRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        num_bytes: u64,
    ) {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            num_bytes,
        )
    }
    pub unsafe fn CopyTextureRegion(
        &self,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ) {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            p_dst,
            dstx,
            dsty,
            dstz,
            p_src,
            p_src_box,
        )
    }
    pub unsafe fn CopyResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        p_src_resource: T1__,
    ) {
        (::windows::Interface::vtable(self).17)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            p_src_resource.into().abi(),
        )
    }
    pub unsafe fn CopyTiles<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: T3__,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_tile_region_start_coordinate,
            p_tile_region_size,
            p_buffer.into().abi(),
            buffer_start_offset_in_bytes,
            flags,
        )
    }
    pub unsafe fn ResolveSubresource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        p_src_resource: T2__,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            p_src_resource.into().abi(),
            src_subresource,
            format,
        )
    }
    pub unsafe fn IASetPrimitiveTopology(
        &self,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ) {
        (::windows::Interface::vtable(self).20)(::windows::Abi::abi(self), primitive_topology)
    }
    pub unsafe fn RSSetViewports(&self, num_viewports: u32, p_viewports: *const D3D12_VIEWPORT) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            num_viewports,
            p_viewports,
        )
    }
    pub unsafe fn RSSetScissorRects(
        &self,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), num_rects, p_rects)
    }
    pub unsafe fn OMSetBlendFactor(&self, blend_factor: *const f32) {
        (::windows::Interface::vtable(self).23)(::windows::Abi::abi(self), blend_factor)
    }
    pub unsafe fn OMSetStencilRef(&self, stencil_ref: u32) {
        (::windows::Interface::vtable(self).24)(::windows::Abi::abi(self), stencil_ref)
    }
    pub unsafe fn SetPipelineState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn ResourceBarrier(
        &self,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ) {
        (::windows::Interface::vtable(self).26)(::windows::Abi::abi(self), num_barriers, p_barriers)
    }
    pub unsafe fn ExecuteBundle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>,
    >(
        &self,
        p_command_list: T0__,
    ) {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_command_list.into().abi(),
        )
    }
    pub unsafe fn SetDescriptorHeaps<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12DescriptorHeap>>,
    >(
        &self,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: T1__,
    ) {
        (::windows::Interface::vtable(self).28)(
            ::windows::Abi::abi(self),
            num_descriptor_heaps,
            pp_descriptor_heaps.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetGraphicsRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetGraphicsRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).32)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).37)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).39)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).40)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn IASetIndexBuffer(&self, p_view: *const D3D12_INDEX_BUFFER_VIEW) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), p_view)
    }
    pub unsafe fn IASetVertexBuffers(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn SOSetTargets(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn OMSetRenderTargets(
        &self,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_render_target_descriptors,
            p_render_target_descriptors,
            rts_single_handle_to_descriptor_range,
            p_depth_stencil_descriptor,
        )
    }
    pub unsafe fn ClearDepthStencilView(
        &self,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            depth_stencil_view,
            clear_flags,
            depth,
            stencil,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearRenderTargetView(
        &self,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            render_target_view,
            color_rgba,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewUint<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewFloat<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn DiscardResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_region: *const D3D12_DISCARD_REGION,
    ) {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_region,
        )
    }
    pub unsafe fn BeginQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).52)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn EndQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn ResolveQueryData<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: T4__,
        aligned_destination_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            start_index,
            num_queries,
            p_destination_buffer.into().abi(),
            aligned_destination_buffer_offset,
        )
    }
    pub unsafe fn SetPredication<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_buffer: T0__,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ) {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_buffer.into().abi(),
            aligned_buffer_offset,
            operation,
        )
    }
    pub unsafe fn SetMarker(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).56)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn BeginEvent(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).57)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn EndEvent(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn ExecuteIndirect<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandSignature>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_command_signature: T0__,
        max_command_count: u32,
        p_argument_buffer: T2__,
        argument_buffer_offset: u64,
        p_count_buffer: T4__,
        count_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_command_signature.into().abi(),
            max_command_count,
            p_argument_buffer.into().abi(),
            argument_buffer_offset,
            p_count_buffer.into().abi(),
            count_buffer_offset,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT64<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn OMSetDepthBounds(&self, min: f32, max: f32) {
        (::windows::Interface::vtable(self).62)(::windows::Abi::abi(self), min, max)
    }
    pub unsafe fn SetSamplePositions(
        &self,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ) {
        (::windows::Interface::vtable(self).63)(
            ::windows::Abi::abi(self),
            num_samples_per_pixel,
            num_pixels,
            p_sample_positions,
        )
    }
    pub unsafe fn ResolveSubresourceRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: T4__,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ) {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            dstx,
            dsty,
            p_src_resource.into().abi(),
            src_subresource,
            p_src_rect,
            format,
            resolve_mode,
        )
    }
    pub unsafe fn SetViewInstanceMask(&self, mask: u32) {
        (::windows::Interface::vtable(self).65)(::windows::Abi::abi(self), mask)
    }
    pub unsafe fn WriteBufferImmediate(
        &self,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ) {
        (::windows::Interface::vtable(self).66)(::windows::Abi::abi(self), count, p_params, p_modes)
    }
    pub unsafe fn SetProtectedResourceSession<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_protected_resource_session: T0__,
    ) {
        (::windows::Interface::vtable(self).67)(
            ::windows::Abi::abi(self),
            p_protected_resource_session.into().abi(),
        )
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList3> for ::windows::IUnknown {
    fn from(value: ID3D12GraphicsCommandList3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList3> for ::windows::IUnknown {
    fn from(value: &ID3D12GraphicsCommandList3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList3> for ID3D12GraphicsCommandList2 {
    fn from(value: ID3D12GraphicsCommandList3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList3> for ID3D12GraphicsCommandList2 {
    fn from(value: &ID3D12GraphicsCommandList3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList2>>
    for ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList2>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList2>>
    for &'a ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList3> for ID3D12GraphicsCommandList1 {
    fn from(value: ID3D12GraphicsCommandList3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList3> for ID3D12GraphicsCommandList1 {
    fn from(value: &ID3D12GraphicsCommandList3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for &'a ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList3> for ID3D12GraphicsCommandList {
    fn from(value: ID3D12GraphicsCommandList3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList3> for ID3D12GraphicsCommandList {
    fn from(value: &ID3D12GraphicsCommandList3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for &'a ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList3> for ID3D12CommandList {
    fn from(value: ID3D12GraphicsCommandList3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList3> for ID3D12CommandList {
    fn from(value: &ID3D12GraphicsCommandList3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for &'a ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList3> for ID3D12DeviceChild {
    fn from(value: ID3D12GraphicsCommandList3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList3> for ID3D12DeviceChild {
    fn from(value: &ID3D12GraphicsCommandList3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList3> for ID3D12Object {
    fn from(value: ID3D12GraphicsCommandList3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList3> for ID3D12Object {
    fn from(value: &ID3D12GraphicsCommandList3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12GraphicsCommandList3 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for &'a ID3D12GraphicsCommandList3
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12MetaCommand(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12MetaCommand {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12MetaCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12MetaCommand {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12MetaCommand {}
unsafe impl ::windows::Interface for ID3D12MetaCommand {
    type Vtable = ID3D12MetaCommand_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3686288423,
        14030,
        20425,
        [184, 1, 240, 72, 196, 106, 197, 112],
    );
}
#[repr(C)]
pub struct ID3D12MetaCommand_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        parameter_index: u32,
    ) -> u64,
);
#[allow(non_snake_case)]
impl ID3D12MetaCommand {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetRequiredParameterResourceSize(
        &self,
        stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        parameter_index: u32,
    ) -> u64 {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), stage, parameter_index)
    }
}
impl ::std::convert::From<ID3D12MetaCommand> for ::windows::IUnknown {
    fn from(value: ID3D12MetaCommand) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12MetaCommand> for ::windows::IUnknown {
    fn from(value: &ID3D12MetaCommand) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12MetaCommand {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12MetaCommand {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12MetaCommand> for ID3D12Pageable {
    fn from(value: ID3D12MetaCommand) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12MetaCommand> for ID3D12Pageable {
    fn from(value: &ID3D12MetaCommand) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12MetaCommand {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12MetaCommand {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12MetaCommand> for ID3D12DeviceChild {
    fn from(value: ID3D12MetaCommand) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12MetaCommand> for ID3D12DeviceChild {
    fn from(value: &ID3D12MetaCommand) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12MetaCommand {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12MetaCommand {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12MetaCommand> for ID3D12Object {
    fn from(value: ID3D12MetaCommand) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12MetaCommand> for ID3D12Object {
    fn from(value: &ID3D12MetaCommand) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12MetaCommand {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12MetaCommand {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12GraphicsCommandList4(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12GraphicsCommandList4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12GraphicsCommandList4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12GraphicsCommandList4 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12GraphicsCommandList4 {}
unsafe impl ::windows::Interface for ID3D12GraphicsCommandList4 {
    type Vtable = ID3D12GraphicsCommandList4_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2270441870,
        54185,
        17729,
        [152, 207, 100, 91, 80, 220, 72, 116],
    );
}
#[repr(C)]
pub struct ID3D12GraphicsCommandList4_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_COMMAND_LIST_TYPE,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        num_bytes: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        p_src_resource: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: ::windows::RawPtr,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_viewports: u32,
        p_viewports: *const D3D12_VIEWPORT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, blend_factor: *const f32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, stencil_ref: u32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_command_list: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: ::windows::RawPtr,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_view: *const D3D12_INDEX_BUFFER_VIEW),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_region: *const D3D12_DISCARD_REGION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: ::windows::RawPtr,
        aligned_destination_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_buffer: ::windows::RawPtr,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_command_signature: ::windows::RawPtr,
        max_command_count: u32,
        p_argument_buffer: ::windows::RawPtr,
        argument_buffer_offset: u64,
        p_count_buffer: ::windows::RawPtr,
        count_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, min: f32, max: f32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, mask: u32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_protected_resource_session: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_targets: u32,
        p_render_targets: *const D3D12_RENDER_PASS_RENDER_TARGET_DESC,
        p_depth_stencil: *const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC,
        flags: D3D12_RENDER_PASS_FLAGS,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_meta_command: ::windows::RawPtr,
        p_initialization_parameters_data: *const ::std::ffi::c_void,
        initialization_parameters_data_size_in_bytes: usize,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_meta_command: ::windows::RawPtr,
        p_execution_parameters_data: *const ::std::ffi::c_void,
        execution_parameters_data_size_in_bytes: usize,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC,
        num_postbuild_info_descs: u32,
        p_postbuild_info_descs: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
        num_source_acceleration_structures: u32,
        p_source_acceleration_structure_data: *const u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        dest_acceleration_structure_data: u64,
        source_acceleration_structure_data: u64,
        mode: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_state_object: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_desc: *const D3D12_DISPATCH_RAYS_DESC),
);
#[allow(non_snake_case)]
impl ID3D12GraphicsCommandList4 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetType(&self) -> D3D12_COMMAND_LIST_TYPE {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn Close(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn Reset<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_allocator: T0__,
        p_initial_state: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_allocator.into().abi(),
            p_initial_state.into().abi(),
        )
    }
    pub unsafe fn ClearState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn DrawInstanced(
        &self,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            vertex_count_per_instance,
            instance_count,
            start_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn DrawIndexedInstanced(
        &self,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            index_count_per_instance,
            instance_count,
            start_index_location,
            base_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn Dispatch(
        &self,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ) {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            thread_group_countx,
            thread_group_county,
            thread_group_countz,
        )
    }
    pub unsafe fn CopyBufferRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        num_bytes: u64,
    ) {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            num_bytes,
        )
    }
    pub unsafe fn CopyTextureRegion(
        &self,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ) {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            p_dst,
            dstx,
            dsty,
            dstz,
            p_src,
            p_src_box,
        )
    }
    pub unsafe fn CopyResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        p_src_resource: T1__,
    ) {
        (::windows::Interface::vtable(self).17)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            p_src_resource.into().abi(),
        )
    }
    pub unsafe fn CopyTiles<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: T3__,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_tile_region_start_coordinate,
            p_tile_region_size,
            p_buffer.into().abi(),
            buffer_start_offset_in_bytes,
            flags,
        )
    }
    pub unsafe fn ResolveSubresource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        p_src_resource: T2__,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            p_src_resource.into().abi(),
            src_subresource,
            format,
        )
    }
    pub unsafe fn IASetPrimitiveTopology(
        &self,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ) {
        (::windows::Interface::vtable(self).20)(::windows::Abi::abi(self), primitive_topology)
    }
    pub unsafe fn RSSetViewports(&self, num_viewports: u32, p_viewports: *const D3D12_VIEWPORT) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            num_viewports,
            p_viewports,
        )
    }
    pub unsafe fn RSSetScissorRects(
        &self,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), num_rects, p_rects)
    }
    pub unsafe fn OMSetBlendFactor(&self, blend_factor: *const f32) {
        (::windows::Interface::vtable(self).23)(::windows::Abi::abi(self), blend_factor)
    }
    pub unsafe fn OMSetStencilRef(&self, stencil_ref: u32) {
        (::windows::Interface::vtable(self).24)(::windows::Abi::abi(self), stencil_ref)
    }
    pub unsafe fn SetPipelineState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn ResourceBarrier(
        &self,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ) {
        (::windows::Interface::vtable(self).26)(::windows::Abi::abi(self), num_barriers, p_barriers)
    }
    pub unsafe fn ExecuteBundle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>,
    >(
        &self,
        p_command_list: T0__,
    ) {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_command_list.into().abi(),
        )
    }
    pub unsafe fn SetDescriptorHeaps<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12DescriptorHeap>>,
    >(
        &self,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: T1__,
    ) {
        (::windows::Interface::vtable(self).28)(
            ::windows::Abi::abi(self),
            num_descriptor_heaps,
            pp_descriptor_heaps.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetGraphicsRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetGraphicsRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).32)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).37)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).39)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).40)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn IASetIndexBuffer(&self, p_view: *const D3D12_INDEX_BUFFER_VIEW) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), p_view)
    }
    pub unsafe fn IASetVertexBuffers(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn SOSetTargets(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn OMSetRenderTargets(
        &self,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_render_target_descriptors,
            p_render_target_descriptors,
            rts_single_handle_to_descriptor_range,
            p_depth_stencil_descriptor,
        )
    }
    pub unsafe fn ClearDepthStencilView(
        &self,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            depth_stencil_view,
            clear_flags,
            depth,
            stencil,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearRenderTargetView(
        &self,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            render_target_view,
            color_rgba,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewUint<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewFloat<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn DiscardResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_region: *const D3D12_DISCARD_REGION,
    ) {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_region,
        )
    }
    pub unsafe fn BeginQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).52)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn EndQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn ResolveQueryData<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: T4__,
        aligned_destination_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            start_index,
            num_queries,
            p_destination_buffer.into().abi(),
            aligned_destination_buffer_offset,
        )
    }
    pub unsafe fn SetPredication<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_buffer: T0__,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ) {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_buffer.into().abi(),
            aligned_buffer_offset,
            operation,
        )
    }
    pub unsafe fn SetMarker(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).56)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn BeginEvent(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).57)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn EndEvent(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn ExecuteIndirect<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandSignature>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_command_signature: T0__,
        max_command_count: u32,
        p_argument_buffer: T2__,
        argument_buffer_offset: u64,
        p_count_buffer: T4__,
        count_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_command_signature.into().abi(),
            max_command_count,
            p_argument_buffer.into().abi(),
            argument_buffer_offset,
            p_count_buffer.into().abi(),
            count_buffer_offset,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT64<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn OMSetDepthBounds(&self, min: f32, max: f32) {
        (::windows::Interface::vtable(self).62)(::windows::Abi::abi(self), min, max)
    }
    pub unsafe fn SetSamplePositions(
        &self,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ) {
        (::windows::Interface::vtable(self).63)(
            ::windows::Abi::abi(self),
            num_samples_per_pixel,
            num_pixels,
            p_sample_positions,
        )
    }
    pub unsafe fn ResolveSubresourceRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: T4__,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ) {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            dstx,
            dsty,
            p_src_resource.into().abi(),
            src_subresource,
            p_src_rect,
            format,
            resolve_mode,
        )
    }
    pub unsafe fn SetViewInstanceMask(&self, mask: u32) {
        (::windows::Interface::vtable(self).65)(::windows::Abi::abi(self), mask)
    }
    pub unsafe fn WriteBufferImmediate(
        &self,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ) {
        (::windows::Interface::vtable(self).66)(::windows::Abi::abi(self), count, p_params, p_modes)
    }
    pub unsafe fn SetProtectedResourceSession<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_protected_resource_session: T0__,
    ) {
        (::windows::Interface::vtable(self).67)(
            ::windows::Abi::abi(self),
            p_protected_resource_session.into().abi(),
        )
    }
    pub unsafe fn BeginRenderPass(
        &self,
        num_render_targets: u32,
        p_render_targets: *const D3D12_RENDER_PASS_RENDER_TARGET_DESC,
        p_depth_stencil: *const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC,
        flags: D3D12_RENDER_PASS_FLAGS,
    ) {
        (::windows::Interface::vtable(self).68)(
            ::windows::Abi::abi(self),
            num_render_targets,
            p_render_targets,
            p_depth_stencil,
            flags,
        )
    }
    pub unsafe fn EndRenderPass(&self) {
        (::windows::Interface::vtable(self).69)(::windows::Abi::abi(self))
    }
    pub unsafe fn InitializeMetaCommand<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12MetaCommand>>,
    >(
        &self,
        p_meta_command: T0__,
        p_initialization_parameters_data: *const ::std::ffi::c_void,
        initialization_parameters_data_size_in_bytes: usize,
    ) {
        (::windows::Interface::vtable(self).70)(
            ::windows::Abi::abi(self),
            p_meta_command.into().abi(),
            p_initialization_parameters_data,
            initialization_parameters_data_size_in_bytes,
        )
    }
    pub unsafe fn ExecuteMetaCommand<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12MetaCommand>>,
    >(
        &self,
        p_meta_command: T0__,
        p_execution_parameters_data: *const ::std::ffi::c_void,
        execution_parameters_data_size_in_bytes: usize,
    ) {
        (::windows::Interface::vtable(self).71)(
            ::windows::Abi::abi(self),
            p_meta_command.into().abi(),
            p_execution_parameters_data,
            execution_parameters_data_size_in_bytes,
        )
    }
    pub unsafe fn BuildRaytracingAccelerationStructure(
        &self,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC,
        num_postbuild_info_descs: u32,
        p_postbuild_info_descs: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
    ) {
        (::windows::Interface::vtable(self).72)(
            ::windows::Abi::abi(self),
            p_desc,
            num_postbuild_info_descs,
            p_postbuild_info_descs,
        )
    }
    pub unsafe fn EmitRaytracingAccelerationStructurePostbuildInfo(
        &self,
        p_desc: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
        num_source_acceleration_structures: u32,
        p_source_acceleration_structure_data: *const u64,
    ) {
        (::windows::Interface::vtable(self).73)(
            ::windows::Abi::abi(self),
            p_desc,
            num_source_acceleration_structures,
            p_source_acceleration_structure_data,
        )
    }
    pub unsafe fn CopyRaytracingAccelerationStructure(
        &self,
        dest_acceleration_structure_data: u64,
        source_acceleration_structure_data: u64,
        mode: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE,
    ) {
        (::windows::Interface::vtable(self).74)(
            ::windows::Abi::abi(self),
            dest_acceleration_structure_data,
            source_acceleration_structure_data,
            mode,
        )
    }
    pub unsafe fn SetPipelineState1<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12StateObject>>,
    >(
        &self,
        p_state_object: T0__,
    ) {
        (::windows::Interface::vtable(self).75)(
            ::windows::Abi::abi(self),
            p_state_object.into().abi(),
        )
    }
    pub unsafe fn DispatchRays(&self, p_desc: *const D3D12_DISPATCH_RAYS_DESC) {
        (::windows::Interface::vtable(self).76)(::windows::Abi::abi(self), p_desc)
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList4> for ::windows::IUnknown {
    fn from(value: ID3D12GraphicsCommandList4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList4> for ::windows::IUnknown {
    fn from(value: &ID3D12GraphicsCommandList4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList4> for ID3D12GraphicsCommandList3 {
    fn from(value: ID3D12GraphicsCommandList4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList4> for ID3D12GraphicsCommandList3 {
    fn from(value: &ID3D12GraphicsCommandList4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList3>>
    for ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList3>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList3>>
    for &'a ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList3>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList4> for ID3D12GraphicsCommandList2 {
    fn from(value: ID3D12GraphicsCommandList4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList4> for ID3D12GraphicsCommandList2 {
    fn from(value: &ID3D12GraphicsCommandList4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList2>>
    for ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList2>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList2>>
    for &'a ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList4> for ID3D12GraphicsCommandList1 {
    fn from(value: ID3D12GraphicsCommandList4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList4> for ID3D12GraphicsCommandList1 {
    fn from(value: &ID3D12GraphicsCommandList4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for &'a ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList4> for ID3D12GraphicsCommandList {
    fn from(value: ID3D12GraphicsCommandList4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList4> for ID3D12GraphicsCommandList {
    fn from(value: &ID3D12GraphicsCommandList4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for &'a ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList4> for ID3D12CommandList {
    fn from(value: ID3D12GraphicsCommandList4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList4> for ID3D12CommandList {
    fn from(value: &ID3D12GraphicsCommandList4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for &'a ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList4> for ID3D12DeviceChild {
    fn from(value: ID3D12GraphicsCommandList4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList4> for ID3D12DeviceChild {
    fn from(value: &ID3D12GraphicsCommandList4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList4> for ID3D12Object {
    fn from(value: ID3D12GraphicsCommandList4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList4> for ID3D12Object {
    fn from(value: &ID3D12GraphicsCommandList4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12GraphicsCommandList4 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for &'a ID3D12GraphicsCommandList4
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12GraphicsCommandList5(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12GraphicsCommandList5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12GraphicsCommandList5 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12GraphicsCommandList5 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12GraphicsCommandList5 {}
unsafe impl ::windows::Interface for ID3D12GraphicsCommandList5 {
    type Vtable = ID3D12GraphicsCommandList5_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1426393177,
        16420,
        18252,
        [135, 245, 100, 114, 234, 238, 68, 234],
    );
}
#[repr(C)]
pub struct ID3D12GraphicsCommandList5_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_COMMAND_LIST_TYPE,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        num_bytes: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        p_src_resource: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: ::windows::RawPtr,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_viewports: u32,
        p_viewports: *const D3D12_VIEWPORT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, blend_factor: *const f32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, stencil_ref: u32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_command_list: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: ::windows::RawPtr,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_view: *const D3D12_INDEX_BUFFER_VIEW),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_region: *const D3D12_DISCARD_REGION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: ::windows::RawPtr,
        aligned_destination_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_buffer: ::windows::RawPtr,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_command_signature: ::windows::RawPtr,
        max_command_count: u32,
        p_argument_buffer: ::windows::RawPtr,
        argument_buffer_offset: u64,
        p_count_buffer: ::windows::RawPtr,
        count_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, min: f32, max: f32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, mask: u32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_protected_resource_session: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_targets: u32,
        p_render_targets: *const D3D12_RENDER_PASS_RENDER_TARGET_DESC,
        p_depth_stencil: *const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC,
        flags: D3D12_RENDER_PASS_FLAGS,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_meta_command: ::windows::RawPtr,
        p_initialization_parameters_data: *const ::std::ffi::c_void,
        initialization_parameters_data_size_in_bytes: usize,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_meta_command: ::windows::RawPtr,
        p_execution_parameters_data: *const ::std::ffi::c_void,
        execution_parameters_data_size_in_bytes: usize,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC,
        num_postbuild_info_descs: u32,
        p_postbuild_info_descs: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
        num_source_acceleration_structures: u32,
        p_source_acceleration_structure_data: *const u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        dest_acceleration_structure_data: u64,
        source_acceleration_structure_data: u64,
        mode: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_state_object: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_desc: *const D3D12_DISPATCH_RAYS_DESC),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        base_shading_rate: D3D12_SHADING_RATE,
        combiners: *const D3D12_SHADING_RATE_COMBINER,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, shading_rate_image: ::windows::RawPtr),
);
#[allow(non_snake_case)]
impl ID3D12GraphicsCommandList5 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetType(&self) -> D3D12_COMMAND_LIST_TYPE {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn Close(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn Reset<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_allocator: T0__,
        p_initial_state: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_allocator.into().abi(),
            p_initial_state.into().abi(),
        )
    }
    pub unsafe fn ClearState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn DrawInstanced(
        &self,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            vertex_count_per_instance,
            instance_count,
            start_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn DrawIndexedInstanced(
        &self,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            index_count_per_instance,
            instance_count,
            start_index_location,
            base_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn Dispatch(
        &self,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ) {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            thread_group_countx,
            thread_group_county,
            thread_group_countz,
        )
    }
    pub unsafe fn CopyBufferRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        num_bytes: u64,
    ) {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            num_bytes,
        )
    }
    pub unsafe fn CopyTextureRegion(
        &self,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ) {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            p_dst,
            dstx,
            dsty,
            dstz,
            p_src,
            p_src_box,
        )
    }
    pub unsafe fn CopyResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        p_src_resource: T1__,
    ) {
        (::windows::Interface::vtable(self).17)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            p_src_resource.into().abi(),
        )
    }
    pub unsafe fn CopyTiles<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: T3__,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_tile_region_start_coordinate,
            p_tile_region_size,
            p_buffer.into().abi(),
            buffer_start_offset_in_bytes,
            flags,
        )
    }
    pub unsafe fn ResolveSubresource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        p_src_resource: T2__,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            p_src_resource.into().abi(),
            src_subresource,
            format,
        )
    }
    pub unsafe fn IASetPrimitiveTopology(
        &self,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ) {
        (::windows::Interface::vtable(self).20)(::windows::Abi::abi(self), primitive_topology)
    }
    pub unsafe fn RSSetViewports(&self, num_viewports: u32, p_viewports: *const D3D12_VIEWPORT) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            num_viewports,
            p_viewports,
        )
    }
    pub unsafe fn RSSetScissorRects(
        &self,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), num_rects, p_rects)
    }
    pub unsafe fn OMSetBlendFactor(&self, blend_factor: *const f32) {
        (::windows::Interface::vtable(self).23)(::windows::Abi::abi(self), blend_factor)
    }
    pub unsafe fn OMSetStencilRef(&self, stencil_ref: u32) {
        (::windows::Interface::vtable(self).24)(::windows::Abi::abi(self), stencil_ref)
    }
    pub unsafe fn SetPipelineState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn ResourceBarrier(
        &self,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ) {
        (::windows::Interface::vtable(self).26)(::windows::Abi::abi(self), num_barriers, p_barriers)
    }
    pub unsafe fn ExecuteBundle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>,
    >(
        &self,
        p_command_list: T0__,
    ) {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_command_list.into().abi(),
        )
    }
    pub unsafe fn SetDescriptorHeaps<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12DescriptorHeap>>,
    >(
        &self,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: T1__,
    ) {
        (::windows::Interface::vtable(self).28)(
            ::windows::Abi::abi(self),
            num_descriptor_heaps,
            pp_descriptor_heaps.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetGraphicsRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetGraphicsRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).32)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).37)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).39)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).40)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn IASetIndexBuffer(&self, p_view: *const D3D12_INDEX_BUFFER_VIEW) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), p_view)
    }
    pub unsafe fn IASetVertexBuffers(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn SOSetTargets(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn OMSetRenderTargets(
        &self,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_render_target_descriptors,
            p_render_target_descriptors,
            rts_single_handle_to_descriptor_range,
            p_depth_stencil_descriptor,
        )
    }
    pub unsafe fn ClearDepthStencilView(
        &self,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            depth_stencil_view,
            clear_flags,
            depth,
            stencil,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearRenderTargetView(
        &self,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            render_target_view,
            color_rgba,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewUint<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewFloat<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn DiscardResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_region: *const D3D12_DISCARD_REGION,
    ) {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_region,
        )
    }
    pub unsafe fn BeginQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).52)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn EndQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn ResolveQueryData<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: T4__,
        aligned_destination_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            start_index,
            num_queries,
            p_destination_buffer.into().abi(),
            aligned_destination_buffer_offset,
        )
    }
    pub unsafe fn SetPredication<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_buffer: T0__,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ) {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_buffer.into().abi(),
            aligned_buffer_offset,
            operation,
        )
    }
    pub unsafe fn SetMarker(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).56)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn BeginEvent(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).57)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn EndEvent(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn ExecuteIndirect<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandSignature>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_command_signature: T0__,
        max_command_count: u32,
        p_argument_buffer: T2__,
        argument_buffer_offset: u64,
        p_count_buffer: T4__,
        count_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_command_signature.into().abi(),
            max_command_count,
            p_argument_buffer.into().abi(),
            argument_buffer_offset,
            p_count_buffer.into().abi(),
            count_buffer_offset,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT64<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn OMSetDepthBounds(&self, min: f32, max: f32) {
        (::windows::Interface::vtable(self).62)(::windows::Abi::abi(self), min, max)
    }
    pub unsafe fn SetSamplePositions(
        &self,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ) {
        (::windows::Interface::vtable(self).63)(
            ::windows::Abi::abi(self),
            num_samples_per_pixel,
            num_pixels,
            p_sample_positions,
        )
    }
    pub unsafe fn ResolveSubresourceRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: T4__,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ) {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            dstx,
            dsty,
            p_src_resource.into().abi(),
            src_subresource,
            p_src_rect,
            format,
            resolve_mode,
        )
    }
    pub unsafe fn SetViewInstanceMask(&self, mask: u32) {
        (::windows::Interface::vtable(self).65)(::windows::Abi::abi(self), mask)
    }
    pub unsafe fn WriteBufferImmediate(
        &self,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ) {
        (::windows::Interface::vtable(self).66)(::windows::Abi::abi(self), count, p_params, p_modes)
    }
    pub unsafe fn SetProtectedResourceSession<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_protected_resource_session: T0__,
    ) {
        (::windows::Interface::vtable(self).67)(
            ::windows::Abi::abi(self),
            p_protected_resource_session.into().abi(),
        )
    }
    pub unsafe fn BeginRenderPass(
        &self,
        num_render_targets: u32,
        p_render_targets: *const D3D12_RENDER_PASS_RENDER_TARGET_DESC,
        p_depth_stencil: *const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC,
        flags: D3D12_RENDER_PASS_FLAGS,
    ) {
        (::windows::Interface::vtable(self).68)(
            ::windows::Abi::abi(self),
            num_render_targets,
            p_render_targets,
            p_depth_stencil,
            flags,
        )
    }
    pub unsafe fn EndRenderPass(&self) {
        (::windows::Interface::vtable(self).69)(::windows::Abi::abi(self))
    }
    pub unsafe fn InitializeMetaCommand<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12MetaCommand>>,
    >(
        &self,
        p_meta_command: T0__,
        p_initialization_parameters_data: *const ::std::ffi::c_void,
        initialization_parameters_data_size_in_bytes: usize,
    ) {
        (::windows::Interface::vtable(self).70)(
            ::windows::Abi::abi(self),
            p_meta_command.into().abi(),
            p_initialization_parameters_data,
            initialization_parameters_data_size_in_bytes,
        )
    }
    pub unsafe fn ExecuteMetaCommand<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12MetaCommand>>,
    >(
        &self,
        p_meta_command: T0__,
        p_execution_parameters_data: *const ::std::ffi::c_void,
        execution_parameters_data_size_in_bytes: usize,
    ) {
        (::windows::Interface::vtable(self).71)(
            ::windows::Abi::abi(self),
            p_meta_command.into().abi(),
            p_execution_parameters_data,
            execution_parameters_data_size_in_bytes,
        )
    }
    pub unsafe fn BuildRaytracingAccelerationStructure(
        &self,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC,
        num_postbuild_info_descs: u32,
        p_postbuild_info_descs: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
    ) {
        (::windows::Interface::vtable(self).72)(
            ::windows::Abi::abi(self),
            p_desc,
            num_postbuild_info_descs,
            p_postbuild_info_descs,
        )
    }
    pub unsafe fn EmitRaytracingAccelerationStructurePostbuildInfo(
        &self,
        p_desc: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
        num_source_acceleration_structures: u32,
        p_source_acceleration_structure_data: *const u64,
    ) {
        (::windows::Interface::vtable(self).73)(
            ::windows::Abi::abi(self),
            p_desc,
            num_source_acceleration_structures,
            p_source_acceleration_structure_data,
        )
    }
    pub unsafe fn CopyRaytracingAccelerationStructure(
        &self,
        dest_acceleration_structure_data: u64,
        source_acceleration_structure_data: u64,
        mode: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE,
    ) {
        (::windows::Interface::vtable(self).74)(
            ::windows::Abi::abi(self),
            dest_acceleration_structure_data,
            source_acceleration_structure_data,
            mode,
        )
    }
    pub unsafe fn SetPipelineState1<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12StateObject>>,
    >(
        &self,
        p_state_object: T0__,
    ) {
        (::windows::Interface::vtable(self).75)(
            ::windows::Abi::abi(self),
            p_state_object.into().abi(),
        )
    }
    pub unsafe fn DispatchRays(&self, p_desc: *const D3D12_DISPATCH_RAYS_DESC) {
        (::windows::Interface::vtable(self).76)(::windows::Abi::abi(self), p_desc)
    }
    pub unsafe fn RSSetShadingRate(
        &self,
        base_shading_rate: D3D12_SHADING_RATE,
        combiners: *const D3D12_SHADING_RATE_COMBINER,
    ) {
        (::windows::Interface::vtable(self).77)(
            ::windows::Abi::abi(self),
            base_shading_rate,
            combiners,
        )
    }
    pub unsafe fn RSSetShadingRateImage<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        shading_rate_image: T0__,
    ) {
        (::windows::Interface::vtable(self).78)(
            ::windows::Abi::abi(self),
            shading_rate_image.into().abi(),
        )
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList5> for ::windows::IUnknown {
    fn from(value: ID3D12GraphicsCommandList5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList5> for ::windows::IUnknown {
    fn from(value: &ID3D12GraphicsCommandList5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList4 {
    fn from(value: ID3D12GraphicsCommandList5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList4 {
    fn from(value: &ID3D12GraphicsCommandList5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList4>>
    for ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList4>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList4>>
    for &'a ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList4>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList3 {
    fn from(value: ID3D12GraphicsCommandList5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList3 {
    fn from(value: &ID3D12GraphicsCommandList5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList3>>
    for ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList3>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList3>>
    for &'a ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList3>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList2 {
    fn from(value: ID3D12GraphicsCommandList5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList2 {
    fn from(value: &ID3D12GraphicsCommandList5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList2>>
    for ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList2>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList2>>
    for &'a ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList1 {
    fn from(value: ID3D12GraphicsCommandList5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList1 {
    fn from(value: &ID3D12GraphicsCommandList5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for &'a ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList {
    fn from(value: ID3D12GraphicsCommandList5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList5> for ID3D12GraphicsCommandList {
    fn from(value: &ID3D12GraphicsCommandList5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for &'a ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList5> for ID3D12CommandList {
    fn from(value: ID3D12GraphicsCommandList5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList5> for ID3D12CommandList {
    fn from(value: &ID3D12GraphicsCommandList5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for &'a ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList5> for ID3D12DeviceChild {
    fn from(value: ID3D12GraphicsCommandList5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList5> for ID3D12DeviceChild {
    fn from(value: &ID3D12GraphicsCommandList5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList5> for ID3D12Object {
    fn from(value: ID3D12GraphicsCommandList5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList5> for ID3D12Object {
    fn from(value: &ID3D12GraphicsCommandList5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12GraphicsCommandList5 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for &'a ID3D12GraphicsCommandList5
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12GraphicsCommandList6(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12GraphicsCommandList6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12GraphicsCommandList6 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12GraphicsCommandList6 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12GraphicsCommandList6 {}
unsafe impl ::windows::Interface for ID3D12GraphicsCommandList6 {
    type Vtable = ID3D12GraphicsCommandList6_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3280107664,
        58696,
        19706,
        [150, 207, 86, 137, 169, 55, 15, 128],
    );
}
#[repr(C)]
pub struct ID3D12GraphicsCommandList6_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_COMMAND_LIST_TYPE,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_allocator: ::windows::RawPtr,
        p_initial_state: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        num_bytes: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        p_src_resource: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_tiled_resource: ::windows::RawPtr,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: ::windows::RawPtr,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_viewports: u32,
        p_viewports: *const D3D12_VIEWPORT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, blend_factor: *const f32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, stencil_ref: u32),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_pipeline_state: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_command_list: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: ::windows::RawPtr,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_root_signature: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        root_parameter_index: u32,
        buffer_location: u64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_view: *const D3D12_INDEX_BUFFER_VIEW),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: ::windows::RawPtr,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        p_region: *const D3D12_DISCARD_REGION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_query_heap: ::windows::RawPtr,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: ::windows::RawPtr,
        aligned_destination_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_buffer: ::windows::RawPtr,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        metadata: u32,
        p_data: *const ::std::ffi::c_void,
        size: u32,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_command_signature: ::windows::RawPtr,
        max_command_count: u32,
        p_argument_buffer: ::windows::RawPtr,
        argument_buffer_offset: u64,
        p_count_buffer: ::windows::RawPtr,
        count_buffer_offset: u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_buffer: ::windows::RawPtr,
        dst_offset: u64,
        p_src_buffer: ::windows::RawPtr,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: ::windows::RawPtr,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, min: f32, max: f32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_resource: ::windows::RawPtr,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: ::windows::RawPtr,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, mask: u32),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_protected_resource_session: ::windows::RawPtr,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        num_render_targets: u32,
        p_render_targets: *const D3D12_RENDER_PASS_RENDER_TARGET_DESC,
        p_depth_stencil: *const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC,
        flags: D3D12_RENDER_PASS_FLAGS,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_meta_command: ::windows::RawPtr,
        p_initialization_parameters_data: *const ::std::ffi::c_void,
        initialization_parameters_data_size_in_bytes: usize,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_meta_command: ::windows::RawPtr,
        p_execution_parameters_data: *const ::std::ffi::c_void,
        execution_parameters_data_size_in_bytes: usize,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC,
        num_postbuild_info_descs: u32,
        p_postbuild_info_descs: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
        num_source_acceleration_structures: u32,
        p_source_acceleration_structure_data: *const u64,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        dest_acceleration_structure_data: u64,
        source_acceleration_structure_data: u64,
        mode: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_state_object: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_desc: *const D3D12_DISPATCH_RAYS_DESC),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        base_shading_rate: D3D12_SHADING_RATE,
        combiners: *const D3D12_SHADING_RATE_COMBINER,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, shading_rate_image: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ),
);
#[allow(non_snake_case)]
impl ID3D12GraphicsCommandList6 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetType(&self) -> D3D12_COMMAND_LIST_TYPE {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn Close(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn Reset<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandAllocator>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_allocator: T0__,
        p_initial_state: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_allocator.into().abi(),
            p_initial_state.into().abi(),
        )
    }
    pub unsafe fn ClearState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).11)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn DrawInstanced(
        &self,
        vertex_count_per_instance: u32,
        instance_count: u32,
        start_vertex_location: u32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            vertex_count_per_instance,
            instance_count,
            start_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn DrawIndexedInstanced(
        &self,
        index_count_per_instance: u32,
        instance_count: u32,
        start_index_location: u32,
        base_vertex_location: i32,
        start_instance_location: u32,
    ) {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            index_count_per_instance,
            instance_count,
            start_index_location,
            base_vertex_location,
            start_instance_location,
        )
    }
    pub unsafe fn Dispatch(
        &self,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ) {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            thread_group_countx,
            thread_group_county,
            thread_group_countz,
        )
    }
    pub unsafe fn CopyBufferRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        num_bytes: u64,
    ) {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            num_bytes,
        )
    }
    pub unsafe fn CopyTextureRegion(
        &self,
        p_dst: *const D3D12_TEXTURE_COPY_LOCATION,
        dstx: u32,
        dsty: u32,
        dstz: u32,
        p_src: *const D3D12_TEXTURE_COPY_LOCATION,
        p_src_box: *const D3D12_BOX,
    ) {
        (::windows::Interface::vtable(self).16)(
            ::windows::Abi::abi(self),
            p_dst,
            dstx,
            dsty,
            dstz,
            p_src,
            p_src_box,
        )
    }
    pub unsafe fn CopyResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        p_src_resource: T1__,
    ) {
        (::windows::Interface::vtable(self).17)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            p_src_resource.into().abi(),
        )
    }
    pub unsafe fn CopyTiles<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T3__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_tiled_resource: T0__,
        p_tile_region_start_coordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
        p_tile_region_size: *const D3D12_TILE_REGION_SIZE,
        p_buffer: T3__,
        buffer_start_offset_in_bytes: u64,
        flags: D3D12_TILE_COPY_FLAGS,
    ) {
        (::windows::Interface::vtable(self).18)(
            ::windows::Abi::abi(self),
            p_tiled_resource.into().abi(),
            p_tile_region_start_coordinate,
            p_tile_region_size,
            p_buffer.into().abi(),
            buffer_start_offset_in_bytes,
            flags,
        )
    }
    pub unsafe fn ResolveSubresource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        p_src_resource: T2__,
        src_subresource: u32,
        format: super::dxgi::DXGI_FORMAT,
    ) {
        (::windows::Interface::vtable(self).19)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            p_src_resource.into().abi(),
            src_subresource,
            format,
        )
    }
    pub unsafe fn IASetPrimitiveTopology(
        &self,
        primitive_topology: super::direct3d11::D3D_PRIMITIVE_TOPOLOGY,
    ) {
        (::windows::Interface::vtable(self).20)(::windows::Abi::abi(self), primitive_topology)
    }
    pub unsafe fn RSSetViewports(&self, num_viewports: u32, p_viewports: *const D3D12_VIEWPORT) {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            num_viewports,
            p_viewports,
        )
    }
    pub unsafe fn RSSetScissorRects(
        &self,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self), num_rects, p_rects)
    }
    pub unsafe fn OMSetBlendFactor(&self, blend_factor: *const f32) {
        (::windows::Interface::vtable(self).23)(::windows::Abi::abi(self), blend_factor)
    }
    pub unsafe fn OMSetStencilRef(&self, stencil_ref: u32) {
        (::windows::Interface::vtable(self).24)(::windows::Abi::abi(self), stencil_ref)
    }
    pub unsafe fn SetPipelineState<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_pipeline_state: T0__,
    ) {
        (::windows::Interface::vtable(self).25)(
            ::windows::Abi::abi(self),
            p_pipeline_state.into().abi(),
        )
    }
    pub unsafe fn ResourceBarrier(
        &self,
        num_barriers: u32,
        p_barriers: *const D3D12_RESOURCE_BARRIER,
    ) {
        (::windows::Interface::vtable(self).26)(::windows::Abi::abi(self), num_barriers, p_barriers)
    }
    pub unsafe fn ExecuteBundle<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>,
    >(
        &self,
        p_command_list: T0__,
    ) {
        (::windows::Interface::vtable(self).27)(
            ::windows::Abi::abi(self),
            p_command_list.into().abi(),
        )
    }
    pub unsafe fn SetDescriptorHeaps<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12DescriptorHeap>>,
    >(
        &self,
        num_descriptor_heaps: u32,
        pp_descriptor_heaps: T1__,
    ) {
        (::windows::Interface::vtable(self).28)(
            ::windows::Abi::abi(self),
            num_descriptor_heaps,
            pp_descriptor_heaps.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).29)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetGraphicsRootSignature<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12RootSignature>>,
    >(
        &self,
        p_root_signature: T0__,
    ) {
        (::windows::Interface::vtable(self).30)(
            ::windows::Abi::abi(self),
            p_root_signature.into().abi(),
        )
    }
    pub unsafe fn SetComputeRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).31)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetGraphicsRootDescriptorTable(
        &self,
        root_parameter_index: u32,
        base_descriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).32)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            base_descriptor,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).33)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstant(
        &self,
        root_parameter_index: u32,
        src_data: u32,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).34)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).35)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetGraphicsRoot32BitConstants(
        &self,
        root_parameter_index: u32,
        num32_bit_values_to_set: u32,
        p_src_data: *const ::std::ffi::c_void,
        dest_offset_in32_bit_values: u32,
    ) {
        (::windows::Interface::vtable(self).36)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            num32_bit_values_to_set,
            p_src_data,
            dest_offset_in32_bit_values,
        )
    }
    pub unsafe fn SetComputeRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).37)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootConstantBufferView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).38)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).39)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootShaderResourceView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).40)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetComputeRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).41)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn SetGraphicsRootUnorderedAccessView(
        &self,
        root_parameter_index: u32,
        buffer_location: u64,
    ) {
        (::windows::Interface::vtable(self).42)(
            ::windows::Abi::abi(self),
            root_parameter_index,
            buffer_location,
        )
    }
    pub unsafe fn IASetIndexBuffer(&self, p_view: *const D3D12_INDEX_BUFFER_VIEW) {
        (::windows::Interface::vtable(self).43)(::windows::Abi::abi(self), p_view)
    }
    pub unsafe fn IASetVertexBuffers(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_VERTEX_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).44)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn SOSetTargets(
        &self,
        start_slot: u32,
        num_views: u32,
        p_views: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ) {
        (::windows::Interface::vtable(self).45)(
            ::windows::Abi::abi(self),
            start_slot,
            num_views,
            p_views,
        )
    }
    pub unsafe fn OMSetRenderTargets(
        &self,
        num_render_target_descriptors: u32,
        p_render_target_descriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE,
        rts_single_handle_to_descriptor_range: ::windows::BOOL,
        p_depth_stencil_descriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE,
    ) {
        (::windows::Interface::vtable(self).46)(
            ::windows::Abi::abi(self),
            num_render_target_descriptors,
            p_render_target_descriptors,
            rts_single_handle_to_descriptor_range,
            p_depth_stencil_descriptor,
        )
    }
    pub unsafe fn ClearDepthStencilView(
        &self,
        depth_stencil_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        clear_flags: D3D12_CLEAR_FLAGS,
        depth: f32,
        stencil: u8,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).47)(
            ::windows::Abi::abi(self),
            depth_stencil_view,
            clear_flags,
            depth,
            stencil,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearRenderTargetView(
        &self,
        render_target_view: D3D12_CPU_DESCRIPTOR_HANDLE,
        color_rgba: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).48)(
            ::windows::Abi::abi(self),
            render_target_view,
            color_rgba,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewUint<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const u32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).49)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn ClearUnorderedAccessViewFloat<
        'a,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        view_gpu_handle_in_current_heap: D3D12_GPU_DESCRIPTOR_HANDLE,
        view_cpu_handle: D3D12_CPU_DESCRIPTOR_HANDLE,
        p_resource: T2__,
        values: *const f32,
        num_rects: u32,
        p_rects: *const super::display_devices::RECT,
    ) {
        (::windows::Interface::vtable(self).50)(
            ::windows::Abi::abi(self),
            view_gpu_handle_in_current_heap,
            view_cpu_handle,
            p_resource.into().abi(),
            values,
            num_rects,
            p_rects,
        )
    }
    pub unsafe fn DiscardResource<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_resource: T0__,
        p_region: *const D3D12_DISCARD_REGION,
    ) {
        (::windows::Interface::vtable(self).51)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            p_region,
        )
    }
    pub unsafe fn BeginQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).52)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn EndQuery<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        index: u32,
    ) {
        (::windows::Interface::vtable(self).53)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            index,
        )
    }
    pub unsafe fn ResolveQueryData<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12QueryHeap>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_query_heap: T0__,
        r#type: D3D12_QUERY_TYPE,
        start_index: u32,
        num_queries: u32,
        p_destination_buffer: T4__,
        aligned_destination_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).54)(
            ::windows::Abi::abi(self),
            p_query_heap.into().abi(),
            r#type,
            start_index,
            num_queries,
            p_destination_buffer.into().abi(),
            aligned_destination_buffer_offset,
        )
    }
    pub unsafe fn SetPredication<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_buffer: T0__,
        aligned_buffer_offset: u64,
        operation: D3D12_PREDICATION_OP,
    ) {
        (::windows::Interface::vtable(self).55)(
            ::windows::Abi::abi(self),
            p_buffer.into().abi(),
            aligned_buffer_offset,
            operation,
        )
    }
    pub unsafe fn SetMarker(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).56)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn BeginEvent(&self, metadata: u32, p_data: *const ::std::ffi::c_void, size: u32) {
        (::windows::Interface::vtable(self).57)(::windows::Abi::abi(self), metadata, p_data, size)
    }
    pub unsafe fn EndEvent(&self) {
        (::windows::Interface::vtable(self).58)(::windows::Abi::abi(self))
    }
    pub unsafe fn ExecuteIndirect<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12CommandSignature>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_command_signature: T0__,
        max_command_count: u32,
        p_argument_buffer: T2__,
        argument_buffer_offset: u64,
        p_count_buffer: T4__,
        count_buffer_offset: u64,
    ) {
        (::windows::Interface::vtable(self).59)(
            ::windows::Abi::abi(self),
            p_command_signature.into().abi(),
            max_command_count,
            p_argument_buffer.into().abi(),
            argument_buffer_offset,
            p_count_buffer.into().abi(),
            count_buffer_offset,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).60)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn AtomicCopyBufferUINT64<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T2__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T5__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_buffer: T0__,
        dst_offset: u64,
        p_src_buffer: T2__,
        src_offset: u64,
        dependencies: u32,
        pp_dependent_resources: T5__,
        p_dependent_subresource_ranges: *const D3D12_SUBRESOURCE_RANGE_UINT64,
    ) {
        (::windows::Interface::vtable(self).61)(
            ::windows::Abi::abi(self),
            p_dst_buffer.into().abi(),
            dst_offset,
            p_src_buffer.into().abi(),
            src_offset,
            dependencies,
            pp_dependent_resources.into().abi(),
            p_dependent_subresource_ranges,
        )
    }
    pub unsafe fn OMSetDepthBounds(&self, min: f32, max: f32) {
        (::windows::Interface::vtable(self).62)(::windows::Abi::abi(self), min, max)
    }
    pub unsafe fn SetSamplePositions(
        &self,
        num_samples_per_pixel: u32,
        num_pixels: u32,
        p_sample_positions: *mut D3D12_SAMPLE_POSITION,
    ) {
        (::windows::Interface::vtable(self).63)(
            ::windows::Abi::abi(self),
            num_samples_per_pixel,
            num_pixels,
            p_sample_positions,
        )
    }
    pub unsafe fn ResolveSubresourceRegion<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
        T4__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        p_dst_resource: T0__,
        dst_subresource: u32,
        dstx: u32,
        dsty: u32,
        p_src_resource: T4__,
        src_subresource: u32,
        p_src_rect: *mut super::display_devices::RECT,
        format: super::dxgi::DXGI_FORMAT,
        resolve_mode: D3D12_RESOLVE_MODE,
    ) {
        (::windows::Interface::vtable(self).64)(
            ::windows::Abi::abi(self),
            p_dst_resource.into().abi(),
            dst_subresource,
            dstx,
            dsty,
            p_src_resource.into().abi(),
            src_subresource,
            p_src_rect,
            format,
            resolve_mode,
        )
    }
    pub unsafe fn SetViewInstanceMask(&self, mask: u32) {
        (::windows::Interface::vtable(self).65)(::windows::Abi::abi(self), mask)
    }
    pub unsafe fn WriteBufferImmediate(
        &self,
        count: u32,
        p_params: *const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        p_modes: *const D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ) {
        (::windows::Interface::vtable(self).66)(::windows::Abi::abi(self), count, p_params, p_modes)
    }
    pub unsafe fn SetProtectedResourceSession<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>,
    >(
        &self,
        p_protected_resource_session: T0__,
    ) {
        (::windows::Interface::vtable(self).67)(
            ::windows::Abi::abi(self),
            p_protected_resource_session.into().abi(),
        )
    }
    pub unsafe fn BeginRenderPass(
        &self,
        num_render_targets: u32,
        p_render_targets: *const D3D12_RENDER_PASS_RENDER_TARGET_DESC,
        p_depth_stencil: *const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC,
        flags: D3D12_RENDER_PASS_FLAGS,
    ) {
        (::windows::Interface::vtable(self).68)(
            ::windows::Abi::abi(self),
            num_render_targets,
            p_render_targets,
            p_depth_stencil,
            flags,
        )
    }
    pub unsafe fn EndRenderPass(&self) {
        (::windows::Interface::vtable(self).69)(::windows::Abi::abi(self))
    }
    pub unsafe fn InitializeMetaCommand<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12MetaCommand>>,
    >(
        &self,
        p_meta_command: T0__,
        p_initialization_parameters_data: *const ::std::ffi::c_void,
        initialization_parameters_data_size_in_bytes: usize,
    ) {
        (::windows::Interface::vtable(self).70)(
            ::windows::Abi::abi(self),
            p_meta_command.into().abi(),
            p_initialization_parameters_data,
            initialization_parameters_data_size_in_bytes,
        )
    }
    pub unsafe fn ExecuteMetaCommand<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12MetaCommand>>,
    >(
        &self,
        p_meta_command: T0__,
        p_execution_parameters_data: *const ::std::ffi::c_void,
        execution_parameters_data_size_in_bytes: usize,
    ) {
        (::windows::Interface::vtable(self).71)(
            ::windows::Abi::abi(self),
            p_meta_command.into().abi(),
            p_execution_parameters_data,
            execution_parameters_data_size_in_bytes,
        )
    }
    pub unsafe fn BuildRaytracingAccelerationStructure(
        &self,
        p_desc: *const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC,
        num_postbuild_info_descs: u32,
        p_postbuild_info_descs: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
    ) {
        (::windows::Interface::vtable(self).72)(
            ::windows::Abi::abi(self),
            p_desc,
            num_postbuild_info_descs,
            p_postbuild_info_descs,
        )
    }
    pub unsafe fn EmitRaytracingAccelerationStructurePostbuildInfo(
        &self,
        p_desc: *const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
        num_source_acceleration_structures: u32,
        p_source_acceleration_structure_data: *const u64,
    ) {
        (::windows::Interface::vtable(self).73)(
            ::windows::Abi::abi(self),
            p_desc,
            num_source_acceleration_structures,
            p_source_acceleration_structure_data,
        )
    }
    pub unsafe fn CopyRaytracingAccelerationStructure(
        &self,
        dest_acceleration_structure_data: u64,
        source_acceleration_structure_data: u64,
        mode: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE,
    ) {
        (::windows::Interface::vtable(self).74)(
            ::windows::Abi::abi(self),
            dest_acceleration_structure_data,
            source_acceleration_structure_data,
            mode,
        )
    }
    pub unsafe fn SetPipelineState1<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12StateObject>>,
    >(
        &self,
        p_state_object: T0__,
    ) {
        (::windows::Interface::vtable(self).75)(
            ::windows::Abi::abi(self),
            p_state_object.into().abi(),
        )
    }
    pub unsafe fn DispatchRays(&self, p_desc: *const D3D12_DISPATCH_RAYS_DESC) {
        (::windows::Interface::vtable(self).76)(::windows::Abi::abi(self), p_desc)
    }
    pub unsafe fn RSSetShadingRate(
        &self,
        base_shading_rate: D3D12_SHADING_RATE,
        combiners: *const D3D12_SHADING_RATE_COMBINER,
    ) {
        (::windows::Interface::vtable(self).77)(
            ::windows::Abi::abi(self),
            base_shading_rate,
            combiners,
        )
    }
    pub unsafe fn RSSetShadingRateImage<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>,
    >(
        &self,
        shading_rate_image: T0__,
    ) {
        (::windows::Interface::vtable(self).78)(
            ::windows::Abi::abi(self),
            shading_rate_image.into().abi(),
        )
    }
    pub unsafe fn DispatchMesh(
        &self,
        thread_group_countx: u32,
        thread_group_county: u32,
        thread_group_countz: u32,
    ) {
        (::windows::Interface::vtable(self).79)(
            ::windows::Abi::abi(self),
            thread_group_countx,
            thread_group_county,
            thread_group_countz,
        )
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ::windows::IUnknown {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ::windows::IUnknown {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList5 {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList5 {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList5>>
    for ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList5> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList5>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList5>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList5> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList5>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList4 {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList4 {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList4>>
    for ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList4>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList4>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList4> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList4>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList3 {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList3 {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList3>>
    for ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList3>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList3>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList3> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList3>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList2 {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList2 {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList2>>
    for ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList2>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList2>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList2> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList1 {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList1 {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList1>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ID3D12GraphicsCommandList {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12GraphicsCommandList>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12GraphicsCommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12GraphicsCommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ID3D12CommandList {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ID3D12CommandList {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12CommandList>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12CommandList> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12CommandList>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ID3D12DeviceChild {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ID3D12DeviceChild {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12GraphicsCommandList6> for ID3D12Object {
    fn from(value: ID3D12GraphicsCommandList6) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12GraphicsCommandList6> for ID3D12Object {
    fn from(value: &ID3D12GraphicsCommandList6) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12GraphicsCommandList6 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for &'a ID3D12GraphicsCommandList6
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Heap1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Heap1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Heap1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Heap1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Heap1 {}
unsafe impl ::windows::Interface for ID3D12Heap1 {
    type Vtable = ID3D12Heap1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1462727561,
        8552,
        18915,
        [150, 147, 214, 223, 88, 113, 191, 109],
    );
}
#[repr(C)]
pub struct ID3D12Heap1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut D3D12_HEAP_DESC),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_protected_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Heap1 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetDesc(&self, result__: *mut D3D12_HEAP_DESC) {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn GetProtectedResourceSession(
        &self,
        riid: *const ::windows::Guid,
        pp_protected_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            riid,
            pp_protected_session,
        )
    }
}
impl ::std::convert::From<ID3D12Heap1> for ::windows::IUnknown {
    fn from(value: ID3D12Heap1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Heap1> for ::windows::IUnknown {
    fn from(value: &ID3D12Heap1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Heap1> for ID3D12Heap {
    fn from(value: ID3D12Heap1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Heap1> for ID3D12Heap {
    fn from(value: &ID3D12Heap1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Heap>> for ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Heap> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Heap>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Heap>> for &'a ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Heap> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Heap>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Heap1> for ID3D12Pageable {
    fn from(value: ID3D12Heap1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Heap1> for ID3D12Pageable {
    fn from(value: &ID3D12Heap1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Heap1> for ID3D12DeviceChild {
    fn from(value: ID3D12Heap1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Heap1> for ID3D12DeviceChild {
    fn from(value: &ID3D12Heap1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Heap1> for ID3D12Object {
    fn from(value: ID3D12Heap1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Heap1> for ID3D12Object {
    fn from(value: &ID3D12Heap1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Heap1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12InfoQueue(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12InfoQueue {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12InfoQueue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12InfoQueue {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12InfoQueue {}
unsafe impl ::windows::Interface for ID3D12InfoQueue {
    type Vtable = ID3D12InfoQueue_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        121809163,
        50055,
        18495,
        [185, 70, 48, 167, 228, 230, 20, 88],
    );
}
#[repr(C)]
pub struct ID3D12InfoQueue_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        message_count_limit: u64,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        message_index: u64,
        p_message: *mut D3D12_MESSAGE,
        p_message_byte_length: *mut usize,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
        p_filter_byte_length: *mut usize,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
        p_filter_byte_length: *mut usize,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        category: D3D12_MESSAGE_CATEGORY,
        severity: D3D12_MESSAGE_SEVERITY,
        id: D3D12_MESSAGE_ID,
        p_description: *const i8,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        severity: D3D12_MESSAGE_SEVERITY,
        p_description: *const i8,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        category: D3D12_MESSAGE_CATEGORY,
        b_enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        severity: D3D12_MESSAGE_SEVERITY,
        b_enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        id: D3D12_MESSAGE_ID,
        b_enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        category: D3D12_MESSAGE_CATEGORY,
    ) -> ::windows::BOOL,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        severity: D3D12_MESSAGE_SEVERITY,
    ) -> ::windows::BOOL,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, id: D3D12_MESSAGE_ID) -> ::windows::BOOL,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, b_mute: ::windows::BOOL),
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::BOOL,
);
#[allow(non_snake_case)]
impl ID3D12InfoQueue {
    pub unsafe fn SetMessageCountLimit(&self, message_count_limit: u64) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), message_count_limit)
    }
    pub unsafe fn ClearStoredMessages(&self) {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetMessageA(
        &self,
        message_index: u64,
        p_message: *mut D3D12_MESSAGE,
        p_message_byte_length: *mut usize,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(
            ::windows::Abi::abi(self),
            message_index,
            p_message,
            p_message_byte_length,
        )
    }
    pub unsafe fn GetNumMessagesAllowedByStorageFilter(&self) -> u64 {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetNumMessagesDeniedByStorageFilter(&self) -> u64 {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetNumStoredMessages(&self) -> u64 {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetNumStoredMessagesAllowedByRetrievalFilter(&self) -> u64 {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetNumMessagesDiscardedByMessageCountLimit(&self) -> u64 {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetMessageCountLimit(&self) -> u64 {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self))
    }
    pub unsafe fn AddStorageFilterEntries(
        &self,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(::windows::Abi::abi(self), p_filter)
    }
    pub unsafe fn GetStorageFilter(
        &self,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
        p_filter_byte_length: *mut usize,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            p_filter,
            p_filter_byte_length,
        )
    }
    pub unsafe fn ClearStorageFilter(&self) {
        (::windows::Interface::vtable(self).14)(::windows::Abi::abi(self))
    }
    pub unsafe fn PushEmptyStorageFilter(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self))
    }
    pub unsafe fn PushCopyOfStorageFilter(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).16)(::windows::Abi::abi(self))
    }
    pub unsafe fn PushStorageFilter(
        &self,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self), p_filter)
    }
    pub unsafe fn PopStorageFilter(&self) {
        (::windows::Interface::vtable(self).18)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetStorageFilterStackSize(&self) -> u32 {
        (::windows::Interface::vtable(self).19)(::windows::Abi::abi(self))
    }
    pub unsafe fn AddRetrievalFilterEntries(
        &self,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).20)(::windows::Abi::abi(self), p_filter)
    }
    pub unsafe fn GetRetrievalFilter(
        &self,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
        p_filter_byte_length: *mut usize,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).21)(
            ::windows::Abi::abi(self),
            p_filter,
            p_filter_byte_length,
        )
    }
    pub unsafe fn ClearRetrievalFilter(&self) {
        (::windows::Interface::vtable(self).22)(::windows::Abi::abi(self))
    }
    pub unsafe fn PushEmptyRetrievalFilter(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).23)(::windows::Abi::abi(self))
    }
    pub unsafe fn PushCopyOfRetrievalFilter(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).24)(::windows::Abi::abi(self))
    }
    pub unsafe fn PushRetrievalFilter(
        &self,
        p_filter: *mut D3D12_INFO_QUEUE_FILTER,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).25)(::windows::Abi::abi(self), p_filter)
    }
    pub unsafe fn PopRetrievalFilter(&self) {
        (::windows::Interface::vtable(self).26)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetRetrievalFilterStackSize(&self) -> u32 {
        (::windows::Interface::vtable(self).27)(::windows::Abi::abi(self))
    }
    pub unsafe fn AddMessage(
        &self,
        category: D3D12_MESSAGE_CATEGORY,
        severity: D3D12_MESSAGE_SEVERITY,
        id: D3D12_MESSAGE_ID,
        p_description: *const i8,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).28)(
            ::windows::Abi::abi(self),
            category,
            severity,
            id,
            p_description,
        )
    }
    pub unsafe fn AddApplicationMessage(
        &self,
        severity: D3D12_MESSAGE_SEVERITY,
        p_description: *const i8,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).29)(::windows::Abi::abi(self), severity, p_description)
    }
    pub unsafe fn SetBreakOnCategory(
        &self,
        category: D3D12_MESSAGE_CATEGORY,
        b_enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).30)(::windows::Abi::abi(self), category, b_enable)
    }
    pub unsafe fn SetBreakOnSeverity(
        &self,
        severity: D3D12_MESSAGE_SEVERITY,
        b_enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).31)(::windows::Abi::abi(self), severity, b_enable)
    }
    pub unsafe fn SetBreakOnID(
        &self,
        id: D3D12_MESSAGE_ID,
        b_enable: ::windows::BOOL,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).32)(::windows::Abi::abi(self), id, b_enable)
    }
    pub unsafe fn GetBreakOnCategory(&self, category: D3D12_MESSAGE_CATEGORY) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).33)(::windows::Abi::abi(self), category)
    }
    pub unsafe fn GetBreakOnSeverity(&self, severity: D3D12_MESSAGE_SEVERITY) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).34)(::windows::Abi::abi(self), severity)
    }
    pub unsafe fn GetBreakOnID(&self, id: D3D12_MESSAGE_ID) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).35)(::windows::Abi::abi(self), id)
    }
    pub unsafe fn SetMuteDebugOutput(&self, b_mute: ::windows::BOOL) {
        (::windows::Interface::vtable(self).36)(::windows::Abi::abi(self), b_mute)
    }
    pub unsafe fn GetMuteDebugOutput(&self) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).37)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12InfoQueue> for ::windows::IUnknown {
    fn from(value: ID3D12InfoQueue) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12InfoQueue> for ::windows::IUnknown {
    fn from(value: &ID3D12InfoQueue) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12InfoQueue {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12InfoQueue {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12LibraryReflection(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12LibraryReflection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12LibraryReflection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12LibraryReflection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12LibraryReflection {}
unsafe impl ::windows::Interface for ID3D12LibraryReflection {
    type Vtable = ID3D12LibraryReflection_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2385812761,
        21723,
        19030,
        [157, 201, 17, 157, 135, 189, 184, 4],
    );
}
#[repr(C)]
pub struct ID3D12LibraryReflection_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *mut D3D12_LIBRARY_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        function_index: i32,
    ) -> ::std::option::Option<ID3D12FunctionReflection>,
);
#[allow(non_snake_case)]
impl ID3D12LibraryReflection {
    pub unsafe fn GetDesc(&self, p_desc: *mut D3D12_LIBRARY_DESC) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_desc)
    }
    pub unsafe fn GetFunctionByIndex(
        &self,
        function_index: i32,
    ) -> ::std::option::Option<ID3D12FunctionReflection> {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), function_index)
    }
}
impl ::std::convert::From<ID3D12LibraryReflection> for ::windows::IUnknown {
    fn from(value: ID3D12LibraryReflection) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12LibraryReflection> for ::windows::IUnknown {
    fn from(value: &ID3D12LibraryReflection) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12LibraryReflection
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12LibraryReflection
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12LifetimeTracker(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12LifetimeTracker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12LifetimeTracker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12LifetimeTracker {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12LifetimeTracker {}
unsafe impl ::windows::Interface for ID3D12LifetimeTracker {
    type Vtable = ID3D12LifetimeTracker_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1070611766,
        20145,
        16970,
        [165, 130, 73, 78, 203, 139, 168, 19],
    );
}
#[repr(C)]
pub struct ID3D12LifetimeTracker_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_object: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12LifetimeTracker {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn DestroyOwnedObject<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>,
    >(
        &self,
        p_object: T0__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), p_object.into().abi())
    }
}
impl ::std::convert::From<ID3D12LifetimeTracker> for ::windows::IUnknown {
    fn from(value: ID3D12LifetimeTracker) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12LifetimeTracker> for ::windows::IUnknown {
    fn from(value: &ID3D12LifetimeTracker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12LifetimeTracker {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12LifetimeTracker
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12LifetimeTracker> for ID3D12DeviceChild {
    fn from(value: ID3D12LifetimeTracker) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12LifetimeTracker> for ID3D12DeviceChild {
    fn from(value: &ID3D12LifetimeTracker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12LifetimeTracker {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12LifetimeTracker
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12LifetimeTracker> for ID3D12Object {
    fn from(value: ID3D12LifetimeTracker) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12LifetimeTracker> for ID3D12Object {
    fn from(value: &ID3D12LifetimeTracker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12LifetimeTracker {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12LifetimeTracker {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12PipelineLibrary(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12PipelineLibrary {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12PipelineLibrary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12PipelineLibrary {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12PipelineLibrary {}
unsafe impl ::windows::Interface for ID3D12PipelineLibrary {
    type Vtable = ID3D12PipelineLibrary_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3326224040,
        37377,
        18095,
        [180, 204, 83, 251, 159, 247, 65, 79],
    );
}
#[repr(C)]
pub struct ID3D12PipelineLibrary_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_name: *const u16,
        p_pipeline: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_name: *const u16,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_name: *const u16,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> usize,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_data: *mut ::std::ffi::c_void,
        data_size_in_bytes: usize,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12PipelineLibrary {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn StorePipeline<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_name: *const u16,
        p_pipeline: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_name,
            p_pipeline.into().abi(),
        )
    }
    pub unsafe fn LoadGraphicsPipeline(
        &self,
        p_name: *const u16,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            p_name,
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn LoadComputePipeline(
        &self,
        p_name: *const u16,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_name,
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn GetSerializedSize(&self) -> usize {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self))
    }
    pub unsafe fn Serialize(
        &self,
        p_data: *mut ::std::ffi::c_void,
        data_size_in_bytes: usize,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            p_data,
            data_size_in_bytes,
        )
    }
}
impl ::std::convert::From<ID3D12PipelineLibrary> for ::windows::IUnknown {
    fn from(value: ID3D12PipelineLibrary) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineLibrary> for ::windows::IUnknown {
    fn from(value: &ID3D12PipelineLibrary) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12PipelineLibrary {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12PipelineLibrary
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12PipelineLibrary> for ID3D12DeviceChild {
    fn from(value: ID3D12PipelineLibrary) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineLibrary> for ID3D12DeviceChild {
    fn from(value: &ID3D12PipelineLibrary) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12PipelineLibrary {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12PipelineLibrary
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12PipelineLibrary> for ID3D12Object {
    fn from(value: ID3D12PipelineLibrary) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineLibrary> for ID3D12Object {
    fn from(value: &ID3D12PipelineLibrary) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12PipelineLibrary {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12PipelineLibrary {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12PipelineLibrary1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12PipelineLibrary1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12PipelineLibrary1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12PipelineLibrary1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12PipelineLibrary1 {}
unsafe impl ::windows::Interface for ID3D12PipelineLibrary1 {
    type Vtable = ID3D12PipelineLibrary1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2162868034,
        9576,
        20062,
        [189, 130, 195, 127, 134, 150, 29, 195],
    );
}
#[repr(C)]
pub struct ID3D12PipelineLibrary1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_name: *const u16,
        p_pipeline: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_name: *const u16,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_name: *const u16,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> usize,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_data: *mut ::std::ffi::c_void,
        data_size_in_bytes: usize,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_name: *const u16,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12PipelineLibrary1 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn StorePipeline<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ID3D12PipelineState>>,
    >(
        &self,
        p_name: *const u16,
        p_pipeline: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_name,
            p_pipeline.into().abi(),
        )
    }
    pub unsafe fn LoadGraphicsPipeline(
        &self,
        p_name: *const u16,
        p_desc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            p_name,
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn LoadComputePipeline(
        &self,
        p_name: *const u16,
        p_desc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(
            ::windows::Abi::abi(self),
            p_name,
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
    pub unsafe fn GetSerializedSize(&self) -> usize {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self))
    }
    pub unsafe fn Serialize(
        &self,
        p_data: *mut ::std::ffi::c_void,
        data_size_in_bytes: usize,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            p_data,
            data_size_in_bytes,
        )
    }
    pub unsafe fn LoadPipeline(
        &self,
        p_name: *const u16,
        p_desc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const ::windows::Guid,
        pp_pipeline_state: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            p_name,
            p_desc,
            riid,
            pp_pipeline_state,
        )
    }
}
impl ::std::convert::From<ID3D12PipelineLibrary1> for ::windows::IUnknown {
    fn from(value: ID3D12PipelineLibrary1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineLibrary1> for ::windows::IUnknown {
    fn from(value: &ID3D12PipelineLibrary1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12PipelineLibrary1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12PipelineLibrary1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12PipelineLibrary1> for ID3D12PipelineLibrary {
    fn from(value: ID3D12PipelineLibrary1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineLibrary1> for ID3D12PipelineLibrary {
    fn from(value: &ID3D12PipelineLibrary1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12PipelineLibrary>>
    for ID3D12PipelineLibrary1
{
    fn into(self) -> ::windows::Param<'a, ID3D12PipelineLibrary> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12PipelineLibrary>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12PipelineLibrary>>
    for &'a ID3D12PipelineLibrary1
{
    fn into(self) -> ::windows::Param<'a, ID3D12PipelineLibrary> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12PipelineLibrary>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12PipelineLibrary1> for ID3D12DeviceChild {
    fn from(value: ID3D12PipelineLibrary1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineLibrary1> for ID3D12DeviceChild {
    fn from(value: &ID3D12PipelineLibrary1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12PipelineLibrary1 {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12PipelineLibrary1
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12PipelineLibrary1> for ID3D12Object {
    fn from(value: ID3D12PipelineLibrary1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12PipelineLibrary1> for ID3D12Object {
    fn from(value: &ID3D12PipelineLibrary1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12PipelineLibrary1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12PipelineLibrary1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12ProtectedResourceSession1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12ProtectedResourceSession1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12ProtectedResourceSession1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12ProtectedResourceSession1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12ProtectedResourceSession1 {}
unsafe impl ::windows::Interface for ID3D12ProtectedResourceSession1 {
    type Vtable = ID3D12ProtectedResourceSession1_abi;
    const IID: ::windows::Guid =
        ::windows::Guid::from_values(3606130134, 30459, 16494, [137, 97, 66, 150, 238, 252, 4, 9]);
}
#[repr(C)]
pub struct ID3D12ProtectedResourceSession1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> D3D12_PROTECTED_SESSION_STATUS,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_PROTECTED_RESOURCE_SESSION_DESC,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *mut D3D12_PROTECTED_RESOURCE_SESSION_DESC1,
    ),
);
#[allow(non_snake_case)]
impl ID3D12ProtectedResourceSession1 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn GetStatusFence(
        &self,
        riid: *const ::windows::Guid,
        pp_fence: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), riid, pp_fence)
    }
    pub unsafe fn GetSessionStatus(&self) -> D3D12_PROTECTED_SESSION_STATUS {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetDesc(&self, result__: *mut D3D12_PROTECTED_RESOURCE_SESSION_DESC) {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn GetDesc1(&self, result__: *mut D3D12_PROTECTED_RESOURCE_SESSION_DESC1) {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self), result__)
    }
}
impl ::std::convert::From<ID3D12ProtectedResourceSession1> for ::windows::IUnknown {
    fn from(value: ID3D12ProtectedResourceSession1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedResourceSession1> for ::windows::IUnknown {
    fn from(value: &ID3D12ProtectedResourceSession1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12ProtectedResourceSession1> for ID3D12ProtectedResourceSession {
    fn from(value: ID3D12ProtectedResourceSession1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedResourceSession1> for ID3D12ProtectedResourceSession {
    fn from(value: &ID3D12ProtectedResourceSession1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>
    for ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ID3D12ProtectedResourceSession> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12ProtectedResourceSession>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedResourceSession>>
    for &'a ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ID3D12ProtectedResourceSession> {
        ::windows::Param::Owned(
            ::std::convert::Into::<ID3D12ProtectedResourceSession>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
impl ::std::convert::From<ID3D12ProtectedResourceSession1> for ID3D12ProtectedSession {
    fn from(value: ID3D12ProtectedResourceSession1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedResourceSession1> for ID3D12ProtectedSession {
    fn from(value: &ID3D12ProtectedResourceSession1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedSession>>
    for ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ID3D12ProtectedSession> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12ProtectedSession>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12ProtectedSession>>
    for &'a ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ID3D12ProtectedSession> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12ProtectedSession>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12ProtectedResourceSession1> for ID3D12DeviceChild {
    fn from(value: ID3D12ProtectedResourceSession1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedResourceSession1> for ID3D12DeviceChild {
    fn from(value: &ID3D12ProtectedResourceSession1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>>
    for &'a ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12ProtectedResourceSession1> for ID3D12Object {
    fn from(value: ID3D12ProtectedResourceSession1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ProtectedResourceSession1> for ID3D12Object {
    fn from(value: &ID3D12ProtectedResourceSession1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>>
    for &'a ID3D12ProtectedResourceSession1
{
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Resource1(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Resource1 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Resource1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Resource1 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Resource1 {}
unsafe impl ::windows::Interface for ID3D12Resource1 {
    type Vtable = ID3D12Resource1_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2640192122,
        17456,
        16737,
        [136, 179, 62, 202, 107, 177, 110, 25],
    );
}
#[repr(C)]
pub struct ID3D12Resource1_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        subresource: u32,
        p_read_range: *const D3D12_RANGE,
        pp_data: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        subresource: u32,
        p_written_range: *const D3D12_RANGE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut D3D12_RESOURCE_DESC),
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        dst_subresource: u32,
        p_dst_box: *const D3D12_BOX,
        p_src_data: *const ::std::ffi::c_void,
        src_row_pitch: u32,
        src_depth_pitch: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_data: *mut ::std::ffi::c_void,
        dst_row_pitch: u32,
        dst_depth_pitch: u32,
        src_subresource: u32,
        p_src_box: *const D3D12_BOX,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *mut D3D12_HEAP_PROPERTIES,
        p_heap_flags: *mut D3D12_HEAP_FLAGS,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_protected_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12Resource1 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn Map(
        &self,
        subresource: u32,
        p_read_range: *const D3D12_RANGE,
        pp_data: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            subresource,
            p_read_range,
            pp_data,
        )
    }
    pub unsafe fn Unmap(&self, subresource: u32, p_written_range: *const D3D12_RANGE) {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            subresource,
            p_written_range,
        )
    }
    pub unsafe fn GetDesc(&self, result__: *mut D3D12_RESOURCE_DESC) {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn GetGPUVirtualAddress(&self) -> u64 {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self))
    }
    pub unsafe fn WriteToSubresource(
        &self,
        dst_subresource: u32,
        p_dst_box: *const D3D12_BOX,
        p_src_data: *const ::std::ffi::c_void,
        src_row_pitch: u32,
        src_depth_pitch: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            dst_subresource,
            p_dst_box,
            p_src_data,
            src_row_pitch,
            src_depth_pitch,
        )
    }
    pub unsafe fn ReadFromSubresource(
        &self,
        p_dst_data: *mut ::std::ffi::c_void,
        dst_row_pitch: u32,
        dst_depth_pitch: u32,
        src_subresource: u32,
        p_src_box: *const D3D12_BOX,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            p_dst_data,
            dst_row_pitch,
            dst_depth_pitch,
            src_subresource,
            p_src_box,
        )
    }
    pub unsafe fn GetHeapProperties(
        &self,
        p_heap_properties: *mut D3D12_HEAP_PROPERTIES,
        p_heap_flags: *mut D3D12_HEAP_FLAGS,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            p_heap_flags,
        )
    }
    pub unsafe fn GetProtectedResourceSession(
        &self,
        riid: *const ::windows::Guid,
        pp_protected_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            riid,
            pp_protected_session,
        )
    }
}
impl ::std::convert::From<ID3D12Resource1> for ::windows::IUnknown {
    fn from(value: ID3D12Resource1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource1> for ::windows::IUnknown {
    fn from(value: &ID3D12Resource1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource1> for ID3D12Resource {
    fn from(value: ID3D12Resource1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource1> for ID3D12Resource {
    fn from(value: &ID3D12Resource1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Resource>> for ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Resource> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Resource>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Resource>> for &'a ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Resource> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Resource>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource1> for ID3D12Pageable {
    fn from(value: ID3D12Resource1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource1> for ID3D12Pageable {
    fn from(value: &ID3D12Resource1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource1> for ID3D12DeviceChild {
    fn from(value: ID3D12Resource1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource1> for ID3D12DeviceChild {
    fn from(value: &ID3D12Resource1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource1> for ID3D12Object {
    fn from(value: ID3D12Resource1) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource1> for ID3D12Object {
    fn from(value: &ID3D12Resource1) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Resource1 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Resource2(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Resource2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Resource2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Resource2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Resource2 {}
unsafe impl ::windows::Interface for ID3D12Resource2 {
    type Vtable = ID3D12Resource2_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3191270459,
        60037,
        19179,
        [164, 90, 233, 215, 100, 4, 164, 149],
    );
}
#[repr(C)]
pub struct ID3D12Resource2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        guid: *const ::windows::Guid,
        p_data: ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, name: *const u16) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        subresource: u32,
        p_read_range: *const D3D12_RANGE,
        pp_data: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        subresource: u32,
        p_written_range: *const D3D12_RANGE,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut D3D12_RESOURCE_DESC),
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        dst_subresource: u32,
        p_dst_box: *const D3D12_BOX,
        p_src_data: *const ::std::ffi::c_void,
        src_row_pitch: u32,
        src_depth_pitch: u32,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_dst_data: *mut ::std::ffi::c_void,
        dst_row_pitch: u32,
        dst_depth_pitch: u32,
        src_subresource: u32,
        p_src_box: *const D3D12_BOX,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_heap_properties: *mut D3D12_HEAP_PROPERTIES,
        p_heap_flags: *mut D3D12_HEAP_FLAGS,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        pp_protected_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut D3D12_RESOURCE_DESC1),
);
#[allow(non_snake_case)]
impl ID3D12Resource2 {
    pub unsafe fn GetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        p_data_size: *mut u32,
        p_data: *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), guid, p_data_size, p_data)
    }
    pub unsafe fn SetPrivateData(
        &self,
        guid: *const ::windows::Guid,
        data_size: u32,
        p_data: *const ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), guid, data_size, p_data)
    }
    pub unsafe fn SetPrivateDataInterface<
        'a,
        T1__: ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>,
    >(
        &self,
        guid: *const ::windows::Guid,
        p_data: T1__,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid, p_data.into().abi())
    }
    pub unsafe fn SetName(&self, name: *const u16) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetDevice(
        &self,
        riid: *const ::windows::Guid,
        ppv_device: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), riid, ppv_device)
    }
    pub unsafe fn Map(
        &self,
        subresource: u32,
        p_read_range: *const D3D12_RANGE,
        pp_data: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            subresource,
            p_read_range,
            pp_data,
        )
    }
    pub unsafe fn Unmap(&self, subresource: u32, p_written_range: *const D3D12_RANGE) {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            subresource,
            p_written_range,
        )
    }
    pub unsafe fn GetDesc(&self, result__: *mut D3D12_RESOURCE_DESC) {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn GetGPUVirtualAddress(&self) -> u64 {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self))
    }
    pub unsafe fn WriteToSubresource(
        &self,
        dst_subresource: u32,
        p_dst_box: *const D3D12_BOX,
        p_src_data: *const ::std::ffi::c_void,
        src_row_pitch: u32,
        src_depth_pitch: u32,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).12)(
            ::windows::Abi::abi(self),
            dst_subresource,
            p_dst_box,
            p_src_data,
            src_row_pitch,
            src_depth_pitch,
        )
    }
    pub unsafe fn ReadFromSubresource(
        &self,
        p_dst_data: *mut ::std::ffi::c_void,
        dst_row_pitch: u32,
        dst_depth_pitch: u32,
        src_subresource: u32,
        p_src_box: *const D3D12_BOX,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).13)(
            ::windows::Abi::abi(self),
            p_dst_data,
            dst_row_pitch,
            dst_depth_pitch,
            src_subresource,
            p_src_box,
        )
    }
    pub unsafe fn GetHeapProperties(
        &self,
        p_heap_properties: *mut D3D12_HEAP_PROPERTIES,
        p_heap_flags: *mut D3D12_HEAP_FLAGS,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).14)(
            ::windows::Abi::abi(self),
            p_heap_properties,
            p_heap_flags,
        )
    }
    pub unsafe fn GetProtectedResourceSession(
        &self,
        riid: *const ::windows::Guid,
        pp_protected_session: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).15)(
            ::windows::Abi::abi(self),
            riid,
            pp_protected_session,
        )
    }
    pub unsafe fn GetDesc1(&self, result__: *mut D3D12_RESOURCE_DESC1) {
        (::windows::Interface::vtable(self).16)(::windows::Abi::abi(self), result__)
    }
}
impl ::std::convert::From<ID3D12Resource2> for ::windows::IUnknown {
    fn from(value: ID3D12Resource2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource2> for ::windows::IUnknown {
    fn from(value: &ID3D12Resource2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource2> for ID3D12Resource1 {
    fn from(value: ID3D12Resource2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource2> for ID3D12Resource1 {
    fn from(value: &ID3D12Resource2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Resource1>> for ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Resource1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Resource1>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Resource1>> for &'a ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Resource1> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Resource1>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource2> for ID3D12Resource {
    fn from(value: ID3D12Resource2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource2> for ID3D12Resource {
    fn from(value: &ID3D12Resource2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Resource>> for ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Resource> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Resource>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Resource>> for &'a ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Resource> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Resource>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource2> for ID3D12Pageable {
    fn from(value: ID3D12Resource2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource2> for ID3D12Pageable {
    fn from(value: &ID3D12Resource2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Pageable>> for &'a ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Pageable> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Pageable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource2> for ID3D12DeviceChild {
    fn from(value: ID3D12Resource2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource2> for ID3D12DeviceChild {
    fn from(value: &ID3D12Resource2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12DeviceChild>> for &'a ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12DeviceChild> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12DeviceChild>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<ID3D12Resource2> for ID3D12Object {
    fn from(value: ID3D12Resource2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Resource2> for ID3D12Object {
    fn from(value: &ID3D12Resource2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ID3D12Object>> for &'a ID3D12Resource2 {
    fn into(self) -> ::windows::Param<'a, ID3D12Object> {
        ::windows::Param::Owned(::std::convert::Into::<ID3D12Object>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12RootSignatureDeserializer(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12RootSignatureDeserializer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12RootSignatureDeserializer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12RootSignatureDeserializer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12RootSignatureDeserializer {}
unsafe impl ::windows::Interface for ID3D12RootSignatureDeserializer {
    type Vtable = ID3D12RootSignatureDeserializer_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        883647611,
        15560,
        18092,
        [132, 27, 192, 150, 86, 69, 192, 70],
    );
}
#[repr(C)]
pub struct ID3D12RootSignatureDeserializer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *const *const D3D12_ROOT_SIGNATURE_DESC,
    ),
);
#[allow(non_snake_case)]
impl ID3D12RootSignatureDeserializer {
    pub unsafe fn GetRootSignatureDesc(&self, result__: *const *const D3D12_ROOT_SIGNATURE_DESC) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), result__)
    }
}
impl ::std::convert::From<ID3D12RootSignatureDeserializer> for ::windows::IUnknown {
    fn from(value: ID3D12RootSignatureDeserializer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12RootSignatureDeserializer> for ::windows::IUnknown {
    fn from(value: &ID3D12RootSignatureDeserializer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12RootSignatureDeserializer
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12RootSignatureDeserializer
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12ShaderReflection(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12ShaderReflection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12ShaderReflection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12ShaderReflection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12ShaderReflection {}
unsafe impl ::windows::Interface for ID3D12ShaderReflection {
    type Vtable = ID3D12ShaderReflection_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1515747709,
        42796,
        18317,
        [139, 162, 239, 198, 176, 239, 232, 142],
    );
}
#[repr(C)]
pub struct ID3D12ShaderReflection_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_desc: *mut D3D12_SHADER_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        index: u32,
    )
        -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const i8,
    )
        -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        resource_index: u32,
        p_desc: *mut D3D12_SHADER_INPUT_BIND_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        parameter_index: u32,
        p_desc: *mut D3D12_SIGNATURE_PARAMETER_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        parameter_index: u32,
        p_desc: *mut D3D12_SIGNATURE_PARAMETER_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        parameter_index: u32,
        p_desc: *mut D3D12_SIGNATURE_PARAMETER_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionVariable>,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        name: *const i8,
        p_desc: *mut D3D12_SHADER_INPUT_BIND_DESC,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> super::direct3d11::D3D_PRIMITIVE,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::BOOL,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_level: *mut super::direct3d11::D3D_FEATURE_LEVEL,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_sizex: *mut u32,
        p_sizey: *mut u32,
        p_sizez: *mut u32,
    ) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
);
#[allow(non_snake_case)]
impl ID3D12ShaderReflection {
    pub unsafe fn GetDesc(&self, p_desc: *mut D3D12_SHADER_DESC) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_desc)
    }
    pub unsafe fn GetConstantBufferByIndex(
        &self,
        index: u32,
    ) -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer> {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), index)
    }
    pub unsafe fn GetConstantBufferByName(
        &self,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionConstantBuffer> {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetResourceBindingDesc(
        &self,
        resource_index: u32,
        p_desc: *mut D3D12_SHADER_INPUT_BIND_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), resource_index, p_desc)
    }
    pub unsafe fn GetInputParameterDesc(
        &self,
        parameter_index: u32,
        p_desc: *mut D3D12_SIGNATURE_PARAMETER_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(::windows::Abi::abi(self), parameter_index, p_desc)
    }
    pub unsafe fn GetOutputParameterDesc(
        &self,
        parameter_index: u32,
        p_desc: *mut D3D12_SIGNATURE_PARAMETER_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(::windows::Abi::abi(self), parameter_index, p_desc)
    }
    pub unsafe fn GetPatchConstantParameterDesc(
        &self,
        parameter_index: u32,
        p_desc: *mut D3D12_SIGNATURE_PARAMETER_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(::windows::Abi::abi(self), parameter_index, p_desc)
    }
    pub unsafe fn GetVariableByName(
        &self,
        name: *const i8,
    ) -> ::std::option::Option<ID3D12ShaderReflectionVariable> {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), name)
    }
    pub unsafe fn GetResourceBindingDescByName(
        &self,
        name: *const i8,
        p_desc: *mut D3D12_SHADER_INPUT_BIND_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).11)(::windows::Abi::abi(self), name, p_desc)
    }
    pub unsafe fn GetMovInstructionCount(&self) -> u32 {
        (::windows::Interface::vtable(self).12)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetMovcInstructionCount(&self) -> u32 {
        (::windows::Interface::vtable(self).13)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetConversionInstructionCount(&self) -> u32 {
        (::windows::Interface::vtable(self).14)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetBitwiseInstructionCount(&self) -> u32 {
        (::windows::Interface::vtable(self).15)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetGSInputPrimitive(&self) -> super::direct3d11::D3D_PRIMITIVE {
        (::windows::Interface::vtable(self).16)(::windows::Abi::abi(self))
    }
    pub unsafe fn IsSampleFrequencyShader(&self) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).17)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetNumInterfaceSlots(&self) -> u32 {
        (::windows::Interface::vtable(self).18)(::windows::Abi::abi(self))
    }
    pub unsafe fn GetMinFeatureLevel(
        &self,
        p_level: *mut super::direct3d11::D3D_FEATURE_LEVEL,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).19)(::windows::Abi::abi(self), p_level)
    }
    pub unsafe fn GetThreadGroupSize(
        &self,
        p_sizex: *mut u32,
        p_sizey: *mut u32,
        p_sizez: *mut u32,
    ) -> u32 {
        (::windows::Interface::vtable(self).20)(
            ::windows::Abi::abi(self),
            p_sizex,
            p_sizey,
            p_sizez,
        )
    }
    pub unsafe fn GetRequiresFlags(&self) -> u64 {
        (::windows::Interface::vtable(self).21)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12ShaderReflection> for ::windows::IUnknown {
    fn from(value: ID3D12ShaderReflection) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12ShaderReflection> for ::windows::IUnknown {
    fn from(value: &ID3D12ShaderReflection) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12ShaderReflection
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12ShaderReflection
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12SharingContract(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12SharingContract {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12SharingContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12SharingContract {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12SharingContract {}
unsafe impl ::windows::Interface for ID3D12SharingContract {
    type Vtable = ID3D12SharingContract_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        182418770,
        37532,
        20065,
        [173, 219, 255, 237, 48, 222, 102, 239],
    );
}
#[repr(C)]
pub struct ID3D12SharingContract_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource: ::windows::RawPtr,
        subresource: u32,
        window: super::windows_and_messaging::HWND,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_fence: ::windows::RawPtr,
        fence_value: u64,
    ),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, guid: *const ::windows::Guid),
    pub unsafe extern "system" fn(this: ::windows::RawPtr, guid: *const ::windows::Guid),
);
#[allow(non_snake_case)]
impl ID3D12SharingContract {
    pub unsafe fn Present<'a, T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Resource>>>(
        &self,
        p_resource: T0__,
        subresource: u32,
        window: super::windows_and_messaging::HWND,
    ) {
        (::windows::Interface::vtable(self).3)(
            ::windows::Abi::abi(self),
            p_resource.into().abi(),
            subresource,
            window,
        )
    }
    pub unsafe fn SharedFenceSignal<
        'a,
        T0__: ::std::convert::Into<::windows::Param<'a, ID3D12Fence>>,
    >(
        &self,
        p_fence: T0__,
        fence_value: u64,
    ) {
        (::windows::Interface::vtable(self).4)(
            ::windows::Abi::abi(self),
            p_fence.into().abi(),
            fence_value,
        )
    }
    pub unsafe fn BeginCapturableWork(&self, guid: *const ::windows::Guid) {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), guid)
    }
    pub unsafe fn EndCapturableWork(&self, guid: *const ::windows::Guid) {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self), guid)
    }
}
impl ::std::convert::From<ID3D12SharingContract> for ::windows::IUnknown {
    fn from(value: ID3D12SharingContract) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12SharingContract> for ::windows::IUnknown {
    fn from(value: &ID3D12SharingContract) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12SharingContract {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12SharingContract
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12StateObjectProperties(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12StateObjectProperties {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12StateObjectProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12StateObjectProperties {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12StateObjectProperties {}
unsafe impl ::windows::Interface for ID3D12StateObjectProperties {
    type Vtable = ID3D12StateObjectProperties_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3730810919,
        39929,
        20262,
        [137, 255, 215, 245, 111, 222, 56, 96],
    );
}
#[repr(C)]
pub struct ID3D12StateObjectProperties_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_export_name: *const u16,
    ) -> *mut ::std::ffi::c_void,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, p_export_name: *const u16) -> u64,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, pipeline_stack_size_in_bytes: u64),
);
#[allow(non_snake_case)]
impl ID3D12StateObjectProperties {
    pub unsafe fn GetShaderIdentifier(&self, p_export_name: *const u16) -> *mut ::std::ffi::c_void {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), p_export_name)
    }
    pub unsafe fn GetShaderStackSize(&self, p_export_name: *const u16) -> u64 {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), p_export_name)
    }
    pub unsafe fn GetPipelineStackSize(&self) -> u64 {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self))
    }
    pub unsafe fn SetPipelineStackSize(&self, pipeline_stack_size_in_bytes: u64) {
        (::windows::Interface::vtable(self).6)(
            ::windows::Abi::abi(self),
            pipeline_stack_size_in_bytes,
        )
    }
}
impl ::std::convert::From<ID3D12StateObjectProperties> for ::windows::IUnknown {
    fn from(value: ID3D12StateObjectProperties) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12StateObjectProperties> for ::windows::IUnknown {
    fn from(value: &ID3D12StateObjectProperties) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12StateObjectProperties
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12StateObjectProperties
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12SwapChainAssistant(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12SwapChainAssistant {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12SwapChainAssistant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12SwapChainAssistant {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12SwapChainAssistant {}
unsafe impl ::windows::Interface for ID3D12SwapChainAssistant {
    type Vtable = ID3D12SwapChainAssistant_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        4057949366,
        22525,
        18893,
        [136, 7, 192, 235, 136, 180, 92, 143],
    );
}
#[repr(C)]
pub struct ID3D12SwapChainAssistant_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, result__: *mut super::kernel::LUID),
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid: *const ::windows::Guid,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
        riid_queue: *const ::windows::Guid,
        ppv_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl ID3D12SwapChainAssistant {
    pub unsafe fn GetLUID(&self, result__: *mut super::kernel::LUID) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), result__)
    }
    pub unsafe fn GetSwapChainObject(
        &self,
        riid: *const ::windows::Guid,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), riid, ppv)
    }
    pub unsafe fn GetCurrentResourceAndCommandQueue(
        &self,
        riid_resource: *const ::windows::Guid,
        ppv_resource: *mut *mut ::std::ffi::c_void,
        riid_queue: *const ::windows::Guid,
        ppv_queue: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(
            ::windows::Abi::abi(self),
            riid_resource,
            ppv_resource,
            riid_queue,
            ppv_queue,
        )
    }
    pub unsafe fn InsertImplicitSync(&self) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12SwapChainAssistant> for ::windows::IUnknown {
    fn from(value: ID3D12SwapChainAssistant) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12SwapChainAssistant> for ::windows::IUnknown {
    fn from(value: &ID3D12SwapChainAssistant) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12SwapChainAssistant
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12SwapChainAssistant
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12Tools(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12Tools {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12Tools {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12Tools {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12Tools {}
unsafe impl ::windows::Interface for ID3D12Tools {
    type Vtable = ID3D12Tools_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        1886511600,
        59467,
        19251,
        [151, 79, 18, 250, 73, 222, 101, 197],
    );
}
#[repr(C)]
pub struct ID3D12Tools_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr, b_enable: ::windows::BOOL),
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::BOOL,
);
#[allow(non_snake_case)]
impl ID3D12Tools {
    pub unsafe fn EnableShaderInstrumentation(&self, b_enable: ::windows::BOOL) {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), b_enable)
    }
    pub unsafe fn ShaderInstrumentationEnabled(&self) -> ::windows::BOOL {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self))
    }
}
impl ::std::convert::From<ID3D12Tools> for ::windows::IUnknown {
    fn from(value: ID3D12Tools) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12Tools> for ::windows::IUnknown {
    fn from(value: &ID3D12Tools) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for ID3D12Tools {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>> for &'a ID3D12Tools {
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct ID3D12VersionedRootSignatureDeserializer(::windows::IUnknown);
impl ::std::clone::Clone for ID3D12VersionedRootSignatureDeserializer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for ID3D12VersionedRootSignatureDeserializer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for ID3D12VersionedRootSignatureDeserializer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for ID3D12VersionedRootSignatureDeserializer {}
unsafe impl ::windows::Interface for ID3D12VersionedRootSignatureDeserializer {
    type Vtable = ID3D12VersionedRootSignatureDeserializer_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2140261991,
        2316,
        19383,
        [183, 142, 237, 143, 242, 227, 29, 160],
    );
}
#[repr(C)]
pub struct ID3D12VersionedRootSignatureDeserializer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        convert_to_version: D3D_ROOT_SIGNATURE_VERSION,
        pp_desc: *const *const D3D12_VERSIONED_ROOT_SIGNATURE_DESC,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        result__: *const *const D3D12_VERSIONED_ROOT_SIGNATURE_DESC,
    ),
);
#[allow(non_snake_case)]
impl ID3D12VersionedRootSignatureDeserializer {
    pub unsafe fn GetRootSignatureDescAtVersion(
        &self,
        convert_to_version: D3D_ROOT_SIGNATURE_VERSION,
        pp_desc: *const *const D3D12_VERSIONED_ROOT_SIGNATURE_DESC,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(
            ::windows::Abi::abi(self),
            convert_to_version,
            pp_desc,
        )
    }
    pub unsafe fn GetUnconvertedRootSignatureDesc(
        &self,
        result__: *const *const D3D12_VERSIONED_ROOT_SIGNATURE_DESC,
    ) {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), result__)
    }
}
impl ::std::convert::From<ID3D12VersionedRootSignatureDeserializer> for ::windows::IUnknown {
    fn from(value: ID3D12VersionedRootSignatureDeserializer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ID3D12VersionedRootSignatureDeserializer> for ::windows::IUnknown {
    fn from(value: &ID3D12VersionedRootSignatureDeserializer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for ID3D12VersionedRootSignatureDeserializer
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a ID3D12VersionedRootSignatureDeserializer
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct IHolographicCameraInterop(::windows::IUnknown);
impl ::std::clone::Clone for IHolographicCameraInterop {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for IHolographicCameraInterop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for IHolographicCameraInterop {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for IHolographicCameraInterop {}
unsafe impl ::windows::Interface for IHolographicCameraInterop {
    type Vtable = IHolographicCameraInterop_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        2093087173,
        27906,
        16890,
        [149, 0, 225, 128, 158, 180, 142, 236],
    );
}
#[repr(C)]
pub struct IHolographicCameraInterop_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid_count: *mut u32,
        iids: *mut *mut ::windows::Guid,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        class_name: *mut isize,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        trust_level: *mut super::winrt::TrustLevel,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_device: ::std::option::Option<ID3D12Device>,
        p_texture2d_desc: *mut D3D12_RESOURCE_DESC,
        pp_created_texture2d_resource: *mut ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_device: ::std::option::Option<ID3D12Device>,
        p_texture2d_desc: *mut D3D12_RESOURCE_DESC,
        p_protected_resource_session: ::std::option::Option<ID3D12ProtectedResourceSession>,
        pp_created_texture2d_resource: *mut ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_to_acquire: ::std::option::Option<ID3D12Resource>,
        p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_to_acquire: ::std::option::Option<ID3D12Resource>,
        p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
        duration: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_to_unacquire: ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl IHolographicCameraInterop {
    pub unsafe fn GetIids(
        &self,
        iid_count: *mut u32,
        iids: *mut *mut ::windows::Guid,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), iid_count, iids)
    }
    pub unsafe fn GetRuntimeClassName(&self, class_name: *mut isize) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), class_name)
    }
    pub unsafe fn GetTrustLevel(
        &self,
        trust_level: *mut super::winrt::TrustLevel,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), trust_level)
    }
    pub unsafe fn CreateDirect3D12BackBufferResource(
        &self,
        p_device: ::std::option::Option<ID3D12Device>,
        p_texture2d_desc: *mut D3D12_RESOURCE_DESC,
        pp_created_texture2d_resource: *mut ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(
            ::windows::Abi::abi(self),
            p_device,
            p_texture2d_desc,
            pp_created_texture2d_resource,
        )
    }
    pub unsafe fn CreateDirect3D12HardwareProtectedBackBufferResource(
        &self,
        p_device: ::std::option::Option<ID3D12Device>,
        p_texture2d_desc: *mut D3D12_RESOURCE_DESC,
        p_protected_resource_session: ::std::option::Option<ID3D12ProtectedResourceSession>,
        pp_created_texture2d_resource: *mut ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(
            ::windows::Abi::abi(self),
            p_device,
            p_texture2d_desc,
            p_protected_resource_session,
            pp_created_texture2d_resource,
        )
    }
    pub unsafe fn AcquireDirect3D12BufferResource(
        &self,
        p_resource_to_acquire: ::std::option::Option<ID3D12Resource>,
        p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_resource_to_acquire,
            p_command_queue,
        )
    }
    pub unsafe fn AcquireDirect3D12BufferResourceWithTimeout(
        &self,
        p_resource_to_acquire: ::std::option::Option<ID3D12Resource>,
        p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
        duration: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            p_resource_to_acquire,
            p_command_queue,
            duration,
        )
    }
    pub unsafe fn UnacquireDirect3D12BufferResource(
        &self,
        p_resource_to_unacquire: ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), p_resource_to_unacquire)
    }
}
impl ::std::convert::From<IHolographicCameraInterop> for ::windows::IUnknown {
    fn from(value: IHolographicCameraInterop) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHolographicCameraInterop> for ::windows::IUnknown {
    fn from(value: &IHolographicCameraInterop) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for IHolographicCameraInterop
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a IHolographicCameraInterop
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IHolographicCameraInterop> for super::winrt::IInspectable {
    fn from(value: IHolographicCameraInterop) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHolographicCameraInterop> for super::winrt::IInspectable {
    fn from(value: &IHolographicCameraInterop) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, super::winrt::IInspectable>>
    for IHolographicCameraInterop
{
    fn into(self) -> ::windows::Param<'a, super::winrt::IInspectable> {
        ::windows::Param::Owned(::std::convert::Into::<super::winrt::IInspectable>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, super::winrt::IInspectable>>
    for &'a IHolographicCameraInterop
{
    fn into(self) -> ::windows::Param<'a, super::winrt::IInspectable> {
        ::windows::Param::Owned(::std::convert::Into::<super::winrt::IInspectable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct IHolographicCameraRenderingParametersInterop(::windows::IUnknown);
impl ::std::clone::Clone for IHolographicCameraRenderingParametersInterop {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for IHolographicCameraRenderingParametersInterop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for IHolographicCameraRenderingParametersInterop {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for IHolographicCameraRenderingParametersInterop {}
unsafe impl ::windows::Interface for IHolographicCameraRenderingParametersInterop {
    type Vtable = IHolographicCameraRenderingParametersInterop_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        4149962966,
        53757,
        18183,
        [170, 253, 250, 111, 76, 14, 59, 244],
    );
}
#[repr(C)]
pub struct IHolographicCameraRenderingParametersInterop_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid_count: *mut u32,
        iids: *mut *mut ::windows::Guid,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        class_name: *mut isize,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        trust_level: *mut super::winrt::TrustLevel,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_color_resource_to_commit: ::std::option::Option<ID3D12Resource>,
        p_color_resource_fence: ::std::option::Option<ID3D12Fence>,
        color_resource_fence_signal_value: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_color_resource_to_commit: ::std::option::Option<ID3D12Resource>,
        p_color_resource_fence: ::std::option::Option<ID3D12Fence>,
        color_resource_fence_signal_value: u64,
        p_depth_resource_to_commit: ::std::option::Option<ID3D12Resource>,
        p_depth_resource_fence: ::std::option::Option<ID3D12Fence>,
        depth_resource_fence_signal_value: u64,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl IHolographicCameraRenderingParametersInterop {
    pub unsafe fn GetIids(
        &self,
        iid_count: *mut u32,
        iids: *mut *mut ::windows::Guid,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), iid_count, iids)
    }
    pub unsafe fn GetRuntimeClassName(&self, class_name: *mut isize) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), class_name)
    }
    pub unsafe fn GetTrustLevel(
        &self,
        trust_level: *mut super::winrt::TrustLevel,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), trust_level)
    }
    pub unsafe fn CommitDirect3D12Resource(
        &self,
        p_color_resource_to_commit: ::std::option::Option<ID3D12Resource>,
        p_color_resource_fence: ::std::option::Option<ID3D12Fence>,
        color_resource_fence_signal_value: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(
            ::windows::Abi::abi(self),
            p_color_resource_to_commit,
            p_color_resource_fence,
            color_resource_fence_signal_value,
        )
    }
    pub unsafe fn CommitDirect3D12ResourceWithDepthData(
        &self,
        p_color_resource_to_commit: ::std::option::Option<ID3D12Resource>,
        p_color_resource_fence: ::std::option::Option<ID3D12Fence>,
        color_resource_fence_signal_value: u64,
        p_depth_resource_to_commit: ::std::option::Option<ID3D12Resource>,
        p_depth_resource_fence: ::std::option::Option<ID3D12Fence>,
        depth_resource_fence_signal_value: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(
            ::windows::Abi::abi(self),
            p_color_resource_to_commit,
            p_color_resource_fence,
            color_resource_fence_signal_value,
            p_depth_resource_to_commit,
            p_depth_resource_fence,
            depth_resource_fence_signal_value,
        )
    }
}
impl ::std::convert::From<IHolographicCameraRenderingParametersInterop> for ::windows::IUnknown {
    fn from(value: IHolographicCameraRenderingParametersInterop) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHolographicCameraRenderingParametersInterop> for ::windows::IUnknown {
    fn from(value: &IHolographicCameraRenderingParametersInterop) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for IHolographicCameraRenderingParametersInterop
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a IHolographicCameraRenderingParametersInterop
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IHolographicCameraRenderingParametersInterop>
    for super::winrt::IInspectable
{
    fn from(value: IHolographicCameraRenderingParametersInterop) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHolographicCameraRenderingParametersInterop>
    for super::winrt::IInspectable
{
    fn from(value: &IHolographicCameraRenderingParametersInterop) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, super::winrt::IInspectable>>
    for IHolographicCameraRenderingParametersInterop
{
    fn into(self) -> ::windows::Param<'a, super::winrt::IInspectable> {
        ::windows::Param::Owned(::std::convert::Into::<super::winrt::IInspectable>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, super::winrt::IInspectable>>
    for &'a IHolographicCameraRenderingParametersInterop
{
    fn into(self) -> ::windows::Param<'a, super::winrt::IInspectable> {
        ::windows::Param::Owned(::std::convert::Into::<super::winrt::IInspectable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct IHolographicQuadLayerInterop(::windows::IUnknown);
impl ::std::clone::Clone for IHolographicQuadLayerInterop {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for IHolographicQuadLayerInterop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for IHolographicQuadLayerInterop {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for IHolographicQuadLayerInterop {}
unsafe impl ::windows::Interface for IHolographicQuadLayerInterop {
    type Vtable = IHolographicQuadLayerInterop_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3483797744,
        25502,
        19015,
        [131, 215, 107, 127, 94, 191, 127, 237],
    );
}
#[repr(C)]
pub struct IHolographicQuadLayerInterop_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid_count: *mut u32,
        iids: *mut *mut ::windows::Guid,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        class_name: *mut isize,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        trust_level: *mut super::winrt::TrustLevel,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_device: ::std::option::Option<ID3D12Device>,
        p_texture2d_desc: *mut D3D12_RESOURCE_DESC,
        pp_texture2d_resource: *mut ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_device: ::std::option::Option<ID3D12Device>,
        p_texture2d_desc: *mut D3D12_RESOURCE_DESC,
        p_protected_resource_session: ::std::option::Option<ID3D12ProtectedResourceSession>,
        pp_created_texture2d_resource: *mut ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_to_acquire: ::std::option::Option<ID3D12Resource>,
        p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_to_acquire: ::std::option::Option<ID3D12Resource>,
        p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
        duration: u64,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_resource_to_unacquire: ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl IHolographicQuadLayerInterop {
    pub unsafe fn GetIids(
        &self,
        iid_count: *mut u32,
        iids: *mut *mut ::windows::Guid,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), iid_count, iids)
    }
    pub unsafe fn GetRuntimeClassName(&self, class_name: *mut isize) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), class_name)
    }
    pub unsafe fn GetTrustLevel(
        &self,
        trust_level: *mut super::winrt::TrustLevel,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), trust_level)
    }
    pub unsafe fn CreateDirect3D12ContentBufferResource(
        &self,
        p_device: ::std::option::Option<ID3D12Device>,
        p_texture2d_desc: *mut D3D12_RESOURCE_DESC,
        pp_texture2d_resource: *mut ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(
            ::windows::Abi::abi(self),
            p_device,
            p_texture2d_desc,
            pp_texture2d_resource,
        )
    }
    pub unsafe fn CreateDirect3D12HardwareProtectedContentBufferResource(
        &self,
        p_device: ::std::option::Option<ID3D12Device>,
        p_texture2d_desc: *mut D3D12_RESOURCE_DESC,
        p_protected_resource_session: ::std::option::Option<ID3D12ProtectedResourceSession>,
        pp_created_texture2d_resource: *mut ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).7)(
            ::windows::Abi::abi(self),
            p_device,
            p_texture2d_desc,
            p_protected_resource_session,
            pp_created_texture2d_resource,
        )
    }
    pub unsafe fn AcquireDirect3D12BufferResource(
        &self,
        p_resource_to_acquire: ::std::option::Option<ID3D12Resource>,
        p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).8)(
            ::windows::Abi::abi(self),
            p_resource_to_acquire,
            p_command_queue,
        )
    }
    pub unsafe fn AcquireDirect3D12BufferResourceWithTimeout(
        &self,
        p_resource_to_acquire: ::std::option::Option<ID3D12Resource>,
        p_command_queue: ::std::option::Option<ID3D12CommandQueue>,
        duration: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).9)(
            ::windows::Abi::abi(self),
            p_resource_to_acquire,
            p_command_queue,
            duration,
        )
    }
    pub unsafe fn UnacquireDirect3D12BufferResource(
        &self,
        p_resource_to_unacquire: ::std::option::Option<ID3D12Resource>,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).10)(::windows::Abi::abi(self), p_resource_to_unacquire)
    }
}
impl ::std::convert::From<IHolographicQuadLayerInterop> for ::windows::IUnknown {
    fn from(value: IHolographicQuadLayerInterop) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHolographicQuadLayerInterop> for ::windows::IUnknown {
    fn from(value: &IHolographicQuadLayerInterop) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for IHolographicQuadLayerInterop
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a IHolographicQuadLayerInterop
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IHolographicQuadLayerInterop> for super::winrt::IInspectable {
    fn from(value: IHolographicQuadLayerInterop) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHolographicQuadLayerInterop> for super::winrt::IInspectable {
    fn from(value: &IHolographicQuadLayerInterop) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, super::winrt::IInspectable>>
    for IHolographicQuadLayerInterop
{
    fn into(self) -> ::windows::Param<'a, super::winrt::IInspectable> {
        ::windows::Param::Owned(::std::convert::Into::<super::winrt::IInspectable>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, super::winrt::IInspectable>>
    for &'a IHolographicQuadLayerInterop
{
    fn into(self) -> ::windows::Param<'a, super::winrt::IInspectable> {
        ::windows::Param::Owned(::std::convert::Into::<super::winrt::IInspectable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(transparent)]
#[allow(non_camel_case_types)]
pub struct IHolographicQuadLayerUpdateParametersInterop(::windows::IUnknown);
impl ::std::clone::Clone for IHolographicQuadLayerUpdateParametersInterop {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::std::fmt::Debug for IHolographicQuadLayerUpdateParametersInterop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self.0)
    }
}
impl ::std::cmp::PartialEq for IHolographicQuadLayerUpdateParametersInterop {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::std::cmp::Eq for IHolographicQuadLayerUpdateParametersInterop {}
unsafe impl ::windows::Interface for IHolographicQuadLayerUpdateParametersInterop {
    type Vtable = IHolographicQuadLayerUpdateParametersInterop_abi;
    const IID: ::windows::Guid = ::windows::Guid::from_values(
        3858057677,
        51465,
        17487,
        [136, 9, 124, 193, 138, 156, 137, 32],
    );
}
#[repr(C)]
pub struct IHolographicQuadLayerUpdateParametersInterop_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid: &::windows::Guid,
        interface: *mut ::windows::RawPtr,
    ) -> ::windows::ErrorCode,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        iid_count: *mut u32,
        iids: *mut *mut ::windows::Guid,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        class_name: *mut isize,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        trust_level: *mut super::winrt::TrustLevel,
    ) -> ::windows::ErrorCode,
    pub  unsafe extern "system" fn(
        this: ::windows::RawPtr,
        p_color_resource_to_commit: ::std::option::Option<ID3D12Resource>,
        p_color_resource_fence: ::std::option::Option<ID3D12Fence>,
        color_resource_fence_signal_value: u64,
    ) -> ::windows::ErrorCode,
);
#[allow(non_snake_case)]
impl IHolographicQuadLayerUpdateParametersInterop {
    pub unsafe fn GetIids(
        &self,
        iid_count: *mut u32,
        iids: *mut *mut ::windows::Guid,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).3)(::windows::Abi::abi(self), iid_count, iids)
    }
    pub unsafe fn GetRuntimeClassName(&self, class_name: *mut isize) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).4)(::windows::Abi::abi(self), class_name)
    }
    pub unsafe fn GetTrustLevel(
        &self,
        trust_level: *mut super::winrt::TrustLevel,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).5)(::windows::Abi::abi(self), trust_level)
    }
    pub unsafe fn CommitDirect3D12Resource(
        &self,
        p_color_resource_to_commit: ::std::option::Option<ID3D12Resource>,
        p_color_resource_fence: ::std::option::Option<ID3D12Fence>,
        color_resource_fence_signal_value: u64,
    ) -> ::windows::ErrorCode {
        (::windows::Interface::vtable(self).6)(
            ::windows::Abi::abi(self),
            p_color_resource_to_commit,
            p_color_resource_fence,
            color_resource_fence_signal_value,
        )
    }
}
impl ::std::convert::From<IHolographicQuadLayerUpdateParametersInterop> for ::windows::IUnknown {
    fn from(value: IHolographicQuadLayerUpdateParametersInterop) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHolographicQuadLayerUpdateParametersInterop> for ::windows::IUnknown {
    fn from(value: &IHolographicQuadLayerUpdateParametersInterop) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for IHolographicQuadLayerUpdateParametersInterop
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(self))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::IUnknown>>
    for &'a IHolographicQuadLayerUpdateParametersInterop
{
    fn into(self) -> ::windows::Param<'a, ::windows::IUnknown> {
        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IHolographicQuadLayerUpdateParametersInterop>
    for super::winrt::IInspectable
{
    fn from(value: IHolographicQuadLayerUpdateParametersInterop) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHolographicQuadLayerUpdateParametersInterop>
    for super::winrt::IInspectable
{
    fn from(value: &IHolographicQuadLayerUpdateParametersInterop) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, super::winrt::IInspectable>>
    for IHolographicQuadLayerUpdateParametersInterop
{
    fn into(self) -> ::windows::Param<'a, super::winrt::IInspectable> {
        ::windows::Param::Owned(::std::convert::Into::<super::winrt::IInspectable>::into(
            self,
        ))
    }
}
impl<'a> ::std::convert::Into<::windows::Param<'a, super::winrt::IInspectable>>
    for &'a IHolographicQuadLayerUpdateParametersInterop
{
    fn into(self) -> ::windows::Param<'a, super::winrt::IInspectable> {
        ::windows::Param::Owned(::std::convert::Into::<super::winrt::IInspectable>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[allow(non_camel_case_types)]
pub type PFN_D3D11ON12_CREATE_DEVICE = extern "system" fn(
    param0: ::std::option::Option<::windows::IUnknown>,
    param1: u32,
    param2: *const super::direct3d11::D3D_FEATURE_LEVEL,
    feature_levels: u32,
    param4: *mut ::std::option::Option<::windows::IUnknown>,
    num_queues: u32,
    param6: u32,
    param7: *mut ::std::option::Option<super::direct3d11::ID3D11Device>,
    param8: *mut ::std::option::Option<super::direct3d11::ID3D11DeviceContext>,
    param9: *mut super::direct3d11::D3D_FEATURE_LEVEL,
) -> ::windows::ErrorCode;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_CREATE_DEVICE = extern "system" fn(
    param0: ::std::option::Option<::windows::IUnknown>,
    param1: super::direct3d11::D3D_FEATURE_LEVEL,
    param2: *const ::windows::Guid,
    param3: *mut *mut ::std::ffi::c_void,
) -> ::windows::ErrorCode;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER = extern "system" fn(
    p_src_data: *mut ::std::ffi::c_void,
    src_data_size_in_bytes: usize,
    p_root_signature_deserializer_interface: *const ::windows::Guid,
    pp_root_signature_deserializer: *mut *mut ::std::ffi::c_void,
) -> ::windows::ErrorCode;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER =
    extern "system" fn(
        p_src_data: *mut ::std::ffi::c_void,
        src_data_size_in_bytes: usize,
        p_root_signature_deserializer_interface: *const ::windows::Guid,
        pp_root_signature_deserializer: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::ErrorCode;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_GET_DEBUG_INTERFACE = extern "system" fn(
    param0: *const ::windows::Guid,
    param1: *mut *mut ::std::ffi::c_void,
) -> ::windows::ErrorCode;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_SERIALIZE_ROOT_SIGNATURE = extern "system" fn(
    p_root_signature: *const D3D12_ROOT_SIGNATURE_DESC,
    version: D3D_ROOT_SIGNATURE_VERSION,
    pp_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
    pp_error_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
) -> ::windows::ErrorCode;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE = extern "system" fn(
    p_root_signature: *const D3D12_VERSIONED_ROOT_SIGNATURE_DESC,
    pp_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
    pp_error_blob: *mut ::std::option::Option<super::direct3d11::ID3DBlob>,
) -> ::windows::ErrorCode;
